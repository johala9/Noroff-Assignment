
STemWin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000251f0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005945c  080253b0  080253b0  000353b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0807e80c  0807e80c  0008e80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0807e814  0807e814  0008e814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0807e818  0807e818  0008e818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000057c  20000000  0807e81c  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00122b68  2**0
                  CONTENTS
  8 .bss          00035940  2000057c  2000057c  0009057c  2**2
                  ALLOC
  9 ._user_heap_stack 00002004  20035ebc  20035ebc  0009057c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00122b68  2**0
                  CONTENTS, READONLY
 11 .ExtQSPIFlashSection 00082b68  90000000  90000000  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .comment      0000012f  00000000  00000000  00122b98  2**0
                  CONTENTS, READONLY
 13 .debug_info   000329ed  00000000  00000000  00122cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007864  00000000  00000000  001556b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002880  00000000  00000000  0015cf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001f08  00000000  00000000  0015f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00043135  00000000  00000000  001616a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000438b9  00000000  00000000  001a47d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00152929  00000000  00000000  001e808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a974  00000000  00000000  0033a9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0034532c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000057c 	.word	0x2000057c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08025398 	.word	0x08025398

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000580 	.word	0x20000580
 80001fc:	08025398 	.word	0x08025398

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_cbBk>:
/**
  * @brief  Callback routine of desktop window.
  * @param  pMsg: pointer to data structure of type WM_MESSAGE
  * @retval None
  */
static void _cbBk(WM_MESSAGE * pMsg) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]

  uint32_t NCode, Id;
  static uint8_t sel;

  switch (pMsg->MsgId)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b0f      	cmp	r3, #15
 800051a:	d002      	beq.n	8000522 <_cbBk+0x16>
 800051c:	2b26      	cmp	r3, #38	; 0x26
 800051e:	d007      	beq.n	8000530 <_cbBk+0x24>
 8000520:	e07b      	b.n	800061a <_cbBk+0x10e>
  {
  case WM_PAINT:
    GUI_SetBkColor(GUI_WHITE);
 8000522:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000526:	f011 f93d 	bl	80117a4 <GUI_SetBkColor>
    GUI_Clear();
 800052a:	f011 fa8b 	bl	8011a44 <GUI_Clear>
    break;
 800052e:	e078      	b.n	8000622 <_cbBk+0x116>


  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	4618      	mov	r0, r3
 8000536:	f01a fea3 	bl	801b280 <WM_GetId>
 800053a:	4603      	mov	r3, r0
 800053c:	60fb      	str	r3, [r7, #12]
    NCode = pMsg->Data.v;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	2b02      	cmp	r3, #2
 8000548:	d003      	beq.n	8000552 <_cbBk+0x46>
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	2b07      	cmp	r3, #7
 800054e:	d053      	beq.n	80005f8 <_cbBk+0xec>
        module_prop[sel].in_use = 0;
        module_prop[sel].win_state = 0;
        break;

    default:
      break;
 8000550:	e062      	b.n	8000618 <_cbBk+0x10c>
      if (Id == ID_ICONVIEW_MENU)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000558:	d15d      	bne.n	8000616 <_cbBk+0x10a>
        sel = ST_AnimatedIconView_GetSel(pMsg->hWinSrc);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	4618      	mov	r0, r3
 8000560:	f024 fb46 	bl	8024bf0 <ST_AnimatedIconView_GetSel>
 8000564:	4603      	mov	r3, r0
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b30      	ldr	r3, [pc, #192]	; (800062c <_cbBk+0x120>)
 800056a:	701a      	strb	r2, [r3, #0]
        if(sel < k_ModuleGetNumber())
 800056c:	f000 f9d0 	bl	8000910 <k_ModuleGetNumber>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	4b2d      	ldr	r3, [pc, #180]	; (800062c <_cbBk+0x120>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	429a      	cmp	r2, r3
 800057a:	d937      	bls.n	80005ec <_cbBk+0xe0>
          ST_AnimatedIconView_SetSel(pMsg->hWinSrc, -1);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	f04f 31ff 	mov.w	r1, #4294967295
 8000584:	4618      	mov	r0, r3
 8000586:	f024 fb47 	bl	8024c18 <ST_AnimatedIconView_SetSel>
          if(module_prop[sel].in_use == 0)
 800058a:	4b28      	ldr	r3, [pc, #160]	; (800062c <_cbBk+0x120>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4a28      	ldr	r2, [pc, #160]	; (8000630 <_cbBk+0x124>)
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	4413      	add	r3, r2
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d113      	bne.n	80005c2 <_cbBk+0xb6>
            module_prop[sel].module->startup(pMsg->hWin, 0, 0);
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <_cbBk+0x120>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	4b23      	ldr	r3, [pc, #140]	; (8000630 <_cbBk+0x124>)
 80005a2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80005a6:	691b      	ldr	r3, [r3, #16]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	6850      	ldr	r0, [r2, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	4798      	blx	r3
            module_prop[sel].in_use = 1;
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <_cbBk+0x120>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4a1e      	ldr	r2, [pc, #120]	; (8000630 <_cbBk+0x124>)
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	4413      	add	r3, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	711a      	strb	r2, [r3, #4]
      break;
 80005c0:	e029      	b.n	8000616 <_cbBk+0x10a>
          else if(module_prop[sel].win_state == 1)
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <_cbBk+0x120>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <_cbBk+0x124>)
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	4413      	add	r3, r2
 80005cc:	795b      	ldrb	r3, [r3, #5]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d121      	bne.n	8000616 <_cbBk+0x10a>
            module_prop[sel].module->startup(pMsg->hWin, 0, 0);
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <_cbBk+0x120>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <_cbBk+0x124>)
 80005da:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	6850      	ldr	r0, [r2, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	4798      	blx	r3
      break;
 80005ea:	e014      	b.n	8000616 <_cbBk+0x10a>
          WM_InvalidateWindow (pMsg->hWinSrc);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f019 fcad 	bl	8019f50 <WM_InvalidateWindow>
      break;
 80005f6:	e00e      	b.n	8000616 <_cbBk+0x10a>
        module_prop[sel].in_use = 0;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <_cbBk+0x120>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4a0c      	ldr	r2, [pc, #48]	; (8000630 <_cbBk+0x124>)
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	4413      	add	r3, r2
 8000602:	2200      	movs	r2, #0
 8000604:	711a      	strb	r2, [r3, #4]
        module_prop[sel].win_state = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <_cbBk+0x120>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <_cbBk+0x124>)
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	4413      	add	r3, r2
 8000610:	2200      	movs	r2, #0
 8000612:	715a      	strb	r2, [r3, #5]
        break;
 8000614:	e000      	b.n	8000618 <_cbBk+0x10c>
      break;
 8000616:	bf00      	nop
    }
    break;
 8000618:	e003      	b.n	8000622 <_cbBk+0x116>
  default:
    WM_DefaultProc(pMsg);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f01a fa7e 	bl	801ab1c <WM_DefaultProc>
  }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000099c 	.word	0x2000099c
 8000630:	200009a0 	.word	0x200009a0

08000634 <GUI_SetProfile>:
  * @brief  set the GUI profile
  * @param  None.
  * @retval None.
  */
void GUI_SetProfile(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  BUTTON_SetDefaultSkin(BUTTON_SKIN_FLEX);
 8000638:	4840      	ldr	r0, [pc, #256]	; (800073c <GUI_SetProfile+0x108>)
 800063a:	f01c fbf9 	bl	801ce30 <BUTTON_SetDefaultSkin>
  DROPDOWN_SetDefaultSkin(DROPDOWN_SKIN_FLEX);
 800063e:	4840      	ldr	r0, [pc, #256]	; (8000740 <GUI_SetProfile+0x10c>)
 8000640:	f01c fe1a 	bl	801d278 <DROPDOWN_SetDefaultSkin>
  
  FRAMEWIN_SetDefaultTextColor(0, GUI_WHITE);
 8000644:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000648:	2000      	movs	r0, #0
 800064a:	f01d f817 	bl	801d67c <FRAMEWIN_SetDefaultTextColor>
  FRAMEWIN_SetDefaultTextColor(1, GUI_WHITE);      
 800064e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000652:	2001      	movs	r0, #1
 8000654:	f01d f812 	bl	801d67c <FRAMEWIN_SetDefaultTextColor>
  
  FRAMEWIN_SetDefaultBarColor(0, GUI_STCOLOR_LIGHTBLUE);
 8000658:	493a      	ldr	r1, [pc, #232]	; (8000744 <GUI_SetProfile+0x110>)
 800065a:	2000      	movs	r0, #0
 800065c:	f01c fff2 	bl	801d644 <FRAMEWIN_SetDefaultBarColor>
  FRAMEWIN_SetDefaultBarColor(1, GUI_STCOLOR_LIGHTBLUE);
 8000660:	4938      	ldr	r1, [pc, #224]	; (8000744 <GUI_SetProfile+0x110>)
 8000662:	2001      	movs	r0, #1
 8000664:	f01c ffee 	bl	801d644 <FRAMEWIN_SetDefaultBarColor>
  
  FRAMEWIN_SetDefaultFont(&GUI_FontLubalGraph32B);
 8000668:	4837      	ldr	r0, [pc, #220]	; (8000748 <GUI_SetProfile+0x114>)
 800066a:	f01c ffe5 	bl	801d638 <FRAMEWIN_SetDefaultFont>
  
  FRAMEWIN_SetDefaultClientColor(GUI_WHITE);  
 800066e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000672:	f01c fff1 	bl	801d658 <FRAMEWIN_SetDefaultClientColor>
  FRAMEWIN_SetDefaultTitleHeight(35);
 8000676:	2023      	movs	r0, #35	; 0x23
 8000678:	f01c fffa 	bl	801d670 <FRAMEWIN_SetDefaultTitleHeight>
  
  
  WINDOW_SetDefaultBkColor(GUI_WHITE);
 800067c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000680:	f01e f868 	bl	801e754 <WINDOW_SetDefaultBkColor>
  
  LISTVIEW_SetDefaultGridColor(GUI_WHITE);
 8000684:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000688:	f01d fbac 	bl	801dde4 <LISTVIEW_SetDefaultGridColor>
  LISTVIEW_SetDefaultBkColor(LISTVIEW_CI_SEL, GUI_STCOLOR_LIGHTBLUE);
 800068c:	492d      	ldr	r1, [pc, #180]	; (8000744 <GUI_SetProfile+0x110>)
 800068e:	2001      	movs	r0, #1
 8000690:	f01d fb9c 	bl	801ddcc <LISTVIEW_SetDefaultBkColor>
  DROPDOWN_SetDefaultColor(DROPDOWN_CI_SEL, GUI_STCOLOR_LIGHTBLUE);
 8000694:	492b      	ldr	r1, [pc, #172]	; (8000744 <GUI_SetProfile+0x110>)
 8000696:	2001      	movs	r0, #1
 8000698:	f01c fd90 	bl	801d1bc <DROPDOWN_SetDefaultColor>
  LISTVIEW_SetDefaultBkColor(LISTVIEW_CI_SELFOCUS, GUI_STCOLOR_DARKBLUE);
 800069c:	492b      	ldr	r1, [pc, #172]	; (800074c <GUI_SetProfile+0x118>)
 800069e:	2002      	movs	r0, #2
 80006a0:	f01d fb94 	bl	801ddcc <LISTVIEW_SetDefaultBkColor>
  LISTVIEW_SetDefaultTextColor(LISTVIEW_CI_UNSEL, GUI_STCOLOR_LIGHTBLUE);
 80006a4:	4927      	ldr	r1, [pc, #156]	; (8000744 <GUI_SetProfile+0x110>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f01d fb82 	bl	801ddb0 <LISTVIEW_SetDefaultTextColor>
  DROPDOWN_SetDefaultColor(DROPDOWN_CI_SELFOCUS, GUI_STCOLOR_LIGHTBLUE);
 80006ac:	4925      	ldr	r1, [pc, #148]	; (8000744 <GUI_SetProfile+0x110>)
 80006ae:	2002      	movs	r0, #2
 80006b0:	f01c fd84 	bl	801d1bc <DROPDOWN_SetDefaultColor>
  SCROLLBAR_SetDefaultWidth(24);
 80006b4:	2018      	movs	r0, #24
 80006b6:	f01d fba3 	bl	801de00 <SCROLLBAR_SetDefaultWidth>
  SCROLLBAR_SetDefaultSTSkin();
 80006ba:	f023 fb11 	bl	8023ce0 <SCROLLBAR_SetDefaultSTSkin>
  
  HEADER_SetDefaultBkColor(GUI_STCOLOR_LIGHTBLUE);
 80006be:	4821      	ldr	r0, [pc, #132]	; (8000744 <GUI_SetProfile+0x110>)
 80006c0:	f01d fb0a 	bl	801dcd8 <HEADER_SetDefaultBkColor>
  HEADER_SetDefaultTextColor(GUI_WHITE);
 80006c4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80006c8:	f01d fb0e 	bl	801dce8 <HEADER_SetDefaultTextColor>
  HEADER_SetDefaultFont(&GUI_FontLubalGraph32B);
 80006cc:	481e      	ldr	r0, [pc, #120]	; (8000748 <GUI_SetProfile+0x114>)
 80006ce:	f01d fb13 	bl	801dcf8 <HEADER_SetDefaultFont>
  DROPDOWN_SetDefaultFont(&GUI_FontLubalGraph32B);
 80006d2:	481d      	ldr	r0, [pc, #116]	; (8000748 <GUI_SetProfile+0x114>)
 80006d4:	f01c fd6c 	bl	801d1b0 <DROPDOWN_SetDefaultFont>
  LISTVIEW_SetDefaultFont(&GUI_FontLubalGraph32B);
 80006d8:	481b      	ldr	r0, [pc, #108]	; (8000748 <GUI_SetProfile+0x114>)
 80006da:	f01d fb61 	bl	801dda0 <LISTVIEW_SetDefaultFont>
  HEADER_SetDefaultSTSkin();
 80006de:	f023 f9e1 	bl	8023aa4 <HEADER_SetDefaultSTSkin>
  SCROLLBAR_SetDefaultColor(GUI_STCOLOR_LIGHTBLUE, SCROLLBAR_CI_THUMB);  
 80006e2:	2100      	movs	r1, #0
 80006e4:	4817      	ldr	r0, [pc, #92]	; (8000744 <GUI_SetProfile+0x110>)
 80006e6:	f01d fb93 	bl	801de10 <SCROLLBAR_SetDefaultColor>
  SCROLLBAR_SetDefaultColor(GUI_STCOLOR_LIGHTBLUE, SCROLLBAR_CI_SHAFT);  
 80006ea:	2101      	movs	r1, #1
 80006ec:	4815      	ldr	r0, [pc, #84]	; (8000744 <GUI_SetProfile+0x110>)
 80006ee:	f01d fb8f 	bl	801de10 <SCROLLBAR_SetDefaultColor>
  SCROLLBAR_SetDefaultColor(GUI_STCOLOR_LIGHTBLUE, SCROLLBAR_CI_ARROW);    
 80006f2:	2102      	movs	r1, #2
 80006f4:	4813      	ldr	r0, [pc, #76]	; (8000744 <GUI_SetProfile+0x110>)
 80006f6:	f01d fb8b 	bl	801de10 <SCROLLBAR_SetDefaultColor>
  ST_CHOOSEFILE_SetDelim('/');
 80006fa:	202f      	movs	r0, #47	; 0x2f
 80006fc:	f022 fff4 	bl	80236e8 <ST_CHOOSEFILE_SetDelim>
  ST_CHOOSEFILE_SetButtonSize(60, 40);
 8000700:	2128      	movs	r1, #40	; 0x28
 8000702:	203c      	movs	r0, #60	; 0x3c
 8000704:	f022 ffe2 	bl	80236cc <ST_CHOOSEFILE_SetButtonSize>
  
  ST_CHOOSEFILE_SetButtonBitmaps (2, 
 8000708:	2200      	movs	r2, #0
 800070a:	4911      	ldr	r1, [pc, #68]	; (8000750 <GUI_SetProfile+0x11c>)
 800070c:	2002      	movs	r0, #2
 800070e:	f022 ffe3 	bl	80236d8 <ST_CHOOSEFILE_SetButtonBitmaps>
                                  &bmup, 
                                  NULL);
                                 
  ST_CHOOSEFILE_SetButtonBitmaps (1, 
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <GUI_SetProfile+0x120>)
 8000714:	4910      	ldr	r1, [pc, #64]	; (8000758 <GUI_SetProfile+0x124>)
 8000716:	2001      	movs	r0, #1
 8000718:	f022 ffde 	bl	80236d8 <ST_CHOOSEFILE_SetButtonBitmaps>
                                  &bmok, 
                                  &bmOK_disabled);
                                 
  ST_CHOOSEFILE_SetButtonBitmaps (0, 
 800071c:	2200      	movs	r2, #0
 800071e:	490f      	ldr	r1, [pc, #60]	; (800075c <GUI_SetProfile+0x128>)
 8000720:	2000      	movs	r0, #0
 8000722:	f022 ffd9 	bl	80236d8 <ST_CHOOSEFILE_SetButtonBitmaps>
                                   NULL);
  
  
  
  
  GUI_SetDefaultFont(&GUI_FontLubalGraph32B);
 8000726:	4808      	ldr	r0, [pc, #32]	; (8000748 <GUI_SetProfile+0x114>)
 8000728:	f011 f950 	bl	80119cc <GUI_SetDefaultFont>
  
  TEXT_SetDefaultTextColor(GUI_STCOLOR_LIGHTBLUE);
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <GUI_SetProfile+0x110>)
 800072e:	f01d fc7d 	bl	801e02c <TEXT_SetDefaultTextColor>
  TEXT_SetDefaultFont(&GUI_FontLubalGraph32B);
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <GUI_SetProfile+0x114>)
 8000734:	f01d fc74 	bl	801e020 <TEXT_SetDefaultFont>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	0801ce55 	.word	0x0801ce55
 8000740:	0801d29d 	.word	0x0801d29d
 8000744:	00dca939 	.word	0x00dca939
 8000748:	08028bcc 	.word	0x08028bcc
 800074c:	00522000 	.word	0x00522000
 8000750:	0807bfd4 	.word	0x0807bfd4
 8000754:	0807e498 	.word	0x0807e498
 8000758:	0807d340 	.word	0x0807d340
 800075c:	0807c9f8 	.word	0x0807c9f8

08000760 <GUI_Init_MainMenu>:
  * @brief  Initializes the menu.
  * @param  None.
  * @retval None.
  */
void GUI_Init_MainMenu(void)
{
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af08      	add	r7, sp, #32
  uint8_t i = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	71fb      	strb	r3, [r7, #7]
  
  WM_SetCallback(WM_GetDesktopWindowEx(0), _cbBk);
 800076a:	2000      	movs	r0, #0
 800076c:	f01a fcaa 	bl	801b0c4 <WM_GetDesktopWindowEx>
 8000770:	4603      	mov	r3, r0
 8000772:	4952      	ldr	r1, [pc, #328]	; (80008bc <GUI_Init_MainMenu+0x15c>)
 8000774:	4618      	mov	r0, r3
 8000776:	f01a ff13 	bl	801b5a0 <WM_SetCallback>
  
  
  hIcon = ST_AnimatedIconView_CreateEx(0, 
                                       0, 
                                       LCD_GetXSize() - 155, 
 800077a:	f014 fbcb 	bl	8014f14 <LCD_GetXSize>
 800077e:	4603      	mov	r3, r0
  hIcon = ST_AnimatedIconView_CreateEx(0, 
 8000780:	f1a3 049b 	sub.w	r4, r3, #155	; 0x9b
                                       LCD_GetYSize() - 50, 
 8000784:	f014 fbdc 	bl	8014f40 <LCD_GetYSize>
 8000788:	4603      	mov	r3, r0
  hIcon = ST_AnimatedIconView_CreateEx(0, 
 800078a:	f1a3 0532 	sub.w	r5, r3, #50	; 0x32
 800078e:	2000      	movs	r0, #0
 8000790:	f01a fc98 	bl	801b0c4 <WM_GetDesktopWindowEx>
 8000794:	4603      	mov	r3, r0
 8000796:	2205      	movs	r2, #5
 8000798:	9207      	str	r2, [sp, #28]
 800079a:	2214      	movs	r2, #20
 800079c:	9206      	str	r2, [sp, #24]
 800079e:	22b4      	movs	r2, #180	; 0xb4
 80007a0:	9205      	str	r2, [sp, #20]
 80007a2:	2296      	movs	r2, #150	; 0x96
 80007a4:	9204      	str	r2, [sp, #16]
 80007a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007aa:	9203      	str	r2, [sp, #12]
 80007ac:	2200      	movs	r2, #0
 80007ae:	9202      	str	r2, [sp, #8]
 80007b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80007b4:	9201      	str	r2, [sp, #4]
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	462b      	mov	r3, r5
 80007ba:	4622      	mov	r2, r4
 80007bc:	2100      	movs	r1, #0
 80007be:	2000      	movs	r0, #0
 80007c0:	f024 f8ce 	bl	8024960 <ST_AnimatedIconView_CreateEx>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a3e      	ldr	r2, [pc, #248]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 80007c8:	6013      	str	r3, [r2, #0]
                                       0,
                                       ID_ICONVIEW_MENU, 
                                       150, 
                                       180, 20, 5); 
  
  ST_AnimatedIconView_SetDualFont(hIcon, &GUI_FontLubalGraph32B, &GUI_FontLubalGraph32B);
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a3d      	ldr	r2, [pc, #244]	; (80008c4 <GUI_Init_MainMenu+0x164>)
 80007d0:	493c      	ldr	r1, [pc, #240]	; (80008c4 <GUI_Init_MainMenu+0x164>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	f024 f9aa 	bl	8024b2c <ST_AnimatedIconView_SetDualFont>
  
  ST_AnimatedIconView_SetSpace(hIcon, GUI_COORD_Y, 5);
 80007d8:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2205      	movs	r2, #5
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f024 f9e3 	bl	8024bac <ST_AnimatedIconView_SetSpace>
  ST_AnimatedIconView_SetSpace(hIcon, GUI_COORD_X, 5);
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2205      	movs	r2, #5
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f024 f9dc 	bl	8024bac <ST_AnimatedIconView_SetSpace>
  ST_AnimatedIconView_SetFrame(hIcon, GUI_COORD_Y, 30);
 80007f4:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	221e      	movs	r2, #30
 80007fa:	2101      	movs	r1, #1
 80007fc:	4618      	mov	r0, r3
 80007fe:	f024 f9b3 	bl	8024b68 <ST_AnimatedIconView_SetFrame>
  ST_AnimatedIconView_SetFrame(hIcon, GUI_COORD_X, 10);
 8000802:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	220a      	movs	r2, #10
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f024 f9ac 	bl	8024b68 <ST_AnimatedIconView_SetFrame>
  
  ST_AnimatedIconView_SetTextColor(hIcon, ICONVIEW_CI_UNSEL, GUI_STCOLOR_LIGHTBLUE);
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <GUI_Init_MainMenu+0x168>)
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f024 f943 	bl	8024aa4 <ST_AnimatedIconView_SetTextColor>
  ST_AnimatedIconView_SetBkColor(hIcon, ICONVIEW_CI_UNSEL, GUI_WHITE);
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f024 f921 	bl	8024a70 <ST_AnimatedIconView_SetBkColor>
  ST_AnimatedIconView_SetBkColor(hIcon, ICONVIEW_CI_SEL, GUI_WHITE);
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f024 f919 	bl	8024a70 <ST_AnimatedIconView_SetBkColor>
  ST_AnimatedIconView_SetSel(hIcon, -1);
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f04f 31ff 	mov.w	r1, #4294967295
 8000846:	4618      	mov	r0, r3
 8000848:	f024 f9e6 	bl	8024c18 <ST_AnimatedIconView_SetSel>
  ST_AnimatedIconView_SetDualTextColor(hIcon, ICONVIEW_CI_SEL, GUI_STCOLOR_LIGHTBLUE, GUI_STCOLOR_DARKBLUE);  
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <GUI_Init_MainMenu+0x16c>)
 8000852:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <GUI_Init_MainMenu+0x168>)
 8000854:	2101      	movs	r1, #1
 8000856:	f024 f943 	bl	8024ae0 <ST_AnimatedIconView_SetDualTextColor>
  
  for (i = 0; i < k_ModuleGetNumber(); i++)
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]
 800085e:	e015      	b.n	800088c <GUI_Init_MainMenu+0x12c>
  {
    ST_AnimatedIconView_AddIcon(hIcon, module_prop[i].module->open_icon, module_prop[i].module->close_icon, (char *)module_prop[i].module->name);
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <GUI_Init_MainMenu+0x160>)
 8000862:	6818      	ldr	r0, [r3, #0]
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <GUI_Init_MainMenu+0x170>)
 8000868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800086c:	6899      	ldr	r1, [r3, #8]
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <GUI_Init_MainMenu+0x170>)
 8000872:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	4c15      	ldr	r4, [pc, #84]	; (80008d0 <GUI_Init_MainMenu+0x170>)
 800087c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f024 f9fb 	bl	8024c7c <ST_AnimatedIconView_AddIcon>
  for (i = 0; i < k_ModuleGetNumber(); i++)
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	3301      	adds	r3, #1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	f000 f840 	bl	8000910 <k_ModuleGetNumber>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4293      	cmp	r3, r2
 8000898:	d3e2      	bcc.n	8000860 <GUI_Init_MainMenu+0x100>
  }
  
  hRefreshTimer = WM_CreateTimer(WM_GetDesktopWindowEx(0), 0, 900, 0);    
 800089a:	2000      	movs	r0, #0
 800089c:	f01a fc12 	bl	801b0c4 <WM_GetDesktopWindowEx>
 80008a0:	2300      	movs	r3, #0
 80008a2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80008a6:	2100      	movs	r1, #0
 80008a8:	f01b fb30 	bl	801bf0c <WM_CreateTimer>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <GUI_Init_MainMenu+0x174>)
 80008b0:	6013      	str	r3, [r2, #0]
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bdb0      	pop	{r4, r5, r7, pc}
 80008ba:	bf00      	nop
 80008bc:	0800050d 	.word	0x0800050d
 80008c0:	20000994 	.word	0x20000994
 80008c4:	08028bcc 	.word	0x08028bcc
 80008c8:	00dca939 	.word	0x00dca939
 80008cc:	00522000 	.word	0x00522000
 80008d0:	200009a0 	.word	0x200009a0
 80008d4:	20000998 	.word	0x20000998

080008d8 <Module_Init>:
  * @brief  Module Initialization.
  * @param  None.
  * @retval None.
  */
void Module_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  module_num = 0;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <Module_Init+0x28>)
 80008de:	2200      	movs	r2, #0
 80008e0:	801a      	strh	r2, [r3, #0]
  openlink_num = 0;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <Module_Init+0x2c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	801a      	strh	r2, [r3, #0]
  memset(module_prop, 0, sizeof(module_prop));
 80008e8:	2278      	movs	r2, #120	; 0x78
 80008ea:	2100      	movs	r1, #0
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <Module_Init+0x30>)
 80008ee:	f024 fd11 	bl	8025314 <memset>
  memset(open_link, 0, sizeof(module_prop));  
 80008f2:	2278      	movs	r2, #120	; 0x78
 80008f4:	2100      	movs	r1, #0
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <Module_Init+0x34>)
 80008f8:	f024 fd0c 	bl	8025314 <memset>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000a90 	.word	0x20000a90
 8000904:	20000a92 	.word	0x20000a92
 8000908:	200009a0 	.word	0x200009a0
 800090c:	20000a18 	.word	0x20000a18

08000910 <k_ModuleGetNumber>:
  * @brief  Get the module number.
  * @param  None.
  * @retval None.
  */
uint8_t k_ModuleGetNumber(void) 
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return module_num;
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <k_ModuleGetNumber+0x14>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	20000a90 	.word	0x20000a90

08000928 <Module_Enable>:
  * @brief  Add module.
  * @param  module: pointer to data structure of type K_ModuleItem_Typedef
  * @retval module add status
  */
uint8_t Module_Enable(K_ModuleItem_Typedef *module)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  module_prop[module_num].in_use = 0; // true
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <Module_Enable+0x4c>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	4a10      	ldr	r2, [pc, #64]	; (8000978 <Module_Enable+0x50>)
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	4413      	add	r3, r2
 800093a:	2200      	movs	r2, #0
 800093c:	711a      	strb	r2, [r3, #4]
  module_prop[module_num].win_state = 0; // true
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <Module_Enable+0x4c>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <Module_Enable+0x50>)
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	4413      	add	r3, r2
 8000948:	2200      	movs	r2, #0
 800094a:	715a      	strb	r2, [r3, #5]
  module_prop[module_num].module = module; // self
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <Module_Enable+0x4c>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	4a09      	ldr	r2, [pc, #36]	; (8000978 <Module_Enable+0x50>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  module_num++; // iterate module number
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <Module_Enable+0x4c>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <Module_Enable+0x4c>)
 8000964:	801a      	strh	r2, [r3, #0]
  return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	20000a90 	.word	0x20000a90
 8000978:	200009a0 	.word	0x200009a0

0800097c <Startup_Display_Seq>:
  * @brief  Startup Animation
  * @param  None
  * @retval None
  */
void Startup_Display_Seq(void)
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
  uint32_t XPos = 170, XOffset = 10;
 8000982:	23aa      	movs	r3, #170	; 0xaa
 8000984:	61fb      	str	r3, [r7, #28]
 8000986:	230a      	movs	r3, #10
 8000988:	617b      	str	r3, [r7, #20]
  const char ST_Slogan[] = "Arun's Smart Hub";
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <Startup_Display_Seq+0x84>)
 800098c:	463c      	mov	r4, r7
 800098e:	461d      	mov	r5, r3
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	7023      	strb	r3, [r4, #0]
  const char *pointerToSlogan = ST_Slogan;
 8000998:	463b      	mov	r3, r7
 800099a:	61bb      	str	r3, [r7, #24]

  GUI_SetBkColor(GUI_ORANGE);
 800099c:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 80009a0:	f010 ff00 	bl	80117a4 <GUI_SetBkColor>
  GUI_Clear();
 80009a4:	f011 f84e 	bl	8011a44 <GUI_Clear>
  GUI_SetFont(&GUI_FontAvantGarde32);
 80009a8:	4816      	ldr	r0, [pc, #88]	; (8000a04 <Startup_Display_Seq+0x88>)
 80009aa:	f010 ff69 	bl	8011880 <GUI_SetFont>
  GUI_SetColor(GUI_BLACK);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f010 ff04 	bl	80117bc <GUI_SetColor>
  do{
    GUI_DispCharAt(*pointerToSlogan, XPos , 100);
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	69fa      	ldr	r2, [r7, #28]
 80009bc:	b211      	sxth	r1, r2
 80009be:	2264      	movs	r2, #100	; 0x64
 80009c0:	4618      	mov	r0, r3
 80009c2:	f011 fb41 	bl	8012048 <GUI_DispCharAt>
    XPos += GUI_GetCharDistX(*pointerToSlogan++) + XOffset + 1;
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	61ba      	str	r2, [r7, #24]
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f010 fd0d 	bl	80113f0 <GUI_GetCharDistX>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	4413      	add	r3, r2
 80009de:	3301      	adds	r3, #1
 80009e0:	69fa      	ldr	r2, [r7, #28]
 80009e2:	4413      	add	r3, r2
 80009e4:	61fb      	str	r3, [r7, #28]
    GUI_Delay(100);
 80009e6:	2064      	movs	r0, #100	; 0x64
 80009e8:	f012 fa50 	bl	8012e8c <GUI_Delay>
  }
  while (*pointerToSlogan != 0);
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1df      	bne.n	80009b4 <Startup_Display_Seq+0x38>
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bdb0      	pop	{r4, r5, r7, pc}
 80009fe:	bf00      	nop
 8000a00:	080253b0 	.word	0x080253b0
 8000a04:	0805a074 	.word	0x0805a074

08000a08 <LCD_Init>:
  * @brief  Initializes LEDs, SDRAM, touch screen, CRC and SRAM.
  * @param  None 
  * @retval None
  */
void LCD_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  /* Initialize the NOR */
  BSP_QSPI_Init();
 8000a0e:	f001 fd4f 	bl	80024b0 <BSP_QSPI_Init>
  BSP_QSPI_EnableMemoryMappedMode();  
 8000a12:	f001 fdad 	bl	8002570 <BSP_QSPI_EnableMemoryMappedMode>
  
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000a16:	f001 ff99 	bl	800294c <BSP_SDRAM_Init>
  
#if defined(USE_STM32469I_DISCO_REVC)
  /* Reset the LCD */
  k_Bsp_LCD_Reset();
 8000a1a:	f000 f8cd 	bl	8000bb8 <k_Bsp_LCD_Reset>
#endif

  HAL_Delay(100);
 8000a1e:	2064      	movs	r0, #100	; 0x64
 8000a20:	f002 fb68 	bl	80030f4 <HAL_Delay>
  
  /* Initialize the Touch screen */
  BSP_TS_Init(800, 480);
 8000a24:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000a28:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a2c:	f002 f972 	bl	8002d14 <BSP_TS_Init>
    
  /* Enable CRC to Unlock GUI */
 __HAL_RCC_CRC_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <LCD_Init+0x68>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <LCD_Init+0x68>)
 8000a3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <LCD_Init+0x68>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
  
 /* Enable Back up SRAM */
__HAL_RCC_BKPSRAM_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <LCD_Init+0x68>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <LCD_Init+0x68>)
 8000a56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <LCD_Init+0x68>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]
  
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800

08000a74 <LCD_Touch_Update>:
  *         value to the variables u32_TSXCoordinate and u32_TSYCoordinate
  * @param  None
  * @retval None
  */
void LCD_Touch_Update(void)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
  static GUI_PID_STATE TS_State = {0, 0, 0, 0};
  __IO TS_StateTypeDef  ts;
  uint16_t xDiff, yDiff;
  
  BSP_TS_GetState((TS_StateTypeDef *)&ts);
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 f9ad 	bl	8002ddc <BSP_TS_GetState>

  if((ts.touchX[0] >= LCD_GetXSize()) ||(ts.touchY[0] >= LCD_GetYSize()) ) 
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	461c      	mov	r4, r3
 8000a88:	f014 fa44 	bl	8014f14 <LCD_GetXSize>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	429c      	cmp	r4, r3
 8000a90:	da07      	bge.n	8000aa2 <LCD_Touch_Update+0x2e>
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	461c      	mov	r4, r3
 8000a98:	f014 fa52 	bl	8014f40 <LCD_GetYSize>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	429c      	cmp	r4, r3
 8000aa0:	db03      	blt.n	8000aaa <LCD_Touch_Update+0x36>
  {
    ts.touchX[0] = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	807b      	strh	r3, [r7, #2]
    ts.touchY[0] = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	80fb      	strh	r3, [r7, #6]
  }

  xDiff = (TS_State.x > ts.touchX[0]) ? (TS_State.x - ts.touchX[0]) : (ts.touchX[0] - TS_State.x);
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	887a      	ldrh	r2, [r7, #2]
 8000ab0:	b292      	uxth	r2, r2
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	dd07      	ble.n	8000ac6 <LCD_Touch_Update+0x52>
 8000ab6:	4b3c      	ldr	r3, [pc, #240]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	887b      	ldrh	r3, [r7, #2]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	e006      	b.n	8000ad4 <LCD_Touch_Update+0x60>
 8000ac6:	887b      	ldrh	r3, [r7, #2]
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	81fb      	strh	r3, [r7, #14]
  yDiff = (TS_State.y > ts.touchY[0]) ? (TS_State.y - ts.touchY[0]) : (ts.touchY[0] - TS_State.y);
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	88fa      	ldrh	r2, [r7, #6]
 8000adc:	b292      	uxth	r2, r2
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	dd07      	ble.n	8000af2 <LCD_Touch_Update+0x7e>
 8000ae2:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	e006      	b.n	8000b00 <LCD_Touch_Update+0x8c>
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	81bb      	strh	r3, [r7, #12]
  
  if((TS_State.Pressed != ts.touchDetected ) ||
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000b04:	7a1a      	ldrb	r2, [r3, #8]
 8000b06:	783b      	ldrb	r3, [r7, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d105      	bne.n	8000b1a <LCD_Touch_Update+0xa6>
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	2b14      	cmp	r3, #20
 8000b12:	d802      	bhi.n	8000b1a <LCD_Touch_Update+0xa6>
     (xDiff > 20 )||
 8000b14:	89bb      	ldrh	r3, [r7, #12]
 8000b16:	2b14      	cmp	r3, #20
 8000b18:	d941      	bls.n	8000b9e <LCD_Touch_Update+0x12a>
       (yDiff > 20))
  {
    TS_State.Pressed = ts.touchDetected;
 8000b1a:	783b      	ldrb	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000b20:	721a      	strb	r2, [r3, #8]
    TS_State.Layer = SelLayer;
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <LCD_Touch_Update+0x138>)
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000b28:	725a      	strb	r2, [r3, #9]
    if(ts.touchDetected) 
 8000b2a:	783b      	ldrb	r3, [r7, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d02c      	beq.n	8000b8c <LCD_Touch_Update+0x118>
    {
      TS_State.x = ts.touchX[0];
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000b3a:	601a      	str	r2, [r3, #0]
      if(I2C_Address == TS_I2C_ADDRESS)
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <LCD_Touch_Update+0x13c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b54      	cmp	r3, #84	; 0x54
 8000b42:	d11a      	bne.n	8000b7a <LCD_Touch_Update+0x106>
      {
        if(ts.touchY[0] < 240)
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	2bef      	cmp	r3, #239	; 0xef
 8000b4a:	d805      	bhi.n	8000b58 <LCD_Touch_Update+0xe4>
        {
          TS_State.y = ts.touchY[0];
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	e015      	b.n	8000b84 <LCD_Touch_Update+0x110>
        }
        else
        {
          TS_State.y = (ts.touchY[0] * 480) / 450;
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4613      	mov	r3, r2
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	1a9b      	subs	r3, r3, r2
 8000b64:	015b      	lsls	r3, r3, #5
 8000b66:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <LCD_Touch_Update+0x140>)
 8000b68:	fb82 1203 	smull	r1, r2, r2, r3
 8000b6c:	441a      	add	r2, r3
 8000b6e:	1212      	asrs	r2, r2, #8
 8000b70:	17db      	asrs	r3, r3, #31
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000b76:	6053      	str	r3, [r2, #4]
 8000b78:	e004      	b.n	8000b84 <LCD_Touch_Update+0x110>
        }
      }
      else
      {
        TS_State.y = ts.touchY[0]; 
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000b82:	605a      	str	r2, [r3, #4]
      }
      GUI_TOUCH_StoreStateEx(&TS_State);
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000b86:	f012 f865 	bl	8012c54 <GUI_TOUCH_StoreStateEx>
      GUI_TOUCH_StoreStateEx(&TS_State);
      TS_State.x = 0;
      TS_State.y = 0;      
    }
  }
}
 8000b8a:	e008      	b.n	8000b9e <LCD_Touch_Update+0x12a>
      GUI_TOUCH_StoreStateEx(&TS_State);
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000b8e:	f012 f861 	bl	8012c54 <GUI_TOUCH_StoreStateEx>
      TS_State.x = 0;
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
      TS_State.y = 0;      
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <LCD_Touch_Update+0x134>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd90      	pop	{r4, r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000a94 	.word	0x20000a94
 8000bac:	200082ec 	.word	0x200082ec
 8000bb0:	2000854d 	.word	0x2000854d
 8000bb4:	91a2b3c5 	.word	0x91a2b3c5

08000bb8 <k_Bsp_LCD_Reset>:
  * @brief  Reset the LCD
  * @param  None
  * @retval None
  */
void k_Bsp_LCD_Reset(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
  /* PCB REV B : XRES of LCD connected to PH7 (active low) */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <k_Bsp_LCD_Reset+0x60>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <k_Bsp_LCD_Reset+0x60>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <k_Bsp_LCD_Reset+0x60>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* Configure the GPIO on PH7 */
  gpio_init_structure.Pin   = GPIO_PIN_7;
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_MEDIUM;
 8000be6:	2301      	movs	r3, #1
 8000be8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init( GPIOH, &gpio_init_structure );
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	480b      	ldr	r0, [pc, #44]	; (8000c1c <k_Bsp_LCD_Reset+0x64>)
 8000bf0:	f003 fcfe 	bl	80045f0 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin( GPIOH, GPIO_PIN_7, GPIO_PIN_RESET );
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <k_Bsp_LCD_Reset+0x64>)
 8000bfa:	f003 fea5 	bl	8004948 <HAL_GPIO_WritePin>
  /* wait 20 ms */
  HAL_Delay(20);
 8000bfe:	2014      	movs	r0, #20
 8000c00:	f002 fa78 	bl	80030f4 <HAL_Delay>

  /* Deactivate XRES */
  HAL_GPIO_WritePin( GPIOH, GPIO_PIN_7, GPIO_PIN_SET );
 8000c04:	2201      	movs	r2, #1
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <k_Bsp_LCD_Reset+0x64>)
 8000c0a:	f003 fe9d 	bl	8004948 <HAL_GPIO_WritePin>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40021c00 	.word	0x40021c00

08000c20 <main>:
/**
* @brief  Main Prog Function
* @param  None
*/
int main(void)
{     
 8000c20:	b5b0      	push	{r4, r5, r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
  /* STM32F4xx HAL library initialisation */
  HAL_Init();
 8000c26:	f002 fa23 	bl	8003070 <HAL_Init>
  /* Configure the system clock*/
  SystemClock_Config();
 8000c2a:	f000 f855 	bl	8000cd8 <SystemClock_Config>
  /* Initialise GPIO pins */
  MX_GPIO_Init();
 8000c2e:	f000 f8c7 	bl	8000dc0 <MX_GPIO_Init>
  /* Initialises LCD+TS using the I2C data bus (x)(y). Provided by STMicroelectronics */
  LCD_Init();
 8000c32:	f7ff fee9 	bl	8000a08 <LCD_Init>
  
  /* Define & create GUI thread */
  osThreadDef(GUI_Thread, GUI_Thread, osPriorityLow, 0, 2048);
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <main+0x44>)
 8000c38:	1d3c      	adds	r4, r7, #4
 8000c3a:	461d      	mov	r5, r3
 8000c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c40:	682b      	ldr	r3, [r5, #0]
 8000c42:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(GUI_Thread), NULL); 
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f00a f992 	bl	800af72 <osThreadCreate>

  /* Initialise modules. Provided by MCD Application Team  */
  Module_Init();
 8000c4e:	f7ff fe43 	bl	80008d8 <Module_Init>
  
  /* Enable module links */
  Module_Enable(&control_board);
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <main+0x48>)
 8000c54:	f7ff fe68 	bl	8000928 <Module_Enable>
  Module_Enable(&details_board);
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <main+0x4c>)
 8000c5a:	f7ff fe65 	bl	8000928 <Module_Enable>

  /* Start scheduler middleware */
  osKernelStart ();
 8000c5e:	f00a f971 	bl	800af44 <osKernelStart>

  /* Never reaches bc of scheduler */
  while(1);
 8000c62:	e7fe      	b.n	8000c62 <main+0x42>
 8000c64:	080253d0 	.word	0x080253d0
 8000c68:	200004d4 	.word	0x200004d4
 8000c6c:	20000500 	.word	0x20000500

08000c70 <GUI_Thread>:
  * @brief  Starts GUI task
  * @param  None
  * @retval None
  */
static void GUI_Thread()
{   
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

  /* Initialie GUI */
  GUI_Init();   
 8000c76:	f010 ff65 	bl	8011b44 <GUI_Init>
  
  /* Middleware to ensure correct visible layer */
  GUI_SetLayerVisEx (1, 0);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f011 ffdb 	bl	8012c38 <GUI_SetLayerVisEx>
  
   /* Set General Graphical properties. Provided by MCD Application Team */
  GUI_SetProfile();
 8000c82:	f7ff fcd7 	bl	8000634 <GUI_SetProfile>

  /* Run startup sequence */
  Startup_Display_Seq();
 8000c86:	f7ff fe79 	bl	800097c <Startup_Display_Seq>

  /* Create Touch screen Timer for LCD click. Provided by MCD Application Team */
  osTimerDef(TS_Timer, Timer_Callback);
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <GUI_Thread+0x4c>)
 8000c8c:	607b      	str	r3, [r7, #4]
  lcd_timer =  osTimerCreate(osTimer(TS_Timer), osTimerPeriodic, (void *)0);
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	2101      	movs	r1, #1
 8000c94:	4618      	mov	r0, r3
 8000c96:	f00a f9af 	bl	800aff8 <osTimerCreate>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <GUI_Thread+0x50>)
 8000c9e:	6013      	str	r3, [r2, #0]

  /* Start the TS Timer after click */
  osTimerStart(lcd_timer, 30);
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <GUI_Thread+0x50>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	211e      	movs	r1, #30
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00a f9c2 	bl	800b030 <osTimerStart>
  
  /* Show the main menu */
  GUI_Init_MainMenu();
 8000cac:	f7ff fd58 	bl	8000760 <GUI_Init_MainMenu>

  /* Gui background Task */
  while(1) {
    GUI_Exec(); /* Run task in background. Provided by MCD Application Team */
 8000cb0:	f010 fc98 	bl	80115e4 <GUI_Exec>
    osDelay(30); /* Wait before next task can be excecuted, RTOS middleware */
 8000cb4:	201e      	movs	r0, #30
 8000cb6:	f00a f98a 	bl	800afce <osDelay>
    GUI_Exec(); /* Run task in background. Provided by MCD Application Team */
 8000cba:	e7f9      	b.n	8000cb0 <GUI_Thread+0x40>
 8000cbc:	08000cc5 	.word	0x08000cc5
 8000cc0:	20000aa0 	.word	0x20000aa0

08000cc4 <Timer_Callback>:
  * @brief  Timer callback (40 ms)
  * @param  n: Timer index 
  * @retval None
  */
static void Timer_Callback(void const *n)
{  
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	LCD_Touch_Update();
 8000ccc:	f7ff fed2 	bl	8000a74 <LCD_Touch_Update>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <SystemClock_Config>:
  * @brief  System Clock Configuration, built in project CubeIDE
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0a4      	sub	sp, #144	; 0x90
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b35      	ldr	r3, [pc, #212]	; (8000db8 <SystemClock_Config+0xe0>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a34      	ldr	r2, [pc, #208]	; (8000db8 <SystemClock_Config+0xe0>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <SystemClock_Config+0xe0>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <SystemClock_Config+0xe4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <SystemClock_Config+0xe4>)
 8000d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <SystemClock_Config+0xe4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d16:	2301      	movs	r3, #1
 8000d18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d20:	2302      	movs	r3, #2
 8000d22:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d28:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000d2e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000d32:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	67bb      	str	r3, [r7, #120]	; 0x78
  
  
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d44:	4618      	mov	r0, r3
 8000d46:	f008 fedd 	bl	8009b04 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d000      	beq.n	8000d52 <SystemClock_Config+0x7a>
  {
    while(1);
 8000d50:	e7fe      	b.n	8000d50 <SystemClock_Config+0x78>
  }
  /* Enable the OverDrive to reach the 180 Mhz Frequency */  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d52:	f007 f9f7 	bl	8008144 <HAL_PWREx_EnableOverDrive>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d000      	beq.n	8000d5e <SystemClock_Config+0x86>
  {
    while(1);
 8000d5c:	e7fe      	b.n	8000d5c <SystemClock_Config+0x84>
  }
  
  /* Select PLLSAI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CK48;
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CK48CLKSOURCE_PLLSAIP; 
 8000d62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d66:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000d68:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d6c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	623b      	str	r3, [r7, #32]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4618      	mov	r0, r3
 8000d78:	f008 fc86 	bl	8009688 <HAL_RCCEx_PeriphCLKConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	2302      	movs	r3, #2
 8000d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8000d8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000da0:	2105      	movs	r1, #5
 8000da2:	4618      	mov	r0, r3
 8000da4:	f008 fa32 	bl	800920c <HAL_RCC_ClockConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d000      	beq.n	8000db0 <SystemClock_Config+0xd8>
  {
    while(1);
 8000dae:	e7fe      	b.n	8000dae <SystemClock_Config+0xd6>
  }
}
 8000db0:	bf00      	nop
 8000db2:	3790      	adds	r7, #144	; 0x90
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <MX_GPIO_Init>:
  * @brief  Init. GPIO pins.
  * @param  None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b090      	sub	sp, #64	; 0x40
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dda:	4baf      	ldr	r3, [pc, #700]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4aae      	ldr	r2, [pc, #696]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4bac      	ldr	r3, [pc, #688]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
 8000df6:	4ba8      	ldr	r3, [pc, #672]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4aa7      	ldr	r2, [pc, #668]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4ba5      	ldr	r3, [pc, #660]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
 8000e12:	4ba1      	ldr	r3, [pc, #644]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4aa0      	ldr	r2, [pc, #640]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b9e      	ldr	r3, [pc, #632]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	623b      	str	r3, [r7, #32]
 8000e28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	4b9a      	ldr	r3, [pc, #616]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a99      	ldr	r2, [pc, #612]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b97      	ldr	r3, [pc, #604]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	61fb      	str	r3, [r7, #28]
 8000e44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	4b93      	ldr	r3, [pc, #588]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a92      	ldr	r2, [pc, #584]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b90      	ldr	r3, [pc, #576]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	4b8c      	ldr	r3, [pc, #560]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a8b      	ldr	r2, [pc, #556]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b89      	ldr	r3, [pc, #548]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b85      	ldr	r3, [pc, #532]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a84      	ldr	r2, [pc, #528]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b82      	ldr	r3, [pc, #520]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b7e      	ldr	r3, [pc, #504]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a7d      	ldr	r2, [pc, #500]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000ea4:	f043 0320 	orr.w	r3, r3, #32
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b7b      	ldr	r3, [pc, #492]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0320 	and.w	r3, r3, #32
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	4b77      	ldr	r3, [pc, #476]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a76      	ldr	r2, [pc, #472]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b74      	ldr	r3, [pc, #464]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	4b70      	ldr	r3, [pc, #448]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a6f      	ldr	r2, [pc, #444]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b6d      	ldr	r3, [pc, #436]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	4b69      	ldr	r3, [pc, #420]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a68      	ldr	r2, [pc, #416]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b66      	ldr	r3, [pc, #408]	; (8001098 <MX_GPIO_Init+0x2d8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	210c      	movs	r1, #12
 8000f0e:	4863      	ldr	r0, [pc, #396]	; (800109c <MX_GPIO_Init+0x2dc>)
 8000f10:	f003 fd1a 	bl	8004948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2130      	movs	r1, #48	; 0x30
 8000f18:	4861      	ldr	r0, [pc, #388]	; (80010a0 <MX_GPIO_Init+0x2e0>)
 8000f1a:	f003 fd15 	bl	8004948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2108      	movs	r1, #8
 8000f22:	4860      	ldr	r0, [pc, #384]	; (80010a4 <MX_GPIO_Init+0x2e4>)
 8000f24:	f003 fd10 	bl	8004948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	485e      	ldr	r0, [pc, #376]	; (80010a8 <MX_GPIO_Init+0x2e8>)
 8000f2e:	f003 fd0b 	bl	8004948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2105      	movs	r1, #5
 8000f36:	485d      	ldr	r0, [pc, #372]	; (80010ac <MX_GPIO_Init+0x2ec>)
 8000f38:	f003 fd06 	bl	8004948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EXT_Int, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2101      	movs	r1, #1
 8000f40:	485b      	ldr	r0, [pc, #364]	; (80010b0 <MX_GPIO_Init+0x2f0>)
 8000f42:	f003 fd01 	bl	8004948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	485a      	ldr	r0, [pc, #360]	; (80010b4 <MX_GPIO_Init+0x2f4>)
 8000f4c:	f003 fcfc 	bl	8004948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2108      	movs	r1, #8
 8000f54:	4856      	ldr	r0, [pc, #344]	; (80010b0 <MX_GPIO_Init+0x2f0>)
 8000f56:	f003 fcf7 	bl	8004948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	484a      	ldr	r0, [pc, #296]	; (800109c <MX_GPIO_Init+0x2dc>)
 8000f72:	f003 fb3d 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000f76:	2308      	movs	r3, #8
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f86:	2306      	movs	r3, #6
 8000f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4846      	ldr	r0, [pc, #280]	; (80010ac <MX_GPIO_Init+0x2ec>)
 8000f92:	f003 fb2d 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4840      	ldr	r0, [pc, #256]	; (80010ac <MX_GPIO_Init+0x2ec>)
 8000fac:	f003 fb20 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000fb0:	2330      	movs	r3, #48	; 0x30
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fb4:	2311      	movs	r3, #17
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4836      	ldr	r0, [pc, #216]	; (80010a0 <MX_GPIO_Init+0x2e0>)
 8000fc8:	f003 fb12 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fd0:	2311      	movs	r3, #17
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4830      	ldr	r0, [pc, #192]	; (80010a4 <MX_GPIO_Init+0x2e4>)
 8000fe4:	f003 fb04 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000fe8:	2340      	movs	r3, #64	; 0x40
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fec:	2311      	movs	r3, #17
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	482a      	ldr	r0, [pc, #168]	; (80010a8 <MX_GPIO_Init+0x2e8>)
 8001000:	f003 faf6 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8001004:	2305      	movs	r3, #5
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001018:	4619      	mov	r1, r3
 800101a:	4824      	ldr	r0, [pc, #144]	; (80010ac <MX_GPIO_Init+0x2ec>)
 800101c:	f003 fae8 	bl	80045f0 <HAL_GPIO_Init>

  /* Configure PA.00 pin as input floating */
  GPIO_InitStruct.Pin = EXT_Int;
 8001020:	2301      	movs	r3, #1
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001024:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001036:	4619      	mov	r1, r3
 8001038:	481d      	ldr	r0, [pc, #116]	; (80010b0 <MX_GPIO_Init+0x2f0>)
 800103a:	f003 fad9 	bl	80045f0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2102      	movs	r1, #2
 8001042:	2006      	movs	r0, #6
 8001044:	f002 f932 	bl	80032ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001048:	2006      	movs	r0, #6
 800104a:	f002 f94b 	bl	80032e4 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 800104e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001060:	2302      	movs	r3, #2
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_GPIO_Init+0x2e0>)
 800106c:	f003 fac0 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001070:	2304      	movs	r3, #4
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001080:	4619      	mov	r1, r3
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <MX_GPIO_Init+0x2e8>)
 8001084:	f003 fab4 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001088:	2320      	movs	r3, #32
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	e010      	b.n	80010b8 <MX_GPIO_Init+0x2f8>
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40021000 	.word	0x40021000
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40022800 	.word	0x40022800
 80010a8:	40021800 	.word	0x40021800
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40021c00 	.word	0x40021c00
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010be:	4619      	mov	r1, r3
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <MX_GPIO_Init+0x348>)
 80010c2:	f003 fa95 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010da:	4619      	mov	r1, r3
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <MX_GPIO_Init+0x34c>)
 80010de:	f003 fa87 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80010e2:	2308      	movs	r3, #8
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_GPIO_Init+0x350>)
 80010fa:	f003 fa79 	bl	80045f0 <HAL_GPIO_Init>


}
 80010fe:	bf00      	nop
 8001100:	3740      	adds	r7, #64	; 0x40
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022400 	.word	0x40022400
 800110c:	40021c00 	.word	0x40021c00
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	2036      	movs	r0, #54	; 0x36
 800112a:	f002 f8bf 	bl	80032ac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800112e:	2036      	movs	r0, #54	; 0x36
 8001130:	f002 f8d8 	bl	80032e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HAL_InitTick+0xbc>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <HAL_InitTick+0xbc>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HAL_InitTick+0xbc>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001150:	f107 020c 	add.w	r2, r7, #12
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f008 fa62 	bl	8009624 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800116a:	f008 fa47 	bl	80095fc <HAL_RCC_GetPCLK1Freq>
 800116e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001170:	e004      	b.n	800117c <HAL_InitTick+0x68>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001172:	f008 fa43 	bl	80095fc <HAL_RCC_GetPCLK1Freq>
 8001176:	4603      	mov	r3, r0
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117e:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <HAL_InitTick+0xc0>)
 8001180:	fba2 2303 	umull	r2, r3, r2, r3
 8001184:	0c9b      	lsrs	r3, r3, #18
 8001186:	3b01      	subs	r3, #1
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_InitTick+0xc4>)
 800118c:	4a13      	ldr	r2, [pc, #76]	; (80011dc <HAL_InitTick+0xc8>)
 800118e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_InitTick+0xc4>)
 8001192:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001196:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_InitTick+0xc4>)
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0U;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_InitTick+0xc4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_InitTick+0xc4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_InitTick+0xc4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80011b0:	4809      	ldr	r0, [pc, #36]	; (80011d8 <HAL_InitTick+0xc4>)
 80011b2:	f008 ffc6 	bl	800a142 <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d104      	bne.n	80011c6 <HAL_InitTick+0xb2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <HAL_InitTick+0xc4>)
 80011be:	f009 f819 	bl	800a1f4 <HAL_TIM_Base_Start_IT>
 80011c2:	4603      	mov	r3, r0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0xb4>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	431bde83 	.word	0x431bde83
 80011d8:	200082a4 	.word	0x200082a4
 80011dc:	40001000 	.word	0x40001000

080011e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 80011e8:	f001 ff64 	bl	80030b4 <HAL_IncTick>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <TIM6_DAC_IRQHandler>:
/**
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <TIM6_DAC_IRQHandler+0x10>)
 80011fa:	f009 f86b 	bl	800a2d4 <HAL_TIM_IRQHandler>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200082a4 	.word	0x200082a4

08001208 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  osSystickHandler();
 8001240:	f00a f82e 	bl	800b2a0 <osSystickHandler>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <OTG_FS_IRQHandler+0x10>)
 800124e:	f003 fbae 	bl	80049ae <HAL_HCD_IRQHandler>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20035928 	.word	0x20035928

0800125c <LTDC_IRQHandler>:
  * @brief  This function handles LTDC global interrupt request.
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hltdc_disco);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <LTDC_IRQHandler+0x10>)
 8001262:	f006 fae2 	bl	800782a <HAL_LTDC_IRQHandler>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20035798 	.word	0x20035798

08001270 <DMA2_Stream3_IRQHandler>:
  * @brief  This function handles DMA2 Stream 5 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_SAIx_DMAx_IRQHandler (void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <DMA2_Stream3_IRQHandler+0x14>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001278:	4618      	mov	r0, r3
 800127a:	f002 f9df 	bl	800363c <HAL_DMA_IRQHandler>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000836c 	.word	0x2000836c

08001288 <DMA1_Stream2_IRQHandler>:
  * @brief This function handles DMA1 Stream 2 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_I2Sx_DMAx_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_i2s.hdmarx);
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <DMA1_Stream2_IRQHandler+0x14>)
 800128e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001290:	4618      	mov	r0, r3
 8001292:	f002 f9d3 	bl	800363c <HAL_DMA_IRQHandler>
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200083f4 	.word	0x200083f4

080012a0 <QUADSPI_IRQHandler>:
  * @brief  This function handles DMA2 Stream 5 interrupt request.
  * @param  None
  * @retval None
  */
void QUADSPI_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  HAL_QSPI_IRQHandler(&QSPIHandle);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <QUADSPI_IRQHandler+0x10>)
 80012a6:	f007 f851 	bl	800834c <HAL_QSPI_IRQHandler>
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000843c 	.word	0x2000843c

080012b4 <_OnPaint_exit>:
/**
  * @brief  Paints back button
  * @param  hObj: button handle
  * @retval None
  */
static void _OnPaint_exit(BUTTON_Handle hObj) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GUI_SetBkColor(FRAMEWIN_GetDefaultClientColor());
 80012bc:	f01c f9d2 	bl	801d664 <FRAMEWIN_GetDefaultClientColor>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f010 fa6e 	bl	80117a4 <GUI_SetBkColor>
  GUI_Clear();
 80012c8:	f010 fbbc 	bl	8011a44 <GUI_Clear>
  GUI_SetColor(GUI_ORANGE);
 80012cc:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 80012d0:	f010 fa74 	bl	80117bc <GUI_SetColor>
  GUI_AA_FillCircle(0, 0, 300);
 80012d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012d8:	2100      	movs	r1, #0
 80012da:	2000      	movs	r0, #0
 80012dc:	f00e fbb4 	bl	800fa48 <GUI_AA_FillCircle>
  GUI_SetBkColor(GUI_ORANGE);
 80012e0:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 80012e4:	f010 fa5e 	bl	80117a4 <GUI_SetBkColor>
  GUI_SetColor(GUI_WHITE);
 80012e8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80012ec:	f010 fa66 	bl	80117bc <GUI_SetColor>
  GUI_SetFont(&GUI_FontLubalGraph32B);
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <_OnPaint_exit+0x54>)
 80012f2:	f010 fac5 	bl	8011880 <GUI_SetFont>
  GUI_DispStringAt("back", 20, 20);
 80012f6:	2214      	movs	r2, #20
 80012f8:	2114      	movs	r1, #20
 80012fa:	4804      	ldr	r0, [pc, #16]	; (800130c <_OnPaint_exit+0x58>)
 80012fc:	f011 f81c 	bl	8012338 <GUI_DispStringAt>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	08028bcc 	.word	0x08028bcc
 800130c:	08025424 	.word	0x08025424

08001310 <_cbButton_exit>:
/**
  * @brief  callback for back button
  * @param  pMsg: pointer to data structure of type WM_MESSAGE
  * @retval None
  */
static void _cbButton_exit(WM_MESSAGE * pMsg) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  switch (pMsg->MsgId) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d105      	bne.n	800132c <_cbButton_exit+0x1c>
    case WM_PAINT:
      _OnPaint_exit(pMsg->hWin);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffc5 	bl	80012b4 <_OnPaint_exit>
      break;
 800132a:	e003      	b.n	8001334 <_cbButton_exit+0x24>
    default:
      /* The original callback */
      BUTTON_Callback(pMsg);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f01b fbdf 	bl	801caf0 <BUTTON_Callback>
      break;
 8001332:	bf00      	nop
  }
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_OnPaint_upstairs>:
/**
  * @brief  Paints upstairs button
  * @param  hObj: button handle
  * @retval None
  */
static void _OnPaint_upstairs(BUTTON_Handle hObj) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  int Index;

  GUI_SetBkColor(FRAMEWIN_GetDefaultClientColor());
 8001344:	f01c f98e 	bl	801d664 <FRAMEWIN_GetDefaultClientColor>
 8001348:	4603      	mov	r3, r0
 800134a:	4618      	mov	r0, r3
 800134c:	f010 fa2a 	bl	80117a4 <GUI_SetBkColor>
  GUI_Clear();
 8001350:	f010 fb78 	bl	8011a44 <GUI_Clear>

  Index = (WIDGET_GetState(hObj) & BUTTON_STATE_PRESSED) ? 1 : 0;
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f01c fec5 	bl	801e0e4 <WIDGET_GetState>
 800135a:	4603      	mov	r3, r0
 800135c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf14      	ite	ne
 8001364:	2301      	movne	r3, #1
 8001366:	2300      	moveq	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	60fb      	str	r3, [r7, #12]
  
  if(Index)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <_OnPaint_upstairs+0x46>
  {
    GUI_DrawBitmap(&bmdes_control_sub, 0, 10);
 8001372:	220a      	movs	r2, #10
 8001374:	2100      	movs	r1, #0
 8001376:	4808      	ldr	r0, [pc, #32]	; (8001398 <_OnPaint_upstairs+0x5c>)
 8001378:	f011 f948 	bl	801260c <GUI_DrawBitmap>
    Upstairs_with_UT();
 800137c:	f000 f9a8 	bl	80016d0 <Upstairs_with_UT>
  }
  else
  {
    GUI_DrawBitmap(&bmcontrol_sub, 0, -10);
  }
}
 8001380:	e005      	b.n	800138e <_OnPaint_upstairs+0x52>
    GUI_DrawBitmap(&bmcontrol_sub, 0, -10);
 8001382:	f06f 0209 	mvn.w	r2, #9
 8001386:	2100      	movs	r1, #0
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <_OnPaint_upstairs+0x60>)
 800138a:	f011 f93f 	bl	801260c <GUI_DrawBitmap>
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	0807e538 	.word	0x0807e538
 800139c:	0807e560 	.word	0x0807e560

080013a0 <_cbButton_upstairs>:
/**
  * @brief  callback for upstairs button
  * @param  pMsg: pointer to data structure of type WM_MESSAGE
  * @retval None
  */
static void _cbButton_upstairs(WM_MESSAGE * pMsg) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  switch (pMsg->MsgId) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d105      	bne.n	80013bc <_cbButton_upstairs+0x1c>
    case WM_PAINT:
      _OnPaint_upstairs(pMsg->hWin);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ffc1 	bl	800133c <_OnPaint_upstairs>
      break;
 80013ba:	e003      	b.n	80013c4 <_cbButton_upstairs+0x24>
    default:
      /* The original callback */
      BUTTON_Callback(pMsg);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f01b fb97 	bl	801caf0 <BUTTON_Callback>
      break;
 80013c2:	bf00      	nop
  }
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_OnPaint_downstairs>:
/**
  * @brief  Paints downstairs button
  * @param  hObj: button handle
  * @retval None
  */
static void _OnPaint_downstairs(BUTTON_Handle hObj) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  int Index;

  GUI_SetBkColor(FRAMEWIN_GetDefaultClientColor());
 80013d4:	f01c f946 	bl	801d664 <FRAMEWIN_GetDefaultClientColor>
 80013d8:	4603      	mov	r3, r0
 80013da:	4618      	mov	r0, r3
 80013dc:	f010 f9e2 	bl	80117a4 <GUI_SetBkColor>
  GUI_Clear();
 80013e0:	f010 fb30 	bl	8011a44 <GUI_Clear>

  Index = (WIDGET_GetState(hObj) & BUTTON_STATE_PRESSED) ? 1 : 0;
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f01c fe7d 	bl	801e0e4 <WIDGET_GetState>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	60fb      	str	r3, [r7, #12]
  
  if(Index)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <_OnPaint_downstairs+0x46>
  {
    GUI_DrawBitmap(&bmdes_garden_sub, 0, 10);
 8001402:	220a      	movs	r2, #10
 8001404:	2100      	movs	r1, #0
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <_OnPaint_downstairs+0x5c>)
 8001408:	f011 f900 	bl	801260c <GUI_DrawBitmap>
    Downstairs_with_UT();
 800140c:	f000 f974 	bl	80016f8 <Downstairs_with_UT>
  }
  else
  {
    GUI_DrawBitmap(&bmgarden_sub, 0, -10);
  }
}
 8001410:	e005      	b.n	800141e <_OnPaint_downstairs+0x52>
    GUI_DrawBitmap(&bmgarden_sub, 0, -10);
 8001412:	f06f 0209 	mvn.w	r2, #9
 8001416:	2100      	movs	r1, #0
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <_OnPaint_downstairs+0x60>)
 800141a:	f011 f8f7 	bl	801260c <GUI_DrawBitmap>
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	0807e524 	.word	0x0807e524
 800142c:	0807e510 	.word	0x0807e510

08001430 <_cbButton_downstairs>:
/**
  * @brief  callback for downstairs button
  * @param  pMsg: pointer to data structure of type WM_MESSAGE
  * @retval None
  */
static void _cbButton_downstairs(WM_MESSAGE * pMsg) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  switch (pMsg->MsgId) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d105      	bne.n	800144c <_cbButton_downstairs+0x1c>
    case WM_PAINT:
      _OnPaint_downstairs(pMsg->hWin);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ffc1 	bl	80013cc <_OnPaint_downstairs>
      break;
 800144a:	e003      	b.n	8001454 <_cbButton_downstairs+0x24>
    default:
      /* The original callback */
      BUTTON_Callback(pMsg);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f01b fb4f 	bl	801caf0 <BUTTON_Callback>
      break;
 8001452:	bf00      	nop
  }
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_OnPaint_lcd>:
/**
  * @brief  Paints lcd button
  * @param  hObj: button handle
  * @retval None
  */
static void _OnPaint_lcd(BUTTON_Handle hObj) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  int Index;

  GUI_SetBkColor(FRAMEWIN_GetDefaultClientColor());
 8001464:	f01c f8fe 	bl	801d664 <FRAMEWIN_GetDefaultClientColor>
 8001468:	4603      	mov	r3, r0
 800146a:	4618      	mov	r0, r3
 800146c:	f010 f99a 	bl	80117a4 <GUI_SetBkColor>
  GUI_Clear();
 8001470:	f010 fae8 	bl	8011a44 <GUI_Clear>

  Index = (WIDGET_GetState(hObj) & BUTTON_STATE_PRESSED) ? 1 : 0;
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f01c fe35 	bl	801e0e4 <WIDGET_GetState>
 800147a:	4603      	mov	r3, r0
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf14      	ite	ne
 8001484:	2301      	movne	r3, #1
 8001486:	2300      	moveq	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	60fb      	str	r3, [r7, #12]

  if(Index)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <_OnPaint_lcd+0x46>
  {
    GUI_DrawBitmap(&bmdes_water_sub, 0, 10);
 8001492:	220a      	movs	r2, #10
 8001494:	2100      	movs	r1, #0
 8001496:	4808      	ldr	r0, [pc, #32]	; (80014b8 <_OnPaint_lcd+0x5c>)
 8001498:	f011 f8b8 	bl	801260c <GUI_DrawBitmap>
    TurnLCDOff_with_UT();
 800149c:	f000 f904 	bl	80016a8 <TurnLCDOff_with_UT>
  }
  else
  {
    GUI_DrawBitmap(&bmwater_sub, 0, -10);
  }
}
 80014a0:	e005      	b.n	80014ae <_OnPaint_lcd+0x52>
    GUI_DrawBitmap(&bmwater_sub, 0, -10);
 80014a2:	f06f 0209 	mvn.w	r2, #9
 80014a6:	2100      	movs	r1, #0
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <_OnPaint_lcd+0x60>)
 80014aa:	f011 f8af 	bl	801260c <GUI_DrawBitmap>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	0807e54c 	.word	0x0807e54c
 80014bc:	0807e574 	.word	0x0807e574

080014c0 <_cbButton_lcd>:
/**
  * @brief  callback for lcd button
  * @param  pMsg: pointer to data structure of type WM_MESSAGE
  * @retval None
  */
static void _cbButton_lcd(WM_MESSAGE * pMsg) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  switch (pMsg->MsgId) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d105      	bne.n	80014dc <_cbButton_lcd+0x1c>
    case WM_PAINT:
      _OnPaint_lcd(pMsg->hWin);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ffc1 	bl	800145c <_OnPaint_lcd>
      break;
 80014da:	e003      	b.n	80014e4 <_cbButton_lcd+0x24>
    default:
      /* The original callback */
      BUTTON_Callback(pMsg);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f01b fb07 	bl	801caf0 <BUTTON_Callback>
      break;
 80014e2:	bf00      	nop
  }
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_cbDialog>:
/**
  * @brief  Callback routine of the main dialog
  * @param  pMsg: pointer to data structure of type WM_MESSAGE
  * @retval None
  */
static void _cbDialog(WM_MESSAGE * pMsg) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af04      	add	r7, sp, #16
 80014f2:	6078      	str	r0, [r7, #4]
  WM_HWIN hItem;
  int Id, NCode;
  
  switch (pMsg->MsgId) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b26      	cmp	r3, #38	; 0x26
 80014fa:	d05d      	beq.n	80015b8 <_cbDialog+0xcc>
 80014fc:	2b26      	cmp	r3, #38	; 0x26
 80014fe:	dc75      	bgt.n	80015ec <_cbDialog+0x100>
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d077      	beq.n	80015f4 <_cbDialog+0x108>
 8001504:	2b1d      	cmp	r3, #29
 8001506:	d171      	bne.n	80015ec <_cbDialog+0x100>
  case WM_INIT_DIALOG:
    
    hItem = BUTTON_CreateEx(700, 0, 100,100, pMsg->hWin, WM_CF_SHOW, 0, ID_BUTTON_EXIT);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f640 0208 	movw	r2, #2056	; 0x808
 8001510:	9203      	str	r2, [sp, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	9202      	str	r2, [sp, #8]
 8001516:	2202      	movs	r2, #2
 8001518:	9201      	str	r2, [sp, #4]
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2364      	movs	r3, #100	; 0x64
 800151e:	2264      	movs	r2, #100	; 0x64
 8001520:	2100      	movs	r1, #0
 8001522:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001526:	f01b fb9b 	bl	801cc60 <BUTTON_CreateEx>
 800152a:	60f8      	str	r0, [r7, #12]
    WM_SetCallback(hItem, _cbButton_exit);
 800152c:	4935      	ldr	r1, [pc, #212]	; (8001604 <_cbDialog+0x118>)
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f01a f836 	bl	801b5a0 <WM_SetCallback>

    hItem = BUTTON_CreateEx(50,  150, 180, 180, pMsg->hWin, WM_CF_SHOW, 0, ID_BUTTON_UPSTAIRS);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f640 0205 	movw	r2, #2053	; 0x805
 800153c:	9203      	str	r2, [sp, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	9202      	str	r2, [sp, #8]
 8001542:	2202      	movs	r2, #2
 8001544:	9201      	str	r2, [sp, #4]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	23b4      	movs	r3, #180	; 0xb4
 800154a:	22b4      	movs	r2, #180	; 0xb4
 800154c:	2196      	movs	r1, #150	; 0x96
 800154e:	2032      	movs	r0, #50	; 0x32
 8001550:	f01b fb86 	bl	801cc60 <BUTTON_CreateEx>
 8001554:	60f8      	str	r0, [r7, #12]
    WM_SetCallback(hItem, _cbButton_upstairs);
 8001556:	492c      	ldr	r1, [pc, #176]	; (8001608 <_cbDialog+0x11c>)
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f01a f821 	bl	801b5a0 <WM_SetCallback>
      
    hItem = BUTTON_CreateEx(310, 140, 180, 180, pMsg->hWin, WM_CF_SHOW, 0, ID_BUTTON_DOWNSTAIRS);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f640 0206 	movw	r2, #2054	; 0x806
 8001566:	9203      	str	r2, [sp, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	9202      	str	r2, [sp, #8]
 800156c:	2202      	movs	r2, #2
 800156e:	9201      	str	r2, [sp, #4]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	23b4      	movs	r3, #180	; 0xb4
 8001574:	22b4      	movs	r2, #180	; 0xb4
 8001576:	218c      	movs	r1, #140	; 0x8c
 8001578:	f44f 709b 	mov.w	r0, #310	; 0x136
 800157c:	f01b fb70 	bl	801cc60 <BUTTON_CreateEx>
 8001580:	60f8      	str	r0, [r7, #12]
    WM_SetCallback(hItem, _cbButton_downstairs);
 8001582:	4922      	ldr	r1, [pc, #136]	; (800160c <_cbDialog+0x120>)
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f01a f80b 	bl	801b5a0 <WM_SetCallback>

    hItem = BUTTON_CreateEx(570, 140, 180,  180, pMsg->hWin, WM_CF_SHOW, 0, ID_BUTTON_LCD);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f640 0207 	movw	r2, #2055	; 0x807
 8001592:	9203      	str	r2, [sp, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	9202      	str	r2, [sp, #8]
 8001598:	2202      	movs	r2, #2
 800159a:	9201      	str	r2, [sp, #4]
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	23b4      	movs	r3, #180	; 0xb4
 80015a0:	22b4      	movs	r2, #180	; 0xb4
 80015a2:	218c      	movs	r1, #140	; 0x8c
 80015a4:	f240 203a 	movw	r0, #570	; 0x23a
 80015a8:	f01b fb5a 	bl	801cc60 <BUTTON_CreateEx>
 80015ac:	60f8      	str	r0, [r7, #12]
    WM_SetCallback(hItem, _cbButton_lcd);
 80015ae:	4918      	ldr	r1, [pc, #96]	; (8001610 <_cbDialog+0x124>)
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f019 fff5 	bl	801b5a0 <WM_SetCallback>


    break;     
 80015b6:	e020      	b.n	80015fa <_cbDialog+0x10e>
    
  case WM_PAINT:
    
    break;     
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);    /* Id of widget */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4618      	mov	r0, r3
 80015be:	f019 fe5f 	bl	801b280 <WM_GetId>
 80015c2:	6178      	str	r0, [r7, #20]
    NCode = pMsg->Data.v;               /* Notification code */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f640 0208 	movw	r2, #2056	; 0x808
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d111      	bne.n	80015f8 <_cbDialog+0x10c>
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d106      	bne.n	80015e8 <_cbDialog+0xfc>
    switch(Id) {
    case ID_BUTTON_EXIT: 
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
        
        GUI_EndDialog(pMsg->hWin, 0);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f01b fdc9 	bl	801d178 <GUI_EndDialog>
        
        break;
 80015e6:	bf00      	nop
      }
      break; 
 80015e8:	bf00      	nop
    }
    break;
 80015ea:	e005      	b.n	80015f8 <_cbDialog+0x10c>
  default:
    WM_DefaultProc(pMsg);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f019 fa95 	bl	801ab1c <WM_DefaultProc>
    break;
 80015f2:	e002      	b.n	80015fa <_cbDialog+0x10e>
    break;     
 80015f4:	bf00      	nop
 80015f6:	e000      	b.n	80015fa <_cbDialog+0x10e>
    break;
 80015f8:	bf00      	nop
  }    
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	08001311 	.word	0x08001311
 8001608:	080013a1 	.word	0x080013a1
 800160c:	08001431 	.word	0x08001431
 8001610:	080014c1 	.word	0x080014c1

08001614 <Startup>:
  * @param  xpos: X position 
  * @param  ypos: Y position
  * @retval None
  */
static void Startup(WM_HWIN hWin, uint16_t xpos, uint16_t ypos)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af02      	add	r7, sp, #8
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
 8001620:	4613      	mov	r3, r2
 8001622:	803b      	strh	r3, [r7, #0]

  GUI_CreateDialogBox(_aDialog, GUI_COUNTOF(_aDialog), _cbDialog, hWin, xpos, ypos);
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	883a      	ldrh	r2, [r7, #0]
 8001628:	9201      	str	r2, [sp, #4]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <Startup+0x2c>)
 8001630:	2105      	movs	r1, #5
 8001632:	4804      	ldr	r0, [pc, #16]	; (8001644 <Startup+0x30>)
 8001634:	f01b fd3c 	bl	801d0b0 <GUI_CreateDialogBox>

}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	080014ed 	.word	0x080014ed
 8001644:	0807e588 	.word	0x0807e588

08001648 <TurnLCDOff>:
  * @brief  Toggle LCD power
  * @param  None
  * @retval None
  */
int TurnLCDOff(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( GPIOH, GPIO_PIN_7, GPIO_PIN_RESET );
 800164c:	2200      	movs	r2, #0
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <TurnLCDOff+0x14>)
 8001652:	f003 f979 	bl	8004948 <HAL_GPIO_WritePin>

	return 1;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021c00 	.word	0x40021c00

08001660 <Upstairs>:
/**
  * @brief  Toggle upstairs light
  * @param  None
  * @retval None
  */
int Upstairs(void){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001664:	2120      	movs	r1, #32
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <Upstairs+0x1c>)
 8001668:	f003 f987 	bl	800497a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800166c:	2108      	movs	r1, #8
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <Upstairs+0x20>)
 8001670:	f003 f983 	bl	800497a <HAL_GPIO_TogglePin>
	return 1;
 8001674:	2301      	movs	r3, #1
}
 8001676:	4618      	mov	r0, r3
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40020c00 	.word	0x40020c00
 8001680:	40022800 	.word	0x40022800

08001684 <Downstairs>:
/**
  * @brief  Toggle downstairs light
  * @param  None
  * @retval None
  */
int Downstairs(void){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001688:	2140      	movs	r1, #64	; 0x40
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <Downstairs+0x1c>)
 800168c:	f003 f975 	bl	800497a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001690:	2110      	movs	r1, #16
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <Downstairs+0x20>)
 8001694:	f003 f971 	bl	800497a <HAL_GPIO_TogglePin>
	return 1;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021800 	.word	0x40021800
 80016a4:	40020c00 	.word	0x40020c00

080016a8 <TurnLCDOff_with_UT>:
/**
  * @brief  Extra layer to ensure func executing desired path.
  * @param  None
  * @retval None
  */
void TurnLCDOff_with_UT(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
    // Call the function to be tested
    int unitTestFlag = TurnLCDOff();
 80016ae:	f7ff ffcb 	bl	8001648 <TurnLCDOff>
 80016b2:	6078      	str	r0, [r7, #4]
    // IF FUNC DIDNT WORK PROPERLY
    if (unitTestFlag != 1) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d003      	beq.n	80016c2 <TurnLCDOff_with_UT+0x1a>
    	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80016ba:	2140      	movs	r1, #64	; 0x40
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <TurnLCDOff_with_UT+0x24>)
 80016be:	f003 f95c 	bl	800497a <HAL_GPIO_TogglePin>
    }
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021800 	.word	0x40021800

080016d0 <Upstairs_with_UT>:
/**
  * @brief  Extra layer to ensure func executing desired path.
  * @param  None
  * @retval None
  */
void Upstairs_with_UT(void) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
    // Call the function to be tested
    int unitTestFlag = Upstairs();
 80016d6:	f7ff ffc3 	bl	8001660 <Upstairs>
 80016da:	6078      	str	r0, [r7, #4]
    // IF FUNC DIDNT WORK PROPERLY
    if (unitTestFlag != 1) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d003      	beq.n	80016ea <Upstairs_with_UT+0x1a>
    	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80016e2:	2140      	movs	r1, #64	; 0x40
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <Upstairs_with_UT+0x24>)
 80016e6:	f003 f948 	bl	800497a <HAL_GPIO_TogglePin>
    }
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40021800 	.word	0x40021800

080016f8 <Downstairs_with_UT>:
/**
  * @brief  Extra layer to ensure func executing desired path.
  * @param  None
  * @retval None
  */
void Downstairs_with_UT(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
    // Call the function to be tested
    int unitTestFlag = Downstairs();
 80016fe:	f7ff ffc1 	bl	8001684 <Downstairs>
 8001702:	6078      	str	r0, [r7, #4]
    // IF FUNC DIDNT WORK PROPERLY
    if (unitTestFlag != 1) {
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d003      	beq.n	8001712 <Downstairs_with_UT+0x1a>
    	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800170a:	2140      	movs	r1, #64	; 0x40
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <Downstairs_with_UT+0x24>)
 800170e:	f003 f934 	bl	800497a <HAL_GPIO_TogglePin>
    }
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021800 	.word	0x40021800

08001720 <_OnPaint_back>:
/**
  * @brief  Paints back button
  * @param  hObj: button handle
  * @retval None
  */
static void _OnPaint_back(BUTTON_Handle hObj) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GUI_SetBkColor(FRAMEWIN_GetDefaultClientColor());
 8001728:	f01b ff9c 	bl	801d664 <FRAMEWIN_GetDefaultClientColor>
 800172c:	4603      	mov	r3, r0
 800172e:	4618      	mov	r0, r3
 8001730:	f010 f838 	bl	80117a4 <GUI_SetBkColor>
  GUI_Clear();
 8001734:	f010 f986 	bl	8011a44 <GUI_Clear>
  GUI_SetColor(GUI_ORANGE);
 8001738:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 800173c:	f010 f83e 	bl	80117bc <GUI_SetColor>
  GUI_AA_FillCircle(0, 0, 300);
 8001740:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001744:	2100      	movs	r1, #0
 8001746:	2000      	movs	r0, #0
 8001748:	f00e f97e 	bl	800fa48 <GUI_AA_FillCircle>
  GUI_SetBkColor(GUI_ORANGE);
 800174c:	f24a 50ff 	movw	r0, #42495	; 0xa5ff
 8001750:	f010 f828 	bl	80117a4 <GUI_SetBkColor>
  GUI_SetColor(GUI_WHITE);
 8001754:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001758:	f010 f830 	bl	80117bc <GUI_SetColor>
  GUI_SetFont(&GUI_FontLubalGraph32B);
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <_OnPaint_back+0x54>)
 800175e:	f010 f88f 	bl	8011880 <GUI_SetFont>
  GUI_DispStringAt("back", 20, 20);
 8001762:	2214      	movs	r2, #20
 8001764:	2114      	movs	r1, #20
 8001766:	4804      	ldr	r0, [pc, #16]	; (8001778 <_OnPaint_back+0x58>)
 8001768:	f010 fde6 	bl	8012338 <GUI_DispStringAt>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	08028bcc 	.word	0x08028bcc
 8001778:	0802547c 	.word	0x0802547c

0800177c <_cbButton_back>:
/**
  * @brief  callback for BACK button
  * @param  pMsg: pointer to data structure of type WM_MESSAGE
  * @retval None
  */
static void _cbButton_back(WM_MESSAGE * pMsg) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  switch (pMsg->MsgId) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d105      	bne.n	8001798 <_cbButton_back+0x1c>
    case WM_PAINT:
      _OnPaint_back(pMsg->hWin);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ffc5 	bl	8001720 <_OnPaint_back>
      break;
 8001796:	e003      	b.n	80017a0 <_cbButton_back+0x24>
    default:
      /* The original callback */
      BUTTON_Callback(pMsg);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f01b f9a9 	bl	801caf0 <BUTTON_Callback>
      break;
 800179e:	bf00      	nop
  }
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_cbDialog>:
/**
  * @brief  Callback routine of the main dialog
  * @param  pMsg: pointer to data structure of type WM_MESSAGE
  * @retval None
  */
static void _cbDialog(WM_MESSAGE * pMsg) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af04      	add	r7, sp, #16
 80017ae:	6078      	str	r0, [r7, #4]
  WM_HWIN hItem;
  int Id, NCode;

  switch (pMsg->MsgId) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f240 1213 	movw	r2, #275	; 0x113
 80017b8:	4293      	cmp	r3, r2
 80017ba:	f000 808e 	beq.w	80018da <_cbDialog+0x132>
 80017be:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80017c2:	f280 80d1 	bge.w	8001968 <_cbDialog+0x1c0>
 80017c6:	2b1d      	cmp	r3, #29
 80017c8:	d003      	beq.n	80017d2 <_cbDialog+0x2a>
 80017ca:	2b26      	cmp	r3, #38	; 0x26
 80017cc:	f000 80a7 	beq.w	800191e <_cbDialog+0x176>
 80017d0:	e0ca      	b.n	8001968 <_cbDialog+0x1c0>
  case WM_INIT_DIALOG:
    
    frame = 0;
 80017d2:	4b6b      	ldr	r3, [pc, #428]	; (8001980 <_cbDialog+0x1d8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
    hTimer = WM_CreateTimer(pMsg->hWin, 0, 50, 0);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6858      	ldr	r0, [r3, #4]
 80017dc:	2300      	movs	r3, #0
 80017de:	2232      	movs	r2, #50	; 0x32
 80017e0:	2100      	movs	r1, #0
 80017e2:	f01a fb93 	bl	801bf0c <WM_CreateTimer>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a66      	ldr	r2, [pc, #408]	; (8001984 <_cbDialog+0x1dc>)
 80017ea:	6013      	str	r3, [r2, #0]

    hItem = BUTTON_CreateEx(700, 0, 100, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_BUTTON_BACK);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f44f 6202 	mov.w	r2, #2080	; 0x820
 80017f4:	9203      	str	r2, [sp, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	9202      	str	r2, [sp, #8]
 80017fa:	2202      	movs	r2, #2
 80017fc:	9201      	str	r2, [sp, #4]
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2364      	movs	r3, #100	; 0x64
 8001802:	2264      	movs	r2, #100	; 0x64
 8001804:	2100      	movs	r1, #0
 8001806:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800180a:	f01b fa29 	bl	801cc60 <BUTTON_CreateEx>
 800180e:	60f8      	str	r0, [r7, #12]
    WM_SetCallback(hItem, _cbButton_back);
 8001810:	495d      	ldr	r1, [pc, #372]	; (8001988 <_cbDialog+0x1e0>)
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f019 fec4 	bl	801b5a0 <WM_SetCallback>
    
    /* Initialization of 'Board*/
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_BOARD);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f640 0102 	movw	r1, #2050	; 0x802
 8001820:	4618      	mov	r0, r3
 8001822:	f019 fcad 	bl	801b180 <WM_GetDialogItem>
 8001826:	60f8      	str	r0, [r7, #12]
    TEXT_SetFont(hItem, &GUI_FontLubalGraph32B);
 8001828:	4958      	ldr	r1, [pc, #352]	; (800198c <_cbDialog+0x1e4>)
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f01c fbc4 	bl	801dfb8 <TEXT_SetFont>
    TEXT_SetTextColor(hItem, GUI_STCOLOR_DARKBLUE);
 8001830:	4957      	ldr	r1, [pc, #348]	; (8001990 <_cbDialog+0x1e8>)
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f01c fbda 	bl	801dfec <TEXT_SetTextColor>

    /* Initialization of 'CPU Speed : 180MHz' */
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_CPU);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f640 0104 	movw	r1, #2052	; 0x804
 8001840:	4618      	mov	r0, r3
 8001842:	f019 fc9d 	bl	801b180 <WM_GetDialogItem>
 8001846:	60f8      	str	r0, [r7, #12]
    TEXT_SetFont(hItem, &GUI_FontLubalGraph32B);
 8001848:	4950      	ldr	r1, [pc, #320]	; (800198c <_cbDialog+0x1e4>)
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f01c fbb4 	bl	801dfb8 <TEXT_SetFont>
    TEXT_SetTextColor(hItem, GUI_STCOLOR_DARKBLUE);
 8001850:	494f      	ldr	r1, [pc, #316]	; (8001990 <_cbDialog+0x1e8>)
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f01c fbca 	bl	801dfec <TEXT_SetTextColor>

    /* Initialization of 'Firmware Version*/
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_VERSION);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f640 0105 	movw	r1, #2053	; 0x805
 8001860:	4618      	mov	r0, r3
 8001862:	f019 fc8d 	bl	801b180 <WM_GetDialogItem>
 8001866:	60f8      	str	r0, [r7, #12]
    TEXT_SetFont(hItem, &GUI_FontLubalGraph32B);
 8001868:	4948      	ldr	r1, [pc, #288]	; (800198c <_cbDialog+0x1e4>)
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f01c fba4 	bl	801dfb8 <TEXT_SetFont>
    TEXT_SetTextColor(hItem, GUI_STCOLOR_DARKBLUE); 
 8001870:	4947      	ldr	r1, [pc, #284]	; (8001990 <_cbDialog+0x1e8>)
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f01c fbba 	bl	801dfec <TEXT_SetTextColor>

    /* Initialization of 'Board*/
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_BOARD_1);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f640 0107 	movw	r1, #2055	; 0x807
 8001880:	4618      	mov	r0, r3
 8001882:	f019 fc7d 	bl	801b180 <WM_GetDialogItem>
 8001886:	60f8      	str	r0, [r7, #12]
    TEXT_SetFont(hItem, &GUI_FontLubalGraph32B);
 8001888:	4940      	ldr	r1, [pc, #256]	; (800198c <_cbDialog+0x1e4>)
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f01c fb94 	bl	801dfb8 <TEXT_SetFont>
    TEXT_SetTextColor(hItem, GUI_STCOLOR_LIGHTBLUE);
 8001890:	4940      	ldr	r1, [pc, #256]	; (8001994 <_cbDialog+0x1ec>)
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f01c fbaa 	bl	801dfec <TEXT_SetTextColor>
    

    /* Initialization of 'CPU Speed : 180MHz' */
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_CPU_1);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f640 0109 	movw	r1, #2057	; 0x809
 80018a0:	4618      	mov	r0, r3
 80018a2:	f019 fc6d 	bl	801b180 <WM_GetDialogItem>
 80018a6:	60f8      	str	r0, [r7, #12]
    TEXT_SetFont(hItem, &GUI_FontLubalGraph32B);
 80018a8:	4938      	ldr	r1, [pc, #224]	; (800198c <_cbDialog+0x1e4>)
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f01c fb84 	bl	801dfb8 <TEXT_SetFont>
    TEXT_SetTextColor(hItem, GUI_STCOLOR_LIGHTBLUE);
 80018b0:	4938      	ldr	r1, [pc, #224]	; (8001994 <_cbDialog+0x1ec>)
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f01c fb9a 	bl	801dfec <TEXT_SetTextColor>

    /* Initialization of 'Firmware Version*/
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_VERSION_1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f640 010a 	movw	r1, #2058	; 0x80a
 80018c0:	4618      	mov	r0, r3
 80018c2:	f019 fc5d 	bl	801b180 <WM_GetDialogItem>
 80018c6:	60f8      	str	r0, [r7, #12]
    TEXT_SetFont(hItem, &GUI_FontLubalGraph32B);
 80018c8:	4930      	ldr	r1, [pc, #192]	; (800198c <_cbDialog+0x1e4>)
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f01c fb74 	bl	801dfb8 <TEXT_SetFont>
    TEXT_SetTextColor(hItem, GUI_STCOLOR_LIGHTBLUE); 
 80018d0:	4930      	ldr	r1, [pc, #192]	; (8001994 <_cbDialog+0x1ec>)
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f01c fb8a 	bl	801dfec <TEXT_SetTextColor>
    

    break;     
 80018d8:	e04d      	b.n	8001976 <_cbDialog+0x1ce>


  case WM_TIMER:
    if(frame < 4)
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <_cbDialog+0x1d8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d810      	bhi.n	8001904 <_cbDialog+0x15c>
    {
      WM_InvalidateWindow(pMsg->hWin);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f018 fb32 	bl	8019f50 <WM_InvalidateWindow>
      WM_RestartTimer(pMsg->Data.v, 50);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2132      	movs	r1, #50	; 0x32
 80018f2:	4618      	mov	r0, r3
 80018f4:	f01a fb4a 	bl	801bf8c <WM_RestartTimer>
      frame++;
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <_cbDialog+0x1d8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	4a20      	ldr	r2, [pc, #128]	; (8001980 <_cbDialog+0x1d8>)
 8001900:	6013      	str	r3, [r2, #0]
      {
        WM_DeleteTimer(hTimer);
        hTimer = 0;
      }
    }
    break;
 8001902:	e035      	b.n	8001970 <_cbDialog+0x1c8>
      if(hTimer != 0)
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <_cbDialog+0x1dc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d031      	beq.n	8001970 <_cbDialog+0x1c8>
        WM_DeleteTimer(hTimer);
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <_cbDialog+0x1dc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f01a fadf 	bl	801bed4 <WM_DeleteTimer>
        hTimer = 0;
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <_cbDialog+0x1dc>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
    break;
 800191c:	e028      	b.n	8001970 <_cbDialog+0x1c8>
       
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);    /* Id of widget */
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	4618      	mov	r0, r3
 8001924:	f019 fcac 	bl	801b280 <WM_GetId>
 8001928:	6178      	str	r0, [r7, #20]
    NCode = pMsg->Data.v;               /* Notification code */
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f5b3 6f02 	cmp.w	r3, #2080	; 0x820
 8001936:	d11d      	bne.n	8001974 <_cbDialog+0x1cc>
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d112      	bne.n	8001964 <_cbDialog+0x1bc>
       
    switch(Id) {
    case ID_BUTTON_BACK:
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
        if(hTimer != 0)
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_cbDialog+0x1dc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <_cbDialog+0x1ae>
        {
          WM_DeleteTimer(hTimer);
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <_cbDialog+0x1dc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f01a fac2 	bl	801bed4 <WM_DeleteTimer>
          hTimer = 0;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <_cbDialog+0x1dc>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
        }
        GUI_EndDialog(pMsg->hWin, 0);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f01b fc0b 	bl	801d178 <GUI_EndDialog>

        break;
 8001962:	bf00      	nop
      }
      break;
 8001964:	bf00      	nop
    }
    break;
 8001966:	e005      	b.n	8001974 <_cbDialog+0x1cc>
  default:
    WM_DefaultProc(pMsg);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f019 f8d7 	bl	801ab1c <WM_DefaultProc>
    break;
 800196e:	e002      	b.n	8001976 <_cbDialog+0x1ce>
    break;
 8001970:	bf00      	nop
 8001972:	e000      	b.n	8001976 <_cbDialog+0x1ce>
    break;
 8001974:	bf00      	nop
  }    
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200082f4 	.word	0x200082f4
 8001984:	200082f0 	.word	0x200082f0
 8001988:	0800177d 	.word	0x0800177d
 800198c:	08028bcc 	.word	0x08028bcc
 8001990:	00522000 	.word	0x00522000
 8001994:	00dca939 	.word	0x00dca939

08001998 <Startup>:
  * @param  xpos: X position 
  * @param  ypos: Y position
  * @retval None
  */
static void Startup(WM_HWIN hWin, uint16_t xpos, uint16_t ypos)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af02      	add	r7, sp, #8
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	803b      	strh	r3, [r7, #0]
  GUI_CreateDialogBox(_aDialog, GUI_COUNTOF(_aDialog), _cbDialog, hWin, xpos, ypos);
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	883a      	ldrh	r2, [r7, #0]
 80019ac:	9201      	str	r2, [sp, #4]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <Startup+0x2c>)
 80019b4:	2108      	movs	r1, #8
 80019b6:	4804      	ldr	r0, [pc, #16]	; (80019c8 <Startup+0x30>)
 80019b8:	f01b fb7a 	bl	801d0b0 <GUI_CreateDialogBox>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	080017a9 	.word	0x080017a9
 80019c8:	0807e678 	.word	0x0807e678

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019d2:	490e      	ldr	r1, [pc, #56]	; (8001a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e8:	4c0b      	ldr	r4, [pc, #44]	; (8001a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019f6:	f001 fb05 	bl	8003004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f023 fc93 	bl	8025324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7ff f90f 	bl	8000c20 <main>
  bx  lr    
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	2000057c 	.word	0x2000057c
  ldr r2, =_sidata
 8001a10:	0807e81c 	.word	0x0807e81c
  ldr r2, =_sbss
 8001a14:	2000057c 	.word	0x2000057c
  ldr r4, =_ebss
 8001a18:	20035ebc 	.word	0x20035ebc

08001a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC_IRQHandler>
	...

08001a20 <vApplicationIdleHook>:
  * @brief  Application Idle Hook
  * @param  None
  * @retval None
  */
void vApplicationIdleHook(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  if( xIdleHandle == NULL )
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <vApplicationIdleHook+0x1c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d104      	bne.n	8001a36 <vApplicationIdleHook+0x16>
  {
    /* Store the handle to the idle task. */
    xIdleHandle = xTaskGetCurrentTaskHandle();
 8001a2c:	f00b fe08 	bl	800d640 <xTaskGetCurrentTaskHandle>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4a02      	ldr	r2, [pc, #8]	; (8001a3c <vApplicationIdleHook+0x1c>)
 8001a34:	6013      	str	r3, [r2, #0]
  }
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200082f8 	.word	0x200082f8

08001a40 <vApplicationTickHook>:
  * @brief  Application Idle Hook
  * @param  None
  * @retval None
  */
void vApplicationTickHook (void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  static int tick = 0;

  if(tick ++ > CALCULATION_PERIOD)
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <vApplicationTickHook+0x58>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	4913      	ldr	r1, [pc, #76]	; (8001a98 <vApplicationTickHook+0x58>)
 8001a4c:	600a      	str	r2, [r1, #0]
 8001a4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a52:	dd1b      	ble.n	8001a8c <vApplicationTickHook+0x4c>
  {
    tick = 0;
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <vApplicationTickHook+0x58>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

    if(osCPU_TotalIdleTime > 1000)
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <vApplicationTickHook+0x5c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a62:	d903      	bls.n	8001a6c <vApplicationTickHook+0x2c>
    {
      osCPU_TotalIdleTime = 1000;
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <vApplicationTickHook+0x5c>)
 8001a66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a6a:	601a      	str	r2, [r3, #0]
    }
    osCPU_Usage = (100 - (osCPU_TotalIdleTime * 100) / CALCULATION_PERIOD);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <vApplicationTickHook+0x5c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2264      	movs	r2, #100	; 0x64
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <vApplicationTickHook+0x60>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	099b      	lsrs	r3, r3, #6
 8001a7e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001a82:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <vApplicationTickHook+0x64>)
 8001a84:	6013      	str	r3, [r2, #0]
    osCPU_TotalIdleTime = 0;
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <vApplicationTickHook+0x5c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	2000830c 	.word	0x2000830c
 8001a9c:	20008308 	.word	0x20008308
 8001aa0:	10624dd3 	.word	0x10624dd3
 8001aa4:	200082fc 	.word	0x200082fc

08001aa8 <StartIdleMonitor>:
  * @brief  Start Idle monitor
  * @param  None
  * @retval None
  */
void StartIdleMonitor (void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  if( xTaskGetCurrentTaskHandle() == xIdleHandle )
 8001aac:	f00b fdc8 	bl	800d640 <xTaskGetCurrentTaskHandle>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <StartIdleMonitor+0x20>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d104      	bne.n	8001ac4 <StartIdleMonitor+0x1c>
  {
    osCPU_IdleStartTime = xTaskGetTickCountFromISR();
 8001aba:	f00b faa3 	bl	800d004 <xTaskGetTickCountFromISR>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4a02      	ldr	r2, [pc, #8]	; (8001acc <StartIdleMonitor+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200082f8 	.word	0x200082f8
 8001acc:	20008300 	.word	0x20008300

08001ad0 <EndIdleMonitor>:
  * @brief  Stop Idle monitor
  * @param  None
  * @retval None
  */
void EndIdleMonitor (void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  if( xTaskGetCurrentTaskHandle() == xIdleHandle )
 8001ad4:	f00b fdb4 	bl	800d640 <xTaskGetCurrentTaskHandle>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <EndIdleMonitor+0x34>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d10e      	bne.n	8001b00 <EndIdleMonitor+0x30>
  {
    /* Store the handle to the idle task. */
    osCPU_IdleSpentTime = xTaskGetTickCountFromISR() - osCPU_IdleStartTime;
 8001ae2:	f00b fa8f 	bl	800d004 <xTaskGetTickCountFromISR>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <EndIdleMonitor+0x38>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <EndIdleMonitor+0x3c>)
 8001af0:	6013      	str	r3, [r2, #0]
    osCPU_TotalIdleTime += osCPU_IdleSpentTime;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <EndIdleMonitor+0x40>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <EndIdleMonitor+0x3c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <EndIdleMonitor+0x40>)
 8001afe:	6013      	str	r3, [r2, #0]
  }
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200082f8 	.word	0x200082f8
 8001b08:	20008300 	.word	0x20008300
 8001b0c:	20008304 	.word	0x20008304
 8001b10:	20008308 	.word	0x20008308

08001b14 <ft6x06_Init>:
  *         from MCU to FT6xx6 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f90d 	bl	8001d40 <ft6x06_GetInstance>
 8001b26:	4603      	mov	r3, r0
 8001b28:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	2bff      	cmp	r3, #255	; 0xff
 8001b2e:	d10e      	bne.n	8001b4e <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8001b30:	2000      	movs	r0, #0
 8001b32:	f000 f905 	bl	8001d40 <ft6x06_GetInstance>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8001b3a:	7bbb      	ldrb	r3, [r7, #14]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d806      	bhi.n	8001b4e <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	88fa      	ldrh	r2, [r7, #6]
 8001b44:	b2d1      	uxtb	r1, r2
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <ft6x06_Init+0x44>)
 8001b48:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8001b4a:	f000 fc5f 	bl	800240c <TS_IO_Init>
    }
  }
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20008310 	.word	0x20008310

08001b5c <ft6x06_Reset>:
  *         @note : Not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6xx6 IC */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <ft6x06_ReadID>:
  *         able to read the FT6xx6 device ID, and verify this is a FT6xx6.
  * @param  DeviceAddr: I2C FT6xx6 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8001b7c:	f000 fc46 	bl	800240c <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	21a8      	movs	r1, #168	; 0xa8
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fc59 	bl	800243e <TS_IO_Read>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b29b      	uxth	r3, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6xx6 */
  ft6x06_TS_Configure(DeviceAddr);
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f8bc 	bl	8001d22 <ft6x06_TS_Configure>

  /* By default set FT6xx6 IC in Polling mode : no INT generation on FT6xx6 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 f88d 	bl	8001ccc <ft6x06_TS_DisableIT>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2102      	movs	r1, #2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fc34 	bl	800243e <TS_IO_Read>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6xx6 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <ft6x06_TS_DetectTouch+0x50>)
 8001bf8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <ft6x06_TS_DetectTouch+0x50>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	b2db      	uxtb	r3, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20008314 	.word	0x20008314

08001c10 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <ft6x06_TS_GetXY+0x90>)
 8001c24:	789a      	ldrb	r2, [r3, #2]
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <ft6x06_TS_GetXY+0x90>)
 8001c28:	785b      	ldrb	r3, [r3, #1]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d234      	bcs.n	8001c98 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <ft6x06_TS_GetXY+0x90>)
 8001c30:	789b      	ldrb	r3, [r3, #2]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <ft6x06_TS_GetXY+0x2c>
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d003      	beq.n	8001c42 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8001c3a:	e005      	b.n	8001c48 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8001c40:	e002      	b.n	8001c48 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8001c42:	2309      	movs	r3, #9
 8001c44:	75fb      	strb	r3, [r7, #23]
      break;
 8001c46:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8001c48:	89fb      	ldrh	r3, [r7, #14]
 8001c4a:	b2d8      	uxtb	r0, r3
 8001c4c:	f107 0210 	add.w	r2, r7, #16
 8001c50:	7df9      	ldrb	r1, [r7, #23]
 8001c52:	2304      	movs	r3, #4
 8001c54:	f000 fc06 	bl	8002464 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8001c58:	7c3b      	ldrb	r3, [r7, #16]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	7c7b      	ldrb	r3, [r7, #17]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8001c72:	7cbb      	ldrb	r3, [r7, #18]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c7c:	b21a      	sxth	r2, r3
 8001c7e:	7cfb      	ldrb	r3, [r7, #19]
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b21b      	sxth	r3, r3
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <ft6x06_TS_GetXY+0x90>)
 8001c8e:	789b      	ldrb	r3, [r3, #2]
 8001c90:	3301      	adds	r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <ft6x06_TS_GetXY+0x90>)
 8001c96:	709a      	strb	r2, [r3, #2]
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20008314 	.word	0x20008314

08001ca4 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	21a4      	movs	r1, #164	; 0xa4
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fbaa 	bl	8002418 <TS_IO_Write>
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	21a4      	movs	r1, #164	; 0xa4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fb96 	bl	8002418 <TS_IO_Write>
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6xx6 */
  return 0;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6xx6 */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6xx6 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6xx6 */

  return(status);
 8001d30:	68fb      	ldr	r3, [r7, #12]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e00b      	b.n	8001d6c <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <ft6x06_GetInstance+0x40>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	88fa      	ldrh	r2, [r7, #6]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d101      	bne.n	8001d66 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	e006      	b.n	8001d74 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d9f0      	bls.n	8001d54 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8001d72:	23ff      	movs	r3, #255	; 0xff
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	20008310 	.word	0x20008310

08001d84 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b0b2      	sub	sp, #200	; 0xc8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 8001d8e:	2078      	movs	r0, #120	; 0x78
 8001d90:	f000 fb82 	bl	8002498 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8001d94:	4ac8      	ldr	r2, [pc, #800]	; (80020b8 <NT35510_Init+0x334>)
 8001d96:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d9e:	6018      	str	r0, [r3, #0]
 8001da0:	3304      	adds	r3, #4
 8001da2:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8001da4:	4bc5      	ldr	r3, [pc, #788]	; (80020bc <NT35510_Init+0x338>)
 8001da6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 8001daa:	4bc5      	ldr	r3, [pc, #788]	; (80020c0 <NT35510_Init+0x33c>)
 8001dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8001db0:	4bc4      	ldr	r3, [pc, #784]	; (80020c4 <NT35510_Init+0x340>)
 8001db2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8001db6:	4bc4      	ldr	r3, [pc, #784]	; (80020c8 <NT35510_Init+0x344>)
 8001db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8001dbc:	4bc3      	ldr	r3, [pc, #780]	; (80020cc <NT35510_Init+0x348>)
 8001dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 8001dc2:	4bc3      	ldr	r3, [pc, #780]	; (80020d0 <NT35510_Init+0x34c>)
 8001dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8001dc8:	f240 13bf 	movw	r3, #447	; 0x1bf
 8001dcc:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8001dd0:	4bc0      	ldr	r3, [pc, #768]	; (80020d4 <NT35510_Init+0x350>)
 8001dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 8001dd6:	4bc0      	ldr	r3, [pc, #768]	; (80020d8 <NT35510_Init+0x354>)
 8001dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 8001ddc:	4bbf      	ldr	r3, [pc, #764]	; (80020dc <NT35510_Init+0x358>)
 8001dde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8001de2:	4bbf      	ldr	r3, [pc, #764]	; (80020e0 <NT35510_Init+0x35c>)
 8001de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8001de8:	4bbe      	ldr	r3, [pc, #760]	; (80020e4 <NT35510_Init+0x360>)
 8001dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 8001dee:	4bbe      	ldr	r3, [pc, #760]	; (80020e8 <NT35510_Init+0x364>)
 8001df0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8001df4:	4abd      	ldr	r2, [pc, #756]	; (80020ec <NT35510_Init+0x368>)
 8001df6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	8019      	strh	r1, [r3, #0]
 8001e00:	3302      	adds	r3, #2
 8001e02:	0c12      	lsrs	r2, r2, #16
 8001e04:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8001e06:	4aba      	ldr	r2, [pc, #744]	; (80020f0 <NT35510_Init+0x36c>)
 8001e08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e10:	6018      	str	r0, [r3, #0]
 8001e12:	3304      	adds	r3, #4
 8001e14:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8001e16:	4ab7      	ldr	r2, [pc, #732]	; (80020f4 <NT35510_Init+0x370>)
 8001e18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	8019      	strh	r1, [r3, #0]
 8001e22:	3302      	adds	r3, #2
 8001e24:	0c12      	lsrs	r2, r2, #16
 8001e26:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8001e28:	f240 33b6 	movw	r3, #950	; 0x3b6
 8001e2c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8001e30:	f245 13b5 	movw	r3, #20917	; 0x51b5
 8001e34:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8001e38:	4aaf      	ldr	r2, [pc, #700]	; (80020f8 <NT35510_Init+0x374>)
 8001e3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	4611      	mov	r1, r2
 8001e42:	8019      	strh	r1, [r3, #0]
 8001e44:	3302      	adds	r3, #2
 8001e46:	0c12      	lsrs	r2, r2, #16
 8001e48:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8001e4a:	4aac      	ldr	r2, [pc, #688]	; (80020fc <NT35510_Init+0x378>)
 8001e4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e54:	6018      	str	r0, [r3, #0]
 8001e56:	3304      	adds	r3, #4
 8001e58:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8001e5a:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 8001e5e:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8001e60:	4ba7      	ldr	r3, [pc, #668]	; (8002100 <NT35510_Init+0x37c>)
 8001e62:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 8001e64:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8001e68:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8001e6c:	2336      	movs	r3, #54	; 0x36
 8001e6e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 8001e72:	4aa4      	ldr	r2, [pc, #656]	; (8002104 <NT35510_Init+0x380>)
 8001e74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e7c:	6018      	str	r0, [r3, #0]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 8001e82:	4aa1      	ldr	r2, [pc, #644]	; (8002108 <NT35510_Init+0x384>)
 8001e84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e8c:	6018      	str	r0, [r3, #0]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 8001e92:	f246 0336 	movw	r3, #24630	; 0x6036
 8001e96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 8001e9a:	4a9c      	ldr	r2, [pc, #624]	; (800210c <NT35510_Init+0x388>)
 8001e9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ea4:	6018      	str	r0, [r3, #0]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 8001eaa:	4a99      	ldr	r2, [pc, #612]	; (8002110 <NT35510_Init+0x38c>)
 8001eac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eb4:	6018      	str	r0, [r3, #0]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 8001eba:	2335      	movs	r3, #53	; 0x35
 8001ebc:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 8001ebe:	2311      	movs	r3, #17
 8001ec0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 8001ec2:	2329      	movs	r3, #41	; 0x29
 8001ec4:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 8001ec6:	f647 7351 	movw	r3, #32593	; 0x7f51
 8001eca:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8001ecc:	f642 4353 	movw	r3, #11347	; 0x2c53
 8001ed0:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8001ed2:	f240 2355 	movw	r3, #597	; 0x255
 8001ed6:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8001ed8:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8001edc:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8001ede:	232c      	movs	r3, #44	; 0x2c
 8001ee0:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 8001ee2:	f245 533a 	movw	r3, #21818	; 0x553a
 8001ee6:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8001ee8:	f247 733a 	movw	r3, #30522	; 0x773a
 8001eec:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8001eee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	2005      	movs	r0, #5
 8001ef6:	f00c f94f 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8001efa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001efe:	4619      	mov	r1, r3
 8001f00:	2003      	movs	r0, #3
 8001f02:	f00c f949 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8001f06:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f00c f943 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8001f12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f16:	4619      	mov	r1, r3
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f00c f93d 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 8001f1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f22:	4619      	mov	r1, r3
 8001f24:	2003      	movs	r0, #3
 8001f26:	f00c f937 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8001f2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f2e:	4619      	mov	r1, r3
 8001f30:	2003      	movs	r0, #3
 8001f32:	f00c f931 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8001f36:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f00c f92b 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8001f42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f46:	4619      	mov	r1, r3
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f00c f925 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 8001f4e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f52:	4619      	mov	r1, r3
 8001f54:	2003      	movs	r0, #3
 8001f56:	f00c f91f 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8001f5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	2003      	movs	r0, #3
 8001f62:	f00c f919 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8001f66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f00c f913 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8001f72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f76:	4619      	mov	r1, r3
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f00c f90d 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 8001f7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f82:	4619      	mov	r1, r3
 8001f84:	2003      	movs	r0, #3
 8001f86:	f00c f907 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8001f8a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f8e:	4619      	mov	r1, r3
 8001f90:	2003      	movs	r0, #3
 8001f92:	f00c f901 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 8001f96:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	f00c f8fb 	bl	800e198 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8001fa2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	2005      	movs	r0, #5
 8001faa:	f00c f8f5 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 8001fae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f00c f8ef 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 8001fba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f00c f8e9 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 8001fc6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fca:	4619      	mov	r1, r3
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f00c f8e3 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 8001fd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	2002      	movs	r0, #2
 8001fda:	f00c f8dd 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 8001fde:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	2004      	movs	r0, #4
 8001fe6:	f00c f8d7 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 8001fea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fee:	4619      	mov	r1, r3
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f00c f8d1 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 8001ff6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f00c f8cb 	bl	800e198 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 8002002:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002006:	4619      	mov	r1, r3
 8002008:	2001      	movs	r0, #1
 800200a:	f00c f8c5 	bl	800e198 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 800200e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002012:	4619      	mov	r1, r3
 8002014:	2000      	movs	r0, #0
 8002016:	f00c f8bf 	bl	800e198 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	4619      	mov	r1, r3
 8002020:	2000      	movs	r0, #0
 8002022:	f00c f8b9 	bl	800e198 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8002026:	20c8      	movs	r0, #200	; 0xc8
 8002028:	f000 fa36 	bl	8002498 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d112      	bne.n	8002058 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8002032:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002036:	4619      	mov	r1, r3
 8002038:	2001      	movs	r0, #1
 800203a:	f00c f8ad 	bl	800e198 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 800203e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002042:	4619      	mov	r1, r3
 8002044:	2004      	movs	r0, #4
 8002046:	f00c f8a7 	bl	800e198 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 800204a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800204e:	4619      	mov	r1, r3
 8002050:	2004      	movs	r0, #4
 8002052:	f00c f8a1 	bl	800e198 <DSI_IO_WriteCmd>
 8002056:	e011      	b.n	800207c <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8002058:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800205c:	4619      	mov	r1, r3
 800205e:	2001      	movs	r0, #1
 8002060:	f00c f89a 	bl	800e198 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 8002064:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002068:	4619      	mov	r1, r3
 800206a:	2004      	movs	r0, #4
 800206c:	f00c f894 	bl	800e198 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8002070:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002074:	4619      	mov	r1, r3
 8002076:	2004      	movs	r0, #4
 8002078:	f00c f88e 	bl	800e198 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 800207c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002080:	4619      	mov	r1, r3
 8002082:	2000      	movs	r0, #0
 8002084:	f00c f888 	bl	800e198 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8002088:	2078      	movs	r0, #120	; 0x78
 800208a:	f000 fa05 	bl	8002498 <NT35510_IO_Delay>

  switch(ColorCoding)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d009      	beq.n	80020a8 <NT35510_Init+0x324>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d13c      	bne.n	8002114 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	4619      	mov	r1, r3
 80020a0:	2001      	movs	r0, #1
 80020a2:	f00c f879 	bl	800e198 <DSI_IO_WriteCmd>
      break;
 80020a6:	e03c      	b.n	8002122 <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	4619      	mov	r1, r3
 80020ae:	2001      	movs	r0, #1
 80020b0:	f00c f872 	bl	800e198 <DSI_IO_WriteCmd>
      break;
 80020b4:	e035      	b.n	8002122 <NT35510_Init+0x39e>
 80020b6:	bf00      	nop
 80020b8:	08025484 	.word	0x08025484
 80020bc:	b0030303 	.word	0xb0030303
 80020c0:	b6464646 	.word	0xb6464646
 80020c4:	b1030303 	.word	0xb1030303
 80020c8:	b7363636 	.word	0xb7363636
 80020cc:	b2020000 	.word	0xb2020000
 80020d0:	b8262626 	.word	0xb8262626
 80020d4:	b3090909 	.word	0xb3090909
 80020d8:	b9363636 	.word	0xb9363636
 80020dc:	b5080808 	.word	0xb5080808
 80020e0:	ba262626 	.word	0xba262626
 80020e4:	bc008000 	.word	0xbc008000
 80020e8:	bd008000 	.word	0xbd008000
 80020ec:	0802548c 	.word	0x0802548c
 80020f0:	08025490 	.word	0x08025490
 80020f4:	08025498 	.word	0x08025498
 80020f8:	0802549c 	.word	0x0802549c
 80020fc:	080254a0 	.word	0x080254a0
 8002100:	cc000003 	.word	0xcc000003
 8002104:	080254a8 	.word	0x080254a8
 8002108:	080254b0 	.word	0x080254b0
 800210c:	080254b8 	.word	0x080254b8
 8002110:	080254c0 	.word	0x080254c0
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	4619      	mov	r1, r3
 800211a:	2001      	movs	r0, #1
 800211c:	f00c f83c 	bl	800e198 <DSI_IO_WriteCmd>
      break;
 8002120:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 8002122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002126:	4619      	mov	r1, r3
 8002128:	2001      	movs	r0, #1
 800212a:	f00c f835 	bl	800e198 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 800212e:	f107 0320 	add.w	r3, r7, #32
 8002132:	4619      	mov	r1, r3
 8002134:	2001      	movs	r0, #1
 8002136:	f00c f82f 	bl	800e198 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	2001      	movs	r0, #1
 8002142:	f00c f829 	bl	800e198 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8002146:	f107 0318 	add.w	r3, r7, #24
 800214a:	4619      	mov	r1, r3
 800214c:	2001      	movs	r0, #1
 800214e:	f00c f823 	bl	800e198 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 8002152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002156:	4619      	mov	r1, r3
 8002158:	2000      	movs	r0, #0
 800215a:	f00c f81d 	bl	800e198 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	2000      	movs	r0, #0
 8002166:	f00c f817 	bl	800e198 <DSI_IO_WriteCmd>

  return 0;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	37c8      	adds	r7, #200	; 0xc8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <I2C1_MspInit>:
/******************************* I2C Routines *********************************/
/**
  * @brief  Initializes I2C MSP.
  */
static void I2C1_MspInit(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	4b40      	ldr	r3, [pc, #256]	; (8002280 <I2C1_MspInit+0x10c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a3f      	ldr	r2, [pc, #252]	; (8002280 <I2C1_MspInit+0x10c>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <I2C1_MspInit+0x10c>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]

#if defined(USE_STM32469I_DISCO_REVC)
  /* Perform 10 pulses on SCL to unlock I2C devices if previous I2C transaction aborted.*/
  /* This configuration is needed with STM32F469i Disco RevC when using touch screen controller FT6336U */
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 8002196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219a:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
 800219c:	2311      	movs	r3, #17
 800219e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80021a4:	2302      	movs	r3, #2
 80021a6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init( DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure );
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	4619      	mov	r1, r3
 80021b2:	4834      	ldr	r0, [pc, #208]	; (8002284 <I2C1_MspInit+0x110>)
 80021b4:	f002 fa1c 	bl	80045f0 <HAL_GPIO_Init>
  for(uint8_t count = 10; count > 0; count-- )
 80021b8:	230a      	movs	r3, #10
 80021ba:	77fb      	strb	r3, [r7, #31]
 80021bc:	e014      	b.n	80021e8 <I2C1_MspInit+0x74>
  {
    HAL_GPIO_WritePin( DISCO_I2C1_SCL_SDA_GPIO_PORT, DISCO_I2C1_SCL_PIN, GPIO_PIN_SET );
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c4:	482f      	ldr	r0, [pc, #188]	; (8002284 <I2C1_MspInit+0x110>)
 80021c6:	f002 fbbf 	bl	8004948 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f000 ff92 	bl	80030f4 <HAL_Delay>
    HAL_GPIO_WritePin( DISCO_I2C1_SCL_SDA_GPIO_PORT, DISCO_I2C1_SCL_PIN, GPIO_PIN_RESET );
 80021d0:	2200      	movs	r2, #0
 80021d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d6:	482b      	ldr	r0, [pc, #172]	; (8002284 <I2C1_MspInit+0x110>)
 80021d8:	f002 fbb6 	bl	8004948 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80021dc:	2001      	movs	r0, #1
 80021de:	f000 ff89 	bl	80030f4 <HAL_Delay>
  for(uint8_t count = 10; count > 0; count-- )
 80021e2:	7ffb      	ldrb	r3, [r7, #31]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	77fb      	strb	r3, [r7, #31]
 80021e8:	7ffb      	ldrb	r3, [r7, #31]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1e7      	bne.n	80021be <I2C1_MspInit+0x4a>
  }
#endif /* USE_STM32469I_DISCO_REVC */

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 80021ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f2:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80021f4:	2312      	movs	r3, #18
 80021f6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80021fc:	2302      	movs	r3, #2
 80021fe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 8002200:	2304      	movs	r3, #4
 8002202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	4619      	mov	r1, r3
 800220a:	481e      	ldr	r0, [pc, #120]	; (8002284 <I2C1_MspInit+0x110>)
 800220c:	f002 f9f0 	bl	80045f0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 8002210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002214:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	4619      	mov	r1, r3
 800221c:	4819      	ldr	r0, [pc, #100]	; (8002284 <I2C1_MspInit+0x110>)
 800221e:	f002 f9e7 	bl	80045f0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCO_I2C1_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <I2C1_MspInit+0x10c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a15      	ldr	r2, [pc, #84]	; (8002280 <I2C1_MspInit+0x10c>)
 800222c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <I2C1_MspInit+0x10c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]

  /* Force the I2C peripheral clock reset */
  DISCO_I2C1_FORCE_RESET();
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <I2C1_MspInit+0x10c>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <I2C1_MspInit+0x10c>)
 8002244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002248:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCO_I2C1_RELEASE_RESET();
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <I2C1_MspInit+0x10c>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a0c      	ldr	r2, [pc, #48]	; (8002280 <I2C1_MspInit+0x10c>)
 8002250:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002254:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2105      	movs	r1, #5
 800225a:	201f      	movs	r0, #31
 800225c:	f001 f826 	bl	80032ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 8002260:	201f      	movs	r0, #31
 8002262:	f001 f83f 	bl	80032e4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2105      	movs	r1, #5
 800226a:	2020      	movs	r0, #32
 800226c:	f001 f81e 	bl	80032ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 8002270:	2020      	movs	r0, #32
 8002272:	f001 f837 	bl	80032e4 <HAL_NVIC_EnableIRQ>
}
 8002276:	bf00      	nop
 8002278:	3720      	adds	r7, #32
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40020400 	.word	0x40020400

08002288 <I2C1_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 800228c:	4814      	ldr	r0, [pc, #80]	; (80022e0 <I2C1_Init+0x58>)
 800228e:	f004 fdcf 	bl	8006e30 <HAL_I2C_GetState>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d120      	bne.n	80022da <I2C1_Init+0x52>
  {
    heval_I2c1.Instance = I2C1;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <I2C1_Init+0x58>)
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <I2C1_Init+0x5c>)
 800229c:	601a      	str	r2, [r3, #0]
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <I2C1_Init+0x58>)
 80022a0:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <I2C1_Init+0x60>)
 80022a2:	605a      	str	r2, [r3, #4]
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <I2C1_Init+0x58>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
    heval_I2c1.Init.OwnAddress1     = 0;
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <I2C1_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <I2C1_Init+0x58>)
 80022b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022b6:	611a      	str	r2, [r3, #16]
    heval_I2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <I2C1_Init+0x58>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
    heval_I2c1.Init.OwnAddress2     = 0;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <I2C1_Init+0x58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
    heval_I2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <I2C1_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <I2C1_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit();
 80022d0:	f7ff ff50 	bl	8002174 <I2C1_MspInit>
    HAL_I2C_Init(&heval_I2c1);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <I2C1_Init+0x58>)
 80022d6:	f004 f8f7 	bl	80064c8 <HAL_I2C_Init>
  }
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20008318 	.word	0x20008318
 80022e4:	40005400 	.word	0x40005400
 80022e8:	00061a80 	.word	0x00061a80

080022ec <I2C1_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
static void I2C1_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af04      	add	r7, sp, #16
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
 80022f6:	460b      	mov	r3, r1
 80022f8:	71bb      	strb	r3, [r7, #6]
 80022fa:	4613      	mov	r3, r2
 80022fc:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&heval_I2c1,
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	b299      	uxth	r1, r3
 8002306:	79bb      	ldrb	r3, [r7, #6]
 8002308:	b29a      	uxth	r2, r3
 800230a:	2364      	movs	r3, #100	; 0x64
 800230c:	9302      	str	r3, [sp, #8]
 800230e:	2301      	movs	r3, #1
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	1d7b      	adds	r3, r7, #5
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2301      	movs	r3, #1
 8002318:	4807      	ldr	r0, [pc, #28]	; (8002338 <I2C1_Write+0x4c>)
 800231a:	f004 fa5d 	bl	80067d8 <HAL_I2C_Mem_Write>
 800231e:	4603      	mov	r3, r0
 8002320:	73fb      	strb	r3, [r7, #15]
                         &Value,
                         1,
                         100);

  /* Check the communication status */
  if(status != HAL_OK)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <I2C1_Write+0x44>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f85e 	bl	80023ec <I2C1_Error>
  }
}
 8002330:	bf00      	nop
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20008318 	.word	0x20008318

0800233c <I2C1_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
static uint8_t I2C1_Read(uint8_t Addr, uint8_t Reg)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af04      	add	r7, sp, #16
 8002342:	4603      	mov	r3, r0
 8002344:	460a      	mov	r2, r1
 8002346:	71fb      	strb	r3, [r7, #7]
 8002348:	4613      	mov	r3, r2
 800234a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
  uint8_t Value = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	b299      	uxth	r1, r3
 8002358:	79bb      	ldrb	r3, [r7, #6]
 800235a:	b29a      	uxth	r2, r3
 800235c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002360:	9302      	str	r3, [sp, #8]
 8002362:	2301      	movs	r3, #1
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	f107 030e 	add.w	r3, r7, #14
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2301      	movs	r3, #1
 800236e:	4808      	ldr	r0, [pc, #32]	; (8002390 <I2C1_Read+0x54>)
 8002370:	f004 fb2c 	bl	80069cc <HAL_I2C_Mem_Read>
 8002374:	4603      	mov	r3, r0
 8002376:	73fb      	strb	r3, [r7, #15]
                        &Value,
                        1,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <I2C1_Read+0x4a>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f833 	bl	80023ec <I2C1_Error>
  }
  return Value;
 8002386:	7bbb      	ldrb	r3, [r7, #14]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20008318 	.word	0x20008318

08002394 <I2C1_ReadMultiple>:
static HAL_StatusTypeDef I2C1_ReadMultiple(uint8_t Addr,
                                       uint16_t Reg,
                                       uint16_t MemAddress,
                                       uint8_t *Buffer,
                                       uint16_t Length)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af04      	add	r7, sp, #16
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	460b      	mov	r3, r1
 80023a2:	81bb      	strh	r3, [r7, #12]
 80023a4:	4613      	mov	r3, r2
 80023a6:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	b299      	uxth	r1, r3
 80023b0:	8978      	ldrh	r0, [r7, #10]
 80023b2:	89ba      	ldrh	r2, [r7, #12]
 80023b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b8:	9302      	str	r3, [sp, #8]
 80023ba:	8c3b      	ldrh	r3, [r7, #32]
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	4603      	mov	r3, r0
 80023c4:	4808      	ldr	r0, [pc, #32]	; (80023e8 <I2C1_ReadMultiple+0x54>)
 80023c6:	f004 fb01 	bl	80069cc <HAL_I2C_Mem_Read>
 80023ca:	4603      	mov	r3, r0
 80023cc:	75fb      	strb	r3, [r7, #23]
                        Buffer,
                        Length,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <I2C1_ReadMultiple+0x48>
  {
    /* I2C error occurred */
    I2C1_Error(Addr);
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f808 	bl	80023ec <I2C1_Error>
  }
  return status;
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20008318 	.word	0x20008318

080023ec <I2C1_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  */
static void I2C1_Error(uint8_t Addr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&heval_I2c1);
 80023f6:	4804      	ldr	r0, [pc, #16]	; (8002408 <I2C1_Error+0x1c>)
 80023f8:	f004 f9aa 	bl	8006750 <HAL_I2C_DeInit>

  /* Re-Initiaize the I2C communication bus */
  I2C1_Init();
 80023fc:	f7ff ff44 	bl	8002288 <I2C1_Init>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20008318 	.word	0x20008318

0800240c <TS_IO_Init>:
/**
  * @brief  Initialize I2C communication
  *         channel from MCU to TouchScreen (TS).
  */
void TS_IO_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  I2C1_Init();
 8002410:	f7ff ff3a 	bl	8002288 <I2C1_Init>
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	460b      	mov	r3, r1
 8002424:	71bb      	strb	r3, [r7, #6]
 8002426:	4613      	mov	r3, r2
 8002428:	717b      	strb	r3, [r7, #5]
  I2C1_Write(Addr, Reg, Value);
 800242a:	797a      	ldrb	r2, [r7, #5]
 800242c:	79b9      	ldrb	r1, [r7, #6]
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff5b 	bl	80022ec <I2C1_Write>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	460a      	mov	r2, r1
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	4613      	mov	r3, r2
 800244c:	71bb      	strb	r3, [r7, #6]
  return I2C1_Read(Addr, Reg);
 800244e:	79ba      	ldrb	r2, [r7, #6]
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff71 	bl	800233c <I2C1_Read>
 800245a:	4603      	mov	r3, r0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af02      	add	r7, sp, #8
 800246a:	603a      	str	r2, [r7, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	460b      	mov	r3, r1
 8002474:	71bb      	strb	r3, [r7, #6]
 8002476:	4613      	mov	r3, r2
 8002478:	80bb      	strh	r3, [r7, #4]
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800247a:	79bb      	ldrb	r3, [r7, #6]
 800247c:	b299      	uxth	r1, r3
 800247e:	79f8      	ldrb	r0, [r7, #7]
 8002480:	88bb      	ldrh	r3, [r7, #4]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2201      	movs	r2, #1
 8002488:	f7ff ff84 	bl	8002394 <I2C1_ReadMultiple>
 800248c:	4603      	mov	r3, r0
 800248e:	b29b      	uxth	r3, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fe27 	bl	80030f4 <HAL_Delay>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80024b6:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <BSP_QSPI_Init+0xb8>)
 80024b8:	4a2c      	ldr	r2, [pc, #176]	; (800256c <BSP_QSPI_Init+0xbc>)
 80024ba:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80024bc:	482a      	ldr	r0, [pc, #168]	; (8002568 <BSP_QSPI_Init+0xb8>)
 80024be:	f005 ff0d 	bl	80082dc <HAL_QSPI_DeInit>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e048      	b.n	800255e <BSP_QSPI_Init+0xae>
  }

  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80024cc:	2100      	movs	r1, #0
 80024ce:	4826      	ldr	r0, [pc, #152]	; (8002568 <BSP_QSPI_Init+0xb8>)
 80024d0:	f000 f87e 	bl	80025d0 <BSP_QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI Freq= 180 MHz / (1+1) = 90 MHz */
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <BSP_QSPI_Init+0xb8>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 1;
 80024da:	4b23      	ldr	r3, [pc, #140]	; (8002568 <BSP_QSPI_Init+0xb8>)
 80024dc:	2201      	movs	r2, #1
 80024de:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <BSP_QSPI_Init+0xb8>)
 80024e2:	2210      	movs	r2, #16
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ea:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <BSP_QSPI_Init+0x52>
  {
    return 32U;
 80024fe:	2320      	movs	r3, #32
 8002500:	e003      	b.n	800250a <BSP_QSPI_Init+0x5a>
  }
  return __builtin_clz(value);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800250a:	3b01      	subs	r3, #1
 800250c:	461a      	mov	r2, r3
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <BSP_QSPI_Init+0xb8>)
 8002510:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <BSP_QSPI_Init+0xb8>)
 8002514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002518:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <BSP_QSPI_Init+0xb8>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <BSP_QSPI_Init+0xb8>)
 8002522:	2200      	movs	r2, #0
 8002524:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <BSP_QSPI_Init+0xb8>)
 8002528:	2200      	movs	r2, #0
 800252a:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800252c:	480e      	ldr	r0, [pc, #56]	; (8002568 <BSP_QSPI_Init+0xb8>)
 800252e:	f005 fe59 	bl	80081e4 <HAL_QSPI_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <BSP_QSPI_Init+0x8c>
  {
    return QSPI_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e010      	b.n	800255e <BSP_QSPI_Init+0xae>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 800253c:	480a      	ldr	r0, [pc, #40]	; (8002568 <BSP_QSPI_Init+0xb8>)
 800253e:	f000 f8c7 	bl	80026d0 <QSPI_ResetMemory>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <BSP_QSPI_Init+0x9c>
  {
    return QSPI_NOT_SUPPORTED;
 8002548:	2304      	movs	r3, #4
 800254a:	e008      	b.n	800255e <BSP_QSPI_Init+0xae>
  }


  /* Configuration of the dummy cucles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 800254c:	4806      	ldr	r0, [pc, #24]	; (8002568 <BSP_QSPI_Init+0xb8>)
 800254e:	f000 f901 	bl	8002754 <QSPI_DummyCyclesCfg>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <BSP_QSPI_Init+0xac>
  {
    return QSPI_NOT_SUPPORTED;
 8002558:	2304      	movs	r3, #4
 800255a:	e000      	b.n	800255e <BSP_QSPI_Init+0xae>
  }

  return QSPI_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	2000843c 	.word	0x2000843c
 800256c:	a0001000 	.word	0xa0001000

08002570 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode 
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b090      	sub	sp, #64	; 0x40
 8002574:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800257a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800257c:	23eb      	movs	r3, #235	; 0xeb
 800257e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002580:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258a:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800258c:	2300      	movs	r3, #0
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002590:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002596:	230a      	movs	r3, #10
 8002598:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800259e:	2300      	movs	r3, #0
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80025a2:	2300      	movs	r3, #0
 80025a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80025aa:	463a      	mov	r2, r7
 80025ac:	f107 0308 	add.w	r3, r7, #8
 80025b0:	4619      	mov	r1, r3
 80025b2:	4806      	ldr	r0, [pc, #24]	; (80025cc <BSP_QSPI_EnableMemoryMappedMode+0x5c>)
 80025b4:	f006 fa98 	bl	8008ae8 <HAL_QSPI_MemoryMapped>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <BSP_QSPI_EnableMemoryMappedMode+0x52>
  {
    return QSPI_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <BSP_QSPI_EnableMemoryMappedMode+0x54>
  }

  return QSPI_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3740      	adds	r7, #64	; 0x40
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2000843c 	.word	0x2000843c

080025d0 <BSP_QSPI_MspInit>:
  *           - Peripheral's clock enable
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	4a38      	ldr	r2, [pc, #224]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	6393      	str	r3, [r2, #56]	; 0x38
 80025ea:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	4a32      	ldr	r2, [pc, #200]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	4a2f      	ldr	r2, [pc, #188]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 8002608:	f023 0302 	bic.w	r3, r3, #2
 800260c:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a2b      	ldr	r2, [pc, #172]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  QSPI_DX_CLK_GPIO_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 8002634:	f043 0320 	orr.w	r3, r3, #32
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <BSP_QSPI_MspInit+0xf4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8002646:	2340      	movs	r3, #64	; 0x40
 8002648:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800264e:	2301      	movs	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 8002656:	230a      	movs	r3, #10
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	4819      	ldr	r0, [pc, #100]	; (80026c8 <BSP_QSPI_MspInit+0xf8>)
 8002662:	f001 ffc5 	bl	80045f0 <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800266a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 8002670:	2309      	movs	r3, #9
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4619      	mov	r1, r3
 800267a:	4814      	ldr	r0, [pc, #80]	; (80026cc <BSP_QSPI_MspInit+0xfc>)
 800267c:	f001 ffb8 	bl	80045f0 <HAL_GPIO_Init>

  /* QSPI D0 and D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = (QSPI_D0_PIN | QSPI_D1_PIN);
 8002680:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002684:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 8002686:	230a      	movs	r3, #10
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	480e      	ldr	r0, [pc, #56]	; (80026cc <BSP_QSPI_MspInit+0xfc>)
 8002692:	f001 ffad 	bl	80045f0 <HAL_GPIO_Init>

  /* QSPI D2 and D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = (QSPI_D2_PIN | QSPI_D3_PIN) ;
 8002696:	23c0      	movs	r3, #192	; 0xc0
 8002698:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 800269a:	2309      	movs	r3, #9
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	4809      	ldr	r0, [pc, #36]	; (80026cc <BSP_QSPI_MspInit+0xfc>)
 80026a6:	f001 ffa3 	bl	80045f0 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	210f      	movs	r1, #15
 80026ae:	205b      	movs	r0, #91	; 0x5b
 80026b0:	f000 fdfc 	bl	80032ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80026b4:	205b      	movs	r0, #91	; 0x5b
 80026b6:	f000 fe15 	bl	80032e4 <HAL_NVIC_EnableIRQ>

}
 80026ba:	bf00      	nop
 80026bc:	3728      	adds	r7, #40	; 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40021400 	.word	0x40021400

080026d0 <QSPI_ResetMemory>:
/**
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b090      	sub	sp, #64	; 0x40
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80026d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026dc:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 80026de:	2366      	movs	r3, #102	; 0x66
 80026e0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80026f6:	2300      	movs	r3, #0
 80026f8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80026fa:	2300      	movs	r3, #0
 80026fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026fe:	f107 0308 	add.w	r3, r7, #8
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f005 ffdf 	bl	80086cc <HAL_QSPI_Command>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e019      	b.n	800274c <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002718:	2399      	movs	r3, #153	; 0x99
 800271a:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	f241 3288 	movw	r2, #5000	; 0x1388
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f005 ffd0 	bl	80086cc <HAL_QSPI_Command>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e00a      	b.n	800274c <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002736:	f241 3188 	movw	r1, #5000	; 0x1388
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f8ce 	bl	80028dc <QSPI_AutoPollingMemReady>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3740      	adds	r7, #64	; 0x40
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <QSPI_DummyCyclesCfg>:
/**
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b094      	sub	sp, #80	; 0x50
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800275c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8002762:	2385      	movs	r3, #133	; 0x85
 8002764:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002766:	2300      	movs	r3, #0
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800276a:	2300      	movs	r3, #0
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800276e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002772:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 1;
 8002778:	2301      	movs	r3, #1
 800277a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002780:	2300      	movs	r3, #0
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002784:	2300      	movs	r3, #0
 8002786:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4619      	mov	r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f005 ff9a 	bl	80086cc <HAL_QSPI_Command>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e04f      	b.n	8002842 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80027a2:	f107 030b 	add.w	r3, r7, #11
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4619      	mov	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f006 f882 	bl	80088b6 <HAL_QSPI_Receive>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e042      	b.n	8002842 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f844 	bl	800284a <QSPI_WriteEnable>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e03a      	b.n	8002842 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80027cc:	2381      	movs	r3, #129	; 0x81
 80027ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80027d0:	7afb      	ldrb	r3, [r7, #11]
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	b25a      	sxtb	r2, r3
 80027da:	23f0      	movs	r3, #240	; 0xf0
 80027dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80027e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 80027ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e003      	b.n	80027fc <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 80027f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	230a      	movs	r3, #10
 8002800:	408b      	lsls	r3, r1
 8002802:	b25b      	sxtb	r3, r3
 8002804:	4313      	orrs	r3, r2
 8002806:	b25b      	sxtb	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	72fb      	strb	r3, [r7, #11]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f005 ff58 	bl	80086cc <HAL_QSPI_Command>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e00d      	b.n	8002842 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002826:	f107 030b 	add.w	r3, r7, #11
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f005 ffa9 	bl	8008788 <HAL_QSPI_Transmit>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <QSPI_DummyCyclesCfg+0xee>
  }
  
  return QSPI_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3750      	adds	r7, #80	; 0x50
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <QSPI_WriteEnable>:
/**
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b096      	sub	sp, #88	; 0x58
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002858:	2306      	movs	r3, #6
 800285a:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800285c:	2300      	movs	r3, #0
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002860:	2300      	movs	r3, #0
 8002862:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8002864:	2300      	movs	r3, #0
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002870:	2300      	movs	r3, #0
 8002872:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002874:	2300      	movs	r3, #0
 8002876:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002878:	f107 0320 	add.w	r3, r7, #32
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4619      	mov	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f005 ff22 	bl	80086cc <HAL_QSPI_Command>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e020      	b.n	80028d4 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 8002892:	2302      	movs	r3, #2
 8002894:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8002896:	2302      	movs	r3, #2
 8002898:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800289e:	2301      	movs	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80028a2:	2310      	movs	r3, #16
 80028a4:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80028a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028aa:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 80028ac:	2305      	movs	r3, #5
 80028ae:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80028b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028b6:	f107 0208 	add.w	r2, r7, #8
 80028ba:	f107 0120 	add.w	r1, r7, #32
 80028be:	f241 3388 	movw	r3, #5000	; 0x1388
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f006 f899 	bl	80089fa <HAL_QSPI_AutoPolling>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3758      	adds	r7, #88	; 0x58
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <QSPI_AutoPollingMemReady>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout: timeout value before returning an error
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b096      	sub	sp, #88	; 0x58
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80028e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ea:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80028ec:	2305      	movs	r3, #5
 80028ee:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80028f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028fc:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002906:	2300      	movs	r3, #0
 8002908:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800290a:	2300      	movs	r3, #0
 800290c:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8002912:	2301      	movs	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800291e:	2310      	movs	r3, #16
 8002920:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002922:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002926:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002928:	f107 0208 	add.w	r2, r7, #8
 800292c:	f107 0120 	add.w	r1, r7, #32
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f006 f861 	bl	80089fa <HAL_QSPI_AutoPolling>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3758      	adds	r7, #88	; 0x58
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002950:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 8002952:	4a2a      	ldr	r2, [pc, #168]	; (80029fc <BSP_SDRAM_Init+0xb0>)
 8002954:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <BSP_SDRAM_Init+0xb4>)
 8002958:	2202      	movs	r2, #2
 800295a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <BSP_SDRAM_Init+0xb4>)
 800295e:	2207      	movs	r2, #7
 8002960:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002962:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <BSP_SDRAM_Init+0xb4>)
 8002964:	2204      	movs	r2, #4
 8002966:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <BSP_SDRAM_Init+0xb4>)
 800296a:	2207      	movs	r2, #7
 800296c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <BSP_SDRAM_Init+0xb4>)
 8002970:	2202      	movs	r2, #2
 8002972:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <BSP_SDRAM_Init+0xb4>)
 8002976:	2202      	movs	r2, #2
 8002978:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800297a:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <BSP_SDRAM_Init+0xb4>)
 800297c:	2202      	movs	r2, #2
 800297e:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 8002982:	2200      	movs	r2, #0
 8002984:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800298c:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 800298e:	2204      	movs	r2, #4
 8002990:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 8002994:	2220      	movs	r2, #32
 8002996:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 80029a0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80029a4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80029a6:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 80029ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029b2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 80029b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 80029be:	2200      	movs	r2, #0
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 80029c2:	2100      	movs	r1, #0
 80029c4:	480c      	ldr	r0, [pc, #48]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 80029c6:	f000 f87f 	bl	8002ac8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80029ca:	490d      	ldr	r1, [pc, #52]	; (8002a00 <BSP_SDRAM_Init+0xb4>)
 80029cc:	480a      	ldr	r0, [pc, #40]	; (80029f8 <BSP_SDRAM_Init+0xac>)
 80029ce:	f007 fb1d 	bl	800a00c <HAL_SDRAM_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <BSP_SDRAM_Init+0xb8>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e002      	b.n	80029e6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <BSP_SDRAM_Init+0xb8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80029e6:	f240 5069 	movw	r0, #1385	; 0x569
 80029ea:	f000 f80d 	bl	8002a08 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <BSP_SDRAM_Init+0xb8>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20008488 	.word	0x20008488
 80029fc:	a0000140 	.word	0xa0000140
 8002a00:	200084bc 	.word	0x200084bc
 8002a04:	20000540 	.word	0x20000540

08002a08 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a1a:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002a26:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a30:	4923      	ldr	r1, [pc, #140]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a32:	4824      	ldr	r0, [pc, #144]	; (8002ac4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a34:	f007 fb28 	bl	800a088 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f000 fb5b 	bl	80030f4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a40:	2202      	movs	r2, #2
 8002a42:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a46:	2210      	movs	r2, #16
 8002a48:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a5a:	4919      	ldr	r1, [pc, #100]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a5c:	4819      	ldr	r0, [pc, #100]	; (8002ac4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a5e:	f007 fb13 	bl	800a088 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a64:	2203      	movs	r2, #3
 8002a66:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a68:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a70:	2208      	movs	r2, #8
 8002a72:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a7e:	4910      	ldr	r1, [pc, #64]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a80:	4810      	ldr	r0, [pc, #64]	; (8002ac4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a82:	f007 fb01 	bl	800a088 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002a86:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002a8a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a8e:	2204      	movs	r2, #4
 8002a90:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a94:	2210      	movs	r2, #16
 8002a96:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aa2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aa8:	4905      	ldr	r1, [pc, #20]	; (8002ac0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aaa:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002aac:	f007 faec 	bl	800a088 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ab4:	f007 fb1d 	bl	800a0f2 <HAL_SDRAM_ProgramRefreshRate>
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	200084d8 	.word	0x200084d8
 8002ac4:	20008488 	.word	0x20008488

08002ac8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b090      	sub	sp, #64	; 0x40
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8104 	beq.w	8002ce2 <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ade:	4b83      	ldr	r3, [pc, #524]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	4a82      	ldr	r2, [pc, #520]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6393      	str	r3, [r2, #56]	; 0x38
 8002aea:	4b80      	ldr	r3, [pc, #512]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	4b7c      	ldr	r3, [pc, #496]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a7b      	ldr	r2, [pc, #492]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b79      	ldr	r3, [pc, #484]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
 8002b16:	4b75      	ldr	r3, [pc, #468]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a74      	ldr	r2, [pc, #464]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b72      	ldr	r3, [pc, #456]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	4b6e      	ldr	r3, [pc, #440]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a6d      	ldr	r2, [pc, #436]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b38:	f043 0308 	orr.w	r3, r3, #8
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b6b      	ldr	r3, [pc, #428]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	61fb      	str	r3, [r7, #28]
 8002b48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	4b67      	ldr	r3, [pc, #412]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a66      	ldr	r2, [pc, #408]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b54:	f043 0310 	orr.w	r3, r3, #16
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b64      	ldr	r3, [pc, #400]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	4b60      	ldr	r3, [pc, #384]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a5f      	ldr	r2, [pc, #380]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b70:	f043 0320 	orr.w	r3, r3, #32
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b5d      	ldr	r3, [pc, #372]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	4b59      	ldr	r3, [pc, #356]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a58      	ldr	r2, [pc, #352]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b56      	ldr	r3, [pc, #344]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b52      	ldr	r3, [pc, #328]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a51      	ldr	r2, [pc, #324]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b4f      	ldr	r3, [pc, #316]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a4a      	ldr	r2, [pc, #296]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b48      	ldr	r3, [pc, #288]	; (8002cec <BSP_SDRAM_MspInit+0x224>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002bde:	2302      	movs	r3, #2
 8002be0:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002be2:	230c      	movs	r3, #12
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8002be6:	2301      	movs	r3, #1
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bee:	4619      	mov	r1, r3
 8002bf0:	483f      	ldr	r0, [pc, #252]	; (8002cf0 <BSP_SDRAM_MspInit+0x228>)
 8002bf2:	f001 fcfd 	bl	80045f0 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002bf6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c00:	4619      	mov	r1, r3
 8002c02:	483c      	ldr	r0, [pc, #240]	; (8002cf4 <BSP_SDRAM_MspInit+0x22c>)
 8002c04:	f001 fcf4 	bl	80045f0 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002c08:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c12:	4619      	mov	r1, r3
 8002c14:	4838      	ldr	r0, [pc, #224]	; (8002cf8 <BSP_SDRAM_MspInit+0x230>)
 8002c16:	f001 fceb 	bl	80045f0 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002c1a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c24:	4619      	mov	r1, r3
 8002c26:	4835      	ldr	r0, [pc, #212]	; (8002cfc <BSP_SDRAM_MspInit+0x234>)
 8002c28:	f001 fce2 	bl	80045f0 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002c2c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002c32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c36:	4619      	mov	r1, r3
 8002c38:	4831      	ldr	r0, [pc, #196]	; (8002d00 <BSP_SDRAM_MspInit+0x238>)
 8002c3a:	f001 fcd9 	bl	80045f0 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002c3e:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c48:	4619      	mov	r1, r3
 8002c4a:	482e      	ldr	r0, [pc, #184]	; (8002d04 <BSP_SDRAM_MspInit+0x23c>)
 8002c4c:	f001 fcd0 	bl	80045f0 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002c50:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	482a      	ldr	r0, [pc, #168]	; (8002d08 <BSP_SDRAM_MspInit+0x240>)
 8002c5e:	f001 fcc7 	bl	80045f0 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002c62:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002c68:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002c6e:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c74:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002c76:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002c78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c7c:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c7e:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002c80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c84:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002c86:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002c88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c8c:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 8002c8e:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002c96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c9a:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002cae:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002cb4:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002cb6:	4a16      	ldr	r2, [pc, #88]	; (8002d10 <BSP_SDRAM_MspInit+0x248>)
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc0:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 8002cc6:	4811      	ldr	r0, [pc, #68]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002cc8:	f000 fbc8 	bl	800345c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8002ccc:	480f      	ldr	r0, [pc, #60]	; (8002d0c <BSP_SDRAM_MspInit+0x244>)
 8002cce:	f000 fb17 	bl	8003300 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2105      	movs	r1, #5
 8002cd6:	2038      	movs	r0, #56	; 0x38
 8002cd8:	f000 fae8 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002cdc:	2038      	movs	r0, #56	; 0x38
 8002cde:	f000 fb01 	bl	80032e4 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002ce2:	bf00      	nop
 8002ce4:	3740      	adds	r7, #64	; 0x40
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40020800 	.word	0x40020800
 8002cf4:	40020c00 	.word	0x40020c00
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40021400 	.word	0x40021400
 8002d00:	40021800 	.word	0x40021800
 8002d04:	40021c00 	.word	0x40021c00
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	200084e8 	.word	0x200084e8
 8002d10:	40026410 	.word	0x40026410

08002d14 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	460a      	mov	r2, r1
 8002d1e:	80fb      	strh	r3, [r7, #6]
 8002d20:	4613      	mov	r3, r2
 8002d22:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8002d2c:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <BSP_TS_Init+0xb8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <BSP_TS_Init+0xbc>)
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	b292      	uxth	r2, r2
 8002d36:	4610      	mov	r0, r2
 8002d38:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <BSP_TS_Init+0xb8>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2054      	movs	r0, #84	; 0x54
 8002d40:	4798      	blx	r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8002d46:	7b7b      	ldrb	r3, [r7, #13]
 8002d48:	2b11      	cmp	r3, #17
 8002d4a:	d009      	beq.n	8002d60 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <BSP_TS_Init+0xb8>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2070      	movs	r0, #112	; 0x70
 8002d52:	4798      	blx	r3
 8002d54:	4603      	mov	r3, r0
 8002d56:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002d58:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <BSP_TS_Init+0xbc>)
 8002d5a:	2270      	movs	r2, #112	; 0x70
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e002      	b.n	8002d66 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <BSP_TS_Init+0xbc>)
 8002d62:	2254      	movs	r2, #84	; 0x54
 8002d64:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE) || (ts_id2 == FT6X36_ID2_VALUE))
 8002d66:	7b7b      	ldrb	r3, [r7, #13]
 8002d68:	2b11      	cmp	r3, #17
 8002d6a:	d005      	beq.n	8002d78 <BSP_TS_Init+0x64>
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	2b11      	cmp	r3, #17
 8002d70:	d002      	beq.n	8002d78 <BSP_TS_Init+0x64>
 8002d72:	7bbb      	ldrb	r3, [r7, #14]
 8002d74:	2bd8      	cmp	r3, #216	; 0xd8
 8002d76:	d121      	bne.n	8002dbc <BSP_TS_Init+0xa8>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <BSP_TS_Init+0xc0>)
 8002d7a:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <BSP_TS_Init+0xb8>)
 8002d7c:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002d7e:	88fa      	ldrh	r2, [r7, #6]
 8002d80:	88bb      	ldrh	r3, [r7, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d203      	bcs.n	8002d8e <BSP_TS_Init+0x7a>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <BSP_TS_Init+0xc4>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e002      	b.n	8002d94 <BSP_TS_Init+0x80>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <BSP_TS_Init+0xc4>)
 8002d90:	220c      	movs	r2, #12
 8002d92:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d112      	bne.n	8002dc0 <BSP_TS_Init+0xac>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <BSP_TS_Init+0xc0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <BSP_TS_Init+0xbc>)
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	b292      	uxth	r2, r2
 8002da6:	4610      	mov	r0, r2
 8002da8:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <BSP_TS_Init+0xc0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <BSP_TS_Init+0xbc>)
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	b292      	uxth	r2, r2
 8002db6:	4610      	mov	r0, r2
 8002db8:	4798      	blx	r3
    if(ts_status == TS_OK)
 8002dba:	e001      	b.n	8002dc0 <BSP_TS_Init+0xac>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000518 	.word	0x20000518
 8002dd0:	2000854d 	.word	0x2000854d
 8002dd4:	20008548 	.word	0x20008548
 8002dd8:	2000854c 	.word	0x2000854c

08002ddc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002de8:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <BSP_TS_GetState+0x214>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	4a81      	ldr	r2, [pc, #516]	; (8002ff4 <BSP_TS_GetState+0x218>)
 8002df0:	7812      	ldrb	r2, [r2, #0]
 8002df2:	b292      	uxth	r2, r2
 8002df4:	4610      	mov	r0, r2
 8002df6:	4798      	blx	r3
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80ee 	beq.w	8002fe6 <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e0e3      	b.n	8002fd8 <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8002e10:	4b77      	ldr	r3, [pc, #476]	; (8002ff0 <BSP_TS_GetState+0x214>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4a77      	ldr	r2, [pc, #476]	; (8002ff4 <BSP_TS_GetState+0x218>)
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	b290      	uxth	r0, r2
 8002e1c:	f107 0110 	add.w	r1, r7, #16
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	0052      	lsls	r2, r2, #1
 8002e24:	188c      	adds	r4, r1, r2
 8002e26:	f107 010c 	add.w	r1, r7, #12
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	0052      	lsls	r2, r2, #1
 8002e2e:	440a      	add	r2, r1
 8002e30:	4621      	mov	r1, r4
 8002e32:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002e34:	4b70      	ldr	r3, [pc, #448]	; (8002ff8 <BSP_TS_GetState+0x21c>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d019      	beq.n	8002e74 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	3320      	adds	r3, #32
 8002e46:	443b      	add	r3, r7
 8002e48:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002e4c:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	3320      	adds	r3, #32
 8002e54:	443b      	add	r3, r7
 8002e56:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	3320      	adds	r3, #32
 8002e60:	443b      	add	r3, r7
 8002e62:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	3320      	adds	r3, #32
 8002e6c:	443b      	add	r3, r7
 8002e6e:	8b3a      	ldrh	r2, [r7, #24]
 8002e70:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8002e74:	4b60      	ldr	r3, [pc, #384]	; (8002ff8 <BSP_TS_GetState+0x21c>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00f      	beq.n	8002ea0 <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	3320      	adds	r3, #32
 8002e86:	443b      	add	r3, r7
 8002e88:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002e8c:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8002e90:	3303      	adds	r3, #3
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	3320      	adds	r3, #32
 8002e9a:	443b      	add	r3, r7
 8002e9c:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8002ea0:	4b55      	ldr	r3, [pc, #340]	; (8002ff8 <BSP_TS_GetState+0x21c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00f      	beq.n	8002ecc <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	3320      	adds	r3, #32
 8002eb2:	443b      	add	r3, r7
 8002eb4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002eb8:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	3320      	adds	r3, #32
 8002ec6:	443b      	add	r3, r7
 8002ec8:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	3320      	adds	r3, #32
 8002ed2:	443b      	add	r3, r7
 8002ed4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4a48      	ldr	r2, [pc, #288]	; (8002ffc <BSP_TS_GetState+0x220>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee2:	4299      	cmp	r1, r3
 8002ee4:	d90d      	bls.n	8002f02 <BSP_TS_GetState+0x126>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	3320      	adds	r3, #32
 8002eec:	443b      	add	r3, r7
 8002eee:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002ef2:	4942      	ldr	r1, [pc, #264]	; (8002ffc <BSP_TS_GetState+0x220>)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	e00c      	b.n	8002f1c <BSP_TS_GetState+0x140>
 8002f02:	4a3e      	ldr	r2, [pc, #248]	; (8002ffc <BSP_TS_GetState+0x220>)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	3320      	adds	r3, #32
 8002f12:	443b      	add	r3, r7
 8002f14:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	3320      	adds	r3, #32
 8002f24:	443b      	add	r3, r7
 8002f26:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4a34      	ldr	r2, [pc, #208]	; (8003000 <BSP_TS_GetState+0x224>)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f34:	4299      	cmp	r1, r3
 8002f36:	d90d      	bls.n	8002f54 <BSP_TS_GetState+0x178>
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	3320      	adds	r3, #32
 8002f3e:	443b      	add	r3, r7
 8002f40:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002f44:	492e      	ldr	r1, [pc, #184]	; (8003000 <BSP_TS_GetState+0x224>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	e00c      	b.n	8002f6e <BSP_TS_GetState+0x192>
 8002f54:	4a2a      	ldr	r2, [pc, #168]	; (8003000 <BSP_TS_GetState+0x224>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	3320      	adds	r3, #32
 8002f64:	443b      	add	r3, r7
 8002f66:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8002f70:	8afa      	ldrh	r2, [r7, #22]
 8002f72:	8abb      	ldrh	r3, [r7, #20]
 8002f74:	4413      	add	r3, r2
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	dd15      	ble.n	8002fa6 <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	3320      	adds	r3, #32
 8002f80:	443b      	add	r3, r7
 8002f82:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002f86:	4619      	mov	r1, r3
 8002f88:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <BSP_TS_GetState+0x220>)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	3320      	adds	r3, #32
 8002f96:	443b      	add	r3, r7
 8002f98:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4a18      	ldr	r2, [pc, #96]	; (8003000 <BSP_TS_GetState+0x224>)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8002fa6:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <BSP_TS_GetState+0x220>)
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	b299      	uxth	r1, r3
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	460a      	mov	r2, r1
 8002fba:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8002fbc:	4a10      	ldr	r2, [pc, #64]	; (8003000 <BSP_TS_GetState+0x224>)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc4:	b299      	uxth	r1, r3
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	460a      	mov	r2, r1
 8002fd0:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	f4ff af15 	bcc.w	8002e10 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8002fe6:	7efb      	ldrb	r3, [r7, #27]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3724      	adds	r7, #36	; 0x24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd90      	pop	{r4, r7, pc}
 8002ff0:	20008548 	.word	0x20008548
 8002ff4:	2000854d 	.word	0x2000854d
 8002ff8:	2000854c 	.word	0x2000854c
 8002ffc:	20008550 	.word	0x20008550
 8003000:	20008558 	.word	0x20008558

08003004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <SystemInit+0x60>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	4a15      	ldr	r2, [pc, #84]	; (8003064 <SystemInit+0x60>)
 8003010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <SystemInit+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a12      	ldr	r2, [pc, #72]	; (8003068 <SystemInit+0x64>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <SystemInit+0x64>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800302a:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <SystemInit+0x64>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <SystemInit+0x64>)
 8003030:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <SystemInit+0x64>)
 800303c:	4a0b      	ldr	r2, [pc, #44]	; (800306c <SystemInit+0x68>)
 800303e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <SystemInit+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <SystemInit+0x64>)
 8003046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <SystemInit+0x64>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003052:	4b04      	ldr	r3, [pc, #16]	; (8003064 <SystemInit+0x60>)
 8003054:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003058:	609a      	str	r2, [r3, #8]
#endif
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00
 8003068:	40023800 	.word	0x40023800
 800306c:	24003010 	.word	0x24003010

08003070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_Init+0x40>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_Init+0x40>)
 800307a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800307e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_Init+0x40>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <HAL_Init+0x40>)
 8003086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_Init+0x40>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <HAL_Init+0x40>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003098:	2003      	movs	r0, #3
 800309a:	f000 f8fc 	bl	8003296 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800309e:	200f      	movs	r0, #15
 80030a0:	f7fe f838 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a4:	f005 f847 	bl	8008136 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023c00 	.word	0x40023c00

080030b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_IncTick+0x20>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_IncTick+0x24>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_IncTick+0x24>)
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	2000054c 	.word	0x2000054c
 80030d8:	20008560 	.word	0x20008560

080030dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return uwTick;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <HAL_GetTick+0x14>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20008560 	.word	0x20008560

080030f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030fc:	f7ff ffee 	bl	80030dc <HAL_GetTick>
 8003100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d005      	beq.n	800311a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_Delay+0x44>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800311a:	bf00      	nop
 800311c:	f7ff ffde 	bl	80030dc <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	429a      	cmp	r2, r3
 800312a:	d8f7      	bhi.n	800311c <HAL_Delay+0x28>
  {
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	2000054c 	.word	0x2000054c

0800313c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003158:	4013      	ands	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316e:	4a04      	ldr	r2, [pc, #16]	; (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	60d3      	str	r3, [r2, #12]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <__NVIC_GetPriorityGrouping+0x18>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	f003 0307 	and.w	r3, r3, #7
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	db0b      	blt.n	80031ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	f003 021f 	and.w	r2, r3, #31
 80031b8:	4907      	ldr	r1, [pc, #28]	; (80031d8 <__NVIC_EnableIRQ+0x38>)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2001      	movs	r0, #1
 80031c2:	fa00 f202 	lsl.w	r2, r0, r2
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000e100 	.word	0xe000e100

080031dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	db0a      	blt.n	8003206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	490c      	ldr	r1, [pc, #48]	; (8003228 <__NVIC_SetPriority+0x4c>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	0112      	lsls	r2, r2, #4
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	440b      	add	r3, r1
 8003200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003204:	e00a      	b.n	800321c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4908      	ldr	r1, [pc, #32]	; (800322c <__NVIC_SetPriority+0x50>)
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	3b04      	subs	r3, #4
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	440b      	add	r3, r1
 800321a:	761a      	strb	r2, [r3, #24]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000e100 	.word	0xe000e100
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	; 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f1c3 0307 	rsb	r3, r3, #7
 800324a:	2b04      	cmp	r3, #4
 800324c:	bf28      	it	cs
 800324e:	2304      	movcs	r3, #4
 8003250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3304      	adds	r3, #4
 8003256:	2b06      	cmp	r3, #6
 8003258:	d902      	bls.n	8003260 <NVIC_EncodePriority+0x30>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3b03      	subs	r3, #3
 800325e:	e000      	b.n	8003262 <NVIC_EncodePriority+0x32>
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	f04f 32ff 	mov.w	r2, #4294967295
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	401a      	ands	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003278:	f04f 31ff 	mov.w	r1, #4294967295
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	43d9      	mvns	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	4313      	orrs	r3, r2
         );
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	; 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ff4c 	bl	800313c <__NVIC_SetPriorityGrouping>
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032be:	f7ff ff61 	bl	8003184 <__NVIC_GetPriorityGrouping>
 80032c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	6978      	ldr	r0, [r7, #20]
 80032ca:	f7ff ffb1 	bl	8003230 <NVIC_EncodePriority>
 80032ce:	4602      	mov	r2, r0
 80032d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ff80 	bl	80031dc <__NVIC_SetPriority>
}
 80032dc:	bf00      	nop
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ff54 	bl	80031a0 <__NVIC_EnableIRQ>
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff fee6 	bl	80030dc <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e099      	b.n	8003450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800333c:	e00f      	b.n	800335e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800333e:	f7ff fecd 	bl	80030dc <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b05      	cmp	r3, #5
 800334a:	d908      	bls.n	800335e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2203      	movs	r2, #3
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e078      	b.n	8003450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e8      	bne.n	800333e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_DMA_Init+0x158>)
 8003378:	4013      	ands	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d107      	bne.n	80033c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	4313      	orrs	r3, r2
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0307 	bic.w	r3, r3, #7
 80033de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d117      	bne.n	8003422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fad9 	bl	80039bc <DMA_CheckFifoParam>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2240      	movs	r2, #64	; 0x40
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800341e:	2301      	movs	r3, #1
 8003420:	e016      	b.n	8003450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fa90 	bl	8003950 <DMA_CalcBaseAndBitshift>
 8003430:	4603      	mov	r3, r0
 8003432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	223f      	movs	r2, #63	; 0x3f
 800343a:	409a      	lsls	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	f010803f 	.word	0xf010803f

0800345c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e050      	b.n	8003510 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d101      	bne.n	800347e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	e048      	b.n	8003510 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2200      	movs	r2, #0
 800349c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2221      	movs	r2, #33	; 0x21
 80034bc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa46 	bl	8003950 <DMA_CalcBaseAndBitshift>
 80034c4:	4603      	mov	r3, r0
 80034c6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	223f      	movs	r2, #63	; 0x3f
 80034f2:	409a      	lsls	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003526:	f7ff fdd9 	bl	80030dc <HAL_GetTick>
 800352a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d008      	beq.n	800354a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e052      	b.n	80035f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0216 	bic.w	r2, r2, #22
 8003558:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003568:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <HAL_DMA_Abort+0x62>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0208 	bic.w	r2, r2, #8
 8003588:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800359a:	e013      	b.n	80035c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800359c:	f7ff fd9e 	bl	80030dc <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d90c      	bls.n	80035c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2203      	movs	r2, #3
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e015      	b.n	80035f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e4      	bne.n	800359c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d6:	223f      	movs	r2, #63	; 0x3f
 80035d8:	409a      	lsls	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d004      	beq.n	8003616 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2280      	movs	r2, #128	; 0x80
 8003610:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e00c      	b.n	8003630 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2205      	movs	r2, #5
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003648:	4b8e      	ldr	r3, [pc, #568]	; (8003884 <HAL_DMA_IRQHandler+0x248>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a8e      	ldr	r2, [pc, #568]	; (8003888 <HAL_DMA_IRQHandler+0x24c>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	0a9b      	lsrs	r3, r3, #10
 8003654:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	2208      	movs	r2, #8
 8003668:	409a      	lsls	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01a      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d013      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0204 	bic.w	r2, r2, #4
 800368e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	2208      	movs	r2, #8
 8003696:	409a      	lsls	r2, r3
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	f043 0201 	orr.w	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	2201      	movs	r2, #1
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d012      	beq.n	80036de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	2201      	movs	r2, #1
 80036cc:	409a      	lsls	r2, r3
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f043 0202 	orr.w	r2, r3, #2
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	2204      	movs	r2, #4
 80036e4:	409a      	lsls	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d012      	beq.n	8003714 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00b      	beq.n	8003714 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	2204      	movs	r2, #4
 8003702:	409a      	lsls	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370c:	f043 0204 	orr.w	r2, r3, #4
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003718:	2210      	movs	r2, #16
 800371a:	409a      	lsls	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4013      	ands	r3, r2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d043      	beq.n	80037ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d03c      	beq.n	80037ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	2210      	movs	r2, #16
 8003738:	409a      	lsls	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d018      	beq.n	800377e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d108      	bne.n	800376c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d024      	beq.n	80037ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
 800376a:	e01f      	b.n	80037ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01b      	beq.n	80037ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
 800377c:	e016      	b.n	80037ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d107      	bne.n	800379c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0208 	bic.w	r2, r2, #8
 800379a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	2220      	movs	r2, #32
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 808f 	beq.w	80038dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8087 	beq.w	80038dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d2:	2220      	movs	r2, #32
 80037d4:	409a      	lsls	r2, r3
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d136      	bne.n	8003854 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0216 	bic.w	r2, r2, #22
 80037f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003804:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <HAL_DMA_IRQHandler+0x1da>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0208 	bic.w	r2, r2, #8
 8003824:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	223f      	movs	r2, #63	; 0x3f
 800382c:	409a      	lsls	r2, r3
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003846:	2b00      	cmp	r3, #0
 8003848:	d07e      	beq.n	8003948 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
        }
        return;
 8003852:	e079      	b.n	8003948 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01d      	beq.n	800389e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003874:	2b00      	cmp	r3, #0
 8003876:	d031      	beq.n	80038dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
 8003880:	e02c      	b.n	80038dc <HAL_DMA_IRQHandler+0x2a0>
 8003882:	bf00      	nop
 8003884:	20000544 	.word	0x20000544
 8003888:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d023      	beq.n	80038dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
 800389c:	e01e      	b.n	80038dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10f      	bne.n	80038cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0210 	bic.w	r2, r2, #16
 80038ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d032      	beq.n	800394a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d022      	beq.n	8003936 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2205      	movs	r2, #5
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3301      	adds	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	429a      	cmp	r2, r3
 8003912:	d307      	bcc.n	8003924 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f2      	bne.n	8003908 <HAL_DMA_IRQHandler+0x2cc>
 8003922:	e000      	b.n	8003926 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003924:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
 8003946:	e000      	b.n	800394a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003948:	bf00      	nop
    }
  }
}
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	3b10      	subs	r3, #16
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800396a:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <DMA_CalcBaseAndBitshift+0x68>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d909      	bls.n	8003992 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	1d1a      	adds	r2, r3, #4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	659a      	str	r2, [r3, #88]	; 0x58
 8003990:	e007      	b.n	80039a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	aaaaaaab 	.word	0xaaaaaaab
 80039b8:	0807e770 	.word	0x0807e770

080039bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11f      	bne.n	8003a16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d856      	bhi.n	8003a8a <DMA_CheckFifoParam+0xce>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <DMA_CheckFifoParam+0x28>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003a07 	.word	0x08003a07
 80039ec:	080039f5 	.word	0x080039f5
 80039f0:	08003a8b 	.word	0x08003a8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d046      	beq.n	8003a8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a04:	e043      	b.n	8003a8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a0e:	d140      	bne.n	8003a92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e03d      	b.n	8003a92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1e:	d121      	bne.n	8003a64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d837      	bhi.n	8003a96 <DMA_CheckFifoParam+0xda>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <DMA_CheckFifoParam+0x70>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a43 	.word	0x08003a43
 8003a34:	08003a3d 	.word	0x08003a3d
 8003a38:	08003a55 	.word	0x08003a55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e030      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d025      	beq.n	8003a9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a52:	e022      	b.n	8003a9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a5c:	d11f      	bne.n	8003a9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a62:	e01c      	b.n	8003a9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d903      	bls.n	8003a72 <DMA_CheckFifoParam+0xb6>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d003      	beq.n	8003a78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a70:	e018      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      break;
 8003a76:	e015      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00e      	beq.n	8003aa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e00b      	b.n	8003aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e00a      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e008      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a92:	bf00      	nop
 8003a94:	e006      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e004      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e002      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a9e:	bf00      	nop
 8003aa0:	e000      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop

08003ab4 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	019a      	lsls	r2, r3, #6
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003af4:	f7ff faf2 	bl	80030dc <HAL_GetTick>
 8003af8:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003afa:	e009      	b.n	8003b10 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003afc:	f7ff faee 	bl	80030dc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b0a:	d901      	bls.n	8003b10 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e015      	b.n	8003b3c <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ee      	beq.n	8003afc <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	019a      	lsls	r2, r3, #6
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	ea42 0103 	orr.w	r1, r2, r3
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	041a      	lsls	r2, r3, #16
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e10b      	b.n	8003d70 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7c5b      	ldrb	r3, [r3, #17]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f97e 	bl	8003e64 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b82:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b96:	f7ff faa1 	bl	80030dc <HAL_GetTick>
 8003b9a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003b9c:	e009      	b.n	8003bb2 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003b9e:	f7ff fa9d 	bl	80030dc <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bac:	d901      	bls.n	8003bb2 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0de      	b.n	8003d70 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0ed      	beq.n	8003b9e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003bd2:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003bd6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003bee:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003bf6:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f7ff fa62 	bl	80030f4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c30:	f7ff fa54 	bl	80030dc <HAL_GetTick>
 8003c34:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003c36:	e009      	b.n	8003c4c <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003c38:	f7ff fa50 	bl	80030dc <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c46:	d901      	bls.n	8003c4c <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e091      	b.n	8003d70 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ed      	beq.n	8003c38 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0206 	orr.w	r2, r2, #6
 8003c6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0203 	bic.w	r2, r2, #3
 8003c80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0203 	bic.w	r2, r2, #3
 8003cae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cd6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6899      	ldr	r1, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_DSI_Init+0x1b4>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	e000      	b.n	8003cfa <HAL_DSI_Init+0x1b6>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <HAL_DSI_Init+0x234>)
 8003d00:	fb03 f202 	mul.w	r2, r3, r2
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003d30:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	003d0900 	.word	0x003d0900

08003d7c <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e066      	b.n	8003e5c <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2203      	movs	r2, #3
 8003d92:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0208 	bic.w	r2, r2, #8
 8003da8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0206 	bic.w	r2, r2, #6
 8003dee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003e2e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f818 	bl	8003e78 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00f      	beq.n	8003ec4 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f00a ffae 	bl	800ee20 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00f      	beq.n	8003ef4 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f00a ffe0 	bl	800eeb4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 808c 	beq.w	8004016 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f06:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4013      	ands	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f1e:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f043 0201 	orr.w	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f043 0202 	orr.w	r2, r3, #2
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f043 0204 	orr.w	r2, r3, #4
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f043 0208 	orr.w	r2, r3, #8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f043 0210 	orr.w	r2, r3, #16
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f804 	bl	800401e <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	7c1b      	ldrb	r3, [r3, #16]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004044:	2302      	movs	r3, #2
 8004046:	e0c5      	b.n	80041d4 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0203 	bic.w	r2, r2, #3
 8004094:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68d9      	ldr	r1, [r3, #12]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0207 	bic.w	r2, r2, #7
 80040b6:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6959      	ldr	r1, [r3, #20]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 020f 	bic.w	r2, r2, #15
 80040e4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6919      	ldr	r1, [r3, #16]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 020e 	bic.w	r2, r2, #14
 8004108:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	005a      	lsls	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	0c1b      	lsrs	r3, r3, #16
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004156:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	431a      	orrs	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0201 	orr.w	r2, r2, #1
 80041b4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0202 	orr.w	r2, r2, #2
 80041c8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	7c1b      	ldrb	r3, [r3, #16]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_DSI_ConfigCommand+0x16>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e049      	b.n	800428a <HAL_DSI_ConfigCommand+0xaa>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b24      	ldr	r3, [pc, #144]	; (8004298 <HAL_DSI_ConfigCommand+0xb8>)
 8004208:	400b      	ands	r3, r1
 800420a:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800421a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004220:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004226:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800422c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004232:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004238:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800423e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004244:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800424a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004250:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004256:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0202 	bic.w	r2, r2, #2
 800426e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	fef080ff 	.word	0xfef080ff

0800429c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	7c1b      	ldrb	r3, [r3, #16]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_DSI_ConfigFlowControl+0x16>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e016      	b.n	80042e0 <HAL_DSI_ConfigFlowControl+0x44>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 021f 	bic.w	r2, r2, #31
 80042c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7c1b      	ldrb	r3, [r3, #16]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_DSI_ConfigPhyTimer+0x16>
 80042fe:	2302      	movs	r3, #2
 8004300:	e058      	b.n	80043b4 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4293      	cmp	r3, r2
 8004312:	bf38      	it	cc
 8004314:	4613      	movcc	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004328:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	041a      	lsls	r2, r3, #16
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004356:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004390:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	021a      	lsls	r2, r3, #8
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	7c1b      	ldrb	r3, [r3, #16]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_DSI_Start+0x14>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e02b      	b.n	800442c <HAL_DSI_Start+0x6c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80043fc:	2300      	movs	r3, #0
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0208 	orr.w	r2, r2, #8
 8004410:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_DSI_Refresh>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	7c1b      	ldrb	r3, [r3, #16]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_DSI_Refresh+0x14>
 8004448:	2302      	movs	r3, #2
 800444a:	e010      	b.n	800446e <HAL_DSI_Refresh+0x36>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	741a      	strb	r2, [r3, #16]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0204 	orr.w	r2, r2, #4
 8004462:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b088      	sub	sp, #32
 800447e:	af02      	add	r7, sp, #8
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	7c1b      	ldrb	r3, [r3, #16]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_DSI_ShortWrite+0x1a>
 8004490:	2302      	movs	r3, #2
 8004492:	e010      	b.n	80044b6 <HAL_DSI_ShortWrite+0x3c>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff fb1e 	bl	8003ae6 <DSI_ShortWrite>
 80044aa:	4603      	mov	r3, r0
 80044ac:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	741a      	strb	r2, [r3, #16]

  return status;
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b08c      	sub	sp, #48	; 0x30
 80044c2:	af02      	add	r7, sp, #8
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80044cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ce:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	7c1b      	ldrb	r3, [r3, #16]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_DSI_LongWrite+0x1e>
 80044d8:	2302      	movs	r3, #2
 80044da:	e084      	b.n	80045e6 <HAL_DSI_LongWrite+0x128>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e2:	f7fe fdfb 	bl	80030dc <HAL_GetTick>
 80044e6:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80044e8:	e00c      	b.n	8004504 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80044ea:	f7fe fdf7 	bl	80030dc <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044f8:	d904      	bls.n	8004504 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e070      	b.n	80045e6 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0eb      	beq.n	80044ea <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b03      	cmp	r3, #3
 800451a:	bf28      	it	cs
 800451c:	2303      	movcs	r3, #3
 800451e:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004520:	2300      	movs	r3, #0
 8004522:	623b      	str	r3, [r7, #32]
 8004524:	e00f      	b.n	8004546 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	3301      	adds	r3, #1
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	4313      	orrs	r3, r2
 800453e:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	3301      	adds	r3, #1
 8004544:	623b      	str	r3, [r7, #32]
 8004546:	6a3a      	ldr	r2, [r7, #32]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	429a      	cmp	r2, r3
 800454c:	d3eb      	bcc.n	8004526 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4413      	add	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004566:	e028      	b.n	80045ba <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	2b04      	cmp	r3, #4
 800456c:	bf28      	it	cs
 800456e:	2304      	movcs	r3, #4
 8004570:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004576:	2300      	movs	r3, #0
 8004578:	623b      	str	r3, [r7, #32]
 800457a:	e00e      	b.n	800459a <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	4413      	add	r3, r2
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	4313      	orrs	r3, r2
 8004592:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	3301      	adds	r3, #1
 8004598:	623b      	str	r3, [r7, #32]
 800459a:	6a3a      	ldr	r2, [r7, #32]
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d3ec      	bcc.n	800457c <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80045aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1d3      	bne.n	8004568 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80045c8:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	3301      	adds	r3, #1
 80045ce:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	f7ff fa6b 	bl	8003ab4 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3728      	adds	r7, #40	; 0x28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045fe:	2300      	movs	r3, #0
 8004600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004602:	2300      	movs	r3, #0
 8004604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	e177      	b.n	80048fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800460c:	2201      	movs	r2, #1
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	429a      	cmp	r2, r3
 8004626:	f040 8166 	bne.w	80048f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b01      	cmp	r3, #1
 8004634:	d005      	beq.n	8004642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800463e:	2b02      	cmp	r3, #2
 8004640:	d130      	bne.n	80046a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	2203      	movs	r2, #3
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43db      	mvns	r3, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4013      	ands	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4313      	orrs	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004678:	2201      	movs	r2, #1
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 0201 	and.w	r2, r3, #1
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d017      	beq.n	80046e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	2203      	movs	r2, #3
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d123      	bne.n	8004734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	08da      	lsrs	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3208      	adds	r2, #8
 80046f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	220f      	movs	r2, #15
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	08da      	lsrs	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3208      	adds	r2, #8
 800472e:	69b9      	ldr	r1, [r7, #24]
 8004730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	2203      	movs	r2, #3
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 0203 	and.w	r2, r3, #3
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80c0 	beq.w	80048f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	4b66      	ldr	r3, [pc, #408]	; (8004914 <HAL_GPIO_Init+0x324>)
 800477c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477e:	4a65      	ldr	r2, [pc, #404]	; (8004914 <HAL_GPIO_Init+0x324>)
 8004780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004784:	6453      	str	r3, [r2, #68]	; 0x44
 8004786:	4b63      	ldr	r3, [pc, #396]	; (8004914 <HAL_GPIO_Init+0x324>)
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004792:	4a61      	ldr	r2, [pc, #388]	; (8004918 <HAL_GPIO_Init+0x328>)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	220f      	movs	r2, #15
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a58      	ldr	r2, [pc, #352]	; (800491c <HAL_GPIO_Init+0x32c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d037      	beq.n	800482e <HAL_GPIO_Init+0x23e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a57      	ldr	r2, [pc, #348]	; (8004920 <HAL_GPIO_Init+0x330>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d031      	beq.n	800482a <HAL_GPIO_Init+0x23a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a56      	ldr	r2, [pc, #344]	; (8004924 <HAL_GPIO_Init+0x334>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d02b      	beq.n	8004826 <HAL_GPIO_Init+0x236>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a55      	ldr	r2, [pc, #340]	; (8004928 <HAL_GPIO_Init+0x338>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d025      	beq.n	8004822 <HAL_GPIO_Init+0x232>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a54      	ldr	r2, [pc, #336]	; (800492c <HAL_GPIO_Init+0x33c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01f      	beq.n	800481e <HAL_GPIO_Init+0x22e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a53      	ldr	r2, [pc, #332]	; (8004930 <HAL_GPIO_Init+0x340>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d019      	beq.n	800481a <HAL_GPIO_Init+0x22a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a52      	ldr	r2, [pc, #328]	; (8004934 <HAL_GPIO_Init+0x344>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_GPIO_Init+0x226>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a51      	ldr	r2, [pc, #324]	; (8004938 <HAL_GPIO_Init+0x348>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00d      	beq.n	8004812 <HAL_GPIO_Init+0x222>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a50      	ldr	r2, [pc, #320]	; (800493c <HAL_GPIO_Init+0x34c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <HAL_GPIO_Init+0x21e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a4f      	ldr	r2, [pc, #316]	; (8004940 <HAL_GPIO_Init+0x350>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_GPIO_Init+0x21a>
 8004806:	2309      	movs	r3, #9
 8004808:	e012      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800480a:	230a      	movs	r3, #10
 800480c:	e010      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800480e:	2308      	movs	r3, #8
 8004810:	e00e      	b.n	8004830 <HAL_GPIO_Init+0x240>
 8004812:	2307      	movs	r3, #7
 8004814:	e00c      	b.n	8004830 <HAL_GPIO_Init+0x240>
 8004816:	2306      	movs	r3, #6
 8004818:	e00a      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800481a:	2305      	movs	r3, #5
 800481c:	e008      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800481e:	2304      	movs	r3, #4
 8004820:	e006      	b.n	8004830 <HAL_GPIO_Init+0x240>
 8004822:	2303      	movs	r3, #3
 8004824:	e004      	b.n	8004830 <HAL_GPIO_Init+0x240>
 8004826:	2302      	movs	r3, #2
 8004828:	e002      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800482e:	2300      	movs	r3, #0
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	f002 0203 	and.w	r2, r2, #3
 8004836:	0092      	lsls	r2, r2, #2
 8004838:	4093      	lsls	r3, r2
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004840:	4935      	ldr	r1, [pc, #212]	; (8004918 <HAL_GPIO_Init+0x328>)
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	3302      	adds	r3, #2
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800484e:	4b3d      	ldr	r3, [pc, #244]	; (8004944 <HAL_GPIO_Init+0x354>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004872:	4a34      	ldr	r2, [pc, #208]	; (8004944 <HAL_GPIO_Init+0x354>)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004878:	4b32      	ldr	r3, [pc, #200]	; (8004944 <HAL_GPIO_Init+0x354>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800489c:	4a29      	ldr	r2, [pc, #164]	; (8004944 <HAL_GPIO_Init+0x354>)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048a2:	4b28      	ldr	r3, [pc, #160]	; (8004944 <HAL_GPIO_Init+0x354>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048c6:	4a1f      	ldr	r2, [pc, #124]	; (8004944 <HAL_GPIO_Init+0x354>)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <HAL_GPIO_Init+0x354>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048f0:	4a14      	ldr	r2, [pc, #80]	; (8004944 <HAL_GPIO_Init+0x354>)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3301      	adds	r3, #1
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	f67f ae84 	bls.w	800460c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	3724      	adds	r7, #36	; 0x24
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	40013800 	.word	0x40013800
 800491c:	40020000 	.word	0x40020000
 8004920:	40020400 	.word	0x40020400
 8004924:	40020800 	.word	0x40020800
 8004928:	40020c00 	.word	0x40020c00
 800492c:	40021000 	.word	0x40021000
 8004930:	40021400 	.word	0x40021400
 8004934:	40021800 	.word	0x40021800
 8004938:	40021c00 	.word	0x40021c00
 800493c:	40022000 	.word	0x40022000
 8004940:	40022400 	.word	0x40022400
 8004944:	40013c00 	.word	0x40013c00

08004948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
 8004954:	4613      	mov	r3, r2
 8004956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004958:	787b      	ldrb	r3, [r7, #1]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800495e:	887a      	ldrh	r2, [r7, #2]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004964:	e003      	b.n	800496e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004966:	887b      	ldrh	r3, [r7, #2]
 8004968:	041a      	lsls	r2, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	619a      	str	r2, [r3, #24]
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800498c:	887a      	ldrh	r2, [r7, #2]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4013      	ands	r3, r2
 8004992:	041a      	lsls	r2, r3, #16
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	43d9      	mvns	r1, r3
 8004998:	887b      	ldrh	r3, [r7, #2]
 800499a:	400b      	ands	r3, r1
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	619a      	str	r2, [r3, #24]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f006 f885 	bl	800aad4 <USB_GetMode>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	f040 80fb 	bne.w	8004bc8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f006 f848 	bl	800aa6c <USB_ReadInterrupts>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80f1 	beq.w	8004bc6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f006 f83f 	bl	800aa6c <USB_ReadInterrupts>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049f8:	d104      	bne.n	8004a04 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a02:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f006 f82f 	bl	800aa6c <USB_ReadInterrupts>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a18:	d104      	bne.n	8004a24 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a22:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f006 f81f 	bl	800aa6c <USB_ReadInterrupts>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a38:	d104      	bne.n	8004a44 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a42:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f006 f80f 	bl	800aa6c <USB_ReadInterrupts>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d103      	bne.n	8004a60 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f006 f801 	bl	800aa6c <USB_ReadInterrupts>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a74:	d120      	bne.n	8004ab8 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004a7e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d113      	bne.n	8004ab8 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004a90:	2110      	movs	r1, #16
 8004a92:	6938      	ldr	r0, [r7, #16]
 8004a94:	f005 ff32 	bl	800a8fc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004a98:	6938      	ldr	r0, [r7, #16]
 8004a9a:	f005 ff61 	bl	800a960 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	7a5b      	ldrb	r3, [r3, #9]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d105      	bne.n	8004ab2 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2101      	movs	r1, #1
 8004aac:	4618      	mov	r0, r3
 8004aae:	f006 f81f 	bl	800aaf0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f00a fe23 	bl	800f6fe <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f005 ffd5 	bl	800aa6c <USB_ReadInterrupts>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004acc:	d102      	bne.n	8004ad4 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f001 fc87 	bl	80063e2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f005 ffc7 	bl	800aa6c <USB_ReadInterrupts>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d106      	bne.n	8004af6 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f00a fdec 	bl	800f6c6 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2208      	movs	r2, #8
 8004af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f005 ffb6 	bl	800aa6c <USB_ReadInterrupts>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b0a:	d139      	bne.n	8004b80 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f006 f82a 	bl	800ab6a <USB_HC_ReadInterrupt>
 8004b16:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e025      	b.n	8004b6a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d018      	beq.n	8004b64 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b48:	d106      	bne.n	8004b58 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f859 	bl	8004c08 <HCD_HC_IN_IRQHandler>
 8004b56:	e005      	b.n	8004b64 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 febb 	bl	80058da <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3301      	adds	r3, #1
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	795b      	ldrb	r3, [r3, #5]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d3d3      	bcc.n	8004b1e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f005 ff71 	bl	800aa6c <USB_ReadInterrupts>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d101      	bne.n	8004b98 <HAL_HCD_IRQHandler+0x1ea>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_HCD_IRQHandler+0x1ec>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d014      	beq.n	8004bc8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0210 	bic.w	r2, r2, #16
 8004bac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f001 fb38 	bl	8006224 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0210 	orr.w	r2, r2, #16
 8004bc2:	619a      	str	r2, [r3, #24]
 8004bc4:	e000      	b.n	8004bc8 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004bc6:	bf00      	nop
    }
  }
}
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b082      	sub	sp, #8
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_HCD_Stop+0x16>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e00d      	b.n	8004c00 <HAL_HCD_Stop+0x32>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f006 f8eb 	bl	800adcc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	4611      	mov	r1, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f005 ff33 	bl	800aa92 <USB_ReadChInterrupts>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d11a      	bne.n	8004c6c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c42:	461a      	mov	r2, r3
 8004c44:	2304      	movs	r3, #4
 8004c46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	334d      	adds	r3, #77	; 0x4d
 8004c58:	2207      	movs	r2, #7
 8004c5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	4611      	mov	r1, r2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f005 ff91 	bl	800ab8c <USB_HC_Halt>
 8004c6a:	e09e      	b.n	8004daa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	4611      	mov	r1, r2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f005 ff0c 	bl	800aa92 <USB_ReadChInterrupts>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c84:	d11b      	bne.n	8004cbe <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c92:	461a      	mov	r2, r3
 8004c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004c9a:	78fa      	ldrb	r2, [r7, #3]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	334d      	adds	r3, #77	; 0x4d
 8004caa:	2208      	movs	r2, #8
 8004cac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	78fa      	ldrb	r2, [r7, #3]
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f005 ff68 	bl	800ab8c <USB_HC_Halt>
 8004cbc:	e075      	b.n	8004daa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f005 fee3 	bl	800aa92 <USB_ReadChInterrupts>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d11a      	bne.n	8004d0c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	334d      	adds	r3, #77	; 0x4d
 8004cf8:	2206      	movs	r2, #6
 8004cfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	78fa      	ldrb	r2, [r7, #3]
 8004d02:	4611      	mov	r1, r2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f005 ff41 	bl	800ab8c <USB_HC_Halt>
 8004d0a:	e04e      	b.n	8004daa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f005 febc 	bl	800aa92 <USB_ReadChInterrupts>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d24:	d11b      	bne.n	8004d5e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d32:	461a      	mov	r2, r3
 8004d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	334d      	adds	r3, #77	; 0x4d
 8004d4a:	2209      	movs	r2, #9
 8004d4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	4611      	mov	r1, r2
 8004d56:	4618      	mov	r0, r3
 8004d58:	f005 ff18 	bl	800ab8c <USB_HC_Halt>
 8004d5c:	e025      	b.n	8004daa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f005 fe93 	bl	800aa92 <USB_ReadChInterrupts>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b80      	cmp	r3, #128	; 0x80
 8004d74:	d119      	bne.n	8004daa <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d82:	461a      	mov	r2, r3
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004d88:	78fa      	ldrb	r2, [r7, #3]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	334d      	adds	r3, #77	; 0x4d
 8004d98:	2207      	movs	r2, #7
 8004d9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	4611      	mov	r1, r2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f005 fef1 	bl	800ab8c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	4611      	mov	r1, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f005 fe6d 	bl	800aa92 <USB_ReadChInterrupts>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc2:	d112      	bne.n	8004dea <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f005 fedd 	bl	800ab8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dde:	461a      	mov	r2, r3
 8004de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004de4:	6093      	str	r3, [r2, #8]
 8004de6:	f000 bd75 	b.w	80058d4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f005 fe4d 	bl	800aa92 <USB_ReadChInterrupts>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	f040 8128 	bne.w	8005054 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e10:	461a      	mov	r2, r3
 8004e12:	2320      	movs	r3, #32
 8004e14:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e16:	78fa      	ldrb	r2, [r7, #3]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	331b      	adds	r3, #27
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d119      	bne.n	8004e60 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	331b      	adds	r3, #27
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	799b      	ldrb	r3, [r3, #6]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	1a9b      	subs	r3, r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	3330      	adds	r3, #48	; 0x30
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	1ac9      	subs	r1, r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4403      	add	r3, r0
 8004e9c:	3338      	adds	r3, #56	; 0x38
 8004e9e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	334d      	adds	r3, #77	; 0x4d
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3344      	adds	r3, #68	; 0x44
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004eda:	78fa      	ldrb	r2, [r7, #3]
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	3326      	adds	r3, #38	; 0x26
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	3326      	adds	r3, #38	; 0x26
 8004f00:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d110      	bne.n	8004f28 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f005 fe3c 	bl	800ab8c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f20:	461a      	mov	r2, r3
 8004f22:	2310      	movs	r3, #16
 8004f24:	6093      	str	r3, [r2, #8]
 8004f26:	e03d      	b.n	8004fa4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	3326      	adds	r3, #38	; 0x26
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d00a      	beq.n	8004f54 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3326      	adds	r3, #38	; 0x26
 8004f4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d127      	bne.n	8004fa4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	78fa      	ldrb	r2, [r7, #3]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f72:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004f74:	78fa      	ldrb	r2, [r7, #3]
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	334c      	adds	r3, #76	; 0x4c
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f88:	78fa      	ldrb	r2, [r7, #3]
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	334c      	adds	r3, #76	; 0x4c
 8004f98:	781a      	ldrb	r2, [r3, #0]
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f00a fbd7 	bl	800f752 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	799b      	ldrb	r3, [r3, #6]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d13b      	bne.n	8005024 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3338      	adds	r3, #56	; 0x38
 8004fbc:	6819      	ldr	r1, [r3, #0]
 8004fbe:	78fa      	ldrb	r2, [r7, #3]
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4403      	add	r3, r0
 8004fcc:	3328      	adds	r3, #40	; 0x28
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	440b      	add	r3, r1
 8004fd2:	1e59      	subs	r1, r3, #1
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	1a9b      	subs	r3, r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4403      	add	r3, r0
 8004fe2:	3328      	adds	r3, #40	; 0x28
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 8470 	beq.w	80058d4 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	333c      	adds	r3, #60	; 0x3c
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	f083 0301 	eor.w	r3, r3, #1
 800500c:	b2d8      	uxtb	r0, r3
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	333c      	adds	r3, #60	; 0x3c
 800501c:	4602      	mov	r2, r0
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	f000 bc58 	b.w	80058d4 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005024:	78fa      	ldrb	r2, [r7, #3]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	333c      	adds	r3, #60	; 0x3c
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	78fa      	ldrb	r2, [r7, #3]
 8005038:	f083 0301 	eor.w	r3, r3, #1
 800503c:	b2d8      	uxtb	r0, r3
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	333c      	adds	r3, #60	; 0x3c
 800504c:	4602      	mov	r2, r0
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	f000 bc40 	b.w	80058d4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	78fa      	ldrb	r2, [r7, #3]
 800505a:	4611      	mov	r1, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f005 fd18 	bl	800aa92 <USB_ReadChInterrupts>
 8005062:	4603      	mov	r3, r0
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b20      	cmp	r3, #32
 800506a:	d131      	bne.n	80050d0 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4413      	add	r3, r2
 8005074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005078:	461a      	mov	r2, r3
 800507a:	2320      	movs	r3, #32
 800507c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800507e:	78fa      	ldrb	r2, [r7, #3]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	331a      	adds	r3, #26
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	f040 841f 	bne.w	80058d4 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	331b      	adds	r3, #27
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	334d      	adds	r3, #77	; 0x4d
 80050ba:	2203      	movs	r2, #3
 80050bc:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	4611      	mov	r1, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f005 fd60 	bl	800ab8c <USB_HC_Halt>
 80050cc:	f000 bc02 	b.w	80058d4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	78fa      	ldrb	r2, [r7, #3]
 80050d6:	4611      	mov	r1, r2
 80050d8:	4618      	mov	r0, r3
 80050da:	f005 fcda 	bl	800aa92 <USB_ReadChInterrupts>
 80050de:	4603      	mov	r3, r0
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	f040 8305 	bne.w	80056f4 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f6:	461a      	mov	r2, r3
 80050f8:	2302      	movs	r3, #2
 80050fa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80050fc:	78fa      	ldrb	r2, [r7, #3]
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	334d      	adds	r3, #77	; 0x4d
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d114      	bne.n	800513c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	334d      	adds	r3, #77	; 0x4d
 8005122:	2202      	movs	r2, #2
 8005124:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	334c      	adds	r3, #76	; 0x4c
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e2cc      	b.n	80056d6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800513c:	78fa      	ldrb	r2, [r7, #3]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	334d      	adds	r3, #77	; 0x4d
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b06      	cmp	r3, #6
 8005150:	d114      	bne.n	800517c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005152:	78fa      	ldrb	r2, [r7, #3]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	334d      	adds	r3, #77	; 0x4d
 8005162:	2202      	movs	r2, #2
 8005164:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005166:	78fa      	ldrb	r2, [r7, #3]
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	334c      	adds	r3, #76	; 0x4c
 8005176:	2205      	movs	r2, #5
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	e2ac      	b.n	80056d6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	334d      	adds	r3, #77	; 0x4d
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b07      	cmp	r3, #7
 8005190:	d00b      	beq.n	80051aa <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005192:	78fa      	ldrb	r2, [r7, #3]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	334d      	adds	r3, #77	; 0x4d
 80051a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80051a4:	2b09      	cmp	r3, #9
 80051a6:	f040 80a6 	bne.w	80052f6 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	334d      	adds	r3, #77	; 0x4d
 80051ba:	2202      	movs	r2, #2
 80051bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	3344      	adds	r3, #68	; 0x44
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	1c59      	adds	r1, r3, #1
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4403      	add	r3, r0
 80051de:	3344      	adds	r3, #68	; 0x44
 80051e0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	3344      	adds	r3, #68	; 0x44
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d943      	bls.n	8005280 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3344      	adds	r3, #68	; 0x44
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	1a9b      	subs	r3, r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	331a      	adds	r3, #26
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d123      	bne.n	800526a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005222:	78fa      	ldrb	r2, [r7, #3]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	331b      	adds	r3, #27
 8005232:	2200      	movs	r2, #0
 8005234:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	331c      	adds	r3, #28
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4413      	add	r3, r2
 8005252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	440a      	add	r2, r1
 8005260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005268:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800526a:	78fa      	ldrb	r2, [r7, #3]
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	4613      	mov	r3, r2
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	334c      	adds	r3, #76	; 0x4c
 800527a:	2204      	movs	r2, #4
 800527c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800527e:	e229      	b.n	80056d4 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005280:	78fa      	ldrb	r2, [r7, #3]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	440b      	add	r3, r1
 800528e:	334c      	adds	r3, #76	; 0x4c
 8005290:	2202      	movs	r2, #2
 8005292:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005294:	78fa      	ldrb	r2, [r7, #3]
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	1a9b      	subs	r3, r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	3326      	adds	r3, #38	; 0x26
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00b      	beq.n	80052c2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	3326      	adds	r3, #38	; 0x26
 80052ba:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052bc:	2b02      	cmp	r3, #2
 80052be:	f040 8209 	bne.w	80056d4 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052d8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ee:	461a      	mov	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052f4:	e1ee      	b.n	80056d4 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	334d      	adds	r3, #77	; 0x4d
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b05      	cmp	r3, #5
 800530a:	f040 80c8 	bne.w	800549e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	334d      	adds	r3, #77	; 0x4d
 800531e:	2202      	movs	r2, #2
 8005320:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	331b      	adds	r3, #27
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	f040 81ce 	bne.w	80056d6 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	3326      	adds	r3, #38	; 0x26
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d16b      	bne.n	8005428 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	3348      	adds	r3, #72	; 0x48
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	1c59      	adds	r1, r3, #1
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4403      	add	r3, r0
 8005370:	3348      	adds	r3, #72	; 0x48
 8005372:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005374:	78fa      	ldrb	r2, [r7, #3]
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	3348      	adds	r3, #72	; 0x48
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d943      	bls.n	8005412 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	3348      	adds	r3, #72	; 0x48
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	331b      	adds	r3, #27
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	3344      	adds	r3, #68	; 0x44
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d809      	bhi.n	80053dc <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80053c8:	78fa      	ldrb	r2, [r7, #3]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	331c      	adds	r3, #28
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	78fa      	ldrb	r2, [r7, #3]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fa:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80053fc:	78fa      	ldrb	r2, [r7, #3]
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	4613      	mov	r3, r2
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	334c      	adds	r3, #76	; 0x4c
 800540c:	2204      	movs	r2, #4
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e014      	b.n	800543c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	334c      	adds	r3, #76	; 0x4c
 8005422:	2202      	movs	r2, #2
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	e009      	b.n	800543c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	334c      	adds	r3, #76	; 0x4c
 8005438:	2202      	movs	r2, #2
 800543a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800543c:	78fa      	ldrb	r2, [r7, #3]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	3326      	adds	r3, #38	; 0x26
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	3326      	adds	r3, #38	; 0x26
 8005462:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005464:	2b02      	cmp	r3, #2
 8005466:	f040 8136 	bne.w	80056d6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	4413      	add	r3, r2
 8005472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005480:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005488:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	4413      	add	r3, r2
 8005492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005496:	461a      	mov	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	e11b      	b.n	80056d6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	334d      	adds	r3, #77	; 0x4d
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	f040 8081 	bne.w	80055b8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054b6:	78fa      	ldrb	r2, [r7, #3]
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	334d      	adds	r3, #77	; 0x4d
 80054c6:	2202      	movs	r2, #2
 80054c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054ca:	78fa      	ldrb	r2, [r7, #3]
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	1a9b      	subs	r3, r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	331b      	adds	r3, #27
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	f040 80fa 	bne.w	80056d6 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	334c      	adds	r3, #76	; 0x4c
 80054f2:	2202      	movs	r2, #2
 80054f4:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	440a      	add	r2, r1
 800550c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005514:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	440a      	add	r2, r1
 800552c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005534:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	440a      	add	r2, r1
 800554c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005550:	f023 0320 	bic.w	r3, r3, #32
 8005554:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	3326      	adds	r3, #38	; 0x26
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	3326      	adds	r3, #38	; 0x26
 800557c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800557e:	2b02      	cmp	r3, #2
 8005580:	f040 80a9 	bne.w	80056d6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4413      	add	r3, r2
 800558c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800559a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	461a      	mov	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e08e      	b.n	80056d6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	1a9b      	subs	r3, r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	334d      	adds	r3, #77	; 0x4d
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d143      	bne.n	8005656 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	334d      	adds	r3, #77	; 0x4d
 80055de:	2202      	movs	r2, #2
 80055e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055e2:	78fa      	ldrb	r2, [r7, #3]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	334c      	adds	r3, #76	; 0x4c
 80055f2:	2202      	movs	r2, #2
 80055f4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055f6:	78fa      	ldrb	r2, [r7, #3]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	3326      	adds	r3, #38	; 0x26
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	3326      	adds	r3, #38	; 0x26
 800561c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800561e:	2b02      	cmp	r3, #2
 8005620:	d159      	bne.n	80056d6 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005638:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005640:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4413      	add	r3, r2
 800564a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564e:	461a      	mov	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	e03f      	b.n	80056d6 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005656:	78fa      	ldrb	r2, [r7, #3]
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	1a9b      	subs	r3, r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	334d      	adds	r3, #77	; 0x4d
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d126      	bne.n	80056ba <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	334d      	adds	r3, #77	; 0x4d
 800567c:	2202      	movs	r2, #2
 800567e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005680:	78fa      	ldrb	r2, [r7, #3]
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	3344      	adds	r3, #68	; 0x44
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	1c59      	adds	r1, r3, #1
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4403      	add	r3, r0
 80056a0:	3344      	adds	r3, #68	; 0x44
 80056a2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	334c      	adds	r3, #76	; 0x4c
 80056b4:	2204      	movs	r2, #4
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	e00d      	b.n	80056d6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	334d      	adds	r3, #77	; 0x4d
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	f000 8100 	beq.w	80058d2 <HCD_HC_IN_IRQHandler+0xcca>
 80056d2:	e000      	b.n	80056d6 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056d4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056d6:	78fa      	ldrb	r2, [r7, #3]
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	334c      	adds	r3, #76	; 0x4c
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f00a f830 	bl	800f752 <HAL_HCD_HC_NotifyURBChange_Callback>
 80056f2:	e0ef      	b.n	80058d4 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f005 f9c8 	bl	800aa92 <USB_ReadChInterrupts>
 8005702:	4603      	mov	r3, r0
 8005704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005708:	2b40      	cmp	r3, #64	; 0x40
 800570a:	d12f      	bne.n	800576c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4413      	add	r3, r2
 8005714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005718:	461a      	mov	r2, r3
 800571a:	2340      	movs	r3, #64	; 0x40
 800571c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	334d      	adds	r3, #77	; 0x4d
 800572e:	2205      	movs	r2, #5
 8005730:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005732:	78fa      	ldrb	r2, [r7, #3]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	331a      	adds	r3, #26
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d109      	bne.n	800575c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	3344      	adds	r3, #68	; 0x44
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	78fa      	ldrb	r2, [r7, #3]
 8005762:	4611      	mov	r1, r2
 8005764:	4618      	mov	r0, r3
 8005766:	f005 fa11 	bl	800ab8c <USB_HC_Halt>
 800576a:	e0b3      	b.n	80058d4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	78fa      	ldrb	r2, [r7, #3]
 8005772:	4611      	mov	r1, r2
 8005774:	4618      	mov	r0, r3
 8005776:	f005 f98c 	bl	800aa92 <USB_ReadChInterrupts>
 800577a:	4603      	mov	r3, r0
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	2b10      	cmp	r3, #16
 8005782:	f040 80a7 	bne.w	80058d4 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005786:	78fa      	ldrb	r2, [r7, #3]
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	4613      	mov	r3, r2
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	440b      	add	r3, r1
 8005794:	3326      	adds	r3, #38	; 0x26
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d11b      	bne.n	80057d4 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800579c:	78fa      	ldrb	r2, [r7, #3]
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	3344      	adds	r3, #68	; 0x44
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80057b0:	78fa      	ldrb	r2, [r7, #3]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	1a9b      	subs	r3, r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	334d      	adds	r3, #77	; 0x4d
 80057c0:	2204      	movs	r2, #4
 80057c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	4611      	mov	r1, r2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f005 f9dd 	bl	800ab8c <USB_HC_Halt>
 80057d2:	e03f      	b.n	8005854 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057d4:	78fa      	ldrb	r2, [r7, #3]
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	3326      	adds	r3, #38	; 0x26
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80057ea:	78fa      	ldrb	r2, [r7, #3]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	1a9b      	subs	r3, r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	3326      	adds	r3, #38	; 0x26
 80057fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d129      	bne.n	8005854 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005800:	78fa      	ldrb	r2, [r7, #3]
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	4613      	mov	r3, r2
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	3344      	adds	r3, #68	; 0x44
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	799b      	ldrb	r3, [r3, #6]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <HCD_HC_IN_IRQHandler+0xc2a>
 800581c:	78fa      	ldrb	r2, [r7, #3]
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	4613      	mov	r3, r2
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	331b      	adds	r3, #27
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d110      	bne.n	8005854 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005832:	78fa      	ldrb	r2, [r7, #3]
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	334d      	adds	r3, #77	; 0x4d
 8005842:	2204      	movs	r2, #4
 8005844:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	4611      	mov	r1, r2
 800584e:	4618      	mov	r0, r3
 8005850:	f005 f99c 	bl	800ab8c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005854:	78fa      	ldrb	r2, [r7, #3]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	331b      	adds	r3, #27
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d129      	bne.n	80058be <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800586a:	78fa      	ldrb	r2, [r7, #3]
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	331b      	adds	r3, #27
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	4413      	add	r3, r2
 8005886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	440a      	add	r2, r1
 8005894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800589c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	78fa      	ldrb	r2, [r7, #3]
 80058ae:	0151      	lsls	r1, r2, #5
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	440a      	add	r2, r1
 80058b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058b8:	f043 0320 	orr.w	r3, r3, #32
 80058bc:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80058be:	78fb      	ldrb	r3, [r7, #3]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ca:	461a      	mov	r2, r3
 80058cc:	2310      	movs	r3, #16
 80058ce:	6093      	str	r3, [r2, #8]
 80058d0:	e000      	b.n	80058d4 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80058d2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b086      	sub	sp, #24
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	4611      	mov	r1, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f005 f8ca 	bl	800aa92 <USB_ReadChInterrupts>
 80058fe:	4603      	mov	r3, r0
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b04      	cmp	r3, #4
 8005906:	d11b      	bne.n	8005940 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	4413      	add	r3, r2
 8005910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005914:	461a      	mov	r2, r3
 8005916:	2304      	movs	r3, #4
 8005918:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800591a:	78fa      	ldrb	r2, [r7, #3]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	334d      	adds	r3, #77	; 0x4d
 800592a:	2207      	movs	r2, #7
 800592c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	78fa      	ldrb	r2, [r7, #3]
 8005934:	4611      	mov	r1, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f005 f928 	bl	800ab8c <USB_HC_Halt>
 800593c:	f000 bc6f 	b.w	800621e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	78fa      	ldrb	r2, [r7, #3]
 8005946:	4611      	mov	r1, r2
 8005948:	4618      	mov	r0, r3
 800594a:	f005 f8a2 	bl	800aa92 <USB_ReadChInterrupts>
 800594e:	4603      	mov	r3, r0
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b20      	cmp	r3, #32
 8005956:	f040 8082 	bne.w	8005a5e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	461a      	mov	r2, r3
 8005968:	2320      	movs	r3, #32
 800596a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	3319      	adds	r3, #25
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d124      	bne.n	80059cc <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005982:	78fa      	ldrb	r2, [r7, #3]
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	3319      	adds	r3, #25
 8005992:	2200      	movs	r2, #0
 8005994:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005996:	78fa      	ldrb	r2, [r7, #3]
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	334c      	adds	r3, #76	; 0x4c
 80059a6:	2202      	movs	r2, #2
 80059a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80059aa:	78fa      	ldrb	r2, [r7, #3]
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	4613      	mov	r3, r2
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	1a9b      	subs	r3, r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	334d      	adds	r3, #77	; 0x4d
 80059ba:	2203      	movs	r2, #3
 80059bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f005 f8e0 	bl	800ab8c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80059cc:	78fa      	ldrb	r2, [r7, #3]
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	331a      	adds	r3, #26
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	f040 841d 	bne.w	800621e <HCD_HC_OUT_IRQHandler+0x944>
 80059e4:	78fa      	ldrb	r2, [r7, #3]
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	331b      	adds	r3, #27
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f040 8411 	bne.w	800621e <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80059fc:	78fa      	ldrb	r2, [r7, #3]
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	3326      	adds	r3, #38	; 0x26
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d009      	beq.n	8005a26 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005a12:	78fa      	ldrb	r2, [r7, #3]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	331b      	adds	r3, #27
 8005a22:	2201      	movs	r2, #1
 8005a24:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005a26:	78fa      	ldrb	r2, [r7, #3]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	334d      	adds	r3, #77	; 0x4d
 8005a36:	2203      	movs	r2, #3
 8005a38:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	78fa      	ldrb	r2, [r7, #3]
 8005a40:	4611      	mov	r1, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f005 f8a2 	bl	800ab8c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005a48:	78fa      	ldrb	r2, [r7, #3]
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	3344      	adds	r3, #68	; 0x44
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	e3df      	b.n	800621e <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	78fa      	ldrb	r2, [r7, #3]
 8005a64:	4611      	mov	r1, r2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f005 f813 	bl	800aa92 <USB_ReadChInterrupts>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a76:	d111      	bne.n	8005a9c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a84:	461a      	mov	r2, r3
 8005a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a8a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	4611      	mov	r1, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f005 f879 	bl	800ab8c <USB_HC_Halt>
 8005a9a:	e3c0      	b.n	800621e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f004 fff4 	bl	800aa92 <USB_ReadChInterrupts>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d168      	bne.n	8005b86 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3344      	adds	r3, #68	; 0x44
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	78fa      	ldrb	r2, [r7, #3]
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f004 ffde 	bl	800aa92 <USB_ReadChInterrupts>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b40      	cmp	r3, #64	; 0x40
 8005ade:	d112      	bne.n	8005b06 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	1a9b      	subs	r3, r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	3319      	adds	r3, #25
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b00:	461a      	mov	r2, r3
 8005b02:	2340      	movs	r3, #64	; 0x40
 8005b04:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005b06:	78fa      	ldrb	r2, [r7, #3]
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	331b      	adds	r3, #27
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d019      	beq.n	8005b50 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	331b      	adds	r3, #27
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	78fa      	ldrb	r2, [r7, #3]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2301      	movs	r3, #1
 8005b60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	334d      	adds	r3, #77	; 0x4d
 8005b72:	2201      	movs	r2, #1
 8005b74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	78fa      	ldrb	r2, [r7, #3]
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f005 f804 	bl	800ab8c <USB_HC_Halt>
 8005b84:	e34b      	b.n	800621e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	78fa      	ldrb	r2, [r7, #3]
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f004 ff7f 	bl	800aa92 <USB_ReadChInterrupts>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	d139      	bne.n	8005c12 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005b9e:	78fa      	ldrb	r2, [r7, #3]
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	334d      	adds	r3, #77	; 0x4d
 8005bae:	2205      	movs	r2, #5
 8005bb0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005bb2:	78fa      	ldrb	r2, [r7, #3]
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	1a9b      	subs	r3, r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	331a      	adds	r3, #26
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005bc8:	78fa      	ldrb	r2, [r7, #3]
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	1a9b      	subs	r3, r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	3319      	adds	r3, #25
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	4613      	mov	r3, r2
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	3344      	adds	r3, #68	; 0x44
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f004 ffc7 	bl	800ab8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2340      	movs	r3, #64	; 0x40
 8005c0e:	6093      	str	r3, [r2, #8]
 8005c10:	e305      	b.n	800621e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	78fa      	ldrb	r2, [r7, #3]
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f004 ff39 	bl	800aa92 <USB_ReadChInterrupts>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d11a      	bne.n	8005c60 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c36:	461a      	mov	r2, r3
 8005c38:	2308      	movs	r3, #8
 8005c3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4613      	mov	r3, r2
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	334d      	adds	r3, #77	; 0x4d
 8005c4c:	2206      	movs	r2, #6
 8005c4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f004 ff97 	bl	800ab8c <USB_HC_Halt>
 8005c5e:	e2de      	b.n	800621e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	78fa      	ldrb	r2, [r7, #3]
 8005c66:	4611      	mov	r1, r2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f004 ff12 	bl	800aa92 <USB_ReadChInterrupts>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d144      	bne.n	8005d02 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	1a9b      	subs	r3, r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	3344      	adds	r3, #68	; 0x44
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005c8c:	78fa      	ldrb	r2, [r7, #3]
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	4613      	mov	r3, r2
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	1a9b      	subs	r3, r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	334d      	adds	r3, #77	; 0x4d
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005ca0:	78fa      	ldrb	r2, [r7, #3]
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	1a9b      	subs	r3, r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	3319      	adds	r3, #25
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d114      	bne.n	8005ce0 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d109      	bne.n	8005ce0 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	3319      	adds	r3, #25
 8005cdc:	2201      	movs	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f004 ff4f 	bl	800ab8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005cee:	78fb      	ldrb	r3, [r7, #3]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	6093      	str	r3, [r2, #8]
 8005d00:	e28d      	b.n	800621e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	4611      	mov	r1, r2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f004 fec1 	bl	800aa92 <USB_ReadChInterrupts>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d16:	2b80      	cmp	r3, #128	; 0x80
 8005d18:	d169      	bne.n	8005dee <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	799b      	ldrb	r3, [r3, #6]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d111      	bne.n	8005d46 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005d22:	78fa      	ldrb	r2, [r7, #3]
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	4613      	mov	r3, r2
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	440b      	add	r3, r1
 8005d30:	334d      	adds	r3, #77	; 0x4d
 8005d32:	2207      	movs	r2, #7
 8005d34:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	78fa      	ldrb	r2, [r7, #3]
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f004 ff24 	bl	800ab8c <USB_HC_Halt>
 8005d44:	e049      	b.n	8005dda <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3344      	adds	r3, #68	; 0x44
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	1c59      	adds	r1, r3, #1
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4403      	add	r3, r0
 8005d66:	3344      	adds	r3, #68	; 0x44
 8005d68:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005d6a:	78fa      	ldrb	r2, [r7, #3]
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	3344      	adds	r3, #68	; 0x44
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d922      	bls.n	8005dc6 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005d80:	78fa      	ldrb	r2, [r7, #3]
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	4613      	mov	r3, r2
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	1a9b      	subs	r3, r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	3344      	adds	r3, #68	; 0x44
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005d94:	78fa      	ldrb	r2, [r7, #3]
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	1a9b      	subs	r3, r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	334c      	adds	r3, #76	; 0x4c
 8005da4:	2204      	movs	r2, #4
 8005da6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	334c      	adds	r3, #76	; 0x4c
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f009 fcc7 	bl	800f752 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005dc4:	e009      	b.n	8005dda <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005dc6:	78fa      	ldrb	r2, [r7, #3]
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	1a9b      	subs	r3, r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	334c      	adds	r3, #76	; 0x4c
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	461a      	mov	r2, r3
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	6093      	str	r3, [r2, #8]
 8005dec:	e217      	b.n	800621e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	78fa      	ldrb	r2, [r7, #3]
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f004 fe4b 	bl	800aa92 <USB_ReadChInterrupts>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e06:	d11b      	bne.n	8005e40 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005e08:	78fa      	ldrb	r2, [r7, #3]
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	334d      	adds	r3, #77	; 0x4d
 8005e18:	2209      	movs	r2, #9
 8005e1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	78fa      	ldrb	r2, [r7, #3]
 8005e22:	4611      	mov	r1, r2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f004 feb1 	bl	800ab8c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e36:	461a      	mov	r2, r3
 8005e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e3c:	6093      	str	r3, [r2, #8]
 8005e3e:	e1ee      	b.n	800621e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f004 fe22 	bl	800aa92 <USB_ReadChInterrupts>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	f040 81df 	bne.w	8006218 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e66:	461a      	mov	r2, r3
 8005e68:	2302      	movs	r3, #2
 8005e6a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	334d      	adds	r3, #77	; 0x4d
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	f040 8093 	bne.w	8005faa <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e84:	78fa      	ldrb	r2, [r7, #3]
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	334d      	adds	r3, #77	; 0x4d
 8005e94:	2202      	movs	r2, #2
 8005e96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005e98:	78fa      	ldrb	r2, [r7, #3]
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	334c      	adds	r3, #76	; 0x4c
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005eac:	78fa      	ldrb	r2, [r7, #3]
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	3326      	adds	r3, #38	; 0x26
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d00b      	beq.n	8005eda <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005ec2:	78fa      	ldrb	r2, [r7, #3]
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	3326      	adds	r3, #38	; 0x26
 8005ed2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	f040 8190 	bne.w	80061fa <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	799b      	ldrb	r3, [r3, #6]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d115      	bne.n	8005f0e <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	333d      	adds	r3, #61	; 0x3d
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	78fa      	ldrb	r2, [r7, #3]
 8005ef6:	f083 0301 	eor.w	r3, r3, #1
 8005efa:	b2d8      	uxtb	r0, r3
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	4613      	mov	r3, r2
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	1a9b      	subs	r3, r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	440b      	add	r3, r1
 8005f08:	333d      	adds	r3, #61	; 0x3d
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	799b      	ldrb	r3, [r3, #6]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	f040 8171 	bne.w	80061fa <HCD_HC_OUT_IRQHandler+0x920>
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	3334      	adds	r3, #52	; 0x34
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8165 	beq.w	80061fa <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005f30:	78fa      	ldrb	r2, [r7, #3]
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	4613      	mov	r3, r2
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	3334      	adds	r3, #52	; 0x34
 8005f40:	6819      	ldr	r1, [r3, #0]
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4403      	add	r3, r0
 8005f50:	3328      	adds	r3, #40	; 0x28
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	440b      	add	r3, r1
 8005f56:	1e59      	subs	r1, r3, #1
 8005f58:	78fa      	ldrb	r2, [r7, #3]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4403      	add	r3, r0
 8005f66:	3328      	adds	r3, #40	; 0x28
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f6e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 813f 	beq.w	80061fa <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005f7c:	78fa      	ldrb	r2, [r7, #3]
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	4613      	mov	r3, r2
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	333d      	adds	r3, #61	; 0x3d
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	78fa      	ldrb	r2, [r7, #3]
 8005f90:	f083 0301 	eor.w	r3, r3, #1
 8005f94:	b2d8      	uxtb	r0, r3
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	333d      	adds	r3, #61	; 0x3d
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	e127      	b.n	80061fa <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	334d      	adds	r3, #77	; 0x4d
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d120      	bne.n	8006002 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005fc0:	78fa      	ldrb	r2, [r7, #3]
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	1a9b      	subs	r3, r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	334d      	adds	r3, #77	; 0x4d
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	331b      	adds	r3, #27
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	f040 8107 	bne.w	80061fa <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005fec:	78fa      	ldrb	r2, [r7, #3]
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	334c      	adds	r3, #76	; 0x4c
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	e0fb      	b.n	80061fa <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	1a9b      	subs	r3, r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	334d      	adds	r3, #77	; 0x4d
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b04      	cmp	r3, #4
 8006016:	d13a      	bne.n	800608e <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006018:	78fa      	ldrb	r2, [r7, #3]
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	4613      	mov	r3, r2
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	1a9b      	subs	r3, r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	440b      	add	r3, r1
 8006026:	334d      	adds	r3, #77	; 0x4d
 8006028:	2202      	movs	r2, #2
 800602a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800602c:	78fa      	ldrb	r2, [r7, #3]
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	4613      	mov	r3, r2
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	1a9b      	subs	r3, r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	334c      	adds	r3, #76	; 0x4c
 800603c:	2202      	movs	r2, #2
 800603e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	331b      	adds	r3, #27
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b01      	cmp	r3, #1
 8006054:	f040 80d1 	bne.w	80061fa <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006058:	78fa      	ldrb	r2, [r7, #3]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	4613      	mov	r3, r2
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	331b      	adds	r3, #27
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	78fa      	ldrb	r2, [r7, #3]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	440a      	add	r2, r1
 8006082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800608a:	6053      	str	r3, [r2, #4]
 800608c:	e0b5      	b.n	80061fa <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800608e:	78fa      	ldrb	r2, [r7, #3]
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	334d      	adds	r3, #77	; 0x4d
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b05      	cmp	r3, #5
 80060a2:	d114      	bne.n	80060ce <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4613      	mov	r3, r2
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	334d      	adds	r3, #77	; 0x4d
 80060b4:	2202      	movs	r2, #2
 80060b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	334c      	adds	r3, #76	; 0x4c
 80060c8:	2202      	movs	r2, #2
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	e095      	b.n	80061fa <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80060ce:	78fa      	ldrb	r2, [r7, #3]
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	334d      	adds	r3, #77	; 0x4d
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b06      	cmp	r3, #6
 80060e2:	d114      	bne.n	800610e <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060e4:	78fa      	ldrb	r2, [r7, #3]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	334d      	adds	r3, #77	; 0x4d
 80060f4:	2202      	movs	r2, #2
 80060f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	334c      	adds	r3, #76	; 0x4c
 8006108:	2205      	movs	r2, #5
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e075      	b.n	80061fa <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	334d      	adds	r3, #77	; 0x4d
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b07      	cmp	r3, #7
 8006122:	d00a      	beq.n	800613a <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006124:	78fa      	ldrb	r2, [r7, #3]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	334d      	adds	r3, #77	; 0x4d
 8006134:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006136:	2b09      	cmp	r3, #9
 8006138:	d170      	bne.n	800621c <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	334d      	adds	r3, #77	; 0x4d
 800614a:	2202      	movs	r2, #2
 800614c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	3344      	adds	r3, #68	; 0x44
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	1c59      	adds	r1, r3, #1
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	1a9b      	subs	r3, r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4403      	add	r3, r0
 800616e:	3344      	adds	r3, #68	; 0x44
 8006170:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	1a9b      	subs	r3, r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	3344      	adds	r3, #68	; 0x44
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d914      	bls.n	80061b2 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006188:	78fa      	ldrb	r2, [r7, #3]
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	3344      	adds	r3, #68	; 0x44
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	334c      	adds	r3, #76	; 0x4c
 80061ac:	2204      	movs	r2, #4
 80061ae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061b0:	e022      	b.n	80061f8 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	334c      	adds	r3, #76	; 0x4c
 80061c2:	2202      	movs	r2, #2
 80061c4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061dc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061e4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f2:	461a      	mov	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061f8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80061fa:	78fa      	ldrb	r2, [r7, #3]
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	334c      	adds	r3, #76	; 0x4c
 800620a:	781a      	ldrb	r2, [r3, #0]
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f009 fa9e 	bl	800f752 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006216:	e002      	b.n	800621e <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006218:	bf00      	nop
 800621a:	e000      	b.n	800621e <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800621c:	bf00      	nop
  }
}
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08a      	sub	sp, #40	; 0x28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	0c5b      	lsrs	r3, r3, #17
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	091b      	lsrs	r3, r3, #4
 8006254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006258:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b02      	cmp	r3, #2
 800625e:	d004      	beq.n	800626a <HCD_RXQLVL_IRQHandler+0x46>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b05      	cmp	r3, #5
 8006264:	f000 80b6 	beq.w	80063d4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006268:	e0b7      	b.n	80063da <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80b3 	beq.w	80063d8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4613      	mov	r3, r2
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	440b      	add	r3, r1
 8006280:	332c      	adds	r3, #44	; 0x2c
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 80a7 	beq.w	80063d8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	4613      	mov	r3, r2
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	3338      	adds	r3, #56	; 0x38
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	18d1      	adds	r1, r2, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4613      	mov	r3, r2
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4403      	add	r3, r0
 80062ae:	3334      	adds	r3, #52	; 0x34
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4299      	cmp	r1, r3
 80062b4:	f200 8083 	bhi.w	80063be <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	4613      	mov	r3, r2
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	332c      	adds	r3, #44	; 0x2c
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	b292      	uxth	r2, r2
 80062d2:	4619      	mov	r1, r3
 80062d4:	f004 fb72 	bl	800a9bc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4613      	mov	r3, r2
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	440b      	add	r3, r1
 80062e6:	332c      	adds	r3, #44	; 0x2c
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	18d1      	adds	r1, r2, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4613      	mov	r3, r2
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4403      	add	r3, r0
 80062fc:	332c      	adds	r3, #44	; 0x2c
 80062fe:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	4613      	mov	r3, r2
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	3338      	adds	r3, #56	; 0x38
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	18d1      	adds	r1, r2, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	4613      	mov	r3, r2
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	1a9b      	subs	r3, r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4403      	add	r3, r0
 8006324:	3338      	adds	r3, #56	; 0x38
 8006326:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	4413      	add	r3, r2
 8006330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	0cdb      	lsrs	r3, r3, #19
 8006338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800633c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4613      	mov	r3, r2
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	3328      	adds	r3, #40	; 0x28
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	461a      	mov	r2, r3
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4293      	cmp	r3, r2
 8006356:	d13f      	bne.n	80063d8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d03c      	beq.n	80063d8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006374:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800637c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	461a      	mov	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4613      	mov	r3, r2
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	333c      	adds	r3, #60	; 0x3c
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	f083 0301 	eor.w	r3, r3, #1
 80063a6:	b2d8      	uxtb	r0, r3
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4613      	mov	r3, r2
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	1a9b      	subs	r3, r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	333c      	adds	r3, #60	; 0x3c
 80063b8:	4602      	mov	r2, r0
 80063ba:	701a      	strb	r2, [r3, #0]
      break;
 80063bc:	e00c      	b.n	80063d8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	4613      	mov	r3, r2
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	334c      	adds	r3, #76	; 0x4c
 80063ce:	2204      	movs	r2, #4
 80063d0:	701a      	strb	r2, [r3, #0]
      break;
 80063d2:	e001      	b.n	80063d8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80063d4:	bf00      	nop
 80063d6:	e000      	b.n	80063da <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80063d8:	bf00      	nop
  }
}
 80063da:	bf00      	nop
 80063dc:	3728      	adds	r7, #40	; 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800640e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b02      	cmp	r3, #2
 8006418:	d10b      	bne.n	8006432 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b01      	cmp	r3, #1
 8006422:	d102      	bne.n	800642a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f009 f95c 	bl	800f6e2 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f043 0302 	orr.w	r3, r3, #2
 8006430:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b08      	cmp	r3, #8
 800643a:	d132      	bne.n	80064a2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f043 0308 	orr.w	r3, r3, #8
 8006442:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d126      	bne.n	800649c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	7a5b      	ldrb	r3, [r3, #9]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d113      	bne.n	800647e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800645c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006460:	d106      	bne.n	8006470 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2102      	movs	r1, #2
 8006468:	4618      	mov	r0, r3
 800646a:	f004 fb41 	bl	800aaf0 <USB_InitFSLSPClkSel>
 800646e:	e011      	b.n	8006494 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2101      	movs	r1, #1
 8006476:	4618      	mov	r0, r3
 8006478:	f004 fb3a 	bl	800aaf0 <USB_InitFSLSPClkSel>
 800647c:	e00a      	b.n	8006494 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	79db      	ldrb	r3, [r3, #7]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d106      	bne.n	8006494 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800648c:	461a      	mov	r2, r3
 800648e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006492:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f009 f940 	bl	800f71a <HAL_HCD_PortEnabled_Callback>
 800649a:	e002      	b.n	80064a2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f009 f94a 	bl	800f736 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d103      	bne.n	80064b4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f043 0320 	orr.w	r3, r3, #32
 80064b2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064ba:	461a      	mov	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6013      	str	r3, [r2, #0]
}
 80064c0:	bf00      	nop
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e12b      	b.n	8006732 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f95d 	bl	80067ae <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2224      	movs	r2, #36	; 0x24
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0201 	bic.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800651a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800652a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800652c:	f003 f866 	bl	80095fc <HAL_RCC_GetPCLK1Freq>
 8006530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	4a81      	ldr	r2, [pc, #516]	; (800673c <HAL_I2C_Init+0x274>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d807      	bhi.n	800654c <HAL_I2C_Init+0x84>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4a80      	ldr	r2, [pc, #512]	; (8006740 <HAL_I2C_Init+0x278>)
 8006540:	4293      	cmp	r3, r2
 8006542:	bf94      	ite	ls
 8006544:	2301      	movls	r3, #1
 8006546:	2300      	movhi	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	e006      	b.n	800655a <HAL_I2C_Init+0x92>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4a7d      	ldr	r2, [pc, #500]	; (8006744 <HAL_I2C_Init+0x27c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	bf94      	ite	ls
 8006554:	2301      	movls	r3, #1
 8006556:	2300      	movhi	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e0e7      	b.n	8006732 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4a78      	ldr	r2, [pc, #480]	; (8006748 <HAL_I2C_Init+0x280>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	0c9b      	lsrs	r3, r3, #18
 800656c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	4a6a      	ldr	r2, [pc, #424]	; (800673c <HAL_I2C_Init+0x274>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d802      	bhi.n	800659c <HAL_I2C_Init+0xd4>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	3301      	adds	r3, #1
 800659a:	e009      	b.n	80065b0 <HAL_I2C_Init+0xe8>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065a2:	fb02 f303 	mul.w	r3, r2, r3
 80065a6:	4a69      	ldr	r2, [pc, #420]	; (800674c <HAL_I2C_Init+0x284>)
 80065a8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ac:	099b      	lsrs	r3, r3, #6
 80065ae:	3301      	adds	r3, #1
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	430b      	orrs	r3, r1
 80065b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	495c      	ldr	r1, [pc, #368]	; (800673c <HAL_I2C_Init+0x274>)
 80065cc:	428b      	cmp	r3, r1
 80065ce:	d819      	bhi.n	8006604 <HAL_I2C_Init+0x13c>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	1e59      	subs	r1, r3, #1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	fbb1 f3f3 	udiv	r3, r1, r3
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065e4:	400b      	ands	r3, r1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <HAL_I2C_Init+0x138>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1e59      	subs	r1, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80065f8:	3301      	adds	r3, #1
 80065fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065fe:	e051      	b.n	80066a4 <HAL_I2C_Init+0x1dc>
 8006600:	2304      	movs	r3, #4
 8006602:	e04f      	b.n	80066a4 <HAL_I2C_Init+0x1dc>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d111      	bne.n	8006630 <HAL_I2C_Init+0x168>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	1e58      	subs	r0, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6859      	ldr	r1, [r3, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	440b      	add	r3, r1
 800661a:	fbb0 f3f3 	udiv	r3, r0, r3
 800661e:	3301      	adds	r3, #1
 8006620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006624:	2b00      	cmp	r3, #0
 8006626:	bf0c      	ite	eq
 8006628:	2301      	moveq	r3, #1
 800662a:	2300      	movne	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	e012      	b.n	8006656 <HAL_I2C_Init+0x18e>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	1e58      	subs	r0, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6859      	ldr	r1, [r3, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	0099      	lsls	r1, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	fbb0 f3f3 	udiv	r3, r0, r3
 8006646:	3301      	adds	r3, #1
 8006648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800664c:	2b00      	cmp	r3, #0
 800664e:	bf0c      	ite	eq
 8006650:	2301      	moveq	r3, #1
 8006652:	2300      	movne	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <HAL_I2C_Init+0x196>
 800665a:	2301      	movs	r3, #1
 800665c:	e022      	b.n	80066a4 <HAL_I2C_Init+0x1dc>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10e      	bne.n	8006684 <HAL_I2C_Init+0x1bc>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1e58      	subs	r0, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6859      	ldr	r1, [r3, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	440b      	add	r3, r1
 8006674:	fbb0 f3f3 	udiv	r3, r0, r3
 8006678:	3301      	adds	r3, #1
 800667a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800667e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006682:	e00f      	b.n	80066a4 <HAL_I2C_Init+0x1dc>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	1e58      	subs	r0, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6859      	ldr	r1, [r3, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	440b      	add	r3, r1
 8006692:	0099      	lsls	r1, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	fbb0 f3f3 	udiv	r3, r0, r3
 800669a:	3301      	adds	r3, #1
 800669c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	6809      	ldr	r1, [r1, #0]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69da      	ldr	r2, [r3, #28]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6911      	ldr	r1, [r2, #16]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68d2      	ldr	r2, [r2, #12]
 80066de:	4311      	orrs	r1, r2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	430b      	orrs	r3, r1
 80066e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	000186a0 	.word	0x000186a0
 8006740:	001e847f 	.word	0x001e847f
 8006744:	003d08ff 	.word	0x003d08ff
 8006748:	431bde83 	.word	0x431bde83
 800674c:	10624dd3 	.word	0x10624dd3

08006750 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e021      	b.n	80067a6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2224      	movs	r2, #36	; 0x24
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0201 	bic.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f821 	bl	80067c2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af02      	add	r7, sp, #8
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	4608      	mov	r0, r1
 80067e2:	4611      	mov	r1, r2
 80067e4:	461a      	mov	r2, r3
 80067e6:	4603      	mov	r3, r0
 80067e8:	817b      	strh	r3, [r7, #10]
 80067ea:	460b      	mov	r3, r1
 80067ec:	813b      	strh	r3, [r7, #8]
 80067ee:	4613      	mov	r3, r2
 80067f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067f2:	f7fc fc73 	bl	80030dc <HAL_GetTick>
 80067f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b20      	cmp	r3, #32
 8006802:	f040 80d9 	bne.w	80069b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	2319      	movs	r3, #25
 800680c:	2201      	movs	r2, #1
 800680e:	496d      	ldr	r1, [pc, #436]	; (80069c4 <HAL_I2C_Mem_Write+0x1ec>)
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fc99 	bl	8007148 <I2C_WaitOnFlagUntilTimeout>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800681c:	2302      	movs	r3, #2
 800681e:	e0cc      	b.n	80069ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006826:	2b01      	cmp	r3, #1
 8006828:	d101      	bne.n	800682e <HAL_I2C_Mem_Write+0x56>
 800682a:	2302      	movs	r3, #2
 800682c:	e0c5      	b.n	80069ba <HAL_I2C_Mem_Write+0x1e2>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b01      	cmp	r3, #1
 8006842:	d007      	beq.n	8006854 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006862:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2221      	movs	r2, #33	; 0x21
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2240      	movs	r2, #64	; 0x40
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a3a      	ldr	r2, [r7, #32]
 800687e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4a4d      	ldr	r2, [pc, #308]	; (80069c8 <HAL_I2C_Mem_Write+0x1f0>)
 8006894:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006896:	88f8      	ldrh	r0, [r7, #6]
 8006898:	893a      	ldrh	r2, [r7, #8]
 800689a:	8979      	ldrh	r1, [r7, #10]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	4603      	mov	r3, r0
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 fad0 	bl	8006e4c <I2C_RequestMemoryWrite>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d052      	beq.n	8006958 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e081      	b.n	80069ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 fd5e 	bl	800737c <I2C_WaitOnTXEFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00d      	beq.n	80068e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d107      	bne.n	80068de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e06b      	b.n	80069ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29a      	uxth	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b04      	cmp	r3, #4
 800691e:	d11b      	bne.n	8006958 <HAL_I2C_Mem_Write+0x180>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006924:	2b00      	cmp	r3, #0
 8006926:	d017      	beq.n	8006958 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	781a      	ldrb	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1aa      	bne.n	80068b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 fd51 	bl	800740c <I2C_WaitOnBTFFlagUntilTimeout>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00d      	beq.n	800698c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	2b04      	cmp	r3, #4
 8006976:	d107      	bne.n	8006988 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006986:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e016      	b.n	80069ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800699a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	e000      	b.n	80069ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80069b8:	2302      	movs	r3, #2
  }
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	00100002 	.word	0x00100002
 80069c8:	ffff0000 	.word	0xffff0000

080069cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08c      	sub	sp, #48	; 0x30
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	4608      	mov	r0, r1
 80069d6:	4611      	mov	r1, r2
 80069d8:	461a      	mov	r2, r3
 80069da:	4603      	mov	r3, r0
 80069dc:	817b      	strh	r3, [r7, #10]
 80069de:	460b      	mov	r3, r1
 80069e0:	813b      	strh	r3, [r7, #8]
 80069e2:	4613      	mov	r3, r2
 80069e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069e6:	f7fc fb79 	bl	80030dc <HAL_GetTick>
 80069ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b20      	cmp	r3, #32
 80069f6:	f040 8214 	bne.w	8006e22 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	2319      	movs	r3, #25
 8006a00:	2201      	movs	r2, #1
 8006a02:	497b      	ldr	r1, [pc, #492]	; (8006bf0 <HAL_I2C_Mem_Read+0x224>)
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fb9f 	bl	8007148 <I2C_WaitOnFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006a10:	2302      	movs	r3, #2
 8006a12:	e207      	b.n	8006e24 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_I2C_Mem_Read+0x56>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e200      	b.n	8006e24 <HAL_I2C_Mem_Read+0x458>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d007      	beq.n	8006a48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2222      	movs	r2, #34	; 0x22
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2240      	movs	r2, #64	; 0x40
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4a5b      	ldr	r2, [pc, #364]	; (8006bf4 <HAL_I2C_Mem_Read+0x228>)
 8006a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a8a:	88f8      	ldrh	r0, [r7, #6]
 8006a8c:	893a      	ldrh	r2, [r7, #8]
 8006a8e:	8979      	ldrh	r1, [r7, #10]
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	4603      	mov	r3, r0
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 fa6c 	bl	8006f78 <I2C_RequestMemoryRead>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e1bc      	b.n	8006e24 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d113      	bne.n	8006ada <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	623b      	str	r3, [r7, #32]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	623b      	str	r3, [r7, #32]
 8006ac6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e190      	b.n	8006dfc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d11b      	bne.n	8006b1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af2:	2300      	movs	r3, #0
 8006af4:	61fb      	str	r3, [r7, #28]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	61fb      	str	r3, [r7, #28]
 8006b06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	e170      	b.n	8006dfc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d11b      	bne.n	8006b5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b42:	2300      	movs	r3, #0
 8006b44:	61bb      	str	r3, [r7, #24]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	61bb      	str	r3, [r7, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	e150      	b.n	8006dfc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b70:	e144      	b.n	8006dfc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	f200 80f1 	bhi.w	8006d5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d123      	bne.n	8006bcc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 fc87 	bl	800749c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e145      	b.n	8006e24 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bca:	e117      	b.n	8006dfc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d14e      	bne.n	8006c72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4906      	ldr	r1, [pc, #24]	; (8006bf8 <HAL_I2C_Mem_Read+0x22c>)
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fab2 	bl	8007148 <I2C_WaitOnFlagUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d008      	beq.n	8006bfc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e11a      	b.n	8006e24 <HAL_I2C_Mem_Read+0x458>
 8006bee:	bf00      	nop
 8006bf0:	00100002 	.word	0x00100002
 8006bf4:	ffff0000 	.word	0xffff0000
 8006bf8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691a      	ldr	r2, [r3, #16]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c70:	e0c4      	b.n	8006dfc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c78:	2200      	movs	r2, #0
 8006c7a:	496c      	ldr	r1, [pc, #432]	; (8006e2c <HAL_I2C_Mem_Read+0x460>)
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 fa63 	bl	8007148 <I2C_WaitOnFlagUntilTimeout>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e0cb      	b.n	8006e24 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4955      	ldr	r1, [pc, #340]	; (8006e2c <HAL_I2C_Mem_Read+0x460>)
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fa35 	bl	8007148 <I2C_WaitOnFlagUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e09d      	b.n	8006e24 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691a      	ldr	r2, [r3, #16]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d14:	3b01      	subs	r3, #1
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691a      	ldr	r2, [r3, #16]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d5c:	e04e      	b.n	8006dfc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 fb9a 	bl	800749c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e058      	b.n	8006e24 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d124      	bne.n	8006dfc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d107      	bne.n	8006dca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f47f aeb6 	bne.w	8006b72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e000      	b.n	8006e24 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006e22:	2302      	movs	r3, #2
  }
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3728      	adds	r7, #40	; 0x28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	00010004 	.word	0x00010004

08006e30 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3e:	b2db      	uxtb	r3, r3
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	4608      	mov	r0, r1
 8006e56:	4611      	mov	r1, r2
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	817b      	strh	r3, [r7, #10]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	813b      	strh	r3, [r7, #8]
 8006e62:	4613      	mov	r3, r2
 8006e64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 f960 	bl	8007148 <I2C_WaitOnFlagUntilTimeout>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e9c:	d103      	bne.n	8006ea6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e05f      	b.n	8006f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006eaa:	897b      	ldrh	r3, [r7, #10]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	461a      	mov	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006eb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	6a3a      	ldr	r2, [r7, #32]
 8006ebe:	492d      	ldr	r1, [pc, #180]	; (8006f74 <I2C_RequestMemoryWrite+0x128>)
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f9bb 	bl	800723c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e04c      	b.n	8006f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee8:	6a39      	ldr	r1, [r7, #32]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fa46 	bl	800737c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00d      	beq.n	8006f12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d107      	bne.n	8006f0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e02b      	b.n	8006f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f12:	88fb      	ldrh	r3, [r7, #6]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d105      	bne.n	8006f24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f18:	893b      	ldrh	r3, [r7, #8]
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	611a      	str	r2, [r3, #16]
 8006f22:	e021      	b.n	8006f68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f24:	893b      	ldrh	r3, [r7, #8]
 8006f26:	0a1b      	lsrs	r3, r3, #8
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f34:	6a39      	ldr	r1, [r7, #32]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 fa20 	bl	800737c <I2C_WaitOnTXEFlagUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00d      	beq.n	8006f5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d107      	bne.n	8006f5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e005      	b.n	8006f6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f5e:	893b      	ldrh	r3, [r7, #8]
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	00010002 	.word	0x00010002

08006f78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	4608      	mov	r0, r1
 8006f82:	4611      	mov	r1, r2
 8006f84:	461a      	mov	r2, r3
 8006f86:	4603      	mov	r3, r0
 8006f88:	817b      	strh	r3, [r7, #10]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	813b      	strh	r3, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fa0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 f8c2 	bl	8007148 <I2C_WaitOnFlagUntilTimeout>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00d      	beq.n	8006fe6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd8:	d103      	bne.n	8006fe2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e0aa      	b.n	800713c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fe6:	897b      	ldrh	r3, [r7, #10]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ff4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	6a3a      	ldr	r2, [r7, #32]
 8006ffa:	4952      	ldr	r1, [pc, #328]	; (8007144 <I2C_RequestMemoryRead+0x1cc>)
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 f91d 	bl	800723c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e097      	b.n	800713c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800700c:	2300      	movs	r3, #0
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007024:	6a39      	ldr	r1, [r7, #32]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 f9a8 	bl	800737c <I2C_WaitOnTXEFlagUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00d      	beq.n	800704e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	2b04      	cmp	r3, #4
 8007038:	d107      	bne.n	800704a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007048:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e076      	b.n	800713c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d105      	bne.n	8007060 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007054:	893b      	ldrh	r3, [r7, #8]
 8007056:	b2da      	uxtb	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	611a      	str	r2, [r3, #16]
 800705e:	e021      	b.n	80070a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007060:	893b      	ldrh	r3, [r7, #8]
 8007062:	0a1b      	lsrs	r3, r3, #8
 8007064:	b29b      	uxth	r3, r3
 8007066:	b2da      	uxtb	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800706e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007070:	6a39      	ldr	r1, [r7, #32]
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f982 	bl	800737c <I2C_WaitOnTXEFlagUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00d      	beq.n	800709a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	2b04      	cmp	r3, #4
 8007084:	d107      	bne.n	8007096 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007094:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e050      	b.n	800713c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800709a:	893b      	ldrh	r3, [r7, #8]
 800709c:	b2da      	uxtb	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a6:	6a39      	ldr	r1, [r7, #32]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 f967 	bl	800737c <I2C_WaitOnTXEFlagUntilTimeout>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00d      	beq.n	80070d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d107      	bne.n	80070cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e035      	b.n	800713c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f82b 	bl	8007148 <I2C_WaitOnFlagUntilTimeout>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00d      	beq.n	8007114 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007106:	d103      	bne.n	8007110 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800710e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e013      	b.n	800713c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007114:	897b      	ldrh	r3, [r7, #10]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	f043 0301 	orr.w	r3, r3, #1
 800711c:	b2da      	uxtb	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	6a3a      	ldr	r2, [r7, #32]
 8007128:	4906      	ldr	r1, [pc, #24]	; (8007144 <I2C_RequestMemoryRead+0x1cc>)
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f886 	bl	800723c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e000      	b.n	800713c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	00010002 	.word	0x00010002

08007148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	603b      	str	r3, [r7, #0]
 8007154:	4613      	mov	r3, r2
 8007156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007158:	e048      	b.n	80071ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d044      	beq.n	80071ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007162:	f7fb ffbb 	bl	80030dc <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d302      	bcc.n	8007178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d139      	bne.n	80071ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	0c1b      	lsrs	r3, r3, #16
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b01      	cmp	r3, #1
 8007180:	d10d      	bne.n	800719e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	43da      	mvns	r2, r3
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	4013      	ands	r3, r2
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	bf0c      	ite	eq
 8007194:	2301      	moveq	r3, #1
 8007196:	2300      	movne	r3, #0
 8007198:	b2db      	uxtb	r3, r3
 800719a:	461a      	mov	r2, r3
 800719c:	e00c      	b.n	80071b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	43da      	mvns	r2, r3
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	4013      	ands	r3, r2
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf0c      	ite	eq
 80071b0:	2301      	moveq	r3, #1
 80071b2:	2300      	movne	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	461a      	mov	r2, r3
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d116      	bne.n	80071ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	f043 0220 	orr.w	r2, r3, #32
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e023      	b.n	8007234 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	0c1b      	lsrs	r3, r3, #16
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d10d      	bne.n	8007212 <I2C_WaitOnFlagUntilTimeout+0xca>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	43da      	mvns	r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	4013      	ands	r3, r2
 8007202:	b29b      	uxth	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	bf0c      	ite	eq
 8007208:	2301      	moveq	r3, #1
 800720a:	2300      	movne	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	e00c      	b.n	800722c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	43da      	mvns	r2, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	4013      	ands	r3, r2
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	bf0c      	ite	eq
 8007224:	2301      	moveq	r3, #1
 8007226:	2300      	movne	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	461a      	mov	r2, r3
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	429a      	cmp	r2, r3
 8007230:	d093      	beq.n	800715a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800724a:	e071      	b.n	8007330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800725a:	d123      	bne.n	80072a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800726a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007274:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007290:	f043 0204 	orr.w	r2, r3, #4
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e067      	b.n	8007374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d041      	beq.n	8007330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ac:	f7fb ff16 	bl	80030dc <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d302      	bcc.n	80072c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d136      	bne.n	8007330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	0c1b      	lsrs	r3, r3, #16
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d10c      	bne.n	80072e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	43da      	mvns	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bf14      	ite	ne
 80072de:	2301      	movne	r3, #1
 80072e0:	2300      	moveq	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	e00b      	b.n	80072fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	43da      	mvns	r2, r3
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	4013      	ands	r3, r2
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d016      	beq.n	8007330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	f043 0220 	orr.w	r2, r3, #32
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e021      	b.n	8007374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	0c1b      	lsrs	r3, r3, #16
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b01      	cmp	r3, #1
 8007338:	d10c      	bne.n	8007354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	43da      	mvns	r2, r3
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4013      	ands	r3, r2
 8007346:	b29b      	uxth	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf14      	ite	ne
 800734c:	2301      	movne	r3, #1
 800734e:	2300      	moveq	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	e00b      	b.n	800736c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	43da      	mvns	r2, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4013      	ands	r3, r2
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	bf14      	ite	ne
 8007366:	2301      	movne	r3, #1
 8007368:	2300      	moveq	r3, #0
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	f47f af6d 	bne.w	800724c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007388:	e034      	b.n	80073f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f8e3 	bl	8007556 <I2C_IsAcknowledgeFailed>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e034      	b.n	8007404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d028      	beq.n	80073f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073a2:	f7fb fe9b 	bl	80030dc <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d302      	bcc.n	80073b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d11d      	bne.n	80073f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c2:	2b80      	cmp	r3, #128	; 0x80
 80073c4:	d016      	beq.n	80073f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e0:	f043 0220 	orr.w	r2, r3, #32
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e007      	b.n	8007404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fe:	2b80      	cmp	r3, #128	; 0x80
 8007400:	d1c3      	bne.n	800738a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007418:	e034      	b.n	8007484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f89b 	bl	8007556 <I2C_IsAcknowledgeFailed>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e034      	b.n	8007494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d028      	beq.n	8007484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007432:	f7fb fe53 	bl	80030dc <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	429a      	cmp	r2, r3
 8007440:	d302      	bcc.n	8007448 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d11d      	bne.n	8007484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f003 0304 	and.w	r3, r3, #4
 8007452:	2b04      	cmp	r3, #4
 8007454:	d016      	beq.n	8007484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007470:	f043 0220 	orr.w	r2, r3, #32
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e007      	b.n	8007494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	f003 0304 	and.w	r3, r3, #4
 800748e:	2b04      	cmp	r3, #4
 8007490:	d1c3      	bne.n	800741a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074a8:	e049      	b.n	800753e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	f003 0310 	and.w	r3, r3, #16
 80074b4:	2b10      	cmp	r3, #16
 80074b6:	d119      	bne.n	80074ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0210 	mvn.w	r2, #16
 80074c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e030      	b.n	800754e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ec:	f7fb fdf6 	bl	80030dc <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d302      	bcc.n	8007502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d11d      	bne.n	800753e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d016      	beq.n	800753e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2220      	movs	r2, #32
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	f043 0220 	orr.w	r2, r3, #32
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e007      	b.n	800754e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007548:	2b40      	cmp	r3, #64	; 0x40
 800754a:	d1ae      	bne.n	80074aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800756c:	d11b      	bne.n	80075a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007576:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f043 0204 	orr.w	r2, r3, #4
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e000      	b.n	80075a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e0bf      	b.n	8007746 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f911 	bl	8007802 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80075f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6999      	ldr	r1, [r3, #24]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800760c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6899      	ldr	r1, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	4b4a      	ldr	r3, [pc, #296]	; (8007750 <HAL_LTDC_Init+0x19c>)
 8007628:	400b      	ands	r3, r1
 800762a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	041b      	lsls	r3, r3, #16
 8007632:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6899      	ldr	r1, [r3, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699a      	ldr	r2, [r3, #24]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68d9      	ldr	r1, [r3, #12]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	4b3e      	ldr	r3, [pc, #248]	; (8007750 <HAL_LTDC_Init+0x19c>)
 8007656:	400b      	ands	r3, r1
 8007658:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	041b      	lsls	r3, r3, #16
 8007660:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68d9      	ldr	r1, [r3, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1a      	ldr	r2, [r3, #32]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6919      	ldr	r1, [r3, #16]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	4b33      	ldr	r3, [pc, #204]	; (8007750 <HAL_LTDC_Init+0x19c>)
 8007684:	400b      	ands	r3, r1
 8007686:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6919      	ldr	r1, [r3, #16]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6959      	ldr	r1, [r3, #20]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	4b27      	ldr	r3, [pc, #156]	; (8007750 <HAL_LTDC_Init+0x19c>)
 80076b2:	400b      	ands	r3, r1
 80076b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	041b      	lsls	r3, r3, #16
 80076bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6959      	ldr	r1, [r3, #20]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076da:	021b      	lsls	r3, r3, #8
 80076dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80076f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4313      	orrs	r3, r2
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	430a      	orrs	r2, r1
 8007712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0206 	orr.w	r2, r2, #6
 8007722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699a      	ldr	r2, [r3, #24]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0201 	orr.w	r2, r2, #1
 8007732:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	f000f800 	.word	0xf000f800

08007754 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_LTDC_DeInit+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e049      	b.n	80077fa <HAL_LTDC_DeInit+0xa6>

  /* Check function parameters */
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));

  /* Disable LTDC Layer 1 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_1);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3384      	adds	r3, #132	; 0x84
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6812      	ldr	r2, [r2, #0]
 8007772:	3284      	adds	r2, #132	; 0x84
 8007774:	f023 0301 	bic.w	r3, r3, #1
 8007778:	6013      	str	r3, [r2, #0]

#if defined(LTDC_Layer2_BASE)
  /* Disable LTDC Layer 2 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_2);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6812      	ldr	r2, [r2, #0]
 8007788:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	6013      	str	r3, [r2, #0]
#endif /* LTDC_Layer2_BASE */

  /* Reload during vertical blanking period */
  __HAL_LTDC_VERTICAL_BLANKING_RELOAD_CONFIG(hltdc);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0202 	orr.w	r2, r2, #2
 80077a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Get tick */
  tickstart = HAL_GetTick();
 80077a2:	f7fb fc9b 	bl	80030dc <HAL_GetTick>
 80077a6:	60f8      	str	r0, [r7, #12]

  /* Wait for VSYNC Interrupt */
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 80077a8:	e006      	b.n	80077b8 <HAL_LTDC_DeInit+0x64>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > LTDC_TIMEOUT_VALUE)
 80077aa:	f7fb fc97 	bl	80030dc <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b64      	cmp	r3, #100	; 0x64
 80077b6:	d807      	bhi.n	80077c8 <HAL_LTDC_DeInit+0x74>
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077be:	f003 0304 	and.w	r3, r3, #4
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0f1      	beq.n	80077aa <HAL_LTDC_DeInit+0x56>
 80077c6:	e000      	b.n	80077ca <HAL_LTDC_DeInit+0x76>
    {
      break;
 80077c8:	bf00      	nop
    }
  }

  /* Disable LTDC  */
  __HAL_LTDC_DISABLE(hltdc);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	699a      	ldr	r2, [r3, #24]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0201 	bic.w	r2, r2, #1
 80077d8:	619a      	str	r2, [r3, #24]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f81b 	bl	8007816 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8007802:	b480      	push	{r7}
 8007804:	b083      	sub	sp, #12
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800780a:	bf00      	nop
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 800781e:	bf00      	nop
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b084      	sub	sp, #16
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d023      	beq.n	8007894 <HAL_LTDC_IRQHandler+0x6a>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d01e      	beq.n	8007894 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0204 	bic.w	r2, r2, #4
 8007864:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2204      	movs	r2, #4
 800786c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007874:	f043 0201 	orr.w	r2, r3, #1
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2204      	movs	r2, #4
 8007882:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f86f 	bl	8007972 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d023      	beq.n	80078e6 <HAL_LTDC_IRQHandler+0xbc>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01e      	beq.n	80078e6 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0202 	bic.w	r2, r2, #2
 80078b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2202      	movs	r2, #2
 80078be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078c6:	f043 0202 	orr.w	r2, r3, #2
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2204      	movs	r2, #4
 80078d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f846 	bl	8007972 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01b      	beq.n	8007928 <HAL_LTDC_IRQHandler+0xfe>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d016      	beq.n	8007928 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2201      	movs	r2, #1
 8007910:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f82f 	bl	8007986 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f003 0308 	and.w	r3, r3, #8
 800792e:	2b00      	cmp	r3, #0
 8007930:	d01b      	beq.n	800796a <HAL_LTDC_IRQHandler+0x140>
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d016      	beq.n	800796a <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0208 	bic.w	r2, r2, #8
 800794a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2208      	movs	r2, #8
 8007952:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f818 	bl	800799a <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80079ae:	b5b0      	push	{r4, r5, r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d101      	bne.n	80079c8 <HAL_LTDC_ConfigLayer+0x1a>
 80079c4:	2302      	movs	r3, #2
 80079c6:	e02c      	b.n	8007a22 <HAL_LTDC_ConfigLayer+0x74>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2134      	movs	r1, #52	; 0x34
 80079de:	fb01 f303 	mul.w	r3, r1, r3
 80079e2:	4413      	add	r3, r2
 80079e4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	4614      	mov	r4, r2
 80079ec:	461d      	mov	r5, r3
 80079ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079fa:	682b      	ldr	r3, [r5, #0]
 80079fc:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fa00 	bl	8007e08 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bdb0      	pop	{r4, r5, r7, pc}

08007a2a <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_LTDC_ConfigColorKeying+0x1a>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e030      	b.n	8007aa6 <HAL_LTDC_ConfigColorKeying+0x7c>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	01db      	lsls	r3, r3, #7
 8007a5e:	4413      	add	r3, r2
 8007a60:	3384      	adds	r3, #132	; 0x84
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	6812      	ldr	r2, [r2, #0]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	01d2      	lsls	r2, r2, #7
 8007a6e:	440a      	add	r2, r1
 8007a70:	3284      	adds	r2, #132	; 0x84
 8007a72:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a76:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	01db      	lsls	r3, r3, #7
 8007a82:	4413      	add	r3, r2
 8007a84:	3384      	adds	r3, #132	; 0x84
 8007a86:	461a      	mov	r2, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2201      	movs	r2, #1
 8007a92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_LTDC_EnableColorKeying+0x18>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e026      	b.n	8007b18 <HAL_LTDC_EnableColorKeying+0x66>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	01db      	lsls	r3, r3, #7
 8007ae4:	4413      	add	r3, r2
 8007ae6:	3384      	adds	r3, #132	; 0x84
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	6812      	ldr	r2, [r2, #0]
 8007aee:	4611      	mov	r1, r2
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	01d2      	lsls	r2, r2, #7
 8007af4:	440a      	add	r2, r1
 8007af6:	3284      	adds	r2, #132	; 0x84
 8007af8:	f043 0302 	orr.w	r3, r3, #2
 8007afc:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2201      	movs	r2, #1
 8007b04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_LTDC_DisableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_LTDC_DisableColorKeying+0x18>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e026      	b.n	8007b8a <HAL_LTDC_DisableColorKeying+0x66>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	461a      	mov	r2, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	01db      	lsls	r3, r3, #7
 8007b56:	4413      	add	r3, r2
 8007b58:	3384      	adds	r3, #132	; 0x84
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6812      	ldr	r2, [r2, #0]
 8007b60:	4611      	mov	r1, r2
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	01d2      	lsls	r2, r2, #7
 8007b66:	440a      	add	r2, r1
 8007b68:	3284      	adds	r2, #132	; 0x84
 8007b6a:	f023 0302 	bic.w	r3, r3, #2
 8007b6e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2201      	movs	r2, #1
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b086      	sub	sp, #24
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	607a      	str	r2, [r7, #4]
 8007ba2:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d101      	bne.n	8007bb2 <HAL_LTDC_SetWindowPosition+0x1c>
 8007bae:	2302      	movs	r3, #2
 8007bb0:	e033      	b.n	8007c1a <HAL_LTDC_SetWindowPosition+0x84>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2234      	movs	r2, #52	; 0x34
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
 8007bca:	3338      	adds	r3, #56	; 0x38
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	441a      	add	r2, r3
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	6979      	ldr	r1, [r7, #20]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f904 	bl	8007e08 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2201      	movs	r2, #1
 8007c06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b086      	sub	sp, #24
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d101      	bne.n	8007c3c <HAL_LTDC_SetAlpha+0x1a>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e024      	b.n	8007c86 <HAL_LTDC_SetAlpha+0x64>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2202      	movs	r2, #2
 8007c48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2234      	movs	r2, #52	; 0x34
 8007c50:	fb02 f303 	mul.w	r3, r2, r3
 8007c54:	3338      	adds	r3, #56	; 0x38
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4413      	add	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6979      	ldr	r1, [r7, #20]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 f8ce 	bl	8007e08 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2201      	movs	r2, #1
 8007c72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b086      	sub	sp, #24
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_LTDC_SetAddress+0x1a>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e024      	b.n	8007cf2 <HAL_LTDC_SetAddress+0x64>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2234      	movs	r2, #52	; 0x34
 8007cbc:	fb02 f303 	mul.w	r3, r2, r3
 8007cc0:	3338      	adds	r3, #56	; 0x38
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6979      	ldr	r1, [r7, #20]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f898 	bl	8007e08 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b089      	sub	sp, #36	; 0x24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d101      	bne.n	8007d16 <HAL_LTDC_SetPitch+0x1a>
 8007d12:	2302      	movs	r3, #2
 8007d14:	e06f      	b.n	8007df6 <HAL_LTDC_SetPitch+0xfa>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2202      	movs	r2, #2
 8007d22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2134      	movs	r1, #52	; 0x34
 8007d2c:	fb01 f303 	mul.w	r3, r1, r3
 8007d30:	4413      	add	r3, r2
 8007d32:	3348      	adds	r3, #72	; 0x48
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d102      	bne.n	8007d44 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8007d3e:	2304      	movs	r3, #4
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	e016      	b.n	8007d72 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d102      	bne.n	8007d50 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	61fb      	str	r3, [r7, #28]
 8007d4e:	e010      	b.n	8007d72 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	d008      	beq.n	8007d68 <HAL_LTDC_SetPitch+0x6c>
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d005      	beq.n	8007d68 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d002      	beq.n	8007d68 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	2b07      	cmp	r3, #7
 8007d66:	d102      	bne.n	8007d6e <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	61fb      	str	r3, [r7, #28]
 8007d6c:	e001      	b.n	8007d72 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	fb02 f303 	mul.w	r3, r2, r3
 8007d7a:	041b      	lsls	r3, r3, #16
 8007d7c:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	01db      	lsls	r3, r3, #7
 8007d88:	4413      	add	r3, r2
 8007d8a:	3384      	adds	r3, #132	; 0x84
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	4611      	mov	r1, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	01d2      	lsls	r2, r2, #7
 8007d98:	440a      	add	r2, r1
 8007d9a:	3284      	adds	r2, #132	; 0x84
 8007d9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007da0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007da4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007da6:	4b17      	ldr	r3, [pc, #92]	; (8007e04 <HAL_LTDC_SetPitch+0x108>)
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	4a16      	ldr	r2, [pc, #88]	; (8007e04 <HAL_LTDC_SetPitch+0x108>)
 8007dac:	f043 0301 	orr.w	r3, r3, #1
 8007db0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	01db      	lsls	r3, r3, #7
 8007dbc:	4413      	add	r3, r2
 8007dbe:	3384      	adds	r3, #132	; 0x84
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	01db      	lsls	r3, r3, #7
 8007dcc:	440b      	add	r3, r1
 8007dce:	3384      	adds	r3, #132	; 0x84
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <HAL_LTDC_SetPitch+0x108>)
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <HAL_LTDC_SetPitch+0x108>)
 8007dde:	f043 0301 	orr.w	r3, r3, #1
 8007de2:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3724      	adds	r7, #36	; 0x24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	40016800 	.word	0x40016800

08007e08 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b089      	sub	sp, #36	; 0x24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	0c1b      	lsrs	r3, r3, #16
 8007e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e24:	4413      	add	r3, r2
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	01db      	lsls	r3, r3, #7
 8007e34:	4413      	add	r3, r2
 8007e36:	3384      	adds	r3, #132	; 0x84
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	6812      	ldr	r2, [r2, #0]
 8007e3e:	4611      	mov	r1, r2
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	01d2      	lsls	r2, r2, #7
 8007e44:	440a      	add	r2, r1
 8007e46:	3284      	adds	r2, #132	; 0x84
 8007e48:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007e4c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e5e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007e60:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4619      	mov	r1, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	01db      	lsls	r3, r3, #7
 8007e6c:	440b      	add	r3, r1
 8007e6e:	3384      	adds	r3, #132	; 0x84
 8007e70:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e76:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e86:	4413      	add	r3, r2
 8007e88:	041b      	lsls	r3, r3, #16
 8007e8a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	01db      	lsls	r3, r3, #7
 8007e96:	4413      	add	r3, r2
 8007e98:	3384      	adds	r3, #132	; 0x84
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	01d2      	lsls	r2, r2, #7
 8007ea6:	440a      	add	r2, r1
 8007ea8:	3284      	adds	r2, #132	; 0x84
 8007eaa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007eae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	689a      	ldr	r2, [r3, #8]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ebe:	4413      	add	r3, r2
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	01db      	lsls	r3, r3, #7
 8007ecc:	440b      	add	r3, r1
 8007ece:	3384      	adds	r3, #132	; 0x84
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	01db      	lsls	r3, r3, #7
 8007ee2:	4413      	add	r3, r2
 8007ee4:	3384      	adds	r3, #132	; 0x84
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	6812      	ldr	r2, [r2, #0]
 8007eec:	4611      	mov	r1, r2
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	01d2      	lsls	r2, r2, #7
 8007ef2:	440a      	add	r2, r1
 8007ef4:	3284      	adds	r2, #132	; 0x84
 8007ef6:	f023 0307 	bic.w	r3, r3, #7
 8007efa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	01db      	lsls	r3, r3, #7
 8007f06:	4413      	add	r3, r2
 8007f08:	3384      	adds	r3, #132	; 0x84
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f18:	021b      	lsls	r3, r3, #8
 8007f1a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007f22:	041b      	lsls	r3, r3, #16
 8007f24:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	061b      	lsls	r3, r3, #24
 8007f2c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	01db      	lsls	r3, r3, #7
 8007f38:	4413      	add	r3, r2
 8007f3a:	3384      	adds	r3, #132	; 0x84
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	01db      	lsls	r3, r3, #7
 8007f48:	4413      	add	r3, r2
 8007f4a:	3384      	adds	r3, #132	; 0x84
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f58:	461a      	mov	r2, r3
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	431a      	orrs	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4619      	mov	r1, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	01db      	lsls	r3, r3, #7
 8007f6c:	440b      	add	r3, r1
 8007f6e:	3384      	adds	r3, #132	; 0x84
 8007f70:	4619      	mov	r1, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	01db      	lsls	r3, r3, #7
 8007f82:	4413      	add	r3, r2
 8007f84:	3384      	adds	r3, #132	; 0x84
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	6812      	ldr	r2, [r2, #0]
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	01d2      	lsls	r2, r2, #7
 8007f92:	440a      	add	r2, r1
 8007f94:	3284      	adds	r2, #132	; 0x84
 8007f96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f9a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	01db      	lsls	r3, r3, #7
 8007fa6:	4413      	add	r3, r2
 8007fa8:	3384      	adds	r3, #132	; 0x84
 8007faa:	461a      	mov	r2, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	01db      	lsls	r3, r3, #7
 8007fbc:	4413      	add	r3, r2
 8007fbe:	3384      	adds	r3, #132	; 0x84
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	01d2      	lsls	r2, r2, #7
 8007fcc:	440a      	add	r2, r1
 8007fce:	3284      	adds	r2, #132	; 0x84
 8007fd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007fd4:	f023 0307 	bic.w	r3, r3, #7
 8007fd8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	69da      	ldr	r2, [r3, #28]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	6809      	ldr	r1, [r1, #0]
 8007fe6:	4608      	mov	r0, r1
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	01c9      	lsls	r1, r1, #7
 8007fec:	4401      	add	r1, r0
 8007fee:	3184      	adds	r1, #132	; 0x84
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	01db      	lsls	r3, r3, #7
 8007ffe:	4413      	add	r3, r2
 8008000:	3384      	adds	r3, #132	; 0x84
 8008002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	461a      	mov	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	01db      	lsls	r3, r3, #7
 800800e:	4413      	add	r3, r2
 8008010:	3384      	adds	r3, #132	; 0x84
 8008012:	461a      	mov	r2, r3
 8008014:	2300      	movs	r3, #0
 8008016:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	01db      	lsls	r3, r3, #7
 8008022:	4413      	add	r3, r2
 8008024:	3384      	adds	r3, #132	; 0x84
 8008026:	461a      	mov	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d102      	bne.n	800803c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008036:	2304      	movs	r3, #4
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	e01b      	b.n	8008074 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d102      	bne.n	800804a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008044:	2303      	movs	r3, #3
 8008046:	61fb      	str	r3, [r7, #28]
 8008048:	e014      	b.n	8008074 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	2b04      	cmp	r3, #4
 8008050:	d00b      	beq.n	800806a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008056:	2b02      	cmp	r3, #2
 8008058:	d007      	beq.n	800806a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800805e:	2b03      	cmp	r3, #3
 8008060:	d003      	beq.n	800806a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008066:	2b07      	cmp	r3, #7
 8008068:	d102      	bne.n	8008070 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800806a:	2302      	movs	r3, #2
 800806c:	61fb      	str	r3, [r7, #28]
 800806e:	e001      	b.n	8008074 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008070:	2301      	movs	r3, #1
 8008072:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	01db      	lsls	r3, r3, #7
 800807e:	4413      	add	r3, r2
 8008080:	3384      	adds	r3, #132	; 0x84
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	6812      	ldr	r2, [r2, #0]
 8008088:	4611      	mov	r1, r2
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	01d2      	lsls	r2, r2, #7
 800808e:	440a      	add	r2, r1
 8008090:	3284      	adds	r2, #132	; 0x84
 8008092:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008096:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	69fa      	ldr	r2, [r7, #28]
 800809e:	fb02 f303 	mul.w	r3, r2, r3
 80080a2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	6859      	ldr	r1, [r3, #4]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	1acb      	subs	r3, r1, r3
 80080ae:	69f9      	ldr	r1, [r7, #28]
 80080b0:	fb01 f303 	mul.w	r3, r1, r3
 80080b4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80080b6:	68f9      	ldr	r1, [r7, #12]
 80080b8:	6809      	ldr	r1, [r1, #0]
 80080ba:	4608      	mov	r0, r1
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	01c9      	lsls	r1, r1, #7
 80080c0:	4401      	add	r1, r0
 80080c2:	3184      	adds	r1, #132	; 0x84
 80080c4:	4313      	orrs	r3, r2
 80080c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	01db      	lsls	r3, r3, #7
 80080d2:	4413      	add	r3, r2
 80080d4:	3384      	adds	r3, #132	; 0x84
 80080d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	4611      	mov	r1, r2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	01d2      	lsls	r2, r2, #7
 80080e2:	440a      	add	r2, r1
 80080e4:	3284      	adds	r2, #132	; 0x84
 80080e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080ea:	f023 0307 	bic.w	r3, r3, #7
 80080ee:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	461a      	mov	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	01db      	lsls	r3, r3, #7
 80080fa:	4413      	add	r3, r2
 80080fc:	3384      	adds	r3, #132	; 0x84
 80080fe:	461a      	mov	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	01db      	lsls	r3, r3, #7
 8008110:	4413      	add	r3, r2
 8008112:	3384      	adds	r3, #132	; 0x84
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	6812      	ldr	r2, [r2, #0]
 800811a:	4611      	mov	r1, r2
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	01d2      	lsls	r2, r2, #7
 8008120:	440a      	add	r2, r1
 8008122:	3284      	adds	r2, #132	; 0x84
 8008124:	f043 0301 	orr.w	r3, r3, #1
 8008128:	6013      	str	r3, [r2, #0]
}
 800812a:	bf00      	nop
 800812c:	3724      	adds	r7, #36	; 0x24
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8008136:	b480      	push	{r7}
 8008138:	af00      	add	r7, sp, #0

}
 800813a:	bf00      	nop
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800814e:	2300      	movs	r3, #0
 8008150:	603b      	str	r3, [r7, #0]
 8008152:	4b20      	ldr	r3, [pc, #128]	; (80081d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	4a1f      	ldr	r2, [pc, #124]	; (80081d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800815c:	6413      	str	r3, [r2, #64]	; 0x40
 800815e:	4b1d      	ldr	r3, [pc, #116]	; (80081d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800816a:	4b1b      	ldr	r3, [pc, #108]	; (80081d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800816c:	2201      	movs	r2, #1
 800816e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008170:	f7fa ffb4 	bl	80030dc <HAL_GetTick>
 8008174:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008176:	e009      	b.n	800818c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008178:	f7fa ffb0 	bl	80030dc <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008186:	d901      	bls.n	800818c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e01f      	b.n	80081cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800818c:	4b13      	ldr	r3, [pc, #76]	; (80081dc <HAL_PWREx_EnableOverDrive+0x98>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008198:	d1ee      	bne.n	8008178 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800819a:	4b11      	ldr	r3, [pc, #68]	; (80081e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800819c:	2201      	movs	r2, #1
 800819e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80081a0:	f7fa ff9c 	bl	80030dc <HAL_GetTick>
 80081a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80081a6:	e009      	b.n	80081bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80081a8:	f7fa ff98 	bl	80030dc <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081b6:	d901      	bls.n	80081bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e007      	b.n	80081cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80081bc:	4b07      	ldr	r3, [pc, #28]	; (80081dc <HAL_PWREx_EnableOverDrive+0x98>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081c8:	d1ee      	bne.n	80081a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	40023800 	.word	0x40023800
 80081d8:	420e0040 	.word	0x420e0040
 80081dc:	40007000 	.word	0x40007000
 80081e0:	420e0044 	.word	0x420e0044

080081e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80081ec:	f7fa ff76 	bl	80030dc <HAL_GetTick>
 80081f0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e069      	b.n	80082d0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10b      	bne.n	8008220 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f887 	bl	8008324 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008216:	f241 3188 	movw	r1, #5000	; 0x1388
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fdf8 	bl	8008e10 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	3b01      	subs	r3, #1
 8008230:	021a      	lsls	r2, r3, #8
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	2120      	movs	r1, #32
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fe23 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 800824c:	4603      	mov	r3, r0
 800824e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008250:	7afb      	ldrb	r3, [r7, #11]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d137      	bne.n	80082c6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008260:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	6852      	ldr	r2, [r2, #4]
 8008268:	0611      	lsls	r1, r2, #24
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	68d2      	ldr	r2, [r2, #12]
 800826e:	4311      	orrs	r1, r2
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	69d2      	ldr	r2, [r2, #28]
 8008274:	4311      	orrs	r1, r2
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	6a12      	ldr	r2, [r2, #32]
 800827a:	4311      	orrs	r1, r2
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	6812      	ldr	r2, [r2, #0]
 8008280:	430b      	orrs	r3, r1
 8008282:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	4b13      	ldr	r3, [pc, #76]	; (80082d8 <HAL_QSPI_Init+0xf4>)
 800828c:	4013      	ands	r3, r2
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6912      	ldr	r2, [r2, #16]
 8008292:	0411      	lsls	r1, r2, #16
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6952      	ldr	r2, [r2, #20]
 8008298:	4311      	orrs	r1, r2
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	6992      	ldr	r2, [r2, #24]
 800829e:	4311      	orrs	r1, r2
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	6812      	ldr	r2, [r2, #0]
 80082a4:	430b      	orrs	r3, r1
 80082a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0201 	orr.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80082ce:	7afb      	ldrb	r3, [r7, #11]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	ffe0f8fe 	.word	0xffe0f8fe

080082dc <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e016      	b.n	800831c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0201 	bic.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f81a 	bl	8008338 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_QSPI_MspDeInit>:
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f003 0304 	and.w	r3, r3, #4
 800836a:	2b00      	cmp	r3, #0
 800836c:	d064      	beq.n	8008438 <HAL_QSPI_IRQHandler+0xec>
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d05f      	beq.n	8008438 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3320      	adds	r3, #32
 800837e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b12      	cmp	r3, #18
 800838a:	d125      	bne.n	80083d8 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800838c:	e01c      	b.n	80083c8 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00f      	beq.n	80083b6 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	781a      	ldrb	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	1e5a      	subs	r2, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80083b4:	e008      	b.n	80083c8 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083c4:	601a      	str	r2, [r3, #0]
          break;
 80083c6:	e033      	b.n	8008430 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f003 0304 	and.w	r3, r3, #4
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1db      	bne.n	800838e <HAL_QSPI_IRQHandler+0x42>
 80083d6:	e02b      	b.n	8008430 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b22      	cmp	r3, #34	; 0x22
 80083e2:	d125      	bne.n	8008430 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80083e4:	e01d      	b.n	8008422 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d010      	beq.n	8008410 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	7812      	ldrb	r2, [r2, #0]
 80083f6:	b2d2      	uxtb	r2, r2
 80083f8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	1e5a      	subs	r2, r3, #1
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	639a      	str	r2, [r3, #56]	; 0x38
 800840e:	e008      	b.n	8008422 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800841e:	601a      	str	r2, [r3, #0]
          break;
 8008420:	e006      	b.n	8008430 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1da      	bne.n	80083e6 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fbed 	bl	8008c10 <HAL_QSPI_FifoThresholdCallback>
 8008436:	e142      	b.n	80086be <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 80b6 	beq.w	80085b0 <HAL_QSPI_IRQHandler+0x264>
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 80b0 	beq.w	80085b0 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2202      	movs	r2, #2
 8008456:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008466:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b12      	cmp	r3, #18
 8008472:	d123      	bne.n	80084bc <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0304 	and.w	r3, r3, #4
 800847e:	2b00      	cmp	r3, #0
 8008480:	d011      	beq.n	80084a6 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0204 	bic.w	r2, r2, #4
 8008490:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fc4a 	bl	8008d40 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fba1 	bl	8008bfc <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80084ba:	e0fd      	b.n	80086b8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b22      	cmp	r3, #34	; 0x22
 80084c6:	d146      	bne.n	8008556 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0304 	and.w	r3, r3, #4
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d012      	beq.n	80084fc <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 0204 	bic.w	r2, r2, #4
 80084e4:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0201 	bic.w	r2, r2, #1
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	e021      	b.n	8008540 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3320      	adds	r3, #32
 8008502:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8008504:	e013      	b.n	800852e <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850a:	2b00      	cmp	r3, #0
 800850c:	d017      	beq.n	800853e <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	7812      	ldrb	r2, [r2, #0]
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	1e5a      	subs	r2, r3, #1
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e4      	bne.n	8008506 <HAL_QSPI_IRQHandler+0x1ba>
 800853c:	e000      	b.n	8008540 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800853e:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fbfd 	bl	8008d40 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fb4a 	bl	8008be8 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008554:	e0b0      	b.n	80086b8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d107      	bne.n	8008572 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fb32 	bl	8008bd4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008570:	e0a2      	b.n	80086b8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b08      	cmp	r3, #8
 800857c:	f040 809c 	bne.w	80086b8 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	695a      	ldr	r2, [r3, #20]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800858e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800859c:	2b00      	cmp	r3, #0
 800859e:	d103      	bne.n	80085a8 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fb0d 	bl	8008bc0 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80085a6:	e087      	b.n	80086b8 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 faff 	bl	8008bac <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80085ae:	e083      	b.n	80086b8 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f003 0308 	and.w	r3, r3, #8
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d01f      	beq.n	80085fa <HAL_QSPI_IRQHandler+0x2ae>
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d01a      	beq.n	80085fa <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2208      	movs	r2, #8
 80085ca:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00b      	beq.n	80085f2 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80085e8:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fb16 	bl	8008c24 <HAL_QSPI_StatusMatchCallback>
 80085f8:	e061      	b.n	80086be <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d047      	beq.n	8008694 <HAL_QSPI_IRQHandler+0x348>
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d042      	beq.n	8008694 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2201      	movs	r2, #1
 8008614:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8008624:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862a:	f043 0202 	orr.w	r2, r3, #2
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	2b00      	cmp	r3, #0
 800863e:	d021      	beq.n	8008684 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 0204 	bic.w	r2, r2, #4
 800864e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008654:	4a1c      	ldr	r2, [pc, #112]	; (80086c8 <HAL_QSPI_IRQHandler+0x37c>)
 8008656:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865c:	4618      	mov	r0, r3
 800865e:	f7fa ffcb 	bl	80035f8 <HAL_DMA_Abort_IT>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d029      	beq.n	80086bc <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866c:	f043 0204 	orr.w	r2, r3, #4
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fa95 	bl	8008bac <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008682:	e01b      	b.n	80086bc <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fa8d 	bl	8008bac <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008692:	e013      	b.n	80086bc <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f003 0310 	and.w	r3, r3, #16
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00f      	beq.n	80086be <HAL_QSPI_IRQHandler+0x372>
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00a      	beq.n	80086be <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2210      	movs	r2, #16
 80086ae:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fac1 	bl	8008c38 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 80086b6:	e002      	b.n	80086be <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80086b8:	bf00      	nop
 80086ba:	e000      	b.n	80086be <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80086bc:	bf00      	nop
}
 80086be:	bf00      	nop
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	08008e2d 	.word	0x08008e2d

080086cc <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80086d8:	f7fa fd00 	bl	80030dc <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d101      	bne.n	80086ee <HAL_QSPI_Command+0x22>
 80086ea:	2302      	movs	r3, #2
 80086ec:	e048      	b.n	8008780 <HAL_QSPI_Command+0xb4>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d137      	bne.n	8008772 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	2200      	movs	r2, #0
 8008718:	2120      	movs	r1, #32
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 fbb9 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 8008720:	4603      	mov	r3, r0
 8008722:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d125      	bne.n	8008776 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800872a:	2200      	movs	r2, #0
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 fbe6 	bl	8008f00 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	2b00      	cmp	r3, #0
 800873a:	d115      	bne.n	8008768 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	2201      	movs	r2, #1
 8008744:	2102      	movs	r1, #2
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 fba3 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 800874c:	4603      	mov	r3, r0
 800874e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10f      	bne.n	8008776 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2202      	movs	r2, #2
 800875c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008766:	e006      	b.n	8008776 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008770:	e001      	b.n	8008776 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8008772:	2302      	movs	r3, #2
 8008774:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800877e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	; 0x28
 800878c:	af02      	add	r7, sp, #8
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8008798:	f7fa fca0 	bl	80030dc <HAL_GetTick>
 800879c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3320      	adds	r3, #32
 80087a4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d101      	bne.n	80087b6 <HAL_QSPI_Transmit+0x2e>
 80087b2:	2302      	movs	r3, #2
 80087b4:	e07b      	b.n	80088ae <HAL_QSPI_Transmit+0x126>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d16a      	bne.n	80088a0 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d05b      	beq.n	800888e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2212      	movs	r2, #18
 80087da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	695a      	ldr	r2, [r3, #20]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800880a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800880c:	e01b      	b.n	8008846 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2201      	movs	r2, #1
 8008816:	2104      	movs	r1, #4
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fb3a 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 800881e:	4603      	mov	r3, r0
 8008820:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8008822:	7ffb      	ldrb	r3, [r7, #31]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d113      	bne.n	8008850 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	1e5a      	subs	r2, r3, #1
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1df      	bne.n	800880e <HAL_QSPI_Transmit+0x86>
 800884e:	e000      	b.n	8008852 <HAL_QSPI_Transmit+0xca>
          break;
 8008850:	bf00      	nop
      }

      if (status == HAL_OK)
 8008852:	7ffb      	ldrb	r3, [r7, #31]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d115      	bne.n	8008884 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	2201      	movs	r2, #1
 8008860:	2102      	movs	r1, #2
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 fb15 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 8008868:	4603      	mov	r3, r0
 800886a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800886c:	7ffb      	ldrb	r3, [r7, #31]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d108      	bne.n	8008884 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2202      	movs	r2, #2
 8008878:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 f9e6 	bl	8008c4c <HAL_QSPI_Abort>
 8008880:	4603      	mov	r3, r0
 8008882:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800888c:	e00a      	b.n	80088a4 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008892:	f043 0208 	orr.w	r2, r3, #8
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	77fb      	strb	r3, [r7, #31]
 800889e:	e001      	b.n	80088a4 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80088a0:	2302      	movs	r3, #2
 80088a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80088ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3720      	adds	r7, #32
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b08a      	sub	sp, #40	; 0x28
 80088ba:	af02      	add	r7, sp, #8
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80088c6:	f7fa fc09 	bl	80030dc <HAL_GetTick>
 80088ca:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3320      	adds	r3, #32
 80088da:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d101      	bne.n	80088ec <HAL_QSPI_Receive+0x36>
 80088e8:	2302      	movs	r3, #2
 80088ea:	e082      	b.n	80089f2 <HAL_QSPI_Receive+0x13c>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d171      	bne.n	80089e4 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d062      	beq.n	80089d2 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2222      	movs	r2, #34	; 0x22
 8008910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008944:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800894e:	e01c      	b.n	800898a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	2201      	movs	r2, #1
 8008958:	2106      	movs	r1, #6
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 fa99 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 8008960:	4603      	mov	r3, r0
 8008962:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8008964:	7ffb      	ldrb	r3, [r7, #31]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d114      	bne.n	8008994 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	7812      	ldrb	r2, [r2, #0]
 8008972:	b2d2      	uxtb	r2, r2
 8008974:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008984:	1e5a      	subs	r2, r3, #1
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1de      	bne.n	8008950 <HAL_QSPI_Receive+0x9a>
 8008992:	e000      	b.n	8008996 <HAL_QSPI_Receive+0xe0>
          break;
 8008994:	bf00      	nop
      }

      if (status == HAL_OK)
 8008996:	7ffb      	ldrb	r3, [r7, #31]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d115      	bne.n	80089c8 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	2201      	movs	r2, #1
 80089a4:	2102      	movs	r1, #2
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 fa73 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80089b0:	7ffb      	ldrb	r3, [r7, #31]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d108      	bne.n	80089c8 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2202      	movs	r2, #2
 80089bc:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 f944 	bl	8008c4c <HAL_QSPI_Abort>
 80089c4:	4603      	mov	r3, r0
 80089c6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089d0:	e00a      	b.n	80089e8 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d6:	f043 0208 	orr.w	r2, r3, #8
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	77fb      	strb	r3, [r7, #31]
 80089e2:	e001      	b.n	80089e8 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80089e4:	2302      	movs	r3, #2
 80089e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80089f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3720      	adds	r7, #32
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b088      	sub	sp, #32
 80089fe:	af02      	add	r7, sp, #8
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
 8008a06:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008a08:	f7fa fb68 	bl	80030dc <HAL_GetTick>
 8008a0c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d101      	bne.n	8008a1e <HAL_QSPI_AutoPolling+0x24>
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	e060      	b.n	8008ae0 <HAL_QSPI_AutoPolling+0xe6>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d14f      	bne.n	8008ad2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2242      	movs	r2, #66	; 0x42
 8008a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	2200      	movs	r2, #0
 8008a48:	2120      	movs	r1, #32
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 fa21 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 8008a50:	4603      	mov	r3, r0
 8008a52:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d13d      	bne.n	8008ad6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6852      	ldr	r2, [r2, #4]
 8008a6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6892      	ldr	r2, [r2, #8]
 8008a76:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008a90:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 fa2d 	bl	8008f00 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2201      	movs	r2, #1
 8008aae:	2108      	movs	r1, #8
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f000 f9ee 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10a      	bne.n	8008ad6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2208      	movs	r2, #8
 8008ac6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ad0:	e001      	b.n	8008ad6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32
 8008aec:	af02      	add	r7, sp, #8
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008af4:	f7fa faf2 	bl	80030dc <HAL_GetTick>
 8008af8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d101      	bne.n	8008b0a <HAL_QSPI_MemoryMapped+0x22>
 8008b06:	2302      	movs	r3, #2
 8008b08:	e04c      	b.n	8008ba4 <HAL_QSPI_MemoryMapped+0xbc>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d13b      	bne.n	8008b96 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2282      	movs	r2, #130	; 0x82
 8008b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2200      	movs	r2, #0
 8008b36:	2120      	movs	r1, #32
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 f9aa 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d128      	bne.n	8008b9a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f023 0108 	bic.w	r1, r3, #8
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	d110      	bne.n	8008b88 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	6812      	ldr	r2, [r2, #0]
 8008b6e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2210      	movs	r2, #16
 8008b76:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008b86:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8008b88:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 f9b6 	bl	8008f00 <QSPI_Config>
 8008b94:	e001      	b.n	8008b9a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8008b96:	2302      	movs	r3, #2
 8008b98:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af02      	add	r7, sp, #8
 8008c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8008c58:	f7fa fa40 	bl	80030dc <HAL_GetTick>
 8008c5c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d062      	beq.n	8008d34 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d017      	beq.n	8008cb4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f022 0204 	bic.w	r2, r2, #4
 8008c92:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fa fc3d 	bl	8003518 <HAL_DMA_Abort>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d005      	beq.n	8008cb4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cac:	f043 0204 	orr.w	r2, r3, #4
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d034      	beq.n	8008d2c <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f042 0202 	orr.w	r2, r2, #2
 8008cd0:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	2102      	movs	r1, #2
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f8d7 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10e      	bne.n	8008d0c <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2120      	movs	r1, #32
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f8c5 	bl	8008e92 <QSPI_WaitFlagStateUntilTimeout>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d110      	bne.n	8008d34 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	695a      	ldr	r2, [r3, #20]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008d20:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d2a:	e003      	b.n	8008d34 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d052      	beq.n	8008e02 <HAL_QSPI_Abort_IT+0xc2>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2208      	movs	r2, #8
 8008d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008d7a:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d01b      	beq.n	8008dc2 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 0204 	bic.w	r2, r2, #4
 8008d98:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9e:	4a1b      	ldr	r2, [pc, #108]	; (8008e0c <HAL_QSPI_Abort_IT+0xcc>)
 8008da0:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fa fc26 	bl	80035f8 <HAL_DMA_Abort_IT>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d027      	beq.n	8008e02 <HAL_QSPI_Abort_IT+0xc2>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff ff00 	bl	8008bc0 <HAL_QSPI_AbortCpltCallback>
 8008dc0:	e01f      	b.n	8008e02 <HAL_QSPI_Abort_IT+0xc2>
#endif
      }
    }
    else
    {
      if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f003 0320 	and.w	r3, r3, #32
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d014      	beq.n	8008dfa <HAL_QSPI_Abort_IT+0xba>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	60da      	str	r2, [r3, #12]
        
        /* Enable the QSPI Transfer Complete Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008de6:	601a      	str	r2, [r3, #0]
        
        /* Configure QSPI: CR register with Abort request */
        SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0202 	orr.w	r2, r2, #2
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	e003      	b.n	8008e02 <HAL_QSPI_Abort_IT+0xc2>
      }    
      else
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      }
    }
  }
  return status;
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	08008e2d 	.word	0x08008e2d

08008e10 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b08      	cmp	r3, #8
 8008e50:	d114      	bne.n	8008e7c <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2202      	movs	r2, #2
 8008e58:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008e68:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f042 0202 	orr.w	r2, r2, #2
 8008e78:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8008e7a:	e006      	b.n	8008e8a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f7ff fe91 	bl	8008bac <HAL_QSPI_ErrorCallback>
}
 8008e8a:	bf00      	nop
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	603b      	str	r3, [r7, #0]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008ea2:	e01a      	b.n	8008eda <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eaa:	d016      	beq.n	8008eda <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eac:	f7fa f916 	bl	80030dc <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d302      	bcc.n	8008ec2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10b      	bne.n	8008eda <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2204      	movs	r2, #4
 8008ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ece:	f043 0201 	orr.w	r2, r3, #1
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e00e      	b.n	8008ef8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	bf14      	ite	ne
 8008ee8:	2301      	movne	r3, #1
 8008eea:	2300      	moveq	r3, #0
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	461a      	mov	r2, r3
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d1d6      	bne.n	8008ea4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d009      	beq.n	8008f28 <QSPI_Config+0x28>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008f1a:	d005      	beq.n	8008f28 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3a01      	subs	r2, #1
 8008f26:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 80b9 	beq.w	80090a4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d05f      	beq.n	8008ffa <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	6892      	ldr	r2, [r2, #8]
 8008f42:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d031      	beq.n	8008fb0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f54:	431a      	orrs	r2, r3
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	431a      	orrs	r2, r3
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	049b      	lsls	r3, r3, #18
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	6a1b      	ldr	r3, [r3, #32]
 8008f74:	431a      	orrs	r2, r3
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	431a      	orrs	r2, r3
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	431a      	orrs	r2, r3
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	ea42 0103 	orr.w	r1, r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008fa0:	f000 812e 	beq.w	8009200 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	6852      	ldr	r2, [r2, #4]
 8008fac:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008fae:	e127      	b.n	8009200 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	049b      	lsls	r3, r3, #18
 8008fcc:	431a      	orrs	r2, r3
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	6a1b      	ldr	r3, [r3, #32]
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	ea42 0103 	orr.w	r1, r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	615a      	str	r2, [r3, #20]
}
 8008ff8:	e102      	b.n	8009200 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d02e      	beq.n	8009060 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900a:	431a      	orrs	r2, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009010:	431a      	orrs	r2, r3
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009016:	431a      	orrs	r2, r3
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	049b      	lsls	r3, r3, #18
 800901e:	431a      	orrs	r2, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	6a1b      	ldr	r3, [r3, #32]
 8009024:	431a      	orrs	r2, r3
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	431a      	orrs	r2, r3
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	431a      	orrs	r2, r3
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	431a      	orrs	r2, r3
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	ea42 0103 	orr.w	r1, r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	430a      	orrs	r2, r1
 8009048:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009050:	f000 80d6 	beq.w	8009200 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	6852      	ldr	r2, [r2, #4]
 800905c:	619a      	str	r2, [r3, #24]
}
 800905e:	e0cf      	b.n	8009200 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009068:	431a      	orrs	r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906e:	431a      	orrs	r2, r3
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009074:	431a      	orrs	r2, r3
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	049b      	lsls	r3, r3, #18
 800907c:	431a      	orrs	r2, r3
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	431a      	orrs	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	431a      	orrs	r2, r3
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	431a      	orrs	r2, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	ea42 0103 	orr.w	r1, r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	430a      	orrs	r2, r1
 80090a0:	615a      	str	r2, [r3, #20]
}
 80090a2:	e0ad      	b.n	8009200 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d058      	beq.n	800915e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	6892      	ldr	r2, [r2, #8]
 80090b4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d02d      	beq.n	800911a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	431a      	orrs	r2, r3
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090cc:	431a      	orrs	r2, r3
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	431a      	orrs	r2, r3
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	049b      	lsls	r3, r3, #18
 80090da:	431a      	orrs	r2, r3
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	431a      	orrs	r2, r3
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	431a      	orrs	r2, r3
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	431a      	orrs	r2, r3
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	431a      	orrs	r2, r3
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	ea42 0103 	orr.w	r1, r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	430a      	orrs	r2, r1
 8009104:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800910c:	d078      	beq.n	8009200 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	6852      	ldr	r2, [r2, #4]
 8009116:	619a      	str	r2, [r3, #24]
}
 8009118:	e072      	b.n	8009200 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009122:	431a      	orrs	r2, r3
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009128:	431a      	orrs	r2, r3
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	431a      	orrs	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	049b      	lsls	r3, r3, #18
 8009136:	431a      	orrs	r2, r3
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	431a      	orrs	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	431a      	orrs	r2, r3
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	431a      	orrs	r2, r3
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	ea42 0103 	orr.w	r1, r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	430a      	orrs	r2, r1
 800915a:	615a      	str	r2, [r3, #20]
}
 800915c:	e050      	b.n	8009200 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d02a      	beq.n	80091bc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916e:	431a      	orrs	r2, r3
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009174:	431a      	orrs	r2, r3
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	431a      	orrs	r2, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	049b      	lsls	r3, r3, #18
 8009182:	431a      	orrs	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	431a      	orrs	r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	431a      	orrs	r2, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	431a      	orrs	r2, r3
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	ea42 0103 	orr.w	r1, r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	430a      	orrs	r2, r1
 80091a6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80091ae:	d027      	beq.n	8009200 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	6852      	ldr	r2, [r2, #4]
 80091b8:	619a      	str	r2, [r3, #24]
}
 80091ba:	e021      	b.n	8009200 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01d      	beq.n	8009200 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091cc:	431a      	orrs	r2, r3
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d2:	431a      	orrs	r2, r3
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	431a      	orrs	r2, r3
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	049b      	lsls	r3, r3, #18
 80091e0:	431a      	orrs	r2, r3
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	431a      	orrs	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	431a      	orrs	r2, r3
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	ea42 0103 	orr.w	r1, r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	615a      	str	r2, [r3, #20]
}
 8009200:	bf00      	nop
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e0cc      	b.n	80093ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009220:	4b68      	ldr	r3, [pc, #416]	; (80093c4 <HAL_RCC_ClockConfig+0x1b8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 030f 	and.w	r3, r3, #15
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d90c      	bls.n	8009248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800922e:	4b65      	ldr	r3, [pc, #404]	; (80093c4 <HAL_RCC_ClockConfig+0x1b8>)
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009236:	4b63      	ldr	r3, [pc, #396]	; (80093c4 <HAL_RCC_ClockConfig+0x1b8>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 030f 	and.w	r3, r3, #15
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d001      	beq.n	8009248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e0b8      	b.n	80093ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b00      	cmp	r3, #0
 8009252:	d020      	beq.n	8009296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d005      	beq.n	800926c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009260:	4b59      	ldr	r3, [pc, #356]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	4a58      	ldr	r2, [pc, #352]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800926a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0308 	and.w	r3, r3, #8
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009278:	4b53      	ldr	r3, [pc, #332]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	4a52      	ldr	r2, [pc, #328]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 800927e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009284:	4b50      	ldr	r3, [pc, #320]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	494d      	ldr	r1, [pc, #308]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009292:	4313      	orrs	r3, r2
 8009294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d044      	beq.n	800932c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d107      	bne.n	80092ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092aa:	4b47      	ldr	r3, [pc, #284]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d119      	bne.n	80092ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e07f      	b.n	80093ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d003      	beq.n	80092ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d107      	bne.n	80092da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092ca:	4b3f      	ldr	r3, [pc, #252]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d109      	bne.n	80092ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e06f      	b.n	80093ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092da:	4b3b      	ldr	r3, [pc, #236]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d101      	bne.n	80092ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e067      	b.n	80093ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092ea:	4b37      	ldr	r3, [pc, #220]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f023 0203 	bic.w	r2, r3, #3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	4934      	ldr	r1, [pc, #208]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 80092f8:	4313      	orrs	r3, r2
 80092fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80092fc:	f7f9 feee 	bl	80030dc <HAL_GetTick>
 8009300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009302:	e00a      	b.n	800931a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009304:	f7f9 feea 	bl	80030dc <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009312:	4293      	cmp	r3, r2
 8009314:	d901      	bls.n	800931a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e04f      	b.n	80093ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800931a:	4b2b      	ldr	r3, [pc, #172]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 020c 	and.w	r2, r3, #12
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	429a      	cmp	r2, r3
 800932a:	d1eb      	bne.n	8009304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800932c:	4b25      	ldr	r3, [pc, #148]	; (80093c4 <HAL_RCC_ClockConfig+0x1b8>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 030f 	and.w	r3, r3, #15
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d20c      	bcs.n	8009354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800933a:	4b22      	ldr	r3, [pc, #136]	; (80093c4 <HAL_RCC_ClockConfig+0x1b8>)
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	b2d2      	uxtb	r2, r2
 8009340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009342:	4b20      	ldr	r3, [pc, #128]	; (80093c4 <HAL_RCC_ClockConfig+0x1b8>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 030f 	and.w	r3, r3, #15
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d001      	beq.n	8009354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e032      	b.n	80093ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0304 	and.w	r3, r3, #4
 800935c:	2b00      	cmp	r3, #0
 800935e:	d008      	beq.n	8009372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009360:	4b19      	ldr	r3, [pc, #100]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	4916      	ldr	r1, [pc, #88]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 800936e:	4313      	orrs	r3, r2
 8009370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0308 	and.w	r3, r3, #8
 800937a:	2b00      	cmp	r3, #0
 800937c:	d009      	beq.n	8009392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800937e:	4b12      	ldr	r3, [pc, #72]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	00db      	lsls	r3, r3, #3
 800938c:	490e      	ldr	r1, [pc, #56]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 800938e:	4313      	orrs	r3, r2
 8009390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009392:	f000 f821 	bl	80093d8 <HAL_RCC_GetSysClockFreq>
 8009396:	4602      	mov	r2, r0
 8009398:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <HAL_RCC_ClockConfig+0x1bc>)
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	091b      	lsrs	r3, r3, #4
 800939e:	f003 030f 	and.w	r3, r3, #15
 80093a2:	490a      	ldr	r1, [pc, #40]	; (80093cc <HAL_RCC_ClockConfig+0x1c0>)
 80093a4:	5ccb      	ldrb	r3, [r1, r3]
 80093a6:	fa22 f303 	lsr.w	r3, r2, r3
 80093aa:	4a09      	ldr	r2, [pc, #36]	; (80093d0 <HAL_RCC_ClockConfig+0x1c4>)
 80093ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80093ae:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <HAL_RCC_ClockConfig+0x1c8>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7f7 feae 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	40023c00 	.word	0x40023c00
 80093c8:	40023800 	.word	0x40023800
 80093cc:	0807e758 	.word	0x0807e758
 80093d0:	20000544 	.word	0x20000544
 80093d4:	20000548 	.word	0x20000548

080093d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093dc:	b094      	sub	sp, #80	; 0x50
 80093de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	647b      	str	r3, [r7, #68]	; 0x44
 80093e4:	2300      	movs	r3, #0
 80093e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093e8:	2300      	movs	r3, #0
 80093ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093f0:	4b79      	ldr	r3, [pc, #484]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f003 030c 	and.w	r3, r3, #12
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d00d      	beq.n	8009418 <HAL_RCC_GetSysClockFreq+0x40>
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	f200 80e1 	bhi.w	80095c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <HAL_RCC_GetSysClockFreq+0x34>
 8009406:	2b04      	cmp	r3, #4
 8009408:	d003      	beq.n	8009412 <HAL_RCC_GetSysClockFreq+0x3a>
 800940a:	e0db      	b.n	80095c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800940c:	4b73      	ldr	r3, [pc, #460]	; (80095dc <HAL_RCC_GetSysClockFreq+0x204>)
 800940e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009410:	e0db      	b.n	80095ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009412:	4b73      	ldr	r3, [pc, #460]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8009414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009416:	e0d8      	b.n	80095ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009418:	4b6f      	ldr	r3, [pc, #444]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009420:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009422:	4b6d      	ldr	r3, [pc, #436]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d063      	beq.n	80094f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800942e:	4b6a      	ldr	r3, [pc, #424]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	099b      	lsrs	r3, r3, #6
 8009434:	2200      	movs	r2, #0
 8009436:	63bb      	str	r3, [r7, #56]	; 0x38
 8009438:	63fa      	str	r2, [r7, #60]	; 0x3c
 800943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009440:	633b      	str	r3, [r7, #48]	; 0x30
 8009442:	2300      	movs	r3, #0
 8009444:	637b      	str	r3, [r7, #52]	; 0x34
 8009446:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800944a:	4622      	mov	r2, r4
 800944c:	462b      	mov	r3, r5
 800944e:	f04f 0000 	mov.w	r0, #0
 8009452:	f04f 0100 	mov.w	r1, #0
 8009456:	0159      	lsls	r1, r3, #5
 8009458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800945c:	0150      	lsls	r0, r2, #5
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4621      	mov	r1, r4
 8009464:	1a51      	subs	r1, r2, r1
 8009466:	6139      	str	r1, [r7, #16]
 8009468:	4629      	mov	r1, r5
 800946a:	eb63 0301 	sbc.w	r3, r3, r1
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800947c:	4659      	mov	r1, fp
 800947e:	018b      	lsls	r3, r1, #6
 8009480:	4651      	mov	r1, sl
 8009482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009486:	4651      	mov	r1, sl
 8009488:	018a      	lsls	r2, r1, #6
 800948a:	4651      	mov	r1, sl
 800948c:	ebb2 0801 	subs.w	r8, r2, r1
 8009490:	4659      	mov	r1, fp
 8009492:	eb63 0901 	sbc.w	r9, r3, r1
 8009496:	f04f 0200 	mov.w	r2, #0
 800949a:	f04f 0300 	mov.w	r3, #0
 800949e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80094a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80094a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094aa:	4690      	mov	r8, r2
 80094ac:	4699      	mov	r9, r3
 80094ae:	4623      	mov	r3, r4
 80094b0:	eb18 0303 	adds.w	r3, r8, r3
 80094b4:	60bb      	str	r3, [r7, #8]
 80094b6:	462b      	mov	r3, r5
 80094b8:	eb49 0303 	adc.w	r3, r9, r3
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	f04f 0200 	mov.w	r2, #0
 80094c2:	f04f 0300 	mov.w	r3, #0
 80094c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80094ca:	4629      	mov	r1, r5
 80094cc:	024b      	lsls	r3, r1, #9
 80094ce:	4621      	mov	r1, r4
 80094d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80094d4:	4621      	mov	r1, r4
 80094d6:	024a      	lsls	r2, r1, #9
 80094d8:	4610      	mov	r0, r2
 80094da:	4619      	mov	r1, r3
 80094dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094de:	2200      	movs	r2, #0
 80094e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80094e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094e8:	f7f6 fe92 	bl	8000210 <__aeabi_uldivmod>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4613      	mov	r3, r2
 80094f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094f4:	e058      	b.n	80095a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094f6:	4b38      	ldr	r3, [pc, #224]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	099b      	lsrs	r3, r3, #6
 80094fc:	2200      	movs	r2, #0
 80094fe:	4618      	mov	r0, r3
 8009500:	4611      	mov	r1, r2
 8009502:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009506:	623b      	str	r3, [r7, #32]
 8009508:	2300      	movs	r3, #0
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
 800950c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009510:	4642      	mov	r2, r8
 8009512:	464b      	mov	r3, r9
 8009514:	f04f 0000 	mov.w	r0, #0
 8009518:	f04f 0100 	mov.w	r1, #0
 800951c:	0159      	lsls	r1, r3, #5
 800951e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009522:	0150      	lsls	r0, r2, #5
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4641      	mov	r1, r8
 800952a:	ebb2 0a01 	subs.w	sl, r2, r1
 800952e:	4649      	mov	r1, r9
 8009530:	eb63 0b01 	sbc.w	fp, r3, r1
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009540:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009544:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009548:	ebb2 040a 	subs.w	r4, r2, sl
 800954c:	eb63 050b 	sbc.w	r5, r3, fp
 8009550:	f04f 0200 	mov.w	r2, #0
 8009554:	f04f 0300 	mov.w	r3, #0
 8009558:	00eb      	lsls	r3, r5, #3
 800955a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800955e:	00e2      	lsls	r2, r4, #3
 8009560:	4614      	mov	r4, r2
 8009562:	461d      	mov	r5, r3
 8009564:	4643      	mov	r3, r8
 8009566:	18e3      	adds	r3, r4, r3
 8009568:	603b      	str	r3, [r7, #0]
 800956a:	464b      	mov	r3, r9
 800956c:	eb45 0303 	adc.w	r3, r5, r3
 8009570:	607b      	str	r3, [r7, #4]
 8009572:	f04f 0200 	mov.w	r2, #0
 8009576:	f04f 0300 	mov.w	r3, #0
 800957a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800957e:	4629      	mov	r1, r5
 8009580:	028b      	lsls	r3, r1, #10
 8009582:	4621      	mov	r1, r4
 8009584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009588:	4621      	mov	r1, r4
 800958a:	028a      	lsls	r2, r1, #10
 800958c:	4610      	mov	r0, r2
 800958e:	4619      	mov	r1, r3
 8009590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009592:	2200      	movs	r2, #0
 8009594:	61bb      	str	r3, [r7, #24]
 8009596:	61fa      	str	r2, [r7, #28]
 8009598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800959c:	f7f6 fe38 	bl	8000210 <__aeabi_uldivmod>
 80095a0:	4602      	mov	r2, r0
 80095a2:	460b      	mov	r3, r1
 80095a4:	4613      	mov	r3, r2
 80095a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80095a8:	4b0b      	ldr	r3, [pc, #44]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	0c1b      	lsrs	r3, r3, #16
 80095ae:	f003 0303 	and.w	r3, r3, #3
 80095b2:	3301      	adds	r3, #1
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80095b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80095c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80095c2:	e002      	b.n	80095ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80095c4:	4b05      	ldr	r3, [pc, #20]	; (80095dc <HAL_RCC_GetSysClockFreq+0x204>)
 80095c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80095c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3750      	adds	r7, #80	; 0x50
 80095d0:	46bd      	mov	sp, r7
 80095d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095d6:	bf00      	nop
 80095d8:	40023800 	.word	0x40023800
 80095dc:	00f42400 	.word	0x00f42400
 80095e0:	007a1200 	.word	0x007a1200

080095e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095e4:	b480      	push	{r7}
 80095e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095e8:	4b03      	ldr	r3, [pc, #12]	; (80095f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80095ea:	681b      	ldr	r3, [r3, #0]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	20000544 	.word	0x20000544

080095fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009600:	f7ff fff0 	bl	80095e4 <HAL_RCC_GetHCLKFreq>
 8009604:	4602      	mov	r2, r0
 8009606:	4b05      	ldr	r3, [pc, #20]	; (800961c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	0a9b      	lsrs	r3, r3, #10
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	4903      	ldr	r1, [pc, #12]	; (8009620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009612:	5ccb      	ldrb	r3, [r1, r3]
 8009614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009618:	4618      	mov	r0, r3
 800961a:	bd80      	pop	{r7, pc}
 800961c:	40023800 	.word	0x40023800
 8009620:	0807e768 	.word	0x0807e768

08009624 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	220f      	movs	r2, #15
 8009632:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009634:	4b12      	ldr	r3, [pc, #72]	; (8009680 <HAL_RCC_GetClockConfig+0x5c>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f003 0203 	and.w	r2, r3, #3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009640:	4b0f      	ldr	r3, [pc, #60]	; (8009680 <HAL_RCC_GetClockConfig+0x5c>)
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800964c:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <HAL_RCC_GetClockConfig+0x5c>)
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009658:	4b09      	ldr	r3, [pc, #36]	; (8009680 <HAL_RCC_GetClockConfig+0x5c>)
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	08db      	lsrs	r3, r3, #3
 800965e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009666:	4b07      	ldr	r3, [pc, #28]	; (8009684 <HAL_RCC_GetClockConfig+0x60>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 020f 	and.w	r2, r3, #15
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	601a      	str	r2, [r3, #0]
}
 8009672:	bf00      	nop
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	40023800 	.word	0x40023800
 8009684:	40023c00 	.word	0x40023c00

08009688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8009698:	2300      	movs	r3, #0
 800969a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800969c:	2300      	movs	r3, #0
 800969e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00a      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80096b0:	4b66      	ldr	r3, [pc, #408]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80096b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096be:	4963      	ldr	r1, [pc, #396]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80096d2:	4b5e      	ldr	r3, [pc, #376]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80096d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e0:	495a      	ldr	r1, [pc, #360]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0301 	and.w	r3, r3, #1
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10b      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d105      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009708:	2b00      	cmp	r3, #0
 800970a:	d075      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800970c:	4b50      	ldr	r3, [pc, #320]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009712:	f7f9 fce3 	bl	80030dc <HAL_GetTick>
 8009716:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009718:	e008      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800971a:	f7f9 fcdf 	bl	80030dc <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	2b02      	cmp	r3, #2
 8009726:	d901      	bls.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e1dc      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800972c:	4b47      	ldr	r3, [pc, #284]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1f0      	bne.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b00      	cmp	r3, #0
 8009742:	d009      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	019a      	lsls	r2, r3, #6
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	071b      	lsls	r3, r3, #28
 8009750:	493e      	ldr	r1, [pc, #248]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009752:	4313      	orrs	r3, r2
 8009754:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0302 	and.w	r3, r3, #2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01f      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009764:	4b39      	ldr	r3, [pc, #228]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800976a:	0f1b      	lsrs	r3, r3, #28
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	019a      	lsls	r2, r3, #6
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	061b      	lsls	r3, r3, #24
 800977e:	431a      	orrs	r2, r3
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	071b      	lsls	r3, r3, #28
 8009784:	4931      	ldr	r1, [pc, #196]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009786:	4313      	orrs	r3, r2
 8009788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800978c:	4b2f      	ldr	r3, [pc, #188]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800978e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009792:	f023 021f 	bic.w	r2, r3, #31
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	3b01      	subs	r3, #1
 800979c:	492b      	ldr	r1, [pc, #172]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00d      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	019a      	lsls	r2, r3, #6
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	061b      	lsls	r3, r3, #24
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	071b      	lsls	r3, r3, #28
 80097c4:	4921      	ldr	r1, [pc, #132]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80097cc:	4b20      	ldr	r3, [pc, #128]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80097d2:	f7f9 fc83 	bl	80030dc <HAL_GetTick>
 80097d6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097d8:	e008      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80097da:	f7f9 fc7f 	bl	80030dc <HAL_GetTick>
 80097de:	4602      	mov	r2, r0
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d901      	bls.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e17c      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097ec:	4b17      	ldr	r3, [pc, #92]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d0f0      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d112      	bne.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10c      	bne.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 80ce 	beq.w	80099ba <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009826:	f040 80c8 	bne.w	80099ba <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800982a:	4b0a      	ldr	r3, [pc, #40]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800982c:	2200      	movs	r2, #0
 800982e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009830:	f7f9 fc54 	bl	80030dc <HAL_GetTick>
 8009834:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009836:	e00f      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009838:	f7f9 fc50 	bl	80030dc <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b02      	cmp	r3, #2
 8009844:	d908      	bls.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e14d      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800984a:	bf00      	nop
 800984c:	40023800 	.word	0x40023800
 8009850:	42470068 	.word	0x42470068
 8009854:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009858:	4ba5      	ldr	r3, [pc, #660]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009864:	d0e8      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0304 	and.w	r3, r3, #4
 800986e:	2b00      	cmp	r3, #0
 8009870:	d02e      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009872:	4b9f      	ldr	r3, [pc, #636]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009878:	0c1b      	lsrs	r3, r3, #16
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	3301      	adds	r3, #1
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009884:	4b9a      	ldr	r3, [pc, #616]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988a:	0f1b      	lsrs	r3, r3, #28
 800988c:	f003 0307 	and.w	r3, r3, #7
 8009890:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	019a      	lsls	r2, r3, #6
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	085b      	lsrs	r3, r3, #1
 800989c:	3b01      	subs	r3, #1
 800989e:	041b      	lsls	r3, r3, #16
 80098a0:	431a      	orrs	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	061b      	lsls	r3, r3, #24
 80098a8:	431a      	orrs	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	071b      	lsls	r3, r3, #28
 80098ae:	4990      	ldr	r1, [pc, #576]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098b0:	4313      	orrs	r3, r2
 80098b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80098b6:	4b8e      	ldr	r3, [pc, #568]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c4:	3b01      	subs	r3, #1
 80098c6:	021b      	lsls	r3, r3, #8
 80098c8:	4989      	ldr	r1, [pc, #548]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0308 	and.w	r3, r3, #8
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d02c      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80098dc:	4b84      	ldr	r3, [pc, #528]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e2:	0c1b      	lsrs	r3, r3, #16
 80098e4:	f003 0303 	and.w	r3, r3, #3
 80098e8:	3301      	adds	r3, #1
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80098ee:	4b80      	ldr	r3, [pc, #512]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f4:	0e1b      	lsrs	r3, r3, #24
 80098f6:	f003 030f 	and.w	r3, r3, #15
 80098fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	019a      	lsls	r2, r3, #6
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	085b      	lsrs	r3, r3, #1
 8009906:	3b01      	subs	r3, #1
 8009908:	041b      	lsls	r3, r3, #16
 800990a:	431a      	orrs	r2, r3
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	061b      	lsls	r3, r3, #24
 8009910:	431a      	orrs	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	071b      	lsls	r3, r3, #28
 8009918:	4975      	ldr	r1, [pc, #468]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800991a:	4313      	orrs	r3, r2
 800991c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009920:	4b73      	ldr	r3, [pc, #460]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009926:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992e:	4970      	ldr	r1, [pc, #448]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009930:	4313      	orrs	r3, r2
 8009932:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800993e:	2b00      	cmp	r3, #0
 8009940:	d024      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800994a:	d11f      	bne.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800994c:	4b68      	ldr	r3, [pc, #416]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800994e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009952:	0e1b      	lsrs	r3, r3, #24
 8009954:	f003 030f 	and.w	r3, r3, #15
 8009958:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800995a:	4b65      	ldr	r3, [pc, #404]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800995c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009960:	0f1b      	lsrs	r3, r3, #28
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	019a      	lsls	r2, r3, #6
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	085b      	lsrs	r3, r3, #1
 8009974:	3b01      	subs	r3, #1
 8009976:	041b      	lsls	r3, r3, #16
 8009978:	431a      	orrs	r2, r3
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	061b      	lsls	r3, r3, #24
 800997e:	431a      	orrs	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	071b      	lsls	r3, r3, #28
 8009984:	495a      	ldr	r1, [pc, #360]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009986:	4313      	orrs	r3, r2
 8009988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800998c:	4b59      	ldr	r3, [pc, #356]	; (8009af4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800998e:	2201      	movs	r2, #1
 8009990:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009992:	f7f9 fba3 	bl	80030dc <HAL_GetTick>
 8009996:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009998:	e008      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800999a:	f7f9 fb9f 	bl	80030dc <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d901      	bls.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e09c      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099ac:	4b50      	ldr	r3, [pc, #320]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099b8:	d1ef      	bne.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0320 	and.w	r3, r3, #32
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 8083 	beq.w	8009ace <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80099c8:	2300      	movs	r3, #0
 80099ca:	60bb      	str	r3, [r7, #8]
 80099cc:	4b48      	ldr	r3, [pc, #288]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d0:	4a47      	ldr	r2, [pc, #284]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099d6:	6413      	str	r3, [r2, #64]	; 0x40
 80099d8:	4b45      	ldr	r3, [pc, #276]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099e0:	60bb      	str	r3, [r7, #8]
 80099e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80099e4:	4b44      	ldr	r3, [pc, #272]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a43      	ldr	r2, [pc, #268]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80099ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099ee:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80099f0:	f7f9 fb74 	bl	80030dc <HAL_GetTick>
 80099f4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80099f6:	e008      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80099f8:	f7f9 fb70 	bl	80030dc <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d901      	bls.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e06d      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009a0a:	4b3b      	ldr	r3, [pc, #236]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0f0      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009a16:	4b36      	ldr	r3, [pc, #216]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a1e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d02f      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d028      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a34:	4b2e      	ldr	r3, [pc, #184]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a3c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009a3e:	4b2f      	ldr	r3, [pc, #188]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009a40:	2201      	movs	r2, #1
 8009a42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009a44:	4b2d      	ldr	r3, [pc, #180]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009a4a:	4a29      	ldr	r2, [pc, #164]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009a50:	4b27      	ldr	r3, [pc, #156]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d114      	bne.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009a5c:	f7f9 fb3e 	bl	80030dc <HAL_GetTick>
 8009a60:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a62:	e00a      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a64:	f7f9 fb3a 	bl	80030dc <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d901      	bls.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e035      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a7a:	4b1d      	ldr	r3, [pc, #116]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7e:	f003 0302 	and.w	r3, r3, #2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0ee      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a92:	d10d      	bne.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009a94:	4b16      	ldr	r3, [pc, #88]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aa8:	4911      	ldr	r1, [pc, #68]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	608b      	str	r3, [r1, #8]
 8009aae:	e005      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009ab0:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	4a0e      	ldr	r2, [pc, #56]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009ab6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009aba:	6093      	str	r3, [r2, #8]
 8009abc:	4b0c      	ldr	r3, [pc, #48]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009abe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ac8:	4909      	ldr	r1, [pc, #36]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009aca:	4313      	orrs	r3, r2
 8009acc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0310 	and.w	r3, r3, #16
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d004      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009ae0:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8009ae2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3720      	adds	r7, #32
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	40023800 	.word	0x40023800
 8009af4:	42470070 	.word	0x42470070
 8009af8:	40007000 	.word	0x40007000
 8009afc:	42470e40 	.word	0x42470e40
 8009b00:	424711e0 	.word	0x424711e0

08009b04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d101      	bne.n	8009b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e273      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d075      	beq.n	8009c0e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009b22:	4b88      	ldr	r3, [pc, #544]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f003 030c 	and.w	r3, r3, #12
 8009b2a:	2b04      	cmp	r3, #4
 8009b2c:	d00c      	beq.n	8009b48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b2e:	4b85      	ldr	r3, [pc, #532]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009b36:	2b08      	cmp	r3, #8
 8009b38:	d112      	bne.n	8009b60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b3a:	4b82      	ldr	r3, [pc, #520]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b46:	d10b      	bne.n	8009b60 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b48:	4b7e      	ldr	r3, [pc, #504]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d05b      	beq.n	8009c0c <HAL_RCC_OscConfig+0x108>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d157      	bne.n	8009c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e24e      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b68:	d106      	bne.n	8009b78 <HAL_RCC_OscConfig+0x74>
 8009b6a:	4b76      	ldr	r3, [pc, #472]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a75      	ldr	r2, [pc, #468]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	e01d      	b.n	8009bb4 <HAL_RCC_OscConfig+0xb0>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b80:	d10c      	bne.n	8009b9c <HAL_RCC_OscConfig+0x98>
 8009b82:	4b70      	ldr	r3, [pc, #448]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a6f      	ldr	r2, [pc, #444]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	4b6d      	ldr	r3, [pc, #436]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a6c      	ldr	r2, [pc, #432]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	e00b      	b.n	8009bb4 <HAL_RCC_OscConfig+0xb0>
 8009b9c:	4b69      	ldr	r3, [pc, #420]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a68      	ldr	r2, [pc, #416]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	4b66      	ldr	r3, [pc, #408]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a65      	ldr	r2, [pc, #404]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d013      	beq.n	8009be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bbc:	f7f9 fa8e 	bl	80030dc <HAL_GetTick>
 8009bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bc2:	e008      	b.n	8009bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009bc4:	f7f9 fa8a 	bl	80030dc <HAL_GetTick>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	2b64      	cmp	r3, #100	; 0x64
 8009bd0:	d901      	bls.n	8009bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e213      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bd6:	4b5b      	ldr	r3, [pc, #364]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0f0      	beq.n	8009bc4 <HAL_RCC_OscConfig+0xc0>
 8009be2:	e014      	b.n	8009c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be4:	f7f9 fa7a 	bl	80030dc <HAL_GetTick>
 8009be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bea:	e008      	b.n	8009bfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009bec:	f7f9 fa76 	bl	80030dc <HAL_GetTick>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	2b64      	cmp	r3, #100	; 0x64
 8009bf8:	d901      	bls.n	8009bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e1ff      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bfe:	4b51      	ldr	r3, [pc, #324]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1f0      	bne.n	8009bec <HAL_RCC_OscConfig+0xe8>
 8009c0a:	e000      	b.n	8009c0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 0302 	and.w	r3, r3, #2
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d063      	beq.n	8009ce2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009c1a:	4b4a      	ldr	r3, [pc, #296]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 030c 	and.w	r3, r3, #12
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00b      	beq.n	8009c3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c26:	4b47      	ldr	r3, [pc, #284]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009c2e:	2b08      	cmp	r3, #8
 8009c30:	d11c      	bne.n	8009c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c32:	4b44      	ldr	r3, [pc, #272]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d116      	bne.n	8009c6c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c3e:	4b41      	ldr	r3, [pc, #260]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 0302 	and.w	r3, r3, #2
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d005      	beq.n	8009c56 <HAL_RCC_OscConfig+0x152>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d001      	beq.n	8009c56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e1d3      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c56:	4b3b      	ldr	r3, [pc, #236]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	4937      	ldr	r1, [pc, #220]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009c66:	4313      	orrs	r3, r2
 8009c68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c6a:	e03a      	b.n	8009ce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d020      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c74:	4b34      	ldr	r3, [pc, #208]	; (8009d48 <HAL_RCC_OscConfig+0x244>)
 8009c76:	2201      	movs	r2, #1
 8009c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c7a:	f7f9 fa2f 	bl	80030dc <HAL_GetTick>
 8009c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c80:	e008      	b.n	8009c94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c82:	f7f9 fa2b 	bl	80030dc <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d901      	bls.n	8009c94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e1b4      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c94:	4b2b      	ldr	r3, [pc, #172]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0302 	and.w	r3, r3, #2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0f0      	beq.n	8009c82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ca0:	4b28      	ldr	r3, [pc, #160]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	00db      	lsls	r3, r3, #3
 8009cae:	4925      	ldr	r1, [pc, #148]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	600b      	str	r3, [r1, #0]
 8009cb4:	e015      	b.n	8009ce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cb6:	4b24      	ldr	r3, [pc, #144]	; (8009d48 <HAL_RCC_OscConfig+0x244>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cbc:	f7f9 fa0e 	bl	80030dc <HAL_GetTick>
 8009cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009cc2:	e008      	b.n	8009cd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009cc4:	f7f9 fa0a 	bl	80030dc <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d901      	bls.n	8009cd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e193      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009cd6:	4b1b      	ldr	r3, [pc, #108]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1f0      	bne.n	8009cc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0308 	and.w	r3, r3, #8
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d036      	beq.n	8009d5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d016      	beq.n	8009d24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cf6:	4b15      	ldr	r3, [pc, #84]	; (8009d4c <HAL_RCC_OscConfig+0x248>)
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cfc:	f7f9 f9ee 	bl	80030dc <HAL_GetTick>
 8009d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d02:	e008      	b.n	8009d16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d04:	f7f9 f9ea 	bl	80030dc <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d901      	bls.n	8009d16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e173      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d16:	4b0b      	ldr	r3, [pc, #44]	; (8009d44 <HAL_RCC_OscConfig+0x240>)
 8009d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d1a:	f003 0302 	and.w	r3, r3, #2
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d0f0      	beq.n	8009d04 <HAL_RCC_OscConfig+0x200>
 8009d22:	e01b      	b.n	8009d5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d24:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <HAL_RCC_OscConfig+0x248>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d2a:	f7f9 f9d7 	bl	80030dc <HAL_GetTick>
 8009d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d30:	e00e      	b.n	8009d50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d32:	f7f9 f9d3 	bl	80030dc <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d907      	bls.n	8009d50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e15c      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
 8009d44:	40023800 	.word	0x40023800
 8009d48:	42470000 	.word	0x42470000
 8009d4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d50:	4b8a      	ldr	r3, [pc, #552]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1ea      	bne.n	8009d32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 8097 	beq.w	8009e98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d6e:	4b83      	ldr	r3, [pc, #524]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10f      	bne.n	8009d9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60bb      	str	r3, [r7, #8]
 8009d7e:	4b7f      	ldr	r3, [pc, #508]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d82:	4a7e      	ldr	r2, [pc, #504]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d88:	6413      	str	r3, [r2, #64]	; 0x40
 8009d8a:	4b7c      	ldr	r3, [pc, #496]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d92:	60bb      	str	r3, [r7, #8]
 8009d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d96:	2301      	movs	r3, #1
 8009d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d9a:	4b79      	ldr	r3, [pc, #484]	; (8009f80 <HAL_RCC_OscConfig+0x47c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d118      	bne.n	8009dd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009da6:	4b76      	ldr	r3, [pc, #472]	; (8009f80 <HAL_RCC_OscConfig+0x47c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a75      	ldr	r2, [pc, #468]	; (8009f80 <HAL_RCC_OscConfig+0x47c>)
 8009dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009db2:	f7f9 f993 	bl	80030dc <HAL_GetTick>
 8009db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009db8:	e008      	b.n	8009dcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dba:	f7f9 f98f 	bl	80030dc <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d901      	bls.n	8009dcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e118      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dcc:	4b6c      	ldr	r3, [pc, #432]	; (8009f80 <HAL_RCC_OscConfig+0x47c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d0f0      	beq.n	8009dba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d106      	bne.n	8009dee <HAL_RCC_OscConfig+0x2ea>
 8009de0:	4b66      	ldr	r3, [pc, #408]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de4:	4a65      	ldr	r2, [pc, #404]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009de6:	f043 0301 	orr.w	r3, r3, #1
 8009dea:	6713      	str	r3, [r2, #112]	; 0x70
 8009dec:	e01c      	b.n	8009e28 <HAL_RCC_OscConfig+0x324>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	2b05      	cmp	r3, #5
 8009df4:	d10c      	bne.n	8009e10 <HAL_RCC_OscConfig+0x30c>
 8009df6:	4b61      	ldr	r3, [pc, #388]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dfa:	4a60      	ldr	r2, [pc, #384]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009dfc:	f043 0304 	orr.w	r3, r3, #4
 8009e00:	6713      	str	r3, [r2, #112]	; 0x70
 8009e02:	4b5e      	ldr	r3, [pc, #376]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e06:	4a5d      	ldr	r2, [pc, #372]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009e08:	f043 0301 	orr.w	r3, r3, #1
 8009e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8009e0e:	e00b      	b.n	8009e28 <HAL_RCC_OscConfig+0x324>
 8009e10:	4b5a      	ldr	r3, [pc, #360]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e14:	4a59      	ldr	r2, [pc, #356]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009e16:	f023 0301 	bic.w	r3, r3, #1
 8009e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8009e1c:	4b57      	ldr	r3, [pc, #348]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e20:	4a56      	ldr	r2, [pc, #344]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009e22:	f023 0304 	bic.w	r3, r3, #4
 8009e26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d015      	beq.n	8009e5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e30:	f7f9 f954 	bl	80030dc <HAL_GetTick>
 8009e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e36:	e00a      	b.n	8009e4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e38:	f7f9 f950 	bl	80030dc <HAL_GetTick>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d901      	bls.n	8009e4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e0d7      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e4e:	4b4b      	ldr	r3, [pc, #300]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d0ee      	beq.n	8009e38 <HAL_RCC_OscConfig+0x334>
 8009e5a:	e014      	b.n	8009e86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e5c:	f7f9 f93e 	bl	80030dc <HAL_GetTick>
 8009e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e62:	e00a      	b.n	8009e7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e64:	f7f9 f93a 	bl	80030dc <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d901      	bls.n	8009e7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e0c1      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e7a:	4b40      	ldr	r3, [pc, #256]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1ee      	bne.n	8009e64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d105      	bne.n	8009e98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e8c:	4b3b      	ldr	r3, [pc, #236]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e90:	4a3a      	ldr	r2, [pc, #232]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 80ad 	beq.w	8009ffc <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ea2:	4b36      	ldr	r3, [pc, #216]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f003 030c 	and.w	r3, r3, #12
 8009eaa:	2b08      	cmp	r3, #8
 8009eac:	d060      	beq.n	8009f70 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d145      	bne.n	8009f42 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009eb6:	4b33      	ldr	r3, [pc, #204]	; (8009f84 <HAL_RCC_OscConfig+0x480>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ebc:	f7f9 f90e 	bl	80030dc <HAL_GetTick>
 8009ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ec2:	e008      	b.n	8009ed6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ec4:	f7f9 f90a 	bl	80030dc <HAL_GetTick>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d901      	bls.n	8009ed6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e093      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ed6:	4b29      	ldr	r3, [pc, #164]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1f0      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	69da      	ldr	r2, [r3, #28]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	431a      	orrs	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	019b      	lsls	r3, r3, #6
 8009ef2:	431a      	orrs	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef8:	085b      	lsrs	r3, r3, #1
 8009efa:	3b01      	subs	r3, #1
 8009efc:	041b      	lsls	r3, r3, #16
 8009efe:	431a      	orrs	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	061b      	lsls	r3, r3, #24
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0c:	071b      	lsls	r3, r3, #28
 8009f0e:	491b      	ldr	r1, [pc, #108]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f14:	4b1b      	ldr	r3, [pc, #108]	; (8009f84 <HAL_RCC_OscConfig+0x480>)
 8009f16:	2201      	movs	r2, #1
 8009f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f1a:	f7f9 f8df 	bl	80030dc <HAL_GetTick>
 8009f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f20:	e008      	b.n	8009f34 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f22:	f7f9 f8db 	bl	80030dc <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d901      	bls.n	8009f34 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e064      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f34:	4b11      	ldr	r3, [pc, #68]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0f0      	beq.n	8009f22 <HAL_RCC_OscConfig+0x41e>
 8009f40:	e05c      	b.n	8009ffc <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f42:	4b10      	ldr	r3, [pc, #64]	; (8009f84 <HAL_RCC_OscConfig+0x480>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f48:	f7f9 f8c8 	bl	80030dc <HAL_GetTick>
 8009f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f4e:	e008      	b.n	8009f62 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f50:	f7f9 f8c4 	bl	80030dc <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d901      	bls.n	8009f62 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e04d      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f62:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <HAL_RCC_OscConfig+0x478>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1f0      	bne.n	8009f50 <HAL_RCC_OscConfig+0x44c>
 8009f6e:	e045      	b.n	8009ffc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d107      	bne.n	8009f88 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e040      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
 8009f7c:	40023800 	.word	0x40023800
 8009f80:	40007000 	.word	0x40007000
 8009f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009f88:	4b1f      	ldr	r3, [pc, #124]	; (800a008 <HAL_RCC_OscConfig+0x504>)
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d030      	beq.n	8009ff8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d129      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d122      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009fb8:	4013      	ands	r3, r2
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d119      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fce:	085b      	lsrs	r3, r3, #1
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d10f      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d107      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d001      	beq.n	8009ffc <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e000      	b.n	8009ffe <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3718      	adds	r7, #24
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	40023800 	.word	0x40023800

0800a00c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e025      	b.n	800a06c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d106      	bne.n	800a03a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f81d 	bl	800a074 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2202      	movs	r2, #2
 800a03e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3304      	adds	r3, #4
 800a04a:	4619      	mov	r1, r3
 800a04c:	4610      	mov	r0, r2
 800a04e:	f000 fb19 	bl	800a684 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	461a      	mov	r2, r3
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	f000 fb6e 	bl	800a73e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a09a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d101      	bne.n	800a0a6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e021      	b.n	800a0ea <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d002      	beq.n	800a0b2 <HAL_SDRAM_SendCommand+0x2a>
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	2b05      	cmp	r3, #5
 800a0b0:	d118      	bne.n	800a0e4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	68b9      	ldr	r1, [r7, #8]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 fba4 	bl	800a810 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d104      	bne.n	800a0da <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2205      	movs	r2, #5
 800a0d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a0d8:	e006      	b.n	800a0e8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a0e2:	e001      	b.n	800a0e8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e000      	b.n	800a0ea <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3718      	adds	r7, #24
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b082      	sub	sp, #8
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b02      	cmp	r3, #2
 800a106:	d101      	bne.n	800a10c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a108:	2302      	movs	r3, #2
 800a10a:	e016      	b.n	800a13a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b01      	cmp	r3, #1
 800a116:	d10f      	bne.n	800a138 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fbaf 	bl	800a88a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	e000      	b.n	800a13a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e041      	b.n	800a1d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d106      	bne.n	800a16e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f839 	bl	800a1e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2202      	movs	r2, #2
 800a172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3304      	adds	r3, #4
 800a17e:	4619      	mov	r1, r3
 800a180:	4610      	mov	r0, r2
 800a182:	f000 f9bf 	bl	800a504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2201      	movs	r2, #1
 800a18a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b01      	cmp	r3, #1
 800a206:	d001      	beq.n	800a20c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	e04e      	b.n	800a2aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f042 0201 	orr.w	r2, r2, #1
 800a222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a23      	ldr	r2, [pc, #140]	; (800a2b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d022      	beq.n	800a274 <HAL_TIM_Base_Start_IT+0x80>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a236:	d01d      	beq.n	800a274 <HAL_TIM_Base_Start_IT+0x80>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a1f      	ldr	r2, [pc, #124]	; (800a2bc <HAL_TIM_Base_Start_IT+0xc8>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d018      	beq.n	800a274 <HAL_TIM_Base_Start_IT+0x80>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a1e      	ldr	r2, [pc, #120]	; (800a2c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d013      	beq.n	800a274 <HAL_TIM_Base_Start_IT+0x80>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a1c      	ldr	r2, [pc, #112]	; (800a2c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d00e      	beq.n	800a274 <HAL_TIM_Base_Start_IT+0x80>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a1b      	ldr	r2, [pc, #108]	; (800a2c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d009      	beq.n	800a274 <HAL_TIM_Base_Start_IT+0x80>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a19      	ldr	r2, [pc, #100]	; (800a2cc <HAL_TIM_Base_Start_IT+0xd8>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d004      	beq.n	800a274 <HAL_TIM_Base_Start_IT+0x80>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a18      	ldr	r2, [pc, #96]	; (800a2d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d111      	bne.n	800a298 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f003 0307 	and.w	r3, r3, #7
 800a27e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b06      	cmp	r3, #6
 800a284:	d010      	beq.n	800a2a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f042 0201 	orr.w	r2, r2, #1
 800a294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a296:	e007      	b.n	800a2a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0201 	orr.w	r2, r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	40010000 	.word	0x40010000
 800a2bc:	40000400 	.word	0x40000400
 800a2c0:	40000800 	.word	0x40000800
 800a2c4:	40000c00 	.word	0x40000c00
 800a2c8:	40010400 	.word	0x40010400
 800a2cc:	40014000 	.word	0x40014000
 800a2d0:	40001800 	.word	0x40001800

0800a2d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f003 0302 	and.w	r3, r3, #2
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d020      	beq.n	800a338 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f003 0302 	and.w	r3, r3, #2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d01b      	beq.n	800a338 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f06f 0202 	mvn.w	r2, #2
 800a308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	f003 0303 	and.w	r3, r3, #3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f8d2 	bl	800a4c8 <HAL_TIM_IC_CaptureCallback>
 800a324:	e005      	b.n	800a332 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f8c4 	bl	800a4b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f8d5 	bl	800a4dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f003 0304 	and.w	r3, r3, #4
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d020      	beq.n	800a384 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d01b      	beq.n	800a384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f06f 0204 	mvn.w	r2, #4
 800a354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2202      	movs	r2, #2
 800a35a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f8ac 	bl	800a4c8 <HAL_TIM_IC_CaptureCallback>
 800a370:	e005      	b.n	800a37e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f89e 	bl	800a4b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f8af 	bl	800a4dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f003 0308 	and.w	r3, r3, #8
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d020      	beq.n	800a3d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f003 0308 	and.w	r3, r3, #8
 800a394:	2b00      	cmp	r3, #0
 800a396:	d01b      	beq.n	800a3d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f06f 0208 	mvn.w	r2, #8
 800a3a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2204      	movs	r2, #4
 800a3a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	f003 0303 	and.w	r3, r3, #3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f886 	bl	800a4c8 <HAL_TIM_IC_CaptureCallback>
 800a3bc:	e005      	b.n	800a3ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f878 	bl	800a4b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f889 	bl	800a4dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f003 0310 	and.w	r3, r3, #16
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d020      	beq.n	800a41c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f003 0310 	and.w	r3, r3, #16
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d01b      	beq.n	800a41c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f06f 0210 	mvn.w	r2, #16
 800a3ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2208      	movs	r2, #8
 800a3f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f860 	bl	800a4c8 <HAL_TIM_IC_CaptureCallback>
 800a408:	e005      	b.n	800a416 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f852 	bl	800a4b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f863 	bl	800a4dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00c      	beq.n	800a440 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d007      	beq.n	800a440 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f06f 0201 	mvn.w	r2, #1
 800a438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7f6 fed0 	bl	80011e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00c      	beq.n	800a464 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a450:	2b00      	cmp	r3, #0
 800a452:	d007      	beq.n	800a464 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a45c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f906 	bl	800a670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00c      	beq.n	800a488 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a474:	2b00      	cmp	r3, #0
 800a476:	d007      	beq.n	800a488 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f834 	bl	800a4f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	f003 0320 	and.w	r3, r3, #32
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00c      	beq.n	800a4ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f003 0320 	and.w	r3, r3, #32
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d007      	beq.n	800a4ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f06f 0220 	mvn.w	r2, #32
 800a4a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f8d8 	bl	800a65c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4ac:	bf00      	nop
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a46      	ldr	r2, [pc, #280]	; (800a630 <TIM_Base_SetConfig+0x12c>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d013      	beq.n	800a544 <TIM_Base_SetConfig+0x40>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a522:	d00f      	beq.n	800a544 <TIM_Base_SetConfig+0x40>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a43      	ldr	r2, [pc, #268]	; (800a634 <TIM_Base_SetConfig+0x130>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d00b      	beq.n	800a544 <TIM_Base_SetConfig+0x40>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a42      	ldr	r2, [pc, #264]	; (800a638 <TIM_Base_SetConfig+0x134>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d007      	beq.n	800a544 <TIM_Base_SetConfig+0x40>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a41      	ldr	r2, [pc, #260]	; (800a63c <TIM_Base_SetConfig+0x138>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d003      	beq.n	800a544 <TIM_Base_SetConfig+0x40>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a40      	ldr	r2, [pc, #256]	; (800a640 <TIM_Base_SetConfig+0x13c>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d108      	bne.n	800a556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a54a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a35      	ldr	r2, [pc, #212]	; (800a630 <TIM_Base_SetConfig+0x12c>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d02b      	beq.n	800a5b6 <TIM_Base_SetConfig+0xb2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a564:	d027      	beq.n	800a5b6 <TIM_Base_SetConfig+0xb2>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a32      	ldr	r2, [pc, #200]	; (800a634 <TIM_Base_SetConfig+0x130>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d023      	beq.n	800a5b6 <TIM_Base_SetConfig+0xb2>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a31      	ldr	r2, [pc, #196]	; (800a638 <TIM_Base_SetConfig+0x134>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d01f      	beq.n	800a5b6 <TIM_Base_SetConfig+0xb2>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a30      	ldr	r2, [pc, #192]	; (800a63c <TIM_Base_SetConfig+0x138>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d01b      	beq.n	800a5b6 <TIM_Base_SetConfig+0xb2>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a2f      	ldr	r2, [pc, #188]	; (800a640 <TIM_Base_SetConfig+0x13c>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d017      	beq.n	800a5b6 <TIM_Base_SetConfig+0xb2>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a2e      	ldr	r2, [pc, #184]	; (800a644 <TIM_Base_SetConfig+0x140>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d013      	beq.n	800a5b6 <TIM_Base_SetConfig+0xb2>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a2d      	ldr	r2, [pc, #180]	; (800a648 <TIM_Base_SetConfig+0x144>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d00f      	beq.n	800a5b6 <TIM_Base_SetConfig+0xb2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a2c      	ldr	r2, [pc, #176]	; (800a64c <TIM_Base_SetConfig+0x148>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d00b      	beq.n	800a5b6 <TIM_Base_SetConfig+0xb2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a2b      	ldr	r2, [pc, #172]	; (800a650 <TIM_Base_SetConfig+0x14c>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d007      	beq.n	800a5b6 <TIM_Base_SetConfig+0xb2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a2a      	ldr	r2, [pc, #168]	; (800a654 <TIM_Base_SetConfig+0x150>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d003      	beq.n	800a5b6 <TIM_Base_SetConfig+0xb2>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a29      	ldr	r2, [pc, #164]	; (800a658 <TIM_Base_SetConfig+0x154>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d108      	bne.n	800a5c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	689a      	ldr	r2, [r3, #8]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a10      	ldr	r2, [pc, #64]	; (800a630 <TIM_Base_SetConfig+0x12c>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d003      	beq.n	800a5fc <TIM_Base_SetConfig+0xf8>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a12      	ldr	r2, [pc, #72]	; (800a640 <TIM_Base_SetConfig+0x13c>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d103      	bne.n	800a604 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	691a      	ldr	r2, [r3, #16]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	2b01      	cmp	r3, #1
 800a614:	d105      	bne.n	800a622 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	f023 0201 	bic.w	r2, r3, #1
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	611a      	str	r2, [r3, #16]
  }
}
 800a622:	bf00      	nop
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	40010000 	.word	0x40010000
 800a634:	40000400 	.word	0x40000400
 800a638:	40000800 	.word	0x40000800
 800a63c:	40000c00 	.word	0x40000c00
 800a640:	40010400 	.word	0x40010400
 800a644:	40014000 	.word	0x40014000
 800a648:	40014400 	.word	0x40014400
 800a64c:	40014800 	.word	0x40014800
 800a650:	40001800 	.word	0x40001800
 800a654:	40001c00 	.word	0x40001c00
 800a658:	40002000 	.word	0x40002000

0800a65c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d123      	bne.n	800a6de <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a69e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	6851      	ldr	r1, [r2, #4]
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	6892      	ldr	r2, [r2, #8]
 800a6aa:	4311      	orrs	r1, r2
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	68d2      	ldr	r2, [r2, #12]
 800a6b0:	4311      	orrs	r1, r2
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	6912      	ldr	r2, [r2, #16]
 800a6b6:	4311      	orrs	r1, r2
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	6952      	ldr	r2, [r2, #20]
 800a6bc:	4311      	orrs	r1, r2
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	6992      	ldr	r2, [r2, #24]
 800a6c2:	4311      	orrs	r1, r2
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	69d2      	ldr	r2, [r2, #28]
 800a6c8:	4311      	orrs	r1, r2
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	6a12      	ldr	r2, [r2, #32]
 800a6ce:	4311      	orrs	r1, r2
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	601a      	str	r2, [r3, #0]
 800a6dc:	e028      	b.n	800a730 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	69d9      	ldr	r1, [r3, #28]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	4319      	orrs	r1, r3
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	430b      	orrs	r3, r1
 800a6f6:	431a      	orrs	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a704:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	6851      	ldr	r1, [r2, #4]
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	6892      	ldr	r2, [r2, #8]
 800a710:	4311      	orrs	r1, r2
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	68d2      	ldr	r2, [r2, #12]
 800a716:	4311      	orrs	r1, r2
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	6912      	ldr	r2, [r2, #16]
 800a71c:	4311      	orrs	r1, r2
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	6952      	ldr	r2, [r2, #20]
 800a722:	4311      	orrs	r1, r2
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	6992      	ldr	r2, [r2, #24]
 800a728:	430a      	orrs	r2, r1
 800a72a:	431a      	orrs	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a73e:	b480      	push	{r7}
 800a740:	b085      	sub	sp, #20
 800a742:	af00      	add	r7, sp, #0
 800a744:	60f8      	str	r0, [r7, #12]
 800a746:	60b9      	str	r1, [r7, #8]
 800a748:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d128      	bne.n	800a7a2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	1e59      	subs	r1, r3, #1
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	3b01      	subs	r3, #1
 800a764:	011b      	lsls	r3, r3, #4
 800a766:	4319      	orrs	r1, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	021b      	lsls	r3, r3, #8
 800a770:	4319      	orrs	r1, r3
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	3b01      	subs	r3, #1
 800a778:	031b      	lsls	r3, r3, #12
 800a77a:	4319      	orrs	r1, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	3b01      	subs	r3, #1
 800a782:	041b      	lsls	r3, r3, #16
 800a784:	4319      	orrs	r1, r3
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	051b      	lsls	r3, r3, #20
 800a78e:	4319      	orrs	r1, r3
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	699b      	ldr	r3, [r3, #24]
 800a794:	3b01      	subs	r3, #1
 800a796:	061b      	lsls	r3, r3, #24
 800a798:	430b      	orrs	r3, r1
 800a79a:	431a      	orrs	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	609a      	str	r2, [r3, #8]
 800a7a0:	e02f      	b.n	800a802 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a7aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	68d2      	ldr	r2, [r2, #12]
 800a7b2:	3a01      	subs	r2, #1
 800a7b4:	0311      	lsls	r1, r2, #12
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	6952      	ldr	r2, [r2, #20]
 800a7ba:	3a01      	subs	r2, #1
 800a7bc:	0512      	lsls	r2, r2, #20
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	1e59      	subs	r1, r3, #1
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	4319      	orrs	r1, r3
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	021b      	lsls	r3, r3, #8
 800a7e6:	4319      	orrs	r1, r3
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	041b      	lsls	r3, r3, #16
 800a7f0:	4319      	orrs	r1, r3
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	061b      	lsls	r3, r3, #24
 800a7fa:	430b      	orrs	r3, r1
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	691b      	ldr	r3, [r3, #16]
 800a824:	0d9b      	lsrs	r3, r3, #22
 800a826:	059b      	lsls	r3, r3, #22
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	6811      	ldr	r1, [r2, #0]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	6852      	ldr	r2, [r2, #4]
 800a830:	4311      	orrs	r1, r2
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	6892      	ldr	r2, [r2, #8]
 800a836:	3a01      	subs	r2, #1
 800a838:	0152      	lsls	r2, r2, #5
 800a83a:	4311      	orrs	r1, r2
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	68d2      	ldr	r2, [r2, #12]
 800a840:	0252      	lsls	r2, r2, #9
 800a842:	430a      	orrs	r2, r1
 800a844:	431a      	orrs	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a84a:	f7f8 fc47 	bl	80030dc <HAL_GetTick>
 800a84e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a850:	e010      	b.n	800a874 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a858:	d00c      	beq.n	800a874 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d007      	beq.n	800a870 <FMC_SDRAM_SendCommand+0x60>
 800a860:	f7f8 fc3c 	bl	80030dc <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d201      	bcs.n	800a874 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a870:	2303      	movs	r3, #3
 800a872:	e006      	b.n	800a882 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	f003 0320 	and.w	r3, r3, #32
 800a87c:	2b20      	cmp	r3, #32
 800a87e:	d0e8      	beq.n	800a852 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a89c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	0052      	lsls	r2, r2, #1
 800a8a4:	431a      	orrs	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	f043 0201 	orr.w	r2, r3, #1
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	f023 0201 	bic.w	r2, r3, #1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3301      	adds	r3, #1
 800a90e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a916:	d901      	bls.n	800a91c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a918:	2303      	movs	r3, #3
 800a91a:	e01b      	b.n	800a954 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	daf2      	bge.n	800a90a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	019b      	lsls	r3, r3, #6
 800a92c:	f043 0220 	orr.w	r2, r3, #32
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3301      	adds	r3, #1
 800a938:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a940:	d901      	bls.n	800a946 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e006      	b.n	800a954 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	f003 0320 	and.w	r3, r3, #32
 800a94e:	2b20      	cmp	r3, #32
 800a950:	d0f0      	beq.n	800a934 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3301      	adds	r3, #1
 800a970:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a978:	d901      	bls.n	800a97e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e018      	b.n	800a9b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	daf2      	bge.n	800a96c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a986:	2300      	movs	r3, #0
 800a988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2210      	movs	r2, #16
 800a98e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3301      	adds	r3, #1
 800a994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a99c:	d901      	bls.n	800a9a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e006      	b.n	800a9b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f003 0310 	and.w	r3, r3, #16
 800a9aa:	2b10      	cmp	r3, #16
 800a9ac:	d0f0      	beq.n	800a990 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b08b      	sub	sp, #44	; 0x2c
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9d2:	88fb      	ldrh	r3, [r7, #6]
 800a9d4:	089b      	lsrs	r3, r3, #2
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9da:	88fb      	ldrh	r3, [r7, #6]
 800a9dc:	f003 0303 	and.w	r3, r3, #3
 800a9e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	623b      	str	r3, [r7, #32]
 800a9e6:	e014      	b.n	800aa12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	3301      	adds	r3, #1
 800aa04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	3301      	adds	r3, #1
 800aa0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	623b      	str	r3, [r7, #32]
 800aa12:	6a3a      	ldr	r2, [r7, #32]
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d3e6      	bcc.n	800a9e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa1a:	8bfb      	ldrh	r3, [r7, #30]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d01e      	beq.n	800aa5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa20:	2300      	movs	r3, #0
 800aa22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	f107 0310 	add.w	r3, r7, #16
 800aa30:	6812      	ldr	r2, [r2, #0]
 800aa32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	00db      	lsls	r3, r3, #3
 800aa3c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa44:	701a      	strb	r2, [r3, #0]
      i++;
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	3301      	adds	r3, #1
 800aa50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aa52:	8bfb      	ldrh	r3, [r7, #30]
 800aa54:	3b01      	subs	r3, #1
 800aa56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa58:	8bfb      	ldrh	r3, [r7, #30]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1ea      	bne.n	800aa34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	372c      	adds	r7, #44	; 0x2c
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	4013      	ands	r3, r2
 800aa82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa84:	68fb      	ldr	r3, [r7, #12]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b085      	sub	sp, #20
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800aaa2:	78fb      	ldrb	r3, [r7, #3]
 800aaa4:	015a      	lsls	r2, r3, #5
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800aab2:	78fb      	ldrb	r3, [r7, #3]
 800aab4:	015a      	lsls	r2, r3, #5
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	4413      	add	r3, r2
 800aaba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	4013      	ands	r3, r2
 800aac4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aac6:	68bb      	ldr	r3, [r7, #8]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	695b      	ldr	r3, [r3, #20]
 800aae0:	f003 0301 	and.w	r3, r3, #1
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab0e:	f023 0303 	bic.w	r3, r3, #3
 800ab12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	78fb      	ldrb	r3, [r7, #3]
 800ab1e:	f003 0303 	and.w	r3, r3, #3
 800ab22:	68f9      	ldr	r1, [r7, #12]
 800ab24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ab2c:	78fb      	ldrb	r3, [r7, #3]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d107      	bne.n	800ab42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab38:	461a      	mov	r2, r3
 800ab3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ab3e:	6053      	str	r3, [r2, #4]
 800ab40:	e00c      	b.n	800ab5c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800ab42:	78fb      	ldrb	r3, [r7, #3]
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d107      	bne.n	800ab58 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab4e:	461a      	mov	r2, r3
 800ab50:	f241 7370 	movw	r3, #6000	; 0x1770
 800ab54:	6053      	str	r3, [r2, #4]
 800ab56:	e001      	b.n	800ab5c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e000      	b.n	800ab5e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b085      	sub	sp, #20
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	b29b      	uxth	r3, r3
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b089      	sub	sp, #36	; 0x24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ab9c:	78fb      	ldrb	r3, [r7, #3]
 800ab9e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800aba0:	2300      	movs	r3, #0
 800aba2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	015a      	lsls	r2, r3, #5
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	4413      	add	r3, r2
 800abac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	0c9b      	lsrs	r3, r3, #18
 800abb4:	f003 0303 	and.w	r3, r3, #3
 800abb8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	015a      	lsls	r2, r3, #5
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	4413      	add	r3, r2
 800abc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	0fdb      	lsrs	r3, r3, #31
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	015a      	lsls	r2, r3, #5
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	4413      	add	r3, r2
 800abd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	0fdb      	lsrs	r3, r3, #31
 800abe0:	f003 0301 	and.w	r3, r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f003 0320 	and.w	r3, r3, #32
 800abee:	2b20      	cmp	r3, #32
 800abf0:	d10d      	bne.n	800ac0e <USB_HC_Halt+0x82>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10a      	bne.n	800ac0e <USB_HC_Halt+0x82>
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d005      	beq.n	800ac0a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d002      	beq.n	800ac0a <USB_HC_Halt+0x7e>
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d101      	bne.n	800ac0e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e0d8      	b.n	800adc0 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <USB_HC_Halt+0x8e>
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d173      	bne.n	800ad02 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	015a      	lsls	r2, r3, #5
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	4413      	add	r3, r2
 800ac22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	0151      	lsls	r1, r2, #5
 800ac2c:	69fa      	ldr	r2, [r7, #28]
 800ac2e:	440a      	add	r2, r1
 800ac30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac38:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	f003 0320 	and.w	r3, r3, #32
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d14a      	bne.n	800acdc <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d133      	bne.n	800acba <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	015a      	lsls	r2, r3, #5
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	69ba      	ldr	r2, [r7, #24]
 800ac62:	0151      	lsls	r1, r2, #5
 800ac64:	69fa      	ldr	r2, [r7, #28]
 800ac66:	440a      	add	r2, r1
 800ac68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac70:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	015a      	lsls	r2, r3, #5
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	4413      	add	r3, r2
 800ac7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	0151      	lsls	r1, r2, #5
 800ac84:	69fa      	ldr	r2, [r7, #28]
 800ac86:	440a      	add	r2, r1
 800ac88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac90:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	3301      	adds	r3, #1
 800ac96:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac9e:	d82e      	bhi.n	800acfe <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	015a      	lsls	r2, r3, #5
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	4413      	add	r3, r2
 800aca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acb6:	d0ec      	beq.n	800ac92 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800acb8:	e081      	b.n	800adbe <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	015a      	lsls	r2, r3, #5
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	69ba      	ldr	r2, [r7, #24]
 800acca:	0151      	lsls	r1, r2, #5
 800accc:	69fa      	ldr	r2, [r7, #28]
 800acce:	440a      	add	r2, r1
 800acd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acd8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800acda:	e070      	b.n	800adbe <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	015a      	lsls	r2, r3, #5
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	4413      	add	r3, r2
 800ace4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	69ba      	ldr	r2, [r7, #24]
 800acec:	0151      	lsls	r1, r2, #5
 800acee:	69fa      	ldr	r2, [r7, #28]
 800acf0:	440a      	add	r2, r1
 800acf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acfa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800acfc:	e05f      	b.n	800adbe <USB_HC_Halt+0x232>
            break;
 800acfe:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad00:	e05d      	b.n	800adbe <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	015a      	lsls	r2, r3, #5
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	69ba      	ldr	r2, [r7, #24]
 800ad12:	0151      	lsls	r1, r2, #5
 800ad14:	69fa      	ldr	r2, [r7, #28]
 800ad16:	440a      	add	r2, r1
 800ad18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad20:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d133      	bne.n	800ad9a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	0151      	lsls	r1, r2, #5
 800ad44:	69fa      	ldr	r2, [r7, #28]
 800ad46:	440a      	add	r2, r1
 800ad48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad50:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	69ba      	ldr	r2, [r7, #24]
 800ad62:	0151      	lsls	r1, r2, #5
 800ad64:	69fa      	ldr	r2, [r7, #28]
 800ad66:	440a      	add	r2, r1
 800ad68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad70:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	3301      	adds	r3, #1
 800ad76:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad7e:	d81d      	bhi.n	800adbc <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad96:	d0ec      	beq.n	800ad72 <USB_HC_Halt+0x1e6>
 800ad98:	e011      	b.n	800adbe <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	4413      	add	r3, r2
 800ada2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	69ba      	ldr	r2, [r7, #24]
 800adaa:	0151      	lsls	r1, r2, #5
 800adac:	69fa      	ldr	r2, [r7, #28]
 800adae:	440a      	add	r2, r1
 800adb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	e000      	b.n	800adbe <USB_HC_Halt+0x232>
          break;
 800adbc:	bf00      	nop
    }
  }

  return HAL_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3724      	adds	r7, #36	; 0x24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800addc:	2300      	movs	r3, #0
 800adde:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7ff fd7a 	bl	800a8da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ade6:	2110      	movs	r1, #16
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff fd87 	bl	800a8fc <USB_FlushTxFifo>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff fdb1 	bl	800a960 <USB_FlushRxFifo>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ae08:	2300      	movs	r3, #0
 800ae0a:	61bb      	str	r3, [r7, #24]
 800ae0c:	e01f      	b.n	800ae4e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae34:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	015a      	lsls	r2, r3, #5
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae42:	461a      	mov	r2, r3
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	61bb      	str	r3, [r7, #24]
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	2b0f      	cmp	r3, #15
 800ae52:	d9dc      	bls.n	800ae0e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ae54:	2300      	movs	r3, #0
 800ae56:	61bb      	str	r3, [r7, #24]
 800ae58:	e034      	b.n	800aec4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	015a      	lsls	r2, r3, #5
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	4413      	add	r3, r2
 800ae62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae70:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae80:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	015a      	lsls	r2, r3, #5
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae8e:	461a      	mov	r2, r3
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	3301      	adds	r3, #1
 800ae98:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aea0:	d80c      	bhi.n	800aebc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	015a      	lsls	r2, r3, #5
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aeb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aeb8:	d0ec      	beq.n	800ae94 <USB_StopHost+0xc8>
 800aeba:	e000      	b.n	800aebe <USB_StopHost+0xf2>
        break;
 800aebc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	3301      	adds	r3, #1
 800aec2:	61bb      	str	r3, [r7, #24]
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	2b0f      	cmp	r3, #15
 800aec8:	d9c7      	bls.n	800ae5a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aed0:	461a      	mov	r2, r3
 800aed2:	f04f 33ff 	mov.w	r3, #4294967295
 800aed6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f04f 32ff 	mov.w	r2, #4294967295
 800aede:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7ff fce9 	bl	800a8b8 <USB_EnableGlobalInt>

  return ret;
 800aee6:	7ffb      	ldrb	r3, [r7, #31]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3720      	adds	r7, #32
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	4603      	mov	r3, r0
 800aef8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800aefa:	2300      	movs	r3, #0
 800aefc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800aefe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af02:	2b84      	cmp	r3, #132	; 0x84
 800af04:	d005      	beq.n	800af12 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800af06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	4413      	add	r3, r2
 800af0e:	3303      	adds	r3, #3
 800af10:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800af12:	68fb      	ldr	r3, [r7, #12]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af26:	f3ef 8305 	mrs	r3, IPSR
 800af2a:	607b      	str	r3, [r7, #4]
  return(result);
 800af2c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800af2e:	2b00      	cmp	r3, #0
 800af30:	bf14      	ite	ne
 800af32:	2301      	movne	r3, #1
 800af34:	2300      	moveq	r3, #0
 800af36:	b2db      	uxtb	r3, r3
}
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800af48:	f001 ff52 	bl	800cdf0 <vTaskStartScheduler>
  
  return osOK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	bd80      	pop	{r7, pc}

0800af52 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800af56:	f7ff ffe3 	bl	800af20 <inHandlerMode>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d003      	beq.n	800af68 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800af60:	f002 f850 	bl	800d004 <xTaskGetTickCountFromISR>
 800af64:	4603      	mov	r3, r0
 800af66:	e002      	b.n	800af6e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800af68:	f002 f83c 	bl	800cfe4 <xTaskGetTickCount>
 800af6c:	4603      	mov	r3, r0
  }
}
 800af6e:	4618      	mov	r0, r3
 800af70:	bd80      	pop	{r7, pc}

0800af72 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800af72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af74:	b087      	sub	sp, #28
 800af76:	af02      	add	r7, sp, #8
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685c      	ldr	r4, [r3, #4]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af88:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff ffad 	bl	800aef0 <makeFreeRtosPriority>
 800af96:	4602      	mov	r2, r0
 800af98:	f107 030c 	add.w	r3, r7, #12
 800af9c:	9301      	str	r3, [sp, #4]
 800af9e:	9200      	str	r2, [sp, #0]
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	4632      	mov	r2, r6
 800afa4:	4629      	mov	r1, r5
 800afa6:	4620      	mov	r0, r4
 800afa8:	f001 fdb0 	bl	800cb0c <xTaskCreate>
 800afac:	4603      	mov	r3, r0
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d001      	beq.n	800afb6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800afb2:	2300      	movs	r3, #0
 800afb4:	e000      	b.n	800afb8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800afb6:	68fb      	ldr	r3, [r7, #12]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afc0 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 800afc4:	f002 fb3c 	bl	800d640 <xTaskGetCurrentTaskHandle>
 800afc8:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 800afca:	4618      	mov	r0, r3
 800afcc:	bd80      	pop	{r7, pc}

0800afce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <osDelay+0x16>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	e000      	b.n	800afe6 <osDelay+0x18>
 800afe4:	2301      	movs	r3, #1
 800afe6:	4618      	mov	r0, r3
 800afe8:	f001 fece 	bl	800cd88 <vTaskDelay>
  
  return osOK;
 800afec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af02      	add	r7, sp, #8
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	460b      	mov	r3, r1
 800b002:	607a      	str	r2, [r7, #4]
 800b004:	72fb      	strb	r3, [r7, #11]
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 800b006:	7afb      	ldrb	r3, [r7, #11]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d101      	bne.n	800b010 <osTimerCreate+0x18>
 800b00c:	2201      	movs	r2, #1
 800b00e:	e000      	b.n	800b012 <osTimerCreate+0x1a>
 800b010:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
  return xTimerCreate((const char *)"",
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2101      	movs	r1, #1
 800b01c:	4803      	ldr	r0, [pc, #12]	; (800b02c <osTimerCreate+0x34>)
 800b01e:	f002 fd73 	bl	800db08 <xTimerCreate>
 800b022:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	080254c8 	.word	0x080254c8

0800b030 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b088      	sub	sp, #32
 800b034:	af02      	add	r7, sp, #8
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800b03e:	2300      	movs	r3, #0
 800b040:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <osTimerStart+0x20>
    ticks = 1;
 800b04c:	2301      	movs	r3, #1
 800b04e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800b050:	f7ff ff66 	bl	800af20 <inHandlerMode>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d01a      	beq.n	800b090 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800b05a:	f107 030c 	add.w	r3, r7, #12
 800b05e:	2200      	movs	r2, #0
 800b060:	9200      	str	r2, [sp, #0]
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	2109      	movs	r1, #9
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f002 fdaa 	bl	800dbc0 <xTimerGenericCommand>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d002      	beq.n	800b078 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800b072:	23ff      	movs	r3, #255	; 0xff
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	e018      	b.n	800b0aa <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d015      	beq.n	800b0aa <osTimerStart+0x7a>
 800b07e:	4b0d      	ldr	r3, [pc, #52]	; (800b0b4 <osTimerStart+0x84>)
 800b080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	e00c      	b.n	800b0aa <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800b090:	2300      	movs	r3, #0
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	2300      	movs	r3, #0
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	2104      	movs	r1, #4
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f002 fd90 	bl	800dbc0 <xTimerGenericCommand>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d001      	beq.n	800b0aa <osTimerStart+0x7a>
      result = osErrorOS;
 800b0a6:	23ff      	movs	r3, #255	; 0xff
 800b0a8:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800b0aa:	697b      	ldr	r3, [r7, #20]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	e000ed04 	.word	0xe000ed04

0800b0b8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800b0c0:	2001      	movs	r0, #1
 800b0c2:	f000 fec0 	bl	800be46 <xQueueCreateMutex>
 800b0c6:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <osMutexWait+0x18>
    return osErrorParameter;
 800b0e4:	2380      	movs	r3, #128	; 0x80
 800b0e6:	e03a      	b.n	800b15e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f2:	d103      	bne.n	800b0fc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	e009      	b.n	800b110 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d006      	beq.n	800b110 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d101      	bne.n	800b110 <osMutexWait+0x40>
      ticks = 1;
 800b10c:	2301      	movs	r3, #1
 800b10e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b110:	f7ff ff06 	bl	800af20 <inHandlerMode>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d017      	beq.n	800b14a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b11a:	f107 0308 	add.w	r3, r7, #8
 800b11e:	461a      	mov	r2, r3
 800b120:	2100      	movs	r1, #0
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f001 faec 	bl	800c700 <xQueueReceiveFromISR>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d001      	beq.n	800b132 <osMutexWait+0x62>
      return osErrorOS;
 800b12e:	23ff      	movs	r3, #255	; 0xff
 800b130:	e015      	b.n	800b15e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d011      	beq.n	800b15c <osMutexWait+0x8c>
 800b138:	4b0b      	ldr	r3, [pc, #44]	; (800b168 <osMutexWait+0x98>)
 800b13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b13e:	601a      	str	r2, [r3, #0]
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	e008      	b.n	800b15c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b14a:	68f9      	ldr	r1, [r7, #12]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 f9cb 	bl	800c4e8 <xQueueSemaphoreTake>
 800b152:	4603      	mov	r3, r0
 800b154:	2b01      	cmp	r3, #1
 800b156:	d001      	beq.n	800b15c <osMutexWait+0x8c>
    return osErrorOS;
 800b158:	23ff      	movs	r3, #255	; 0xff
 800b15a:	e000      	b.n	800b15e <osMutexWait+0x8e>
  }
  
  return osOK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	e000ed04 	.word	0xe000ed04

0800b16c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b178:	2300      	movs	r3, #0
 800b17a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b17c:	f7ff fed0 	bl	800af20 <inHandlerMode>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d016      	beq.n	800b1b4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b186:	f107 0308 	add.w	r3, r7, #8
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f001 f83e 	bl	800c20e <xQueueGiveFromISR>
 800b192:	4603      	mov	r3, r0
 800b194:	2b01      	cmp	r3, #1
 800b196:	d001      	beq.n	800b19c <osMutexRelease+0x30>
      return osErrorOS;
 800b198:	23ff      	movs	r3, #255	; 0xff
 800b19a:	e017      	b.n	800b1cc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d013      	beq.n	800b1ca <osMutexRelease+0x5e>
 800b1a2:	4b0c      	ldr	r3, [pc, #48]	; (800b1d4 <osMutexRelease+0x68>)
 800b1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	e00a      	b.n	800b1ca <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fe8e 	bl	800bedc <xQueueGenericSend>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d001      	beq.n	800b1ca <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b1c6:	23ff      	movs	r3, #255	; 0xff
 800b1c8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	e000ed04 	.word	0xe000ed04

0800b1d8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d110      	bne.n	800b20a <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800b1e8:	2203      	movs	r2, #3
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	f000 fdb7 	bl	800bd60 <xQueueGenericCreate>
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d005      	beq.n	800b206 <osSemaphoreCreate+0x2e>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	2100      	movs	r1, #0
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 fe6b 	bl	800bedc <xQueueGenericSend>
    return sema;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	e006      	b.n	800b218 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	4611      	mov	r1, r2
 800b210:	4618      	mov	r0, r3
 800b212:	f000 fe30 	bl	800be76 <xQueueCreateCountingSemaphore>
 800b216:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b22c:	2300      	movs	r3, #0
 800b22e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <osMessagePut+0x1e>
    ticks = 1;
 800b23a:	2301      	movs	r3, #1
 800b23c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b23e:	f7ff fe6f 	bl	800af20 <inHandlerMode>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d018      	beq.n	800b27a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b248:	f107 0210 	add.w	r2, r7, #16
 800b24c:	f107 0108 	add.w	r1, r7, #8
 800b250:	2300      	movs	r3, #0
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 ff40 	bl	800c0d8 <xQueueGenericSendFromISR>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d001      	beq.n	800b262 <osMessagePut+0x42>
      return osErrorOS;
 800b25e:	23ff      	movs	r3, #255	; 0xff
 800b260:	e018      	b.n	800b294 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d014      	beq.n	800b292 <osMessagePut+0x72>
 800b268:	4b0c      	ldr	r3, [pc, #48]	; (800b29c <osMessagePut+0x7c>)
 800b26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b26e:	601a      	str	r2, [r3, #0]
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	e00b      	b.n	800b292 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b27a:	f107 0108 	add.w	r1, r7, #8
 800b27e:	2300      	movs	r3, #0
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f000 fe2a 	bl	800bedc <xQueueGenericSend>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d001      	beq.n	800b292 <osMessagePut+0x72>
      return osErrorOS;
 800b28e:	23ff      	movs	r3, #255	; 0xff
 800b290:	e000      	b.n	800b294 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3718      	adds	r7, #24
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	e000ed04 	.word	0xe000ed04

0800b2a0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800b2a4:	f002 f9dc 	bl	800d660 <xTaskGetSchedulerState>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d001      	beq.n	800b2b2 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800b2ae:	f000 fbab 	bl	800ba08 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800b2b2:	bf00      	nop
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b08a      	sub	sp, #40	; 0x28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b2c4:	f001 fde4 	bl	800ce90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b2c8:	4b5b      	ldr	r3, [pc, #364]	; (800b438 <pvPortMalloc+0x180>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b2d0:	f000 f920 	bl	800b514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b2d4:	4b59      	ldr	r3, [pc, #356]	; (800b43c <pvPortMalloc+0x184>)
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4013      	ands	r3, r2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f040 8093 	bne.w	800b408 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01d      	beq.n	800b324 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b2e8:	2208      	movs	r2, #8
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f003 0307 	and.w	r3, r3, #7
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d014      	beq.n	800b324 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f023 0307 	bic.w	r3, r3, #7
 800b300:	3308      	adds	r3, #8
 800b302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f003 0307 	and.w	r3, r3, #7
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00a      	beq.n	800b324 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b320:	bf00      	nop
 800b322:	e7fe      	b.n	800b322 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d06e      	beq.n	800b408 <pvPortMalloc+0x150>
 800b32a:	4b45      	ldr	r3, [pc, #276]	; (800b440 <pvPortMalloc+0x188>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	429a      	cmp	r2, r3
 800b332:	d869      	bhi.n	800b408 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b334:	4b43      	ldr	r3, [pc, #268]	; (800b444 <pvPortMalloc+0x18c>)
 800b336:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b338:	4b42      	ldr	r3, [pc, #264]	; (800b444 <pvPortMalloc+0x18c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b33e:	e004      	b.n	800b34a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	429a      	cmp	r2, r3
 800b352:	d903      	bls.n	800b35c <pvPortMalloc+0xa4>
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1f1      	bne.n	800b340 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b35c:	4b36      	ldr	r3, [pc, #216]	; (800b438 <pvPortMalloc+0x180>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b362:	429a      	cmp	r2, r3
 800b364:	d050      	beq.n	800b408 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b366:	6a3b      	ldr	r3, [r7, #32]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2208      	movs	r2, #8
 800b36c:	4413      	add	r3, r2
 800b36e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	6a3b      	ldr	r3, [r7, #32]
 800b376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	1ad2      	subs	r2, r2, r3
 800b380:	2308      	movs	r3, #8
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	429a      	cmp	r2, r3
 800b386:	d91f      	bls.n	800b3c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4413      	add	r3, r2
 800b38e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	f003 0307 	and.w	r3, r3, #7
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00a      	beq.n	800b3b0 <pvPortMalloc+0xf8>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	613b      	str	r3, [r7, #16]
}
 800b3ac:	bf00      	nop
 800b3ae:	e7fe      	b.n	800b3ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	685a      	ldr	r2, [r3, #4]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	1ad2      	subs	r2, r2, r3
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b3c2:	69b8      	ldr	r0, [r7, #24]
 800b3c4:	f000 f908 	bl	800b5d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3c8:	4b1d      	ldr	r3, [pc, #116]	; (800b440 <pvPortMalloc+0x188>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	4a1b      	ldr	r2, [pc, #108]	; (800b440 <pvPortMalloc+0x188>)
 800b3d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3d6:	4b1a      	ldr	r3, [pc, #104]	; (800b440 <pvPortMalloc+0x188>)
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	4b1b      	ldr	r3, [pc, #108]	; (800b448 <pvPortMalloc+0x190>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d203      	bcs.n	800b3ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3e2:	4b17      	ldr	r3, [pc, #92]	; (800b440 <pvPortMalloc+0x188>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a18      	ldr	r2, [pc, #96]	; (800b448 <pvPortMalloc+0x190>)
 800b3e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	4b13      	ldr	r3, [pc, #76]	; (800b43c <pvPortMalloc+0x184>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	431a      	orrs	r2, r3
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b3fe:	4b13      	ldr	r3, [pc, #76]	; (800b44c <pvPortMalloc+0x194>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	3301      	adds	r3, #1
 800b404:	4a11      	ldr	r2, [pc, #68]	; (800b44c <pvPortMalloc+0x194>)
 800b406:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b408:	f001 fd50 	bl	800ceac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	f003 0307 	and.w	r3, r3, #7
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00a      	beq.n	800b42c <pvPortMalloc+0x174>
	__asm volatile
 800b416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41a:	f383 8811 	msr	BASEPRI, r3
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	60fb      	str	r3, [r7, #12]
}
 800b428:	bf00      	nop
 800b42a:	e7fe      	b.n	800b42a <pvPortMalloc+0x172>
	return pvReturn;
 800b42c:	69fb      	ldr	r3, [r7, #28]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3728      	adds	r7, #40	; 0x28
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	2000856c 	.word	0x2000856c
 800b43c:	20008580 	.word	0x20008580
 800b440:	20008570 	.word	0x20008570
 800b444:	20008564 	.word	0x20008564
 800b448:	20008574 	.word	0x20008574
 800b44c:	20008578 	.word	0x20008578

0800b450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d04d      	beq.n	800b4fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b462:	2308      	movs	r3, #8
 800b464:	425b      	negs	r3, r3
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	4413      	add	r3, r2
 800b46a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	4b24      	ldr	r3, [pc, #144]	; (800b508 <vPortFree+0xb8>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4013      	ands	r3, r2
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10a      	bne.n	800b494 <vPortFree+0x44>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	60fb      	str	r3, [r7, #12]
}
 800b490:	bf00      	nop
 800b492:	e7fe      	b.n	800b492 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00a      	beq.n	800b4b2 <vPortFree+0x62>
	__asm volatile
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	60bb      	str	r3, [r7, #8]
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	4b14      	ldr	r3, [pc, #80]	; (800b508 <vPortFree+0xb8>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d01e      	beq.n	800b4fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d11a      	bne.n	800b4fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <vPortFree+0xb8>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	43db      	mvns	r3, r3
 800b4d2:	401a      	ands	r2, r3
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b4d8:	f001 fcda 	bl	800ce90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	685a      	ldr	r2, [r3, #4]
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	; (800b50c <vPortFree+0xbc>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	4a09      	ldr	r2, [pc, #36]	; (800b50c <vPortFree+0xbc>)
 800b4e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4ea:	6938      	ldr	r0, [r7, #16]
 800b4ec:	f000 f874 	bl	800b5d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b4f0:	4b07      	ldr	r3, [pc, #28]	; (800b510 <vPortFree+0xc0>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	4a06      	ldr	r2, [pc, #24]	; (800b510 <vPortFree+0xc0>)
 800b4f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b4fa:	f001 fcd7 	bl	800ceac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b4fe:	bf00      	nop
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20008580 	.word	0x20008580
 800b50c:	20008570 	.word	0x20008570
 800b510:	2000857c 	.word	0x2000857c

0800b514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b51a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800b51e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b520:	4b27      	ldr	r3, [pc, #156]	; (800b5c0 <prvHeapInit+0xac>)
 800b522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00c      	beq.n	800b548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3307      	adds	r3, #7
 800b532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 0307 	bic.w	r3, r3, #7
 800b53a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	4a1f      	ldr	r2, [pc, #124]	; (800b5c0 <prvHeapInit+0xac>)
 800b544:	4413      	add	r3, r2
 800b546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b54c:	4a1d      	ldr	r2, [pc, #116]	; (800b5c4 <prvHeapInit+0xb0>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b552:	4b1c      	ldr	r3, [pc, #112]	; (800b5c4 <prvHeapInit+0xb0>)
 800b554:	2200      	movs	r2, #0
 800b556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	4413      	add	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b560:	2208      	movs	r2, #8
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	1a9b      	subs	r3, r3, r2
 800b566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f023 0307 	bic.w	r3, r3, #7
 800b56e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	4a15      	ldr	r2, [pc, #84]	; (800b5c8 <prvHeapInit+0xb4>)
 800b574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b576:	4b14      	ldr	r3, [pc, #80]	; (800b5c8 <prvHeapInit+0xb4>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2200      	movs	r2, #0
 800b57c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b57e:	4b12      	ldr	r3, [pc, #72]	; (800b5c8 <prvHeapInit+0xb4>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2200      	movs	r2, #0
 800b584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	1ad2      	subs	r2, r2, r3
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b594:	4b0c      	ldr	r3, [pc, #48]	; (800b5c8 <prvHeapInit+0xb4>)
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	4a0a      	ldr	r2, [pc, #40]	; (800b5cc <prvHeapInit+0xb8>)
 800b5a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	4a09      	ldr	r2, [pc, #36]	; (800b5d0 <prvHeapInit+0xbc>)
 800b5aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5ac:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <prvHeapInit+0xc0>)
 800b5ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b5b2:	601a      	str	r2, [r3, #0]
}
 800b5b4:	bf00      	nop
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	20000aa4 	.word	0x20000aa4
 800b5c4:	20008564 	.word	0x20008564
 800b5c8:	2000856c 	.word	0x2000856c
 800b5cc:	20008574 	.word	0x20008574
 800b5d0:	20008570 	.word	0x20008570
 800b5d4:	20008580 	.word	0x20008580

0800b5d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5e0:	4b28      	ldr	r3, [pc, #160]	; (800b684 <prvInsertBlockIntoFreeList+0xac>)
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	e002      	b.n	800b5ec <prvInsertBlockIntoFreeList+0x14>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d8f7      	bhi.n	800b5e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	4413      	add	r3, r2
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	429a      	cmp	r2, r3
 800b606:	d108      	bne.n	800b61a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	441a      	add	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	441a      	add	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d118      	bne.n	800b660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	4b15      	ldr	r3, [pc, #84]	; (800b688 <prvInsertBlockIntoFreeList+0xb0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	429a      	cmp	r2, r3
 800b638:	d00d      	beq.n	800b656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685a      	ldr	r2, [r3, #4]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	441a      	add	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	e008      	b.n	800b668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b656:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <prvInsertBlockIntoFreeList+0xb0>)
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	e003      	b.n	800b668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d002      	beq.n	800b676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b676:	bf00      	nop
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	20008564 	.word	0x20008564
 800b688:	2000856c 	.word	0x2000856c

0800b68c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	3b04      	subs	r3, #4
 800b69c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b6a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	3b04      	subs	r3, #4
 800b6aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	f023 0201 	bic.w	r2, r3, #1
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	3b04      	subs	r3, #4
 800b6ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b6bc:	4a0c      	ldr	r2, [pc, #48]	; (800b6f0 <pxPortInitialiseStack+0x64>)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3b14      	subs	r3, #20
 800b6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	3b04      	subs	r3, #4
 800b6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f06f 0202 	mvn.w	r2, #2
 800b6da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	3b20      	subs	r3, #32
 800b6e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3714      	adds	r7, #20
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr
 800b6f0:	0800b6f5 	.word	0x0800b6f5

0800b6f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6fe:	4b12      	ldr	r3, [pc, #72]	; (800b748 <prvTaskExitError+0x54>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b706:	d00a      	beq.n	800b71e <prvTaskExitError+0x2a>
	__asm volatile
 800b708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	60fb      	str	r3, [r7, #12]
}
 800b71a:	bf00      	nop
 800b71c:	e7fe      	b.n	800b71c <prvTaskExitError+0x28>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	60bb      	str	r3, [r7, #8]
}
 800b730:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b732:	bf00      	nop
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d0fc      	beq.n	800b734 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b73a:	bf00      	nop
 800b73c:	bf00      	nop
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	20000550 	.word	0x20000550
 800b74c:	00000000 	.word	0x00000000

0800b750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b750:	4b07      	ldr	r3, [pc, #28]	; (800b770 <pxCurrentTCBConst2>)
 800b752:	6819      	ldr	r1, [r3, #0]
 800b754:	6808      	ldr	r0, [r1, #0]
 800b756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75a:	f380 8809 	msr	PSP, r0
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f04f 0000 	mov.w	r0, #0
 800b766:	f380 8811 	msr	BASEPRI, r0
 800b76a:	4770      	bx	lr
 800b76c:	f3af 8000 	nop.w

0800b770 <pxCurrentTCBConst2>:
 800b770:	200085cc 	.word	0x200085cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop

0800b778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b778:	4808      	ldr	r0, [pc, #32]	; (800b79c <prvPortStartFirstTask+0x24>)
 800b77a:	6800      	ldr	r0, [r0, #0]
 800b77c:	6800      	ldr	r0, [r0, #0]
 800b77e:	f380 8808 	msr	MSP, r0
 800b782:	f04f 0000 	mov.w	r0, #0
 800b786:	f380 8814 	msr	CONTROL, r0
 800b78a:	b662      	cpsie	i
 800b78c:	b661      	cpsie	f
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	df00      	svc	0
 800b798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b79a:	bf00      	nop
 800b79c:	e000ed08 	.word	0xe000ed08

0800b7a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b7a6:	4b46      	ldr	r3, [pc, #280]	; (800b8c0 <xPortStartScheduler+0x120>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a46      	ldr	r2, [pc, #280]	; (800b8c4 <xPortStartScheduler+0x124>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d10a      	bne.n	800b7c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	613b      	str	r3, [r7, #16]
}
 800b7c2:	bf00      	nop
 800b7c4:	e7fe      	b.n	800b7c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7c6:	4b3e      	ldr	r3, [pc, #248]	; (800b8c0 <xPortStartScheduler+0x120>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a3f      	ldr	r2, [pc, #252]	; (800b8c8 <xPortStartScheduler+0x128>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d10a      	bne.n	800b7e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	60fb      	str	r3, [r7, #12]
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7e6:	4b39      	ldr	r3, [pc, #228]	; (800b8cc <xPortStartScheduler+0x12c>)
 800b7e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	22ff      	movs	r2, #255	; 0xff
 800b7f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b800:	78fb      	ldrb	r3, [r7, #3]
 800b802:	b2db      	uxtb	r3, r3
 800b804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	4b31      	ldr	r3, [pc, #196]	; (800b8d0 <xPortStartScheduler+0x130>)
 800b80c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b80e:	4b31      	ldr	r3, [pc, #196]	; (800b8d4 <xPortStartScheduler+0x134>)
 800b810:	2207      	movs	r2, #7
 800b812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b814:	e009      	b.n	800b82a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b816:	4b2f      	ldr	r3, [pc, #188]	; (800b8d4 <xPortStartScheduler+0x134>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	4a2d      	ldr	r2, [pc, #180]	; (800b8d4 <xPortStartScheduler+0x134>)
 800b81e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b820:	78fb      	ldrb	r3, [r7, #3]
 800b822:	b2db      	uxtb	r3, r3
 800b824:	005b      	lsls	r3, r3, #1
 800b826:	b2db      	uxtb	r3, r3
 800b828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b82a:	78fb      	ldrb	r3, [r7, #3]
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b832:	2b80      	cmp	r3, #128	; 0x80
 800b834:	d0ef      	beq.n	800b816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b836:	4b27      	ldr	r3, [pc, #156]	; (800b8d4 <xPortStartScheduler+0x134>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f1c3 0307 	rsb	r3, r3, #7
 800b83e:	2b04      	cmp	r3, #4
 800b840:	d00a      	beq.n	800b858 <xPortStartScheduler+0xb8>
	__asm volatile
 800b842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	60bb      	str	r3, [r7, #8]
}
 800b854:	bf00      	nop
 800b856:	e7fe      	b.n	800b856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b858:	4b1e      	ldr	r3, [pc, #120]	; (800b8d4 <xPortStartScheduler+0x134>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	021b      	lsls	r3, r3, #8
 800b85e:	4a1d      	ldr	r2, [pc, #116]	; (800b8d4 <xPortStartScheduler+0x134>)
 800b860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b862:	4b1c      	ldr	r3, [pc, #112]	; (800b8d4 <xPortStartScheduler+0x134>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b86a:	4a1a      	ldr	r2, [pc, #104]	; (800b8d4 <xPortStartScheduler+0x134>)
 800b86c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	b2da      	uxtb	r2, r3
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b876:	4b18      	ldr	r3, [pc, #96]	; (800b8d8 <xPortStartScheduler+0x138>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a17      	ldr	r2, [pc, #92]	; (800b8d8 <xPortStartScheduler+0x138>)
 800b87c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b882:	4b15      	ldr	r3, [pc, #84]	; (800b8d8 <xPortStartScheduler+0x138>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a14      	ldr	r2, [pc, #80]	; (800b8d8 <xPortStartScheduler+0x138>)
 800b888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b88c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b88e:	f000 f8dd 	bl	800ba4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b892:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <xPortStartScheduler+0x13c>)
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b898:	f000 f8fc 	bl	800ba94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b89c:	4b10      	ldr	r3, [pc, #64]	; (800b8e0 <xPortStartScheduler+0x140>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a0f      	ldr	r2, [pc, #60]	; (800b8e0 <xPortStartScheduler+0x140>)
 800b8a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b8a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b8a8:	f7ff ff66 	bl	800b778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b8ac:	f001 fc7c 	bl	800d1a8 <vTaskSwitchContext>
	prvTaskExitError();
 800b8b0:	f7ff ff20 	bl	800b6f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3718      	adds	r7, #24
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	e000ed00 	.word	0xe000ed00
 800b8c4:	410fc271 	.word	0x410fc271
 800b8c8:	410fc270 	.word	0x410fc270
 800b8cc:	e000e400 	.word	0xe000e400
 800b8d0:	20008584 	.word	0x20008584
 800b8d4:	20008588 	.word	0x20008588
 800b8d8:	e000ed20 	.word	0xe000ed20
 800b8dc:	20000550 	.word	0x20000550
 800b8e0:	e000ef34 	.word	0xe000ef34

0800b8e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	607b      	str	r3, [r7, #4]
}
 800b8fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b8fe:	4b0f      	ldr	r3, [pc, #60]	; (800b93c <vPortEnterCritical+0x58>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3301      	adds	r3, #1
 800b904:	4a0d      	ldr	r2, [pc, #52]	; (800b93c <vPortEnterCritical+0x58>)
 800b906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b908:	4b0c      	ldr	r3, [pc, #48]	; (800b93c <vPortEnterCritical+0x58>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d10f      	bne.n	800b930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b910:	4b0b      	ldr	r3, [pc, #44]	; (800b940 <vPortEnterCritical+0x5c>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00a      	beq.n	800b930 <vPortEnterCritical+0x4c>
	__asm volatile
 800b91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	603b      	str	r3, [r7, #0]
}
 800b92c:	bf00      	nop
 800b92e:	e7fe      	b.n	800b92e <vPortEnterCritical+0x4a>
	}
}
 800b930:	bf00      	nop
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	20000550 	.word	0x20000550
 800b940:	e000ed04 	.word	0xe000ed04

0800b944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b94a:	4b12      	ldr	r3, [pc, #72]	; (800b994 <vPortExitCritical+0x50>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d10a      	bne.n	800b968 <vPortExitCritical+0x24>
	__asm volatile
 800b952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	607b      	str	r3, [r7, #4]
}
 800b964:	bf00      	nop
 800b966:	e7fe      	b.n	800b966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b968:	4b0a      	ldr	r3, [pc, #40]	; (800b994 <vPortExitCritical+0x50>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	4a09      	ldr	r2, [pc, #36]	; (800b994 <vPortExitCritical+0x50>)
 800b970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b972:	4b08      	ldr	r3, [pc, #32]	; (800b994 <vPortExitCritical+0x50>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d105      	bne.n	800b986 <vPortExitCritical+0x42>
 800b97a:	2300      	movs	r3, #0
 800b97c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b986:	bf00      	nop
 800b988:	370c      	adds	r7, #12
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	20000550 	.word	0x20000550
	...

0800b9a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b9a0:	f3ef 8009 	mrs	r0, PSP
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	4b15      	ldr	r3, [pc, #84]	; (800ba00 <pxCurrentTCBConst>)
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	f01e 0f10 	tst.w	lr, #16
 800b9b0:	bf08      	it	eq
 800b9b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b9b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ba:	6010      	str	r0, [r2, #0]
 800b9bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b9c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b9c4:	f380 8811 	msr	BASEPRI, r0
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f001 fbea 	bl	800d1a8 <vTaskSwitchContext>
 800b9d4:	f04f 0000 	mov.w	r0, #0
 800b9d8:	f380 8811 	msr	BASEPRI, r0
 800b9dc:	bc09      	pop	{r0, r3}
 800b9de:	6819      	ldr	r1, [r3, #0]
 800b9e0:	6808      	ldr	r0, [r1, #0]
 800b9e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e6:	f01e 0f10 	tst.w	lr, #16
 800b9ea:	bf08      	it	eq
 800b9ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9f0:	f380 8809 	msr	PSP, r0
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop
 800b9fc:	f3af 8000 	nop.w

0800ba00 <pxCurrentTCBConst>:
 800ba00:	200085cc 	.word	0x200085cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba04:	bf00      	nop
 800ba06:	bf00      	nop

0800ba08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	607b      	str	r3, [r7, #4]
}
 800ba20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba22:	f001 fb01 	bl	800d028 <xTaskIncrementTick>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d003      	beq.n	800ba34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba2c:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <xPortSysTickHandler+0x40>)
 800ba2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba32:	601a      	str	r2, [r3, #0]
 800ba34:	2300      	movs	r3, #0
 800ba36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	f383 8811 	msr	BASEPRI, r3
}
 800ba3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba40:	bf00      	nop
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	e000ed04 	.word	0xe000ed04

0800ba4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba50:	4b0b      	ldr	r3, [pc, #44]	; (800ba80 <vPortSetupTimerInterrupt+0x34>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba56:	4b0b      	ldr	r3, [pc, #44]	; (800ba84 <vPortSetupTimerInterrupt+0x38>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba5c:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <vPortSetupTimerInterrupt+0x3c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a0a      	ldr	r2, [pc, #40]	; (800ba8c <vPortSetupTimerInterrupt+0x40>)
 800ba62:	fba2 2303 	umull	r2, r3, r2, r3
 800ba66:	099b      	lsrs	r3, r3, #6
 800ba68:	4a09      	ldr	r2, [pc, #36]	; (800ba90 <vPortSetupTimerInterrupt+0x44>)
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba6e:	4b04      	ldr	r3, [pc, #16]	; (800ba80 <vPortSetupTimerInterrupt+0x34>)
 800ba70:	2207      	movs	r2, #7
 800ba72:	601a      	str	r2, [r3, #0]
}
 800ba74:	bf00      	nop
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	e000e010 	.word	0xe000e010
 800ba84:	e000e018 	.word	0xe000e018
 800ba88:	20000544 	.word	0x20000544
 800ba8c:	10624dd3 	.word	0x10624dd3
 800ba90:	e000e014 	.word	0xe000e014

0800ba94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800baa4 <vPortEnableVFP+0x10>
 800ba98:	6801      	ldr	r1, [r0, #0]
 800ba9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ba9e:	6001      	str	r1, [r0, #0]
 800baa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800baa2:	bf00      	nop
 800baa4:	e000ed88 	.word	0xe000ed88

0800baa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800baae:	f3ef 8305 	mrs	r3, IPSR
 800bab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b0f      	cmp	r3, #15
 800bab8:	d914      	bls.n	800bae4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800baba:	4a17      	ldr	r2, [pc, #92]	; (800bb18 <vPortValidateInterruptPriority+0x70>)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	4413      	add	r3, r2
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bac4:	4b15      	ldr	r3, [pc, #84]	; (800bb1c <vPortValidateInterruptPriority+0x74>)
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	7afa      	ldrb	r2, [r7, #11]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d20a      	bcs.n	800bae4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	607b      	str	r3, [r7, #4]
}
 800bae0:	bf00      	nop
 800bae2:	e7fe      	b.n	800bae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bae4:	4b0e      	ldr	r3, [pc, #56]	; (800bb20 <vPortValidateInterruptPriority+0x78>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800baec:	4b0d      	ldr	r3, [pc, #52]	; (800bb24 <vPortValidateInterruptPriority+0x7c>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d90a      	bls.n	800bb0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	603b      	str	r3, [r7, #0]
}
 800bb06:	bf00      	nop
 800bb08:	e7fe      	b.n	800bb08 <vPortValidateInterruptPriority+0x60>
	}
 800bb0a:	bf00      	nop
 800bb0c:	3714      	adds	r7, #20
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	e000e3f0 	.word	0xe000e3f0
 800bb1c:	20008584 	.word	0x20008584
 800bb20:	e000ed0c 	.word	0xe000ed0c
 800bb24:	20008588 	.word	0x20008588

0800bb28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f103 0208 	add.w	r2, r3, #8
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f103 0208 	add.w	r2, r3, #8
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f103 0208 	add.w	r2, r3, #8
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb76:	bf00      	nop
 800bb78:	370c      	adds	r7, #12
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb82:	b480      	push	{r7}
 800bb84:	b085      	sub	sp, #20
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	689a      	ldr	r2, [r3, #8]
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	683a      	ldr	r2, [r7, #0]
 800bba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	601a      	str	r2, [r3, #0]
}
 800bbbe:	bf00      	nop
 800bbc0:	3714      	adds	r7, #20
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b085      	sub	sp, #20
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe0:	d103      	bne.n	800bbea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	e00c      	b.n	800bc04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	3308      	adds	r3, #8
 800bbee:	60fb      	str	r3, [r7, #12]
 800bbf0:	e002      	b.n	800bbf8 <vListInsert+0x2e>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	60fb      	str	r3, [r7, #12]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68ba      	ldr	r2, [r7, #8]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d2f6      	bcs.n	800bbf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	685a      	ldr	r2, [r3, #4]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	683a      	ldr	r2, [r7, #0]
 800bc1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	601a      	str	r2, [r3, #0]
}
 800bc30:	bf00      	nop
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	6892      	ldr	r2, [r2, #8]
 800bc52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	6852      	ldr	r2, [r2, #4]
 800bc5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d103      	bne.n	800bc70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	689a      	ldr	r2, [r3, #8]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	1e5a      	subs	r2, r3, #1
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10a      	bne.n	800bcba <xQueueGenericReset+0x2a>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	60bb      	str	r3, [r7, #8]
}
 800bcb6:	bf00      	nop
 800bcb8:	e7fe      	b.n	800bcb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bcba:	f7ff fe13 	bl	800b8e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc6:	68f9      	ldr	r1, [r7, #12]
 800bcc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bcca:	fb01 f303 	mul.w	r3, r1, r3
 800bcce:	441a      	add	r2, r3
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcea:	3b01      	subs	r3, #1
 800bcec:	68f9      	ldr	r1, [r7, #12]
 800bcee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bcf0:	fb01 f303 	mul.w	r3, r1, r3
 800bcf4:	441a      	add	r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	22ff      	movs	r2, #255	; 0xff
 800bcfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	22ff      	movs	r2, #255	; 0xff
 800bd06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d114      	bne.n	800bd3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d01a      	beq.n	800bd4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3310      	adds	r3, #16
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f001 faf1 	bl	800d304 <xTaskRemoveFromEventList>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d012      	beq.n	800bd4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd28:	4b0c      	ldr	r3, [pc, #48]	; (800bd5c <xQueueGenericReset+0xcc>)
 800bd2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	e009      	b.n	800bd4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	3310      	adds	r3, #16
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff fef2 	bl	800bb28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3324      	adds	r3, #36	; 0x24
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff feed 	bl	800bb28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd4e:	f7ff fdf9 	bl	800b944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd52:	2301      	movs	r3, #1
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	e000ed04 	.word	0xe000ed04

0800bd60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08a      	sub	sp, #40	; 0x28
 800bd64:	af02      	add	r7, sp, #8
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10a      	bne.n	800bd8a <xQueueGenericCreate+0x2a>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	613b      	str	r3, [r7, #16]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	fb02 f303 	mul.w	r3, r2, r3
 800bd92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	3350      	adds	r3, #80	; 0x50
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7ff fa8d 	bl	800b2b8 <pvPortMalloc>
 800bd9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00d      	beq.n	800bdc2 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	3350      	adds	r3, #80	; 0x50
 800bdae:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdb0:	79fa      	ldrb	r2, [r7, #7]
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	697a      	ldr	r2, [r7, #20]
 800bdba:	68b9      	ldr	r1, [r7, #8]
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f000 f805 	bl	800bdcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdc2:	69bb      	ldr	r3, [r7, #24]
	}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3720      	adds	r7, #32
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
 800bdd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d103      	bne.n	800bde8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	69ba      	ldr	r2, [r7, #24]
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	e002      	b.n	800bdee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	69b8      	ldr	r0, [r7, #24]
 800bdfe:	f7ff ff47 	bl	800bc90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	78fa      	ldrb	r2, [r7, #3]
 800be06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be0a:	bf00      	nop
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800be12:	b580      	push	{r7, lr}
 800be14:	b082      	sub	sp, #8
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00e      	beq.n	800be3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800be32:	2300      	movs	r3, #0
 800be34:	2200      	movs	r2, #0
 800be36:	2100      	movs	r1, #0
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 f84f 	bl	800bedc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800be3e:	bf00      	nop
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800be46:	b580      	push	{r7, lr}
 800be48:	b086      	sub	sp, #24
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	4603      	mov	r3, r0
 800be4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800be50:	2301      	movs	r3, #1
 800be52:	617b      	str	r3, [r7, #20]
 800be54:	2300      	movs	r3, #0
 800be56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800be58:	79fb      	ldrb	r3, [r7, #7]
 800be5a:	461a      	mov	r2, r3
 800be5c:	6939      	ldr	r1, [r7, #16]
 800be5e:	6978      	ldr	r0, [r7, #20]
 800be60:	f7ff ff7e 	bl	800bd60 <xQueueGenericCreate>
 800be64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f7ff ffd3 	bl	800be12 <prvInitialiseMutex>

		return xNewQueue;
 800be6c:	68fb      	ldr	r3, [r7, #12]
	}
 800be6e:	4618      	mov	r0, r3
 800be70:	3718      	adds	r7, #24
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800be76:	b580      	push	{r7, lr}
 800be78:	b086      	sub	sp, #24
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10a      	bne.n	800be9c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800be86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	613b      	str	r3, [r7, #16]
}
 800be98:	bf00      	nop
 800be9a:	e7fe      	b.n	800be9a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d90a      	bls.n	800beba <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea8:	f383 8811 	msr	BASEPRI, r3
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f3bf 8f4f 	dsb	sy
 800beb4:	60fb      	str	r3, [r7, #12]
}
 800beb6:	bf00      	nop
 800beb8:	e7fe      	b.n	800beb8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800beba:	2202      	movs	r2, #2
 800bebc:	2100      	movs	r1, #0
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff ff4e 	bl	800bd60 <xQueueGenericCreate>
 800bec4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bed2:	697b      	ldr	r3, [r7, #20]
	}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3718      	adds	r7, #24
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b08e      	sub	sp, #56	; 0x38
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
 800bee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800beea:	2300      	movs	r3, #0
 800beec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xQueueGenericSend+0x32>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d103      	bne.n	800bf1c <xQueueGenericSend+0x40>
 800bf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d101      	bne.n	800bf20 <xQueueGenericSend+0x44>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e000      	b.n	800bf22 <xQueueGenericSend+0x46>
 800bf20:	2300      	movs	r3, #0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10a      	bne.n	800bf3c <xQueueGenericSend+0x60>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf38:	bf00      	nop
 800bf3a:	e7fe      	b.n	800bf3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d103      	bne.n	800bf4a <xQueueGenericSend+0x6e>
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d101      	bne.n	800bf4e <xQueueGenericSend+0x72>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e000      	b.n	800bf50 <xQueueGenericSend+0x74>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10a      	bne.n	800bf6a <xQueueGenericSend+0x8e>
	__asm volatile
 800bf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	623b      	str	r3, [r7, #32]
}
 800bf66:	bf00      	nop
 800bf68:	e7fe      	b.n	800bf68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf6a:	f001 fb79 	bl	800d660 <xTaskGetSchedulerState>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d102      	bne.n	800bf7a <xQueueGenericSend+0x9e>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d101      	bne.n	800bf7e <xQueueGenericSend+0xa2>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e000      	b.n	800bf80 <xQueueGenericSend+0xa4>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10a      	bne.n	800bf9a <xQueueGenericSend+0xbe>
	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	61fb      	str	r3, [r7, #28]
}
 800bf96:	bf00      	nop
 800bf98:	e7fe      	b.n	800bf98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf9a:	f7ff fca3 	bl	800b8e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d302      	bcc.n	800bfb0 <xQueueGenericSend+0xd4>
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d129      	bne.n	800c004 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	68b9      	ldr	r1, [r7, #8]
 800bfb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfb6:	f000 fc3b 	bl	800c830 <prvCopyDataToQueue>
 800bfba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d010      	beq.n	800bfe6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	3324      	adds	r3, #36	; 0x24
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f001 f99b 	bl	800d304 <xTaskRemoveFromEventList>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d013      	beq.n	800bffc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bfd4:	4b3f      	ldr	r3, [pc, #252]	; (800c0d4 <xQueueGenericSend+0x1f8>)
 800bfd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	e00a      	b.n	800bffc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d007      	beq.n	800bffc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bfec:	4b39      	ldr	r3, [pc, #228]	; (800c0d4 <xQueueGenericSend+0x1f8>)
 800bfee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bff2:	601a      	str	r2, [r3, #0]
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bffc:	f7ff fca2 	bl	800b944 <vPortExitCritical>
				return pdPASS;
 800c000:	2301      	movs	r3, #1
 800c002:	e063      	b.n	800c0cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d103      	bne.n	800c012 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c00a:	f7ff fc9b 	bl	800b944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c00e:	2300      	movs	r3, #0
 800c010:	e05c      	b.n	800c0cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c014:	2b00      	cmp	r3, #0
 800c016:	d106      	bne.n	800c026 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c018:	f107 0314 	add.w	r3, r7, #20
 800c01c:	4618      	mov	r0, r3
 800c01e:	f001 f9d3 	bl	800d3c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c022:	2301      	movs	r3, #1
 800c024:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c026:	f7ff fc8d 	bl	800b944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c02a:	f000 ff31 	bl	800ce90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c02e:	f7ff fc59 	bl	800b8e4 <vPortEnterCritical>
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c038:	b25b      	sxtb	r3, r3
 800c03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03e:	d103      	bne.n	800c048 <xQueueGenericSend+0x16c>
 800c040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c042:	2200      	movs	r2, #0
 800c044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c04e:	b25b      	sxtb	r3, r3
 800c050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c054:	d103      	bne.n	800c05e <xQueueGenericSend+0x182>
 800c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c05e:	f7ff fc71 	bl	800b944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c062:	1d3a      	adds	r2, r7, #4
 800c064:	f107 0314 	add.w	r3, r7, #20
 800c068:	4611      	mov	r1, r2
 800c06a:	4618      	mov	r0, r3
 800c06c:	f001 f9c2 	bl	800d3f4 <xTaskCheckForTimeOut>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d124      	bne.n	800c0c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c078:	f000 fcd2 	bl	800ca20 <prvIsQueueFull>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d018      	beq.n	800c0b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c084:	3310      	adds	r3, #16
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	4611      	mov	r1, r2
 800c08a:	4618      	mov	r0, r3
 800c08c:	f001 f8ea 	bl	800d264 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c092:	f000 fc5d 	bl	800c950 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c096:	f000 ff09 	bl	800ceac <xTaskResumeAll>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f47f af7c 	bne.w	800bf9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c0a2:	4b0c      	ldr	r3, [pc, #48]	; (800c0d4 <xQueueGenericSend+0x1f8>)
 800c0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a8:	601a      	str	r2, [r3, #0]
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	e772      	b.n	800bf9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c0b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0b6:	f000 fc4b 	bl	800c950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0ba:	f000 fef7 	bl	800ceac <xTaskResumeAll>
 800c0be:	e76c      	b.n	800bf9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c0c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0c2:	f000 fc45 	bl	800c950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0c6:	f000 fef1 	bl	800ceac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c0ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3738      	adds	r7, #56	; 0x38
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	e000ed04 	.word	0xe000ed04

0800c0d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b090      	sub	sp, #64	; 0x40
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10a      	bne.n	800c106 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c102:	bf00      	nop
 800c104:	e7fe      	b.n	800c104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d103      	bne.n	800c114 <xQueueGenericSendFromISR+0x3c>
 800c10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c110:	2b00      	cmp	r3, #0
 800c112:	d101      	bne.n	800c118 <xQueueGenericSendFromISR+0x40>
 800c114:	2301      	movs	r3, #1
 800c116:	e000      	b.n	800c11a <xQueueGenericSendFromISR+0x42>
 800c118:	2300      	movs	r3, #0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10a      	bne.n	800c134 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c130:	bf00      	nop
 800c132:	e7fe      	b.n	800c132 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	2b02      	cmp	r3, #2
 800c138:	d103      	bne.n	800c142 <xQueueGenericSendFromISR+0x6a>
 800c13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d101      	bne.n	800c146 <xQueueGenericSendFromISR+0x6e>
 800c142:	2301      	movs	r3, #1
 800c144:	e000      	b.n	800c148 <xQueueGenericSendFromISR+0x70>
 800c146:	2300      	movs	r3, #0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10a      	bne.n	800c162 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c150:	f383 8811 	msr	BASEPRI, r3
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	623b      	str	r3, [r7, #32]
}
 800c15e:	bf00      	nop
 800c160:	e7fe      	b.n	800c160 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c162:	f7ff fca1 	bl	800baa8 <vPortValidateInterruptPriority>
	__asm volatile
 800c166:	f3ef 8211 	mrs	r2, BASEPRI
 800c16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	61fa      	str	r2, [r7, #28]
 800c17c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c17e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c180:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d302      	bcc.n	800c194 <xQueueGenericSendFromISR+0xbc>
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	2b02      	cmp	r3, #2
 800c192:	d12f      	bne.n	800c1f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1a4:	683a      	ldr	r2, [r7, #0]
 800c1a6:	68b9      	ldr	r1, [r7, #8]
 800c1a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1aa:	f000 fb41 	bl	800c830 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c1ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b6:	d112      	bne.n	800c1de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d016      	beq.n	800c1ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	3324      	adds	r3, #36	; 0x24
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f001 f89d 	bl	800d304 <xTaskRemoveFromEventList>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00e      	beq.n	800c1ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00b      	beq.n	800c1ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	601a      	str	r2, [r3, #0]
 800c1dc:	e007      	b.n	800c1ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c1de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	b25a      	sxtb	r2, r3
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c1f2:	e001      	b.n	800c1f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fa:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	f383 8811 	msr	BASEPRI, r3
}
 800c202:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c206:	4618      	mov	r0, r3
 800c208:	3740      	adds	r7, #64	; 0x40
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b08e      	sub	sp, #56	; 0x38
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d10a      	bne.n	800c238 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	f383 8811 	msr	BASEPRI, r3
 800c22a:	f3bf 8f6f 	isb	sy
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	623b      	str	r3, [r7, #32]
}
 800c234:	bf00      	nop
 800c236:	e7fe      	b.n	800c236 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00a      	beq.n	800c256 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	61fb      	str	r3, [r7, #28]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d103      	bne.n	800c266 <xQueueGiveFromISR+0x58>
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <xQueueGiveFromISR+0x5c>
 800c266:	2301      	movs	r3, #1
 800c268:	e000      	b.n	800c26c <xQueueGiveFromISR+0x5e>
 800c26a:	2300      	movs	r3, #0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10a      	bne.n	800c286 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	61bb      	str	r3, [r7, #24]
}
 800c282:	bf00      	nop
 800c284:	e7fe      	b.n	800c284 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c286:	f7ff fc0f 	bl	800baa8 <vPortValidateInterruptPriority>
	__asm volatile
 800c28a:	f3ef 8211 	mrs	r2, BASEPRI
 800c28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	617a      	str	r2, [r7, #20]
 800c2a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c2a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d22b      	bcs.n	800c30e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	1c5a      	adds	r2, r3, #1
 800c2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d0:	d112      	bne.n	800c2f8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d016      	beq.n	800c308 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2dc:	3324      	adds	r3, #36	; 0x24
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f001 f810 	bl	800d304 <xTaskRemoveFromEventList>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00e      	beq.n	800c308 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00b      	beq.n	800c308 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	601a      	str	r2, [r3, #0]
 800c2f6:	e007      	b.n	800c308 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	b25a      	sxtb	r2, r3
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c308:	2301      	movs	r3, #1
 800c30a:	637b      	str	r3, [r7, #52]	; 0x34
 800c30c:	e001      	b.n	800c312 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	637b      	str	r3, [r7, #52]	; 0x34
 800c312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c314:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f383 8811 	msr	BASEPRI, r3
}
 800c31c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c320:	4618      	mov	r0, r3
 800c322:	3738      	adds	r7, #56	; 0x38
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08c      	sub	sp, #48	; 0x30
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c334:	2300      	movs	r3, #0
 800c336:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10a      	bne.n	800c358 <xQueueReceive+0x30>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	623b      	str	r3, [r7, #32]
}
 800c354:	bf00      	nop
 800c356:	e7fe      	b.n	800c356 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d103      	bne.n	800c366 <xQueueReceive+0x3e>
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <xQueueReceive+0x42>
 800c366:	2301      	movs	r3, #1
 800c368:	e000      	b.n	800c36c <xQueueReceive+0x44>
 800c36a:	2300      	movs	r3, #0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10a      	bne.n	800c386 <xQueueReceive+0x5e>
	__asm volatile
 800c370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c374:	f383 8811 	msr	BASEPRI, r3
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	f3bf 8f4f 	dsb	sy
 800c380:	61fb      	str	r3, [r7, #28]
}
 800c382:	bf00      	nop
 800c384:	e7fe      	b.n	800c384 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c386:	f001 f96b 	bl	800d660 <xTaskGetSchedulerState>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d102      	bne.n	800c396 <xQueueReceive+0x6e>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d101      	bne.n	800c39a <xQueueReceive+0x72>
 800c396:	2301      	movs	r3, #1
 800c398:	e000      	b.n	800c39c <xQueueReceive+0x74>
 800c39a:	2300      	movs	r3, #0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10a      	bne.n	800c3b6 <xQueueReceive+0x8e>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	61bb      	str	r3, [r7, #24]
}
 800c3b2:	bf00      	nop
 800c3b4:	e7fe      	b.n	800c3b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3b6:	f7ff fa95 	bl	800b8e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d01f      	beq.n	800c406 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3c6:	68b9      	ldr	r1, [r7, #8]
 800c3c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ca:	f000 fa9b 	bl	800c904 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	1e5a      	subs	r2, r3, #1
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00f      	beq.n	800c3fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e0:	3310      	adds	r3, #16
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 ff8e 	bl	800d304 <xTaskRemoveFromEventList>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d007      	beq.n	800c3fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3ee:	4b3d      	ldr	r3, [pc, #244]	; (800c4e4 <xQueueReceive+0x1bc>)
 800c3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f4:	601a      	str	r2, [r3, #0]
 800c3f6:	f3bf 8f4f 	dsb	sy
 800c3fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3fe:	f7ff faa1 	bl	800b944 <vPortExitCritical>
				return pdPASS;
 800c402:	2301      	movs	r3, #1
 800c404:	e069      	b.n	800c4da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d103      	bne.n	800c414 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c40c:	f7ff fa9a 	bl	800b944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c410:	2300      	movs	r3, #0
 800c412:	e062      	b.n	800c4da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c416:	2b00      	cmp	r3, #0
 800c418:	d106      	bne.n	800c428 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c41a:	f107 0310 	add.w	r3, r7, #16
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 ffd2 	bl	800d3c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c424:	2301      	movs	r3, #1
 800c426:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c428:	f7ff fa8c 	bl	800b944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c42c:	f000 fd30 	bl	800ce90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c430:	f7ff fa58 	bl	800b8e4 <vPortEnterCritical>
 800c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c43a:	b25b      	sxtb	r3, r3
 800c43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c440:	d103      	bne.n	800c44a <xQueueReceive+0x122>
 800c442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c444:	2200      	movs	r2, #0
 800c446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c450:	b25b      	sxtb	r3, r3
 800c452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c456:	d103      	bne.n	800c460 <xQueueReceive+0x138>
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45a:	2200      	movs	r2, #0
 800c45c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c460:	f7ff fa70 	bl	800b944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c464:	1d3a      	adds	r2, r7, #4
 800c466:	f107 0310 	add.w	r3, r7, #16
 800c46a:	4611      	mov	r1, r2
 800c46c:	4618      	mov	r0, r3
 800c46e:	f000 ffc1 	bl	800d3f4 <xTaskCheckForTimeOut>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d123      	bne.n	800c4c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c47a:	f000 fabb 	bl	800c9f4 <prvIsQueueEmpty>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d017      	beq.n	800c4b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c486:	3324      	adds	r3, #36	; 0x24
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	4611      	mov	r1, r2
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 fee9 	bl	800d264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c494:	f000 fa5c 	bl	800c950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c498:	f000 fd08 	bl	800ceac <xTaskResumeAll>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d189      	bne.n	800c3b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c4a2:	4b10      	ldr	r3, [pc, #64]	; (800c4e4 <xQueueReceive+0x1bc>)
 800c4a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a8:	601a      	str	r2, [r3, #0]
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	e780      	b.n	800c3b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b6:	f000 fa4b 	bl	800c950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4ba:	f000 fcf7 	bl	800ceac <xTaskResumeAll>
 800c4be:	e77a      	b.n	800c3b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4c2:	f000 fa45 	bl	800c950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4c6:	f000 fcf1 	bl	800ceac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4cc:	f000 fa92 	bl	800c9f4 <prvIsQueueEmpty>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f43f af6f 	beq.w	800c3b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3730      	adds	r7, #48	; 0x30
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	e000ed04 	.word	0xe000ed04

0800c4e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b08e      	sub	sp, #56	; 0x38
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10a      	bne.n	800c51a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	623b      	str	r3, [r7, #32]
}
 800c516:	bf00      	nop
 800c518:	e7fe      	b.n	800c518 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00a      	beq.n	800c538 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	61fb      	str	r3, [r7, #28]
}
 800c534:	bf00      	nop
 800c536:	e7fe      	b.n	800c536 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c538:	f001 f892 	bl	800d660 <xTaskGetSchedulerState>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d102      	bne.n	800c548 <xQueueSemaphoreTake+0x60>
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <xQueueSemaphoreTake+0x64>
 800c548:	2301      	movs	r3, #1
 800c54a:	e000      	b.n	800c54e <xQueueSemaphoreTake+0x66>
 800c54c:	2300      	movs	r3, #0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10a      	bne.n	800c568 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	61bb      	str	r3, [r7, #24]
}
 800c564:	bf00      	nop
 800c566:	e7fe      	b.n	800c566 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c568:	f7ff f9bc 	bl	800b8e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c570:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c574:	2b00      	cmp	r3, #0
 800c576:	d024      	beq.n	800c5c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57a:	1e5a      	subs	r2, r3, #1
 800c57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d104      	bne.n	800c592 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c588:	f001 fa12 	bl	800d9b0 <pvTaskIncrementMutexHeldCount>
 800c58c:	4602      	mov	r2, r0
 800c58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c590:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00f      	beq.n	800c5ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59c:	3310      	adds	r3, #16
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f000 feb0 	bl	800d304 <xTaskRemoveFromEventList>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d007      	beq.n	800c5ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5aa:	4b54      	ldr	r3, [pc, #336]	; (800c6fc <xQueueSemaphoreTake+0x214>)
 800c5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b0:	601a      	str	r2, [r3, #0]
 800c5b2:	f3bf 8f4f 	dsb	sy
 800c5b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5ba:	f7ff f9c3 	bl	800b944 <vPortExitCritical>
				return pdPASS;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e097      	b.n	800c6f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d111      	bne.n	800c5ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00a      	beq.n	800c5e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	617b      	str	r3, [r7, #20]
}
 800c5e0:	bf00      	nop
 800c5e2:	e7fe      	b.n	800c5e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c5e4:	f7ff f9ae 	bl	800b944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e082      	b.n	800c6f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d106      	bne.n	800c600 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5f2:	f107 030c 	add.w	r3, r7, #12
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 fee6 	bl	800d3c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c600:	f7ff f9a0 	bl	800b944 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c604:	f000 fc44 	bl	800ce90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c608:	f7ff f96c 	bl	800b8e4 <vPortEnterCritical>
 800c60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c612:	b25b      	sxtb	r3, r3
 800c614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c618:	d103      	bne.n	800c622 <xQueueSemaphoreTake+0x13a>
 800c61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c628:	b25b      	sxtb	r3, r3
 800c62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62e:	d103      	bne.n	800c638 <xQueueSemaphoreTake+0x150>
 800c630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c632:	2200      	movs	r2, #0
 800c634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c638:	f7ff f984 	bl	800b944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c63c:	463a      	mov	r2, r7
 800c63e:	f107 030c 	add.w	r3, r7, #12
 800c642:	4611      	mov	r1, r2
 800c644:	4618      	mov	r0, r3
 800c646:	f000 fed5 	bl	800d3f4 <xTaskCheckForTimeOut>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d132      	bne.n	800c6b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c652:	f000 f9cf 	bl	800c9f4 <prvIsQueueEmpty>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d026      	beq.n	800c6aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d109      	bne.n	800c678 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c664:	f7ff f93e 	bl	800b8e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f001 f815 	bl	800d69c <xTaskPriorityInherit>
 800c672:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c674:	f7ff f966 	bl	800b944 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67a:	3324      	adds	r3, #36	; 0x24
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	4611      	mov	r1, r2
 800c680:	4618      	mov	r0, r3
 800c682:	f000 fdef 	bl	800d264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c688:	f000 f962 	bl	800c950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c68c:	f000 fc0e 	bl	800ceac <xTaskResumeAll>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	f47f af68 	bne.w	800c568 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c698:	4b18      	ldr	r3, [pc, #96]	; (800c6fc <xQueueSemaphoreTake+0x214>)
 800c69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c69e:	601a      	str	r2, [r3, #0]
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	e75e      	b.n	800c568 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c6aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6ac:	f000 f950 	bl	800c950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6b0:	f000 fbfc 	bl	800ceac <xTaskResumeAll>
 800c6b4:	e758      	b.n	800c568 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c6b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6b8:	f000 f94a 	bl	800c950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6bc:	f000 fbf6 	bl	800ceac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6c2:	f000 f997 	bl	800c9f4 <prvIsQueueEmpty>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f43f af4d 	beq.w	800c568 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00d      	beq.n	800c6f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c6d4:	f7ff f906 	bl	800b8e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c6d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6da:	f000 f891 	bl	800c800 <prvGetDisinheritPriorityAfterTimeout>
 800c6de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f001 f8d4 	bl	800d894 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c6ec:	f7ff f92a 	bl	800b944 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3738      	adds	r7, #56	; 0x38
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	e000ed04 	.word	0xe000ed04

0800c700 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b08e      	sub	sp, #56	; 0x38
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10a      	bne.n	800c72c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	623b      	str	r3, [r7, #32]
}
 800c728:	bf00      	nop
 800c72a:	e7fe      	b.n	800c72a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d103      	bne.n	800c73a <xQueueReceiveFromISR+0x3a>
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c736:	2b00      	cmp	r3, #0
 800c738:	d101      	bne.n	800c73e <xQueueReceiveFromISR+0x3e>
 800c73a:	2301      	movs	r3, #1
 800c73c:	e000      	b.n	800c740 <xQueueReceiveFromISR+0x40>
 800c73e:	2300      	movs	r3, #0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10a      	bne.n	800c75a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	61fb      	str	r3, [r7, #28]
}
 800c756:	bf00      	nop
 800c758:	e7fe      	b.n	800c758 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c75a:	f7ff f9a5 	bl	800baa8 <vPortValidateInterruptPriority>
	__asm volatile
 800c75e:	f3ef 8211 	mrs	r2, BASEPRI
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	61ba      	str	r2, [r7, #24]
 800c774:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c776:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c77e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c782:	2b00      	cmp	r3, #0
 800c784:	d02f      	beq.n	800c7e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c78c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c790:	68b9      	ldr	r1, [r7, #8]
 800c792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c794:	f000 f8b6 	bl	800c904 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79a:	1e5a      	subs	r2, r3, #1
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a8:	d112      	bne.n	800c7d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d016      	beq.n	800c7e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	3310      	adds	r3, #16
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 fda4 	bl	800d304 <xTaskRemoveFromEventList>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00e      	beq.n	800c7e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00b      	beq.n	800c7e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	601a      	str	r2, [r3, #0]
 800c7ce:	e007      	b.n	800c7e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	b25a      	sxtb	r2, r3
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	637b      	str	r3, [r7, #52]	; 0x34
 800c7e4:	e001      	b.n	800c7ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	637b      	str	r3, [r7, #52]	; 0x34
 800c7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	f383 8811 	msr	BASEPRI, r3
}
 800c7f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3738      	adds	r7, #56	; 0x38
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d006      	beq.n	800c81e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f1c3 030c 	rsb	r3, r3, #12
 800c81a:	60fb      	str	r3, [r7, #12]
 800c81c:	e001      	b.n	800c822 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c81e:	2300      	movs	r3, #0
 800c820:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c822:	68fb      	ldr	r3, [r7, #12]
	}
 800c824:	4618      	mov	r0, r3
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c83c:	2300      	movs	r3, #0
 800c83e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c844:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10d      	bne.n	800c86a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d14d      	bne.n	800c8f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 ff94 	bl	800d788 <xTaskPriorityDisinherit>
 800c860:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	609a      	str	r2, [r3, #8]
 800c868:	e043      	b.n	800c8f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d119      	bne.n	800c8a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6858      	ldr	r0, [r3, #4]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c878:	461a      	mov	r2, r3
 800c87a:	68b9      	ldr	r1, [r7, #8]
 800c87c:	f018 fd7e 	bl	802537c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	685a      	ldr	r2, [r3, #4]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c888:	441a      	add	r2, r3
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	429a      	cmp	r2, r3
 800c898:	d32b      	bcc.n	800c8f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	605a      	str	r2, [r3, #4]
 800c8a2:	e026      	b.n	800c8f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	68d8      	ldr	r0, [r3, #12]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	68b9      	ldr	r1, [r7, #8]
 800c8b0:	f018 fd64 	bl	802537c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	68da      	ldr	r2, [r3, #12]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8bc:	425b      	negs	r3, r3
 800c8be:	441a      	add	r2, r3
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	68da      	ldr	r2, [r3, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d207      	bcs.n	800c8e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	689a      	ldr	r2, [r3, #8]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d8:	425b      	negs	r3, r3
 800c8da:	441a      	add	r2, r3
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	d105      	bne.n	800c8f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d002      	beq.n	800c8f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	1c5a      	adds	r2, r3, #1
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c8fa:	697b      	ldr	r3, [r7, #20]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c912:	2b00      	cmp	r3, #0
 800c914:	d018      	beq.n	800c948 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	68da      	ldr	r2, [r3, #12]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91e:	441a      	add	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	68da      	ldr	r2, [r3, #12]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d303      	bcc.n	800c938 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	68d9      	ldr	r1, [r3, #12]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c940:	461a      	mov	r2, r3
 800c942:	6838      	ldr	r0, [r7, #0]
 800c944:	f018 fd1a 	bl	802537c <memcpy>
	}
}
 800c948:	bf00      	nop
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c958:	f7fe ffc4 	bl	800b8e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c962:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c964:	e011      	b.n	800c98a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d012      	beq.n	800c994 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	3324      	adds	r3, #36	; 0x24
 800c972:	4618      	mov	r0, r3
 800c974:	f000 fcc6 	bl	800d304 <xTaskRemoveFromEventList>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c97e:	f000 fd9b 	bl	800d4b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c982:	7bfb      	ldrb	r3, [r7, #15]
 800c984:	3b01      	subs	r3, #1
 800c986:	b2db      	uxtb	r3, r3
 800c988:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	dce9      	bgt.n	800c966 <prvUnlockQueue+0x16>
 800c992:	e000      	b.n	800c996 <prvUnlockQueue+0x46>
					break;
 800c994:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	22ff      	movs	r2, #255	; 0xff
 800c99a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c99e:	f7fe ffd1 	bl	800b944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c9a2:	f7fe ff9f 	bl	800b8e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9ae:	e011      	b.n	800c9d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d012      	beq.n	800c9de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	3310      	adds	r3, #16
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f000 fca1 	bl	800d304 <xTaskRemoveFromEventList>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c9c8:	f000 fd76 	bl	800d4b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c9cc:	7bbb      	ldrb	r3, [r7, #14]
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	dce9      	bgt.n	800c9b0 <prvUnlockQueue+0x60>
 800c9dc:	e000      	b.n	800c9e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c9de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	22ff      	movs	r2, #255	; 0xff
 800c9e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c9e8:	f7fe ffac 	bl	800b944 <vPortExitCritical>
}
 800c9ec:	bf00      	nop
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9fc:	f7fe ff72 	bl	800b8e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d102      	bne.n	800ca0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	60fb      	str	r3, [r7, #12]
 800ca0c:	e001      	b.n	800ca12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca12:	f7fe ff97 	bl	800b944 <vPortExitCritical>

	return xReturn;
 800ca16:	68fb      	ldr	r3, [r7, #12]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca28:	f7fe ff5c 	bl	800b8e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d102      	bne.n	800ca3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	e001      	b.n	800ca42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca42:	f7fe ff7f 	bl	800b944 <vPortExitCritical>

	return xReturn;
 800ca46:	68fb      	ldr	r3, [r7, #12]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	e014      	b.n	800ca8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ca60:	4a0f      	ldr	r2, [pc, #60]	; (800caa0 <vQueueAddToRegistry+0x50>)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10b      	bne.n	800ca84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca6c:	490c      	ldr	r1, [pc, #48]	; (800caa0 <vQueueAddToRegistry+0x50>)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca76:	4a0a      	ldr	r2, [pc, #40]	; (800caa0 <vQueueAddToRegistry+0x50>)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	00db      	lsls	r3, r3, #3
 800ca7c:	4413      	add	r3, r2
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca82:	e006      	b.n	800ca92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	3301      	adds	r3, #1
 800ca88:	60fb      	str	r3, [r7, #12]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2b07      	cmp	r3, #7
 800ca8e:	d9e7      	bls.n	800ca60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca90:	bf00      	nop
 800ca92:	bf00      	nop
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	2000858c 	.word	0x2000858c

0800caa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b086      	sub	sp, #24
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cab4:	f7fe ff16 	bl	800b8e4 <vPortEnterCritical>
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cabe:	b25b      	sxtb	r3, r3
 800cac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac4:	d103      	bne.n	800cace <vQueueWaitForMessageRestricted+0x2a>
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2200      	movs	r2, #0
 800caca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cad4:	b25b      	sxtb	r3, r3
 800cad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cada:	d103      	bne.n	800cae4 <vQueueWaitForMessageRestricted+0x40>
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cae4:	f7fe ff2e 	bl	800b944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caec:	2b00      	cmp	r3, #0
 800caee:	d106      	bne.n	800cafe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	3324      	adds	r3, #36	; 0x24
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	68b9      	ldr	r1, [r7, #8]
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 fbd7 	bl	800d2ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cafe:	6978      	ldr	r0, [r7, #20]
 800cb00:	f7ff ff26 	bl	800c950 <prvUnlockQueue>
	}
 800cb04:	bf00      	nop
 800cb06:	3718      	adds	r7, #24
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b08c      	sub	sp, #48	; 0x30
 800cb10:	af04      	add	r7, sp, #16
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	603b      	str	r3, [r7, #0]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb1c:	88fb      	ldrh	r3, [r7, #6]
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fe fbc9 	bl	800b2b8 <pvPortMalloc>
 800cb26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00e      	beq.n	800cb4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cb2e:	205c      	movs	r0, #92	; 0x5c
 800cb30:	f7fe fbc2 	bl	800b2b8 <pvPortMalloc>
 800cb34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	697a      	ldr	r2, [r7, #20]
 800cb40:	631a      	str	r2, [r3, #48]	; 0x30
 800cb42:	e005      	b.n	800cb50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cb44:	6978      	ldr	r0, [r7, #20]
 800cb46:	f7fe fc83 	bl	800b450 <vPortFree>
 800cb4a:	e001      	b.n	800cb50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d013      	beq.n	800cb7e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb56:	88fa      	ldrh	r2, [r7, #6]
 800cb58:	2300      	movs	r3, #0
 800cb5a:	9303      	str	r3, [sp, #12]
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	9302      	str	r3, [sp, #8]
 800cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb62:	9301      	str	r3, [sp, #4]
 800cb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	68b9      	ldr	r1, [r7, #8]
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f000 f80e 	bl	800cb8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb72:	69f8      	ldr	r0, [r7, #28]
 800cb74:	f000 f89a 	bl	800ccac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	61bb      	str	r3, [r7, #24]
 800cb7c:	e002      	b.n	800cb84 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb7e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb84:	69bb      	ldr	r3, [r7, #24]
	}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3720      	adds	r7, #32
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b088      	sub	sp, #32
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	60f8      	str	r0, [r7, #12]
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	607a      	str	r2, [r7, #4]
 800cb9a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	461a      	mov	r2, r3
 800cba6:	21a5      	movs	r1, #165	; 0xa5
 800cba8:	f018 fbb4 	bl	8025314 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	4413      	add	r3, r2
 800cbbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	f023 0307 	bic.w	r3, r3, #7
 800cbc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	f003 0307 	and.w	r3, r3, #7
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00a      	beq.n	800cbe6 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	617b      	str	r3, [r7, #20]
}
 800cbe2:	bf00      	nop
 800cbe4:	e7fe      	b.n	800cbe4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d01f      	beq.n	800cc2c <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbec:	2300      	movs	r3, #0
 800cbee:	61fb      	str	r3, [r7, #28]
 800cbf0:	e012      	b.n	800cc18 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	7819      	ldrb	r1, [r3, #0]
 800cbfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	4413      	add	r3, r2
 800cc00:	3334      	adds	r3, #52	; 0x34
 800cc02:	460a      	mov	r2, r1
 800cc04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc06:	68ba      	ldr	r2, [r7, #8]
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d006      	beq.n	800cc20 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	3301      	adds	r3, #1
 800cc16:	61fb      	str	r3, [r7, #28]
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	2b0f      	cmp	r3, #15
 800cc1c:	d9e9      	bls.n	800cbf2 <prvInitialiseNewTask+0x64>
 800cc1e:	e000      	b.n	800cc22 <prvInitialiseNewTask+0x94>
			{
				break;
 800cc20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc24:	2200      	movs	r2, #0
 800cc26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cc2a:	e003      	b.n	800cc34 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc36:	2b0b      	cmp	r3, #11
 800cc38:	d901      	bls.n	800cc3e <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cc3a:	230b      	movs	r3, #11
 800cc3c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc42:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc48:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc52:	3304      	adds	r3, #4
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fe ff87 	bl	800bb68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5c:	3318      	adds	r3, #24
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7fe ff82 	bl	800bb68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6c:	f1c3 020c 	rsb	r2, r3, #12
 800cc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc78:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc88:	683a      	ldr	r2, [r7, #0]
 800cc8a:	68f9      	ldr	r1, [r7, #12]
 800cc8c:	69b8      	ldr	r0, [r7, #24]
 800cc8e:	f7fe fcfd 	bl	800b68c <pxPortInitialiseStack>
 800cc92:	4602      	mov	r2, r0
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d002      	beq.n	800cca4 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cca2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cca4:	bf00      	nop
 800cca6:	3720      	adds	r7, #32
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ccb4:	f7fe fe16 	bl	800b8e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ccb8:	4b2c      	ldr	r3, [pc, #176]	; (800cd6c <prvAddNewTaskToReadyList+0xc0>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	4a2b      	ldr	r2, [pc, #172]	; (800cd6c <prvAddNewTaskToReadyList+0xc0>)
 800ccc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ccc2:	4b2b      	ldr	r3, [pc, #172]	; (800cd70 <prvAddNewTaskToReadyList+0xc4>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d109      	bne.n	800ccde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ccca:	4a29      	ldr	r2, [pc, #164]	; (800cd70 <prvAddNewTaskToReadyList+0xc4>)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ccd0:	4b26      	ldr	r3, [pc, #152]	; (800cd6c <prvAddNewTaskToReadyList+0xc0>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d110      	bne.n	800ccfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ccd8:	f000 fc14 	bl	800d504 <prvInitialiseTaskLists>
 800ccdc:	e00d      	b.n	800ccfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ccde:	4b25      	ldr	r3, [pc, #148]	; (800cd74 <prvAddNewTaskToReadyList+0xc8>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d109      	bne.n	800ccfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cce6:	4b22      	ldr	r3, [pc, #136]	; (800cd70 <prvAddNewTaskToReadyList+0xc4>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d802      	bhi.n	800ccfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ccf4:	4a1e      	ldr	r2, [pc, #120]	; (800cd70 <prvAddNewTaskToReadyList+0xc4>)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ccfa:	4b1f      	ldr	r3, [pc, #124]	; (800cd78 <prvAddNewTaskToReadyList+0xcc>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	4a1d      	ldr	r2, [pc, #116]	; (800cd78 <prvAddNewTaskToReadyList+0xcc>)
 800cd02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cd04:	4b1c      	ldr	r3, [pc, #112]	; (800cd78 <prvAddNewTaskToReadyList+0xcc>)
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd10:	2201      	movs	r2, #1
 800cd12:	409a      	lsls	r2, r3
 800cd14:	4b19      	ldr	r3, [pc, #100]	; (800cd7c <prvAddNewTaskToReadyList+0xd0>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	4a18      	ldr	r2, [pc, #96]	; (800cd7c <prvAddNewTaskToReadyList+0xd0>)
 800cd1c:	6013      	str	r3, [r2, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd22:	4613      	mov	r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	4413      	add	r3, r2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4a15      	ldr	r2, [pc, #84]	; (800cd80 <prvAddNewTaskToReadyList+0xd4>)
 800cd2c:	441a      	add	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	3304      	adds	r3, #4
 800cd32:	4619      	mov	r1, r3
 800cd34:	4610      	mov	r0, r2
 800cd36:	f7fe ff24 	bl	800bb82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cd3a:	f7fe fe03 	bl	800b944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cd3e:	4b0d      	ldr	r3, [pc, #52]	; (800cd74 <prvAddNewTaskToReadyList+0xc8>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00e      	beq.n	800cd64 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd46:	4b0a      	ldr	r3, [pc, #40]	; (800cd70 <prvAddNewTaskToReadyList+0xc4>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d207      	bcs.n	800cd64 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd54:	4b0b      	ldr	r3, [pc, #44]	; (800cd84 <prvAddNewTaskToReadyList+0xd8>)
 800cd56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd5a:	601a      	str	r2, [r3, #0]
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd64:	bf00      	nop
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	20008730 	.word	0x20008730
 800cd70:	200085cc 	.word	0x200085cc
 800cd74:	2000873c 	.word	0x2000873c
 800cd78:	2000874c 	.word	0x2000874c
 800cd7c:	20008738 	.word	0x20008738
 800cd80:	200085d0 	.word	0x200085d0
 800cd84:	e000ed04 	.word	0xe000ed04

0800cd88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd90:	2300      	movs	r3, #0
 800cd92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d017      	beq.n	800cdca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd9a:	4b13      	ldr	r3, [pc, #76]	; (800cde8 <vTaskDelay+0x60>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00a      	beq.n	800cdb8 <vTaskDelay+0x30>
	__asm volatile
 800cda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	60bb      	str	r3, [r7, #8]
}
 800cdb4:	bf00      	nop
 800cdb6:	e7fe      	b.n	800cdb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cdb8:	f000 f86a 	bl	800ce90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fe0a 	bl	800d9d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cdc4:	f000 f872 	bl	800ceac <xTaskResumeAll>
 800cdc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d107      	bne.n	800cde0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cdd0:	4b06      	ldr	r3, [pc, #24]	; (800cdec <vTaskDelay+0x64>)
 800cdd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdd6:	601a      	str	r2, [r3, #0]
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cde0:	bf00      	nop
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	20008758 	.word	0x20008758
 800cdec:	e000ed04 	.word	0xe000ed04

0800cdf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800cdf6:	4b20      	ldr	r3, [pc, #128]	; (800ce78 <vTaskStartScheduler+0x88>)
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	2300      	movs	r3, #0
 800ce00:	2280      	movs	r2, #128	; 0x80
 800ce02:	491e      	ldr	r1, [pc, #120]	; (800ce7c <vTaskStartScheduler+0x8c>)
 800ce04:	481e      	ldr	r0, [pc, #120]	; (800ce80 <vTaskStartScheduler+0x90>)
 800ce06:	f7ff fe81 	bl	800cb0c <xTaskCreate>
 800ce0a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d102      	bne.n	800ce18 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800ce12:	f000 fe47 	bl	800daa4 <xTimerCreateTimerTask>
 800ce16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d118      	bne.n	800ce50 <vTaskStartScheduler+0x60>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	60bb      	str	r3, [r7, #8]
}
 800ce30:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce32:	4b14      	ldr	r3, [pc, #80]	; (800ce84 <vTaskStartScheduler+0x94>)
 800ce34:	f04f 32ff 	mov.w	r2, #4294967295
 800ce38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce3a:	4b13      	ldr	r3, [pc, #76]	; (800ce88 <vTaskStartScheduler+0x98>)
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce40:	4b12      	ldr	r3, [pc, #72]	; (800ce8c <vTaskStartScheduler+0x9c>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800ce46:	f7f4 fe2f 	bl	8001aa8 <StartIdleMonitor>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce4a:	f7fe fca9 	bl	800b7a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce4e:	e00e      	b.n	800ce6e <vTaskStartScheduler+0x7e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce56:	d10a      	bne.n	800ce6e <vTaskStartScheduler+0x7e>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	607b      	str	r3, [r7, #4]
}
 800ce6a:	bf00      	nop
 800ce6c:	e7fe      	b.n	800ce6c <vTaskStartScheduler+0x7c>
}
 800ce6e:	bf00      	nop
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	20008754 	.word	0x20008754
 800ce7c:	080254cc 	.word	0x080254cc
 800ce80:	0800d4d1 	.word	0x0800d4d1
 800ce84:	20008750 	.word	0x20008750
 800ce88:	2000873c 	.word	0x2000873c
 800ce8c:	20008734 	.word	0x20008734

0800ce90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce90:	b480      	push	{r7}
 800ce92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce94:	4b04      	ldr	r3, [pc, #16]	; (800cea8 <vTaskSuspendAll+0x18>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	4a03      	ldr	r2, [pc, #12]	; (800cea8 <vTaskSuspendAll+0x18>)
 800ce9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce9e:	bf00      	nop
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	20008758 	.word	0x20008758

0800ceac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ceba:	4b41      	ldr	r3, [pc, #260]	; (800cfc0 <xTaskResumeAll+0x114>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10a      	bne.n	800ced8 <xTaskResumeAll+0x2c>
	__asm volatile
 800cec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec6:	f383 8811 	msr	BASEPRI, r3
 800ceca:	f3bf 8f6f 	isb	sy
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	603b      	str	r3, [r7, #0]
}
 800ced4:	bf00      	nop
 800ced6:	e7fe      	b.n	800ced6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ced8:	f7fe fd04 	bl	800b8e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cedc:	4b38      	ldr	r3, [pc, #224]	; (800cfc0 <xTaskResumeAll+0x114>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	4a37      	ldr	r2, [pc, #220]	; (800cfc0 <xTaskResumeAll+0x114>)
 800cee4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cee6:	4b36      	ldr	r3, [pc, #216]	; (800cfc0 <xTaskResumeAll+0x114>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d161      	bne.n	800cfb2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ceee:	4b35      	ldr	r3, [pc, #212]	; (800cfc4 <xTaskResumeAll+0x118>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d05d      	beq.n	800cfb2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cef6:	e02e      	b.n	800cf56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cef8:	4b33      	ldr	r3, [pc, #204]	; (800cfc8 <xTaskResumeAll+0x11c>)
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	3318      	adds	r3, #24
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7fe fe99 	bl	800bc3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fe fe94 	bl	800bc3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf18:	2201      	movs	r2, #1
 800cf1a:	409a      	lsls	r2, r3
 800cf1c:	4b2b      	ldr	r3, [pc, #172]	; (800cfcc <xTaskResumeAll+0x120>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	4a2a      	ldr	r2, [pc, #168]	; (800cfcc <xTaskResumeAll+0x120>)
 800cf24:	6013      	str	r3, [r2, #0]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4413      	add	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	4a27      	ldr	r2, [pc, #156]	; (800cfd0 <xTaskResumeAll+0x124>)
 800cf34:	441a      	add	r2, r3
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	3304      	adds	r3, #4
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	f7fe fe20 	bl	800bb82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf46:	4b23      	ldr	r3, [pc, #140]	; (800cfd4 <xTaskResumeAll+0x128>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d302      	bcc.n	800cf56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cf50:	4b21      	ldr	r3, [pc, #132]	; (800cfd8 <xTaskResumeAll+0x12c>)
 800cf52:	2201      	movs	r2, #1
 800cf54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf56:	4b1c      	ldr	r3, [pc, #112]	; (800cfc8 <xTaskResumeAll+0x11c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d1cc      	bne.n	800cef8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf64:	f000 fb4c 	bl	800d600 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cf68:	4b1c      	ldr	r3, [pc, #112]	; (800cfdc <xTaskResumeAll+0x130>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d010      	beq.n	800cf96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf74:	f000 f858 	bl	800d028 <xTaskIncrementTick>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d002      	beq.n	800cf84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cf7e:	4b16      	ldr	r3, [pc, #88]	; (800cfd8 <xTaskResumeAll+0x12c>)
 800cf80:	2201      	movs	r2, #1
 800cf82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	3b01      	subs	r3, #1
 800cf88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1f1      	bne.n	800cf74 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cf90:	4b12      	ldr	r3, [pc, #72]	; (800cfdc <xTaskResumeAll+0x130>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf96:	4b10      	ldr	r3, [pc, #64]	; (800cfd8 <xTaskResumeAll+0x12c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d009      	beq.n	800cfb2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cfa2:	4b0f      	ldr	r3, [pc, #60]	; (800cfe0 <xTaskResumeAll+0x134>)
 800cfa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa8:	601a      	str	r2, [r3, #0]
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfb2:	f7fe fcc7 	bl	800b944 <vPortExitCritical>

	return xAlreadyYielded;
 800cfb6:	68bb      	ldr	r3, [r7, #8]
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	20008758 	.word	0x20008758
 800cfc4:	20008730 	.word	0x20008730
 800cfc8:	200086f0 	.word	0x200086f0
 800cfcc:	20008738 	.word	0x20008738
 800cfd0:	200085d0 	.word	0x200085d0
 800cfd4:	200085cc 	.word	0x200085cc
 800cfd8:	20008744 	.word	0x20008744
 800cfdc:	20008740 	.word	0x20008740
 800cfe0:	e000ed04 	.word	0xe000ed04

0800cfe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cfea:	4b05      	ldr	r3, [pc, #20]	; (800d000 <xTaskGetTickCount+0x1c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cff0:	687b      	ldr	r3, [r7, #4]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	370c      	adds	r7, #12
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop
 800d000:	20008734 	.word	0x20008734

0800d004 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d00a:	f7fe fd4d 	bl	800baa8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d00e:	2300      	movs	r3, #0
 800d010:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d012:	4b04      	ldr	r3, [pc, #16]	; (800d024 <xTaskGetTickCountFromISR+0x20>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d018:	683b      	ldr	r3, [r7, #0]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	20008734 	.word	0x20008734

0800d028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d02e:	2300      	movs	r3, #0
 800d030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d032:	4b52      	ldr	r3, [pc, #328]	; (800d17c <xTaskIncrementTick+0x154>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	f040 8094 	bne.w	800d164 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d03c:	4b50      	ldr	r3, [pc, #320]	; (800d180 <xTaskIncrementTick+0x158>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3301      	adds	r3, #1
 800d042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d044:	4a4e      	ldr	r2, [pc, #312]	; (800d180 <xTaskIncrementTick+0x158>)
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d120      	bne.n	800d092 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d050:	4b4c      	ldr	r3, [pc, #304]	; (800d184 <xTaskIncrementTick+0x15c>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00a      	beq.n	800d070 <xTaskIncrementTick+0x48>
	__asm volatile
 800d05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05e:	f383 8811 	msr	BASEPRI, r3
 800d062:	f3bf 8f6f 	isb	sy
 800d066:	f3bf 8f4f 	dsb	sy
 800d06a:	603b      	str	r3, [r7, #0]
}
 800d06c:	bf00      	nop
 800d06e:	e7fe      	b.n	800d06e <xTaskIncrementTick+0x46>
 800d070:	4b44      	ldr	r3, [pc, #272]	; (800d184 <xTaskIncrementTick+0x15c>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	60fb      	str	r3, [r7, #12]
 800d076:	4b44      	ldr	r3, [pc, #272]	; (800d188 <xTaskIncrementTick+0x160>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a42      	ldr	r2, [pc, #264]	; (800d184 <xTaskIncrementTick+0x15c>)
 800d07c:	6013      	str	r3, [r2, #0]
 800d07e:	4a42      	ldr	r2, [pc, #264]	; (800d188 <xTaskIncrementTick+0x160>)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6013      	str	r3, [r2, #0]
 800d084:	4b41      	ldr	r3, [pc, #260]	; (800d18c <xTaskIncrementTick+0x164>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	3301      	adds	r3, #1
 800d08a:	4a40      	ldr	r2, [pc, #256]	; (800d18c <xTaskIncrementTick+0x164>)
 800d08c:	6013      	str	r3, [r2, #0]
 800d08e:	f000 fab7 	bl	800d600 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d092:	4b3f      	ldr	r3, [pc, #252]	; (800d190 <xTaskIncrementTick+0x168>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d348      	bcc.n	800d12e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d09c:	4b39      	ldr	r3, [pc, #228]	; (800d184 <xTaskIncrementTick+0x15c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d104      	bne.n	800d0b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0a6:	4b3a      	ldr	r3, [pc, #232]	; (800d190 <xTaskIncrementTick+0x168>)
 800d0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ac:	601a      	str	r2, [r3, #0]
					break;
 800d0ae:	e03e      	b.n	800d12e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0b0:	4b34      	ldr	r3, [pc, #208]	; (800d184 <xTaskIncrementTick+0x15c>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d0c0:	693a      	ldr	r2, [r7, #16]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d203      	bcs.n	800d0d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d0c8:	4a31      	ldr	r2, [pc, #196]	; (800d190 <xTaskIncrementTick+0x168>)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d0ce:	e02e      	b.n	800d12e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fe fdb1 	bl	800bc3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d004      	beq.n	800d0ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	3318      	adds	r3, #24
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7fe fda8 	bl	800bc3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	409a      	lsls	r2, r3
 800d0f4:	4b27      	ldr	r3, [pc, #156]	; (800d194 <xTaskIncrementTick+0x16c>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	4a26      	ldr	r2, [pc, #152]	; (800d194 <xTaskIncrementTick+0x16c>)
 800d0fc:	6013      	str	r3, [r2, #0]
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d102:	4613      	mov	r3, r2
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	4413      	add	r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4a23      	ldr	r2, [pc, #140]	; (800d198 <xTaskIncrementTick+0x170>)
 800d10c:	441a      	add	r2, r3
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	3304      	adds	r3, #4
 800d112:	4619      	mov	r1, r3
 800d114:	4610      	mov	r0, r2
 800d116:	f7fe fd34 	bl	800bb82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d11e:	4b1f      	ldr	r3, [pc, #124]	; (800d19c <xTaskIncrementTick+0x174>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d124:	429a      	cmp	r2, r3
 800d126:	d3b9      	bcc.n	800d09c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d128:	2301      	movs	r3, #1
 800d12a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d12c:	e7b6      	b.n	800d09c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d12e:	4b1b      	ldr	r3, [pc, #108]	; (800d19c <xTaskIncrementTick+0x174>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d134:	4918      	ldr	r1, [pc, #96]	; (800d198 <xTaskIncrementTick+0x170>)
 800d136:	4613      	mov	r3, r2
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	4413      	add	r3, r2
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	440b      	add	r3, r1
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d901      	bls.n	800d14a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d146:	2301      	movs	r3, #1
 800d148:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800d14a:	4b15      	ldr	r3, [pc, #84]	; (800d1a0 <xTaskIncrementTick+0x178>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d101      	bne.n	800d156 <xTaskIncrementTick+0x12e>
			{
				vApplicationTickHook();
 800d152:	f7f4 fc75 	bl	8001a40 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d156:	4b13      	ldr	r3, [pc, #76]	; (800d1a4 <xTaskIncrementTick+0x17c>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d009      	beq.n	800d172 <xTaskIncrementTick+0x14a>
			{
				xSwitchRequired = pdTRUE;
 800d15e:	2301      	movs	r3, #1
 800d160:	617b      	str	r3, [r7, #20]
 800d162:	e006      	b.n	800d172 <xTaskIncrementTick+0x14a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d164:	4b0e      	ldr	r3, [pc, #56]	; (800d1a0 <xTaskIncrementTick+0x178>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	3301      	adds	r3, #1
 800d16a:	4a0d      	ldr	r2, [pc, #52]	; (800d1a0 <xTaskIncrementTick+0x178>)
 800d16c:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800d16e:	f7f4 fc67 	bl	8001a40 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800d172:	697b      	ldr	r3, [r7, #20]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3718      	adds	r7, #24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	20008758 	.word	0x20008758
 800d180:	20008734 	.word	0x20008734
 800d184:	200086e8 	.word	0x200086e8
 800d188:	200086ec 	.word	0x200086ec
 800d18c:	20008748 	.word	0x20008748
 800d190:	20008750 	.word	0x20008750
 800d194:	20008738 	.word	0x20008738
 800d198:	200085d0 	.word	0x200085d0
 800d19c:	200085cc 	.word	0x200085cc
 800d1a0:	20008740 	.word	0x20008740
 800d1a4:	20008744 	.word	0x20008744

0800d1a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b086      	sub	sp, #24
 800d1ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d1ae:	4b28      	ldr	r3, [pc, #160]	; (800d250 <vTaskSwitchContext+0xa8>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d003      	beq.n	800d1be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d1b6:	4b27      	ldr	r3, [pc, #156]	; (800d254 <vTaskSwitchContext+0xac>)
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d1bc:	e043      	b.n	800d246 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800d1be:	4b25      	ldr	r3, [pc, #148]	; (800d254 <vTaskSwitchContext+0xac>)
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800d1c4:	f7f4 fc84 	bl	8001ad0 <EndIdleMonitor>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1c8:	4b23      	ldr	r3, [pc, #140]	; (800d258 <vTaskSwitchContext+0xb0>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	fab3 f383 	clz	r3, r3
 800d1d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d1d6:	7afb      	ldrb	r3, [r7, #11]
 800d1d8:	f1c3 031f 	rsb	r3, r3, #31
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	491f      	ldr	r1, [pc, #124]	; (800d25c <vTaskSwitchContext+0xb4>)
 800d1e0:	697a      	ldr	r2, [r7, #20]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	4413      	add	r3, r2
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	440b      	add	r3, r1
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10a      	bne.n	800d208 <vTaskSwitchContext+0x60>
	__asm volatile
 800d1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	607b      	str	r3, [r7, #4]
}
 800d204:	bf00      	nop
 800d206:	e7fe      	b.n	800d206 <vTaskSwitchContext+0x5e>
 800d208:	697a      	ldr	r2, [r7, #20]
 800d20a:	4613      	mov	r3, r2
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	4413      	add	r3, r2
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	4a12      	ldr	r2, [pc, #72]	; (800d25c <vTaskSwitchContext+0xb4>)
 800d214:	4413      	add	r3, r2
 800d216:	613b      	str	r3, [r7, #16]
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	685a      	ldr	r2, [r3, #4]
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	605a      	str	r2, [r3, #4]
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	685a      	ldr	r2, [r3, #4]
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	3308      	adds	r3, #8
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d104      	bne.n	800d238 <vTaskSwitchContext+0x90>
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	685a      	ldr	r2, [r3, #4]
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	605a      	str	r2, [r3, #4]
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	4a08      	ldr	r2, [pc, #32]	; (800d260 <vTaskSwitchContext+0xb8>)
 800d240:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800d242:	f7f4 fc31 	bl	8001aa8 <StartIdleMonitor>
}
 800d246:	bf00      	nop
 800d248:	3718      	adds	r7, #24
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	20008758 	.word	0x20008758
 800d254:	20008744 	.word	0x20008744
 800d258:	20008738 	.word	0x20008738
 800d25c:	200085d0 	.word	0x200085d0
 800d260:	200085cc 	.word	0x200085cc

0800d264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10a      	bne.n	800d28a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d278:	f383 8811 	msr	BASEPRI, r3
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f3bf 8f4f 	dsb	sy
 800d284:	60fb      	str	r3, [r7, #12]
}
 800d286:	bf00      	nop
 800d288:	e7fe      	b.n	800d288 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d28a:	4b07      	ldr	r3, [pc, #28]	; (800d2a8 <vTaskPlaceOnEventList+0x44>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	3318      	adds	r3, #24
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f7fe fc99 	bl	800bbca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d298:	2101      	movs	r1, #1
 800d29a:	6838      	ldr	r0, [r7, #0]
 800d29c:	f000 fb9c 	bl	800d9d8 <prvAddCurrentTaskToDelayedList>
}
 800d2a0:	bf00      	nop
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	200085cc 	.word	0x200085cc

0800d2ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b086      	sub	sp, #24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d10a      	bne.n	800d2d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	617b      	str	r3, [r7, #20]
}
 800d2d0:	bf00      	nop
 800d2d2:	e7fe      	b.n	800d2d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d2d4:	4b0a      	ldr	r3, [pc, #40]	; (800d300 <vTaskPlaceOnEventListRestricted+0x54>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	3318      	adds	r3, #24
 800d2da:	4619      	mov	r1, r3
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f7fe fc50 	bl	800bb82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d2ee:	6879      	ldr	r1, [r7, #4]
 800d2f0:	68b8      	ldr	r0, [r7, #8]
 800d2f2:	f000 fb71 	bl	800d9d8 <prvAddCurrentTaskToDelayedList>
	}
 800d2f6:	bf00      	nop
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	200085cc 	.word	0x200085cc

0800d304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10a      	bne.n	800d330 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	60fb      	str	r3, [r7, #12]
}
 800d32c:	bf00      	nop
 800d32e:	e7fe      	b.n	800d32e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	3318      	adds	r3, #24
 800d334:	4618      	mov	r0, r3
 800d336:	f7fe fc81 	bl	800bc3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d33a:	4b1d      	ldr	r3, [pc, #116]	; (800d3b0 <xTaskRemoveFromEventList+0xac>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d11c      	bne.n	800d37c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	3304      	adds	r3, #4
 800d346:	4618      	mov	r0, r3
 800d348:	f7fe fc78 	bl	800bc3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d350:	2201      	movs	r2, #1
 800d352:	409a      	lsls	r2, r3
 800d354:	4b17      	ldr	r3, [pc, #92]	; (800d3b4 <xTaskRemoveFromEventList+0xb0>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4313      	orrs	r3, r2
 800d35a:	4a16      	ldr	r2, [pc, #88]	; (800d3b4 <xTaskRemoveFromEventList+0xb0>)
 800d35c:	6013      	str	r3, [r2, #0]
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d362:	4613      	mov	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4a13      	ldr	r2, [pc, #76]	; (800d3b8 <xTaskRemoveFromEventList+0xb4>)
 800d36c:	441a      	add	r2, r3
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	3304      	adds	r3, #4
 800d372:	4619      	mov	r1, r3
 800d374:	4610      	mov	r0, r2
 800d376:	f7fe fc04 	bl	800bb82 <vListInsertEnd>
 800d37a:	e005      	b.n	800d388 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	3318      	adds	r3, #24
 800d380:	4619      	mov	r1, r3
 800d382:	480e      	ldr	r0, [pc, #56]	; (800d3bc <xTaskRemoveFromEventList+0xb8>)
 800d384:	f7fe fbfd 	bl	800bb82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d38c:	4b0c      	ldr	r3, [pc, #48]	; (800d3c0 <xTaskRemoveFromEventList+0xbc>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d392:	429a      	cmp	r2, r3
 800d394:	d905      	bls.n	800d3a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d396:	2301      	movs	r3, #1
 800d398:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d39a:	4b0a      	ldr	r3, [pc, #40]	; (800d3c4 <xTaskRemoveFromEventList+0xc0>)
 800d39c:	2201      	movs	r2, #1
 800d39e:	601a      	str	r2, [r3, #0]
 800d3a0:	e001      	b.n	800d3a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d3a6:	697b      	ldr	r3, [r7, #20]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	20008758 	.word	0x20008758
 800d3b4:	20008738 	.word	0x20008738
 800d3b8:	200085d0 	.word	0x200085d0
 800d3bc:	200086f0 	.word	0x200086f0
 800d3c0:	200085cc 	.word	0x200085cc
 800d3c4:	20008744 	.word	0x20008744

0800d3c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d3d0:	4b06      	ldr	r3, [pc, #24]	; (800d3ec <vTaskInternalSetTimeOutState+0x24>)
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d3d8:	4b05      	ldr	r3, [pc, #20]	; (800d3f0 <vTaskInternalSetTimeOutState+0x28>)
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	605a      	str	r2, [r3, #4]
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	20008748 	.word	0x20008748
 800d3f0:	20008734 	.word	0x20008734

0800d3f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b088      	sub	sp, #32
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d10a      	bne.n	800d41a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d408:	f383 8811 	msr	BASEPRI, r3
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	f3bf 8f4f 	dsb	sy
 800d414:	613b      	str	r3, [r7, #16]
}
 800d416:	bf00      	nop
 800d418:	e7fe      	b.n	800d418 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d10a      	bne.n	800d436 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d424:	f383 8811 	msr	BASEPRI, r3
 800d428:	f3bf 8f6f 	isb	sy
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	60fb      	str	r3, [r7, #12]
}
 800d432:	bf00      	nop
 800d434:	e7fe      	b.n	800d434 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d436:	f7fe fa55 	bl	800b8e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d43a:	4b1d      	ldr	r3, [pc, #116]	; (800d4b0 <xTaskCheckForTimeOut+0xbc>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	69ba      	ldr	r2, [r7, #24]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d452:	d102      	bne.n	800d45a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d454:	2300      	movs	r3, #0
 800d456:	61fb      	str	r3, [r7, #28]
 800d458:	e023      	b.n	800d4a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	4b15      	ldr	r3, [pc, #84]	; (800d4b4 <xTaskCheckForTimeOut+0xc0>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	429a      	cmp	r2, r3
 800d464:	d007      	beq.n	800d476 <xTaskCheckForTimeOut+0x82>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	69ba      	ldr	r2, [r7, #24]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d302      	bcc.n	800d476 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d470:	2301      	movs	r3, #1
 800d472:	61fb      	str	r3, [r7, #28]
 800d474:	e015      	b.n	800d4a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	697a      	ldr	r2, [r7, #20]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d20b      	bcs.n	800d498 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	1ad2      	subs	r2, r2, r3
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7ff ff9b 	bl	800d3c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d492:	2300      	movs	r3, #0
 800d494:	61fb      	str	r3, [r7, #28]
 800d496:	e004      	b.n	800d4a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	2200      	movs	r2, #0
 800d49c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d4a2:	f7fe fa4f 	bl	800b944 <vPortExitCritical>

	return xReturn;
 800d4a6:	69fb      	ldr	r3, [r7, #28]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3720      	adds	r7, #32
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20008734 	.word	0x20008734
 800d4b4:	20008748 	.word	0x20008748

0800d4b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d4bc:	4b03      	ldr	r3, [pc, #12]	; (800d4cc <vTaskMissedYield+0x14>)
 800d4be:	2201      	movs	r2, #1
 800d4c0:	601a      	str	r2, [r3, #0]
}
 800d4c2:	bf00      	nop
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	20008744 	.word	0x20008744

0800d4d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d4d8:	f000 f854 	bl	800d584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d4dc:	4b07      	ldr	r3, [pc, #28]	; (800d4fc <prvIdleTask+0x2c>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d907      	bls.n	800d4f4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d4e4:	4b06      	ldr	r3, [pc, #24]	; (800d500 <prvIdleTask+0x30>)
 800d4e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d4f4:	f7f4 fa94 	bl	8001a20 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d4f8:	e7ee      	b.n	800d4d8 <prvIdleTask+0x8>
 800d4fa:	bf00      	nop
 800d4fc:	200085d0 	.word	0x200085d0
 800d500:	e000ed04 	.word	0xe000ed04

0800d504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d50a:	2300      	movs	r3, #0
 800d50c:	607b      	str	r3, [r7, #4]
 800d50e:	e00c      	b.n	800d52a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	4613      	mov	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4413      	add	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	4a12      	ldr	r2, [pc, #72]	; (800d564 <prvInitialiseTaskLists+0x60>)
 800d51c:	4413      	add	r3, r2
 800d51e:	4618      	mov	r0, r3
 800d520:	f7fe fb02 	bl	800bb28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	3301      	adds	r3, #1
 800d528:	607b      	str	r3, [r7, #4]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2b0b      	cmp	r3, #11
 800d52e:	d9ef      	bls.n	800d510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d530:	480d      	ldr	r0, [pc, #52]	; (800d568 <prvInitialiseTaskLists+0x64>)
 800d532:	f7fe faf9 	bl	800bb28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d536:	480d      	ldr	r0, [pc, #52]	; (800d56c <prvInitialiseTaskLists+0x68>)
 800d538:	f7fe faf6 	bl	800bb28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d53c:	480c      	ldr	r0, [pc, #48]	; (800d570 <prvInitialiseTaskLists+0x6c>)
 800d53e:	f7fe faf3 	bl	800bb28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d542:	480c      	ldr	r0, [pc, #48]	; (800d574 <prvInitialiseTaskLists+0x70>)
 800d544:	f7fe faf0 	bl	800bb28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d548:	480b      	ldr	r0, [pc, #44]	; (800d578 <prvInitialiseTaskLists+0x74>)
 800d54a:	f7fe faed 	bl	800bb28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d54e:	4b0b      	ldr	r3, [pc, #44]	; (800d57c <prvInitialiseTaskLists+0x78>)
 800d550:	4a05      	ldr	r2, [pc, #20]	; (800d568 <prvInitialiseTaskLists+0x64>)
 800d552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d554:	4b0a      	ldr	r3, [pc, #40]	; (800d580 <prvInitialiseTaskLists+0x7c>)
 800d556:	4a05      	ldr	r2, [pc, #20]	; (800d56c <prvInitialiseTaskLists+0x68>)
 800d558:	601a      	str	r2, [r3, #0]
}
 800d55a:	bf00      	nop
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	200085d0 	.word	0x200085d0
 800d568:	200086c0 	.word	0x200086c0
 800d56c:	200086d4 	.word	0x200086d4
 800d570:	200086f0 	.word	0x200086f0
 800d574:	20008704 	.word	0x20008704
 800d578:	2000871c 	.word	0x2000871c
 800d57c:	200086e8 	.word	0x200086e8
 800d580:	200086ec 	.word	0x200086ec

0800d584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d58a:	e019      	b.n	800d5c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d58c:	f7fe f9aa 	bl	800b8e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d590:	4b10      	ldr	r3, [pc, #64]	; (800d5d4 <prvCheckTasksWaitingTermination+0x50>)
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	3304      	adds	r3, #4
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fe fb4d 	bl	800bc3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d5a2:	4b0d      	ldr	r3, [pc, #52]	; (800d5d8 <prvCheckTasksWaitingTermination+0x54>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	4a0b      	ldr	r2, [pc, #44]	; (800d5d8 <prvCheckTasksWaitingTermination+0x54>)
 800d5aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d5ac:	4b0b      	ldr	r3, [pc, #44]	; (800d5dc <prvCheckTasksWaitingTermination+0x58>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	4a0a      	ldr	r2, [pc, #40]	; (800d5dc <prvCheckTasksWaitingTermination+0x58>)
 800d5b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d5b6:	f7fe f9c5 	bl	800b944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 f810 	bl	800d5e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5c0:	4b06      	ldr	r3, [pc, #24]	; (800d5dc <prvCheckTasksWaitingTermination+0x58>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1e1      	bne.n	800d58c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d5c8:	bf00      	nop
 800d5ca:	bf00      	nop
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20008704 	.word	0x20008704
 800d5d8:	20008730 	.word	0x20008730
 800d5dc:	20008718 	.word	0x20008718

0800d5e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fd ff2f 	bl	800b450 <vPortFree>
			vPortFree( pxTCB );
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7fd ff2c 	bl	800b450 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d606:	4b0c      	ldr	r3, [pc, #48]	; (800d638 <prvResetNextTaskUnblockTime+0x38>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d104      	bne.n	800d61a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d610:	4b0a      	ldr	r3, [pc, #40]	; (800d63c <prvResetNextTaskUnblockTime+0x3c>)
 800d612:	f04f 32ff 	mov.w	r2, #4294967295
 800d616:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d618:	e008      	b.n	800d62c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d61a:	4b07      	ldr	r3, [pc, #28]	; (800d638 <prvResetNextTaskUnblockTime+0x38>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	4a04      	ldr	r2, [pc, #16]	; (800d63c <prvResetNextTaskUnblockTime+0x3c>)
 800d62a:	6013      	str	r3, [r2, #0]
}
 800d62c:	bf00      	nop
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	200086e8 	.word	0x200086e8
 800d63c:	20008750 	.word	0x20008750

0800d640 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d646:	4b05      	ldr	r3, [pc, #20]	; (800d65c <xTaskGetCurrentTaskHandle+0x1c>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d64c:	687b      	ldr	r3, [r7, #4]
	}
 800d64e:	4618      	mov	r0, r3
 800d650:	370c      	adds	r7, #12
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	200085cc 	.word	0x200085cc

0800d660 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d666:	4b0b      	ldr	r3, [pc, #44]	; (800d694 <xTaskGetSchedulerState+0x34>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d102      	bne.n	800d674 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d66e:	2301      	movs	r3, #1
 800d670:	607b      	str	r3, [r7, #4]
 800d672:	e008      	b.n	800d686 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d674:	4b08      	ldr	r3, [pc, #32]	; (800d698 <xTaskGetSchedulerState+0x38>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d102      	bne.n	800d682 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d67c:	2302      	movs	r3, #2
 800d67e:	607b      	str	r3, [r7, #4]
 800d680:	e001      	b.n	800d686 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d682:	2300      	movs	r3, #0
 800d684:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d686:	687b      	ldr	r3, [r7, #4]
	}
 800d688:	4618      	mov	r0, r3
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	2000873c 	.word	0x2000873c
 800d698:	20008758 	.word	0x20008758

0800d69c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d05e      	beq.n	800d770 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b6:	4b31      	ldr	r3, [pc, #196]	; (800d77c <xTaskPriorityInherit+0xe0>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d24e      	bcs.n	800d75e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	db06      	blt.n	800d6d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6c8:	4b2c      	ldr	r3, [pc, #176]	; (800d77c <xTaskPriorityInherit+0xe0>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ce:	f1c3 020c 	rsb	r2, r3, #12
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	6959      	ldr	r1, [r3, #20]
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6de:	4613      	mov	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4a26      	ldr	r2, [pc, #152]	; (800d780 <xTaskPriorityInherit+0xe4>)
 800d6e8:	4413      	add	r3, r2
 800d6ea:	4299      	cmp	r1, r3
 800d6ec:	d12f      	bne.n	800d74e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fe faa2 	bl	800bc3c <uxListRemove>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d10a      	bne.n	800d714 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d702:	2201      	movs	r2, #1
 800d704:	fa02 f303 	lsl.w	r3, r2, r3
 800d708:	43da      	mvns	r2, r3
 800d70a:	4b1e      	ldr	r3, [pc, #120]	; (800d784 <xTaskPriorityInherit+0xe8>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4013      	ands	r3, r2
 800d710:	4a1c      	ldr	r2, [pc, #112]	; (800d784 <xTaskPriorityInherit+0xe8>)
 800d712:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d714:	4b19      	ldr	r3, [pc, #100]	; (800d77c <xTaskPriorityInherit+0xe0>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d722:	2201      	movs	r2, #1
 800d724:	409a      	lsls	r2, r3
 800d726:	4b17      	ldr	r3, [pc, #92]	; (800d784 <xTaskPriorityInherit+0xe8>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4313      	orrs	r3, r2
 800d72c:	4a15      	ldr	r2, [pc, #84]	; (800d784 <xTaskPriorityInherit+0xe8>)
 800d72e:	6013      	str	r3, [r2, #0]
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d734:	4613      	mov	r3, r2
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	4413      	add	r3, r2
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	4a10      	ldr	r2, [pc, #64]	; (800d780 <xTaskPriorityInherit+0xe4>)
 800d73e:	441a      	add	r2, r3
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	3304      	adds	r3, #4
 800d744:	4619      	mov	r1, r3
 800d746:	4610      	mov	r0, r2
 800d748:	f7fe fa1b 	bl	800bb82 <vListInsertEnd>
 800d74c:	e004      	b.n	800d758 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d74e:	4b0b      	ldr	r3, [pc, #44]	; (800d77c <xTaskPriorityInherit+0xe0>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d758:	2301      	movs	r3, #1
 800d75a:	60fb      	str	r3, [r7, #12]
 800d75c:	e008      	b.n	800d770 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d762:	4b06      	ldr	r3, [pc, #24]	; (800d77c <xTaskPriorityInherit+0xe0>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d768:	429a      	cmp	r2, r3
 800d76a:	d201      	bcs.n	800d770 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d76c:	2301      	movs	r3, #1
 800d76e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d770:	68fb      	ldr	r3, [r7, #12]
	}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	200085cc 	.word	0x200085cc
 800d780:	200085d0 	.word	0x200085d0
 800d784:	20008738 	.word	0x20008738

0800d788 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b086      	sub	sp, #24
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d794:	2300      	movs	r3, #0
 800d796:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d06e      	beq.n	800d87c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d79e:	4b3a      	ldr	r3, [pc, #232]	; (800d888 <xTaskPriorityDisinherit+0x100>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	693a      	ldr	r2, [r7, #16]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d00a      	beq.n	800d7be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ac:	f383 8811 	msr	BASEPRI, r3
 800d7b0:	f3bf 8f6f 	isb	sy
 800d7b4:	f3bf 8f4f 	dsb	sy
 800d7b8:	60fb      	str	r3, [r7, #12]
}
 800d7ba:	bf00      	nop
 800d7bc:	e7fe      	b.n	800d7bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d10a      	bne.n	800d7dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ca:	f383 8811 	msr	BASEPRI, r3
 800d7ce:	f3bf 8f6f 	isb	sy
 800d7d2:	f3bf 8f4f 	dsb	sy
 800d7d6:	60bb      	str	r3, [r7, #8]
}
 800d7d8:	bf00      	nop
 800d7da:	e7fe      	b.n	800d7da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7e0:	1e5a      	subs	r2, r3, #1
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d044      	beq.n	800d87c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d140      	bne.n	800d87c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	3304      	adds	r3, #4
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7fe fa1c 	bl	800bc3c <uxListRemove>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d115      	bne.n	800d836 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d80e:	491f      	ldr	r1, [pc, #124]	; (800d88c <xTaskPriorityDisinherit+0x104>)
 800d810:	4613      	mov	r3, r2
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	4413      	add	r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	440b      	add	r3, r1
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10a      	bne.n	800d836 <xTaskPriorityDisinherit+0xae>
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d824:	2201      	movs	r2, #1
 800d826:	fa02 f303 	lsl.w	r3, r2, r3
 800d82a:	43da      	mvns	r2, r3
 800d82c:	4b18      	ldr	r3, [pc, #96]	; (800d890 <xTaskPriorityDisinherit+0x108>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4013      	ands	r3, r2
 800d832:	4a17      	ldr	r2, [pc, #92]	; (800d890 <xTaskPriorityDisinherit+0x108>)
 800d834:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d842:	f1c3 020c 	rsb	r2, r3, #12
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84e:	2201      	movs	r2, #1
 800d850:	409a      	lsls	r2, r3
 800d852:	4b0f      	ldr	r3, [pc, #60]	; (800d890 <xTaskPriorityDisinherit+0x108>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4313      	orrs	r3, r2
 800d858:	4a0d      	ldr	r2, [pc, #52]	; (800d890 <xTaskPriorityDisinherit+0x108>)
 800d85a:	6013      	str	r3, [r2, #0]
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d860:	4613      	mov	r3, r2
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	4413      	add	r3, r2
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	4a08      	ldr	r2, [pc, #32]	; (800d88c <xTaskPriorityDisinherit+0x104>)
 800d86a:	441a      	add	r2, r3
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	3304      	adds	r3, #4
 800d870:	4619      	mov	r1, r3
 800d872:	4610      	mov	r0, r2
 800d874:	f7fe f985 	bl	800bb82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d878:	2301      	movs	r3, #1
 800d87a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d87c:	697b      	ldr	r3, [r7, #20]
	}
 800d87e:	4618      	mov	r0, r3
 800d880:	3718      	adds	r7, #24
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	200085cc 	.word	0x200085cc
 800d88c:	200085d0 	.word	0x200085d0
 800d890:	20008738 	.word	0x20008738

0800d894 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d894:	b580      	push	{r7, lr}
 800d896:	b088      	sub	sp, #32
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d077      	beq.n	800d99c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10a      	bne.n	800d8ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	60fb      	str	r3, [r7, #12]
}
 800d8c6:	bf00      	nop
 800d8c8:	e7fe      	b.n	800d8c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d902      	bls.n	800d8da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	61fb      	str	r3, [r7, #28]
 800d8d8:	e002      	b.n	800d8e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e4:	69fa      	ldr	r2, [r7, #28]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d058      	beq.n	800d99c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ee:	697a      	ldr	r2, [r7, #20]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d153      	bne.n	800d99c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d8f4:	4b2b      	ldr	r3, [pc, #172]	; (800d9a4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	69ba      	ldr	r2, [r7, #24]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d10a      	bne.n	800d914 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	60bb      	str	r3, [r7, #8]
}
 800d910:	bf00      	nop
 800d912:	e7fe      	b.n	800d912 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d918:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	69fa      	ldr	r2, [r7, #28]
 800d91e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	699b      	ldr	r3, [r3, #24]
 800d924:	2b00      	cmp	r3, #0
 800d926:	db04      	blt.n	800d932 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	f1c3 020c 	rsb	r2, r3, #12
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	6959      	ldr	r1, [r3, #20]
 800d936:	693a      	ldr	r2, [r7, #16]
 800d938:	4613      	mov	r3, r2
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	4413      	add	r3, r2
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	4a19      	ldr	r2, [pc, #100]	; (800d9a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d942:	4413      	add	r3, r2
 800d944:	4299      	cmp	r1, r3
 800d946:	d129      	bne.n	800d99c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	3304      	adds	r3, #4
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fe f975 	bl	800bc3c <uxListRemove>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10a      	bne.n	800d96e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95c:	2201      	movs	r2, #1
 800d95e:	fa02 f303 	lsl.w	r3, r2, r3
 800d962:	43da      	mvns	r2, r3
 800d964:	4b11      	ldr	r3, [pc, #68]	; (800d9ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4013      	ands	r3, r2
 800d96a:	4a10      	ldr	r2, [pc, #64]	; (800d9ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d96c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d972:	2201      	movs	r2, #1
 800d974:	409a      	lsls	r2, r3
 800d976:	4b0d      	ldr	r3, [pc, #52]	; (800d9ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	4a0b      	ldr	r2, [pc, #44]	; (800d9ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d97e:	6013      	str	r3, [r2, #0]
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d984:	4613      	mov	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4413      	add	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4a06      	ldr	r2, [pc, #24]	; (800d9a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d98e:	441a      	add	r2, r3
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	3304      	adds	r3, #4
 800d994:	4619      	mov	r1, r3
 800d996:	4610      	mov	r0, r2
 800d998:	f7fe f8f3 	bl	800bb82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d99c:	bf00      	nop
 800d99e:	3720      	adds	r7, #32
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	200085cc 	.word	0x200085cc
 800d9a8:	200085d0 	.word	0x200085d0
 800d9ac:	20008738 	.word	0x20008738

0800d9b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d9b0:	b480      	push	{r7}
 800d9b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d9b4:	4b07      	ldr	r3, [pc, #28]	; (800d9d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d004      	beq.n	800d9c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d9bc:	4b05      	ldr	r3, [pc, #20]	; (800d9d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d9c2:	3201      	adds	r2, #1
 800d9c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d9c6:	4b03      	ldr	r3, [pc, #12]	; (800d9d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
	}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr
 800d9d4:	200085cc 	.word	0x200085cc

0800d9d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d9e2:	4b29      	ldr	r3, [pc, #164]	; (800da88 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9e8:	4b28      	ldr	r3, [pc, #160]	; (800da8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	3304      	adds	r3, #4
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fe f924 	bl	800bc3c <uxListRemove>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d10b      	bne.n	800da12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d9fa:	4b24      	ldr	r3, [pc, #144]	; (800da8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da00:	2201      	movs	r2, #1
 800da02:	fa02 f303 	lsl.w	r3, r2, r3
 800da06:	43da      	mvns	r2, r3
 800da08:	4b21      	ldr	r3, [pc, #132]	; (800da90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4013      	ands	r3, r2
 800da0e:	4a20      	ldr	r2, [pc, #128]	; (800da90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800da10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da18:	d10a      	bne.n	800da30 <prvAddCurrentTaskToDelayedList+0x58>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d007      	beq.n	800da30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da20:	4b1a      	ldr	r3, [pc, #104]	; (800da8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	3304      	adds	r3, #4
 800da26:	4619      	mov	r1, r3
 800da28:	481a      	ldr	r0, [pc, #104]	; (800da94 <prvAddCurrentTaskToDelayedList+0xbc>)
 800da2a:	f7fe f8aa 	bl	800bb82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800da2e:	e026      	b.n	800da7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4413      	add	r3, r2
 800da36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800da38:	4b14      	ldr	r3, [pc, #80]	; (800da8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	429a      	cmp	r2, r3
 800da46:	d209      	bcs.n	800da5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da48:	4b13      	ldr	r3, [pc, #76]	; (800da98 <prvAddCurrentTaskToDelayedList+0xc0>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	4b0f      	ldr	r3, [pc, #60]	; (800da8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	3304      	adds	r3, #4
 800da52:	4619      	mov	r1, r3
 800da54:	4610      	mov	r0, r2
 800da56:	f7fe f8b8 	bl	800bbca <vListInsert>
}
 800da5a:	e010      	b.n	800da7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da5c:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <prvAddCurrentTaskToDelayedList+0xc4>)
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	4b0a      	ldr	r3, [pc, #40]	; (800da8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	3304      	adds	r3, #4
 800da66:	4619      	mov	r1, r3
 800da68:	4610      	mov	r0, r2
 800da6a:	f7fe f8ae 	bl	800bbca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da6e:	4b0c      	ldr	r3, [pc, #48]	; (800daa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	68ba      	ldr	r2, [r7, #8]
 800da74:	429a      	cmp	r2, r3
 800da76:	d202      	bcs.n	800da7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800da78:	4a09      	ldr	r2, [pc, #36]	; (800daa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	6013      	str	r3, [r2, #0]
}
 800da7e:	bf00      	nop
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	20008734 	.word	0x20008734
 800da8c:	200085cc 	.word	0x200085cc
 800da90:	20008738 	.word	0x20008738
 800da94:	2000871c 	.word	0x2000871c
 800da98:	200086ec 	.word	0x200086ec
 800da9c:	200086e8 	.word	0x200086e8
 800daa0:	20008750 	.word	0x20008750

0800daa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800daaa:	2300      	movs	r3, #0
 800daac:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800daae:	f000 fb31 	bl	800e114 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dab2:	4b11      	ldr	r3, [pc, #68]	; (800daf8 <xTimerCreateTimerTask+0x54>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00a      	beq.n	800dad0 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800daba:	4b10      	ldr	r3, [pc, #64]	; (800dafc <xTimerCreateTimerTask+0x58>)
 800dabc:	9301      	str	r3, [sp, #4]
 800dabe:	2304      	movs	r3, #4
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	2300      	movs	r3, #0
 800dac4:	2280      	movs	r2, #128	; 0x80
 800dac6:	490e      	ldr	r1, [pc, #56]	; (800db00 <xTimerCreateTimerTask+0x5c>)
 800dac8:	480e      	ldr	r0, [pc, #56]	; (800db04 <xTimerCreateTimerTask+0x60>)
 800daca:	f7ff f81f 	bl	800cb0c <xTaskCreate>
 800dace:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d10a      	bne.n	800daec <xTimerCreateTimerTask+0x48>
	__asm volatile
 800dad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dada:	f383 8811 	msr	BASEPRI, r3
 800dade:	f3bf 8f6f 	isb	sy
 800dae2:	f3bf 8f4f 	dsb	sy
 800dae6:	603b      	str	r3, [r7, #0]
}
 800dae8:	bf00      	nop
 800daea:	e7fe      	b.n	800daea <xTimerCreateTimerTask+0x46>
	return xReturn;
 800daec:	687b      	ldr	r3, [r7, #4]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3708      	adds	r7, #8
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	2000878c 	.word	0x2000878c
 800dafc:	20008790 	.word	0x20008790
 800db00:	080254d4 	.word	0x080254d4
 800db04:	0800dcf5 	.word	0x0800dcf5

0800db08 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af02      	add	r7, sp, #8
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800db16:	202c      	movs	r0, #44	; 0x2c
 800db18:	f7fd fbce 	bl	800b2b8 <pvPortMalloc>
 800db1c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00d      	beq.n	800db40 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	2200      	movs	r2, #0
 800db28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	9301      	str	r3, [sp, #4]
 800db30:	6a3b      	ldr	r3, [r7, #32]
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	68b9      	ldr	r1, [r7, #8]
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f000 f805 	bl	800db4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800db40:	697b      	ldr	r3, [r7, #20]
	}
 800db42:	4618      	mov	r0, r3
 800db44:	3718      	adds	r7, #24
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b086      	sub	sp, #24
 800db4e:	af00      	add	r7, sp, #0
 800db50:	60f8      	str	r0, [r7, #12]
 800db52:	60b9      	str	r1, [r7, #8]
 800db54:	607a      	str	r2, [r7, #4]
 800db56:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10a      	bne.n	800db74 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800db5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	617b      	str	r3, [r7, #20]
}
 800db70:	bf00      	nop
 800db72:	e7fe      	b.n	800db72 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	2b00      	cmp	r3, #0
 800db78:	d01e      	beq.n	800dbb8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800db7a:	f000 facb 	bl	800e114 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800db7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	68ba      	ldr	r2, [r7, #8]
 800db88:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800db90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db92:	6a3a      	ldr	r2, [r7, #32]
 800db94:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800db96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db98:	3304      	adds	r3, #4
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fd ffe4 	bl	800bb68 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d008      	beq.n	800dbb8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbac:	f043 0304 	orr.w	r3, r3, #4
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800dbb8:	bf00      	nop
 800dbba:	3718      	adds	r7, #24
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b08a      	sub	sp, #40	; 0x28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
 800dbcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10a      	bne.n	800dbee <xTimerGenericCommand+0x2e>
	__asm volatile
 800dbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	623b      	str	r3, [r7, #32]
}
 800dbea:	bf00      	nop
 800dbec:	e7fe      	b.n	800dbec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dbee:	4b1a      	ldr	r3, [pc, #104]	; (800dc58 <xTimerGenericCommand+0x98>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d02a      	beq.n	800dc4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	2b05      	cmp	r3, #5
 800dc06:	dc18      	bgt.n	800dc3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc08:	f7ff fd2a 	bl	800d660 <xTaskGetSchedulerState>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d109      	bne.n	800dc26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc12:	4b11      	ldr	r3, [pc, #68]	; (800dc58 <xTimerGenericCommand+0x98>)
 800dc14:	6818      	ldr	r0, [r3, #0]
 800dc16:	f107 0114 	add.w	r1, r7, #20
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc1e:	f7fe f95d 	bl	800bedc <xQueueGenericSend>
 800dc22:	6278      	str	r0, [r7, #36]	; 0x24
 800dc24:	e012      	b.n	800dc4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc26:	4b0c      	ldr	r3, [pc, #48]	; (800dc58 <xTimerGenericCommand+0x98>)
 800dc28:	6818      	ldr	r0, [r3, #0]
 800dc2a:	f107 0114 	add.w	r1, r7, #20
 800dc2e:	2300      	movs	r3, #0
 800dc30:	2200      	movs	r2, #0
 800dc32:	f7fe f953 	bl	800bedc <xQueueGenericSend>
 800dc36:	6278      	str	r0, [r7, #36]	; 0x24
 800dc38:	e008      	b.n	800dc4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc3a:	4b07      	ldr	r3, [pc, #28]	; (800dc58 <xTimerGenericCommand+0x98>)
 800dc3c:	6818      	ldr	r0, [r3, #0]
 800dc3e:	f107 0114 	add.w	r1, r7, #20
 800dc42:	2300      	movs	r3, #0
 800dc44:	683a      	ldr	r2, [r7, #0]
 800dc46:	f7fe fa47 	bl	800c0d8 <xQueueGenericSendFromISR>
 800dc4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3728      	adds	r7, #40	; 0x28
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	2000878c 	.word	0x2000878c

0800dc5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b088      	sub	sp, #32
 800dc60:	af02      	add	r7, sp, #8
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc66:	4b22      	ldr	r3, [pc, #136]	; (800dcf0 <prvProcessExpiredTimer+0x94>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	3304      	adds	r3, #4
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fd ffe1 	bl	800bc3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc80:	f003 0304 	and.w	r3, r3, #4
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d022      	beq.n	800dcce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	699a      	ldr	r2, [r3, #24]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	18d1      	adds	r1, r2, r3
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	6978      	ldr	r0, [r7, #20]
 800dc96:	f000 f8d1 	bl	800de3c <prvInsertTimerInActiveList>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d01f      	beq.n	800dce0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dca0:	2300      	movs	r3, #0
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	2300      	movs	r3, #0
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	2100      	movs	r1, #0
 800dcaa:	6978      	ldr	r0, [r7, #20]
 800dcac:	f7ff ff88 	bl	800dbc0 <xTimerGenericCommand>
 800dcb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d113      	bne.n	800dce0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbc:	f383 8811 	msr	BASEPRI, r3
 800dcc0:	f3bf 8f6f 	isb	sy
 800dcc4:	f3bf 8f4f 	dsb	sy
 800dcc8:	60fb      	str	r3, [r7, #12]
}
 800dcca:	bf00      	nop
 800dccc:	e7fe      	b.n	800dccc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcd4:	f023 0301 	bic.w	r3, r3, #1
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	6a1b      	ldr	r3, [r3, #32]
 800dce4:	6978      	ldr	r0, [r7, #20]
 800dce6:	4798      	blx	r3
}
 800dce8:	bf00      	nop
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	20008784 	.word	0x20008784

0800dcf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dcfc:	f107 0308 	add.w	r3, r7, #8
 800dd00:	4618      	mov	r0, r3
 800dd02:	f000 f857 	bl	800ddb4 <prvGetNextExpireTime>
 800dd06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f000 f803 	bl	800dd18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd12:	f000 f8d5 	bl	800dec0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd16:	e7f1      	b.n	800dcfc <prvTimerTask+0x8>

0800dd18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd22:	f7ff f8b5 	bl	800ce90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd26:	f107 0308 	add.w	r3, r7, #8
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f000 f866 	bl	800ddfc <prvSampleTimeNow>
 800dd30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d130      	bne.n	800dd9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10a      	bne.n	800dd54 <prvProcessTimerOrBlockTask+0x3c>
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d806      	bhi.n	800dd54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd46:	f7ff f8b1 	bl	800ceac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd4a:	68f9      	ldr	r1, [r7, #12]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f7ff ff85 	bl	800dc5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dd52:	e024      	b.n	800dd9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d008      	beq.n	800dd6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dd5a:	4b13      	ldr	r3, [pc, #76]	; (800dda8 <prvProcessTimerOrBlockTask+0x90>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <prvProcessTimerOrBlockTask+0x50>
 800dd64:	2301      	movs	r3, #1
 800dd66:	e000      	b.n	800dd6a <prvProcessTimerOrBlockTask+0x52>
 800dd68:	2300      	movs	r3, #0
 800dd6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dd6c:	4b0f      	ldr	r3, [pc, #60]	; (800ddac <prvProcessTimerOrBlockTask+0x94>)
 800dd6e:	6818      	ldr	r0, [r3, #0]
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	4619      	mov	r1, r3
 800dd7a:	f7fe fe93 	bl	800caa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dd7e:	f7ff f895 	bl	800ceac <xTaskResumeAll>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10a      	bne.n	800dd9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dd88:	4b09      	ldr	r3, [pc, #36]	; (800ddb0 <prvProcessTimerOrBlockTask+0x98>)
 800dd8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd8e:	601a      	str	r2, [r3, #0]
 800dd90:	f3bf 8f4f 	dsb	sy
 800dd94:	f3bf 8f6f 	isb	sy
}
 800dd98:	e001      	b.n	800dd9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dd9a:	f7ff f887 	bl	800ceac <xTaskResumeAll>
}
 800dd9e:	bf00      	nop
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	20008788 	.word	0x20008788
 800ddac:	2000878c 	.word	0x2000878c
 800ddb0:	e000ed04 	.word	0xe000ed04

0800ddb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ddbc:	4b0e      	ldr	r3, [pc, #56]	; (800ddf8 <prvGetNextExpireTime+0x44>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d101      	bne.n	800ddca <prvGetNextExpireTime+0x16>
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	e000      	b.n	800ddcc <prvGetNextExpireTime+0x18>
 800ddca:	2200      	movs	r2, #0
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d105      	bne.n	800dde4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddd8:	4b07      	ldr	r3, [pc, #28]	; (800ddf8 <prvGetNextExpireTime+0x44>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	60fb      	str	r3, [r7, #12]
 800dde2:	e001      	b.n	800dde8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dde4:	2300      	movs	r3, #0
 800dde6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dde8:	68fb      	ldr	r3, [r7, #12]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	20008784 	.word	0x20008784

0800ddfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de04:	f7ff f8ee 	bl	800cfe4 <xTaskGetTickCount>
 800de08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de0a:	4b0b      	ldr	r3, [pc, #44]	; (800de38 <prvSampleTimeNow+0x3c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	68fa      	ldr	r2, [r7, #12]
 800de10:	429a      	cmp	r2, r3
 800de12:	d205      	bcs.n	800de20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de14:	f000 f91a 	bl	800e04c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2201      	movs	r2, #1
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	e002      	b.n	800de26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de26:	4a04      	ldr	r2, [pc, #16]	; (800de38 <prvSampleTimeNow+0x3c>)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de2c:	68fb      	ldr	r3, [r7, #12]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	20008794 	.word	0x20008794

0800de3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
 800de48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de4a:	2300      	movs	r3, #0
 800de4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d812      	bhi.n	800de88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	1ad2      	subs	r2, r2, r3
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d302      	bcc.n	800de76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800de70:	2301      	movs	r3, #1
 800de72:	617b      	str	r3, [r7, #20]
 800de74:	e01b      	b.n	800deae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800de76:	4b10      	ldr	r3, [pc, #64]	; (800deb8 <prvInsertTimerInActiveList+0x7c>)
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	3304      	adds	r3, #4
 800de7e:	4619      	mov	r1, r3
 800de80:	4610      	mov	r0, r2
 800de82:	f7fd fea2 	bl	800bbca <vListInsert>
 800de86:	e012      	b.n	800deae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d206      	bcs.n	800de9e <prvInsertTimerInActiveList+0x62>
 800de90:	68ba      	ldr	r2, [r7, #8]
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	429a      	cmp	r2, r3
 800de96:	d302      	bcc.n	800de9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800de98:	2301      	movs	r3, #1
 800de9a:	617b      	str	r3, [r7, #20]
 800de9c:	e007      	b.n	800deae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de9e:	4b07      	ldr	r3, [pc, #28]	; (800debc <prvInsertTimerInActiveList+0x80>)
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	3304      	adds	r3, #4
 800dea6:	4619      	mov	r1, r3
 800dea8:	4610      	mov	r0, r2
 800deaa:	f7fd fe8e 	bl	800bbca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800deae:	697b      	ldr	r3, [r7, #20]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3718      	adds	r7, #24
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	20008788 	.word	0x20008788
 800debc:	20008784 	.word	0x20008784

0800dec0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08c      	sub	sp, #48	; 0x30
 800dec4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dec6:	e0ae      	b.n	800e026 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	2b00      	cmp	r3, #0
 800decc:	f2c0 80ab 	blt.w	800e026 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ded4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded6:	695b      	ldr	r3, [r3, #20]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d004      	beq.n	800dee6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	3304      	adds	r3, #4
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fd feab 	bl	800bc3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dee6:	1d3b      	adds	r3, r7, #4
 800dee8:	4618      	mov	r0, r3
 800deea:	f7ff ff87 	bl	800ddfc <prvSampleTimeNow>
 800deee:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	2b09      	cmp	r3, #9
 800def4:	f200 8096 	bhi.w	800e024 <prvProcessReceivedCommands+0x164>
 800def8:	a201      	add	r2, pc, #4	; (adr r2, 800df00 <prvProcessReceivedCommands+0x40>)
 800defa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defe:	bf00      	nop
 800df00:	0800df29 	.word	0x0800df29
 800df04:	0800df29 	.word	0x0800df29
 800df08:	0800df29 	.word	0x0800df29
 800df0c:	0800df9d 	.word	0x0800df9d
 800df10:	0800dfb1 	.word	0x0800dfb1
 800df14:	0800dffb 	.word	0x0800dffb
 800df18:	0800df29 	.word	0x0800df29
 800df1c:	0800df29 	.word	0x0800df29
 800df20:	0800df9d 	.word	0x0800df9d
 800df24:	0800dfb1 	.word	0x0800dfb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df2e:	f043 0301 	orr.w	r3, r3, #1
 800df32:	b2da      	uxtb	r2, r3
 800df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3e:	699b      	ldr	r3, [r3, #24]
 800df40:	18d1      	adds	r1, r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6a3a      	ldr	r2, [r7, #32]
 800df46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df48:	f7ff ff78 	bl	800de3c <prvInsertTimerInActiveList>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d069      	beq.n	800e026 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df54:	6a1b      	ldr	r3, [r3, #32]
 800df56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df60:	f003 0304 	and.w	r3, r3, #4
 800df64:	2b00      	cmp	r3, #0
 800df66:	d05e      	beq.n	800e026 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6c:	699b      	ldr	r3, [r3, #24]
 800df6e:	441a      	add	r2, r3
 800df70:	2300      	movs	r3, #0
 800df72:	9300      	str	r3, [sp, #0]
 800df74:	2300      	movs	r3, #0
 800df76:	2100      	movs	r1, #0
 800df78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df7a:	f7ff fe21 	bl	800dbc0 <xTimerGenericCommand>
 800df7e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d14f      	bne.n	800e026 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800df86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8a:	f383 8811 	msr	BASEPRI, r3
 800df8e:	f3bf 8f6f 	isb	sy
 800df92:	f3bf 8f4f 	dsb	sy
 800df96:	61bb      	str	r3, [r7, #24]
}
 800df98:	bf00      	nop
 800df9a:	e7fe      	b.n	800df9a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfa2:	f023 0301 	bic.w	r3, r3, #1
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dfae:	e03a      	b.n	800e026 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfb6:	f043 0301 	orr.w	r3, r3, #1
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dfc2:	68fa      	ldr	r2, [r7, #12]
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	699b      	ldr	r3, [r3, #24]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d10a      	bne.n	800dfe6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800dfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	617b      	str	r3, [r7, #20]
}
 800dfe2:	bf00      	nop
 800dfe4:	e7fe      	b.n	800dfe4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe8:	699a      	ldr	r2, [r3, #24]
 800dfea:	6a3b      	ldr	r3, [r7, #32]
 800dfec:	18d1      	adds	r1, r2, r3
 800dfee:	6a3b      	ldr	r3, [r7, #32]
 800dff0:	6a3a      	ldr	r2, [r7, #32]
 800dff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dff4:	f7ff ff22 	bl	800de3c <prvInsertTimerInActiveList>
					break;
 800dff8:	e015      	b.n	800e026 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e000:	f003 0302 	and.w	r3, r3, #2
 800e004:	2b00      	cmp	r3, #0
 800e006:	d103      	bne.n	800e010 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800e008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e00a:	f7fd fa21 	bl	800b450 <vPortFree>
 800e00e:	e00a      	b.n	800e026 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e016:	f023 0301 	bic.w	r3, r3, #1
 800e01a:	b2da      	uxtb	r2, r3
 800e01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e022:	e000      	b.n	800e026 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800e024:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e026:	4b08      	ldr	r3, [pc, #32]	; (800e048 <prvProcessReceivedCommands+0x188>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f107 0108 	add.w	r1, r7, #8
 800e02e:	2200      	movs	r2, #0
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe f979 	bl	800c328 <xQueueReceive>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f47f af45 	bne.w	800dec8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e03e:	bf00      	nop
 800e040:	bf00      	nop
 800e042:	3728      	adds	r7, #40	; 0x28
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	2000878c 	.word	0x2000878c

0800e04c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b088      	sub	sp, #32
 800e050:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e052:	e048      	b.n	800e0e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e054:	4b2d      	ldr	r3, [pc, #180]	; (800e10c <prvSwitchTimerLists+0xc0>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e05e:	4b2b      	ldr	r3, [pc, #172]	; (800e10c <prvSwitchTimerLists+0xc0>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	3304      	adds	r3, #4
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7fd fde5 	bl	800bc3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6a1b      	ldr	r3, [r3, #32]
 800e076:	68f8      	ldr	r0, [r7, #12]
 800e078:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e080:	f003 0304 	and.w	r3, r3, #4
 800e084:	2b00      	cmp	r3, #0
 800e086:	d02e      	beq.n	800e0e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	693a      	ldr	r2, [r7, #16]
 800e08e:	4413      	add	r3, r2
 800e090:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	429a      	cmp	r2, r3
 800e098:	d90e      	bls.n	800e0b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	68ba      	ldr	r2, [r7, #8]
 800e09e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	68fa      	ldr	r2, [r7, #12]
 800e0a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e0a6:	4b19      	ldr	r3, [pc, #100]	; (800e10c <prvSwitchTimerLists+0xc0>)
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3304      	adds	r3, #4
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	4610      	mov	r0, r2
 800e0b2:	f7fd fd8a 	bl	800bbca <vListInsert>
 800e0b6:	e016      	b.n	800e0e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	9300      	str	r3, [sp, #0]
 800e0bc:	2300      	movs	r3, #0
 800e0be:	693a      	ldr	r2, [r7, #16]
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f7ff fd7c 	bl	800dbc0 <xTimerGenericCommand>
 800e0c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d10a      	bne.n	800e0e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d4:	f383 8811 	msr	BASEPRI, r3
 800e0d8:	f3bf 8f6f 	isb	sy
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	603b      	str	r3, [r7, #0]
}
 800e0e2:	bf00      	nop
 800e0e4:	e7fe      	b.n	800e0e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0e6:	4b09      	ldr	r3, [pc, #36]	; (800e10c <prvSwitchTimerLists+0xc0>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1b1      	bne.n	800e054 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e0f0:	4b06      	ldr	r3, [pc, #24]	; (800e10c <prvSwitchTimerLists+0xc0>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e0f6:	4b06      	ldr	r3, [pc, #24]	; (800e110 <prvSwitchTimerLists+0xc4>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4a04      	ldr	r2, [pc, #16]	; (800e10c <prvSwitchTimerLists+0xc0>)
 800e0fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e0fe:	4a04      	ldr	r2, [pc, #16]	; (800e110 <prvSwitchTimerLists+0xc4>)
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	6013      	str	r3, [r2, #0]
}
 800e104:	bf00      	nop
 800e106:	3718      	adds	r7, #24
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	20008784 	.word	0x20008784
 800e110:	20008788 	.word	0x20008788

0800e114 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e118:	f7fd fbe4 	bl	800b8e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e11c:	4b12      	ldr	r3, [pc, #72]	; (800e168 <prvCheckForValidListAndQueue+0x54>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d11d      	bne.n	800e160 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800e124:	4811      	ldr	r0, [pc, #68]	; (800e16c <prvCheckForValidListAndQueue+0x58>)
 800e126:	f7fd fcff 	bl	800bb28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e12a:	4811      	ldr	r0, [pc, #68]	; (800e170 <prvCheckForValidListAndQueue+0x5c>)
 800e12c:	f7fd fcfc 	bl	800bb28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e130:	4b10      	ldr	r3, [pc, #64]	; (800e174 <prvCheckForValidListAndQueue+0x60>)
 800e132:	4a0e      	ldr	r2, [pc, #56]	; (800e16c <prvCheckForValidListAndQueue+0x58>)
 800e134:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e136:	4b10      	ldr	r3, [pc, #64]	; (800e178 <prvCheckForValidListAndQueue+0x64>)
 800e138:	4a0d      	ldr	r2, [pc, #52]	; (800e170 <prvCheckForValidListAndQueue+0x5c>)
 800e13a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e13c:	2200      	movs	r2, #0
 800e13e:	210c      	movs	r1, #12
 800e140:	200a      	movs	r0, #10
 800e142:	f7fd fe0d 	bl	800bd60 <xQueueGenericCreate>
 800e146:	4603      	mov	r3, r0
 800e148:	4a07      	ldr	r2, [pc, #28]	; (800e168 <prvCheckForValidListAndQueue+0x54>)
 800e14a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e14c:	4b06      	ldr	r3, [pc, #24]	; (800e168 <prvCheckForValidListAndQueue+0x54>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d005      	beq.n	800e160 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e154:	4b04      	ldr	r3, [pc, #16]	; (800e168 <prvCheckForValidListAndQueue+0x54>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4908      	ldr	r1, [pc, #32]	; (800e17c <prvCheckForValidListAndQueue+0x68>)
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fe fc78 	bl	800ca50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e160:	f7fd fbf0 	bl	800b944 <vPortExitCritical>
}
 800e164:	bf00      	nop
 800e166:	bd80      	pop	{r7, pc}
 800e168:	2000878c 	.word	0x2000878c
 800e16c:	2000875c 	.word	0x2000875c
 800e170:	20008770 	.word	0x20008770
 800e174:	20008784 	.word	0x20008784
 800e178:	20008788 	.word	0x20008788
 800e17c:	080254dc 	.word	0x080254dc

0800e180 <GUI_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) 
{
 800e180:	b580      	push	{r7, lr}
 800e182:	af00      	add	r7, sp, #0
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 800e184:	f44f 3134 	mov.w	r1, #184320	; 0x2d000
 800e188:	4802      	ldr	r0, [pc, #8]	; (800e194 <GUI_X_Config+0x14>)
 800e18a:	f002 ff47 	bl	801101c <GUI_ALLOC_AssignMemory>
}
 800e18e:	bf00      	nop
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	20008798 	.word	0x20008798

0800e198 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af02      	add	r7, sp, #8
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d80d      	bhi.n	800e1c4 <DSI_IO_WriteCmd+0x2c>
  {
    HAL_DSI_ShortWrite(&hdsi_disco, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	2215      	movs	r2, #21
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	480a      	ldr	r0, [pc, #40]	; (800e1e8 <DSI_IO_WriteCmd+0x50>)
 800e1be:	f7f6 f95c 	bl	800447a <HAL_DSI_ShortWrite>
  }
  else
  {
    HAL_DSI_LongWrite(&hdsi_disco,  0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 800e1c2:	e00d      	b.n	800e1e0 <DSI_IO_WriteCmd+0x48>
    HAL_DSI_LongWrite(&hdsi_disco,  0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	9200      	str	r2, [sp, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2239      	movs	r2, #57	; 0x39
 800e1d8:	2100      	movs	r1, #0
 800e1da:	4803      	ldr	r0, [pc, #12]	; (800e1e8 <DSI_IO_WriteCmd+0x50>)
 800e1dc:	f7f6 f96f 	bl	80044be <HAL_DSI_LongWrite>
}
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	20035840 	.word	0x20035840

0800e1ec <LCD_LL_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on disco Rev B and beyond.
  */
static void LCD_LL_Reset(void)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b086      	sub	sp, #24
 800e1f0:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	603b      	str	r3, [r7, #0]
 800e1f6:	4b16      	ldr	r3, [pc, #88]	; (800e250 <LCD_LL_Reset+0x64>)
 800e1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1fa:	4a15      	ldr	r2, [pc, #84]	; (800e250 <LCD_LL_Reset+0x64>)
 800e1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e200:	6313      	str	r3, [r2, #48]	; 0x30
 800e202:	4b13      	ldr	r3, [pc, #76]	; (800e250 <LCD_LL_Reset+0x64>)
 800e204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e20a:	603b      	str	r3, [r7, #0]
 800e20c:	683b      	ldr	r3, [r7, #0]

  /* Configure the GPIO on PH7 */
  gpio_init_structure.Pin   = GPIO_PIN_7;
 800e20e:	2380      	movs	r3, #128	; 0x80
 800e210:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800e212:	2301      	movs	r3, #1
 800e214:	60bb      	str	r3, [r7, #8]
  /* GPIO_NOPULL is needed for new TechShine LCD(NT35510) used in STM32F469I_DISCO_REVC */
#if defined(USE_STM32469I_DISCO_REVC)
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800e216:	2300      	movs	r3, #0
 800e218:	60fb      	str	r3, [r7, #12]
#else
  gpio_init_structure.Pull  = GPIO_PULLUP;
#endif /* USE_STM32469I_DISCO_REVC */
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800e21a:	2303      	movs	r3, #3
 800e21c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800e21e:	1d3b      	adds	r3, r7, #4
 800e220:	4619      	mov	r1, r3
 800e222:	480c      	ldr	r0, [pc, #48]	; (800e254 <LCD_LL_Reset+0x68>)
 800e224:	f7f6 f9e4 	bl	80045f0 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800e228:	2200      	movs	r2, #0
 800e22a:	2180      	movs	r1, #128	; 0x80
 800e22c:	4809      	ldr	r0, [pc, #36]	; (800e254 <LCD_LL_Reset+0x68>)
 800e22e:	f7f6 fb8b 	bl	8004948 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 800e232:	2014      	movs	r0, #20
 800e234:	f7f4 ff5e 	bl	80030f4 <HAL_Delay>

  /* Deactivate XRES */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 800e238:	2201      	movs	r2, #1
 800e23a:	2180      	movs	r1, #128	; 0x80
 800e23c:	4805      	ldr	r0, [pc, #20]	; (800e254 <LCD_LL_Reset+0x68>)
 800e23e:	f7f6 fb83 	bl	8004948 <HAL_GPIO_WritePin>
  HAL_Delay(10); /* wait 10 ms */
 800e242:	200a      	movs	r0, #10
 800e244:	f7f4 ff56 	bl	80030f4 <HAL_Delay>
#endif  /* (USE_STM32469I_DISCO_REVA) */
}
 800e248:	bf00      	nop
 800e24a:	3718      	adds	r7, #24
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	40023800 	.word	0x40023800
 800e254:	40021c00 	.word	0x40021c00

0800e258 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
void BSP_LCD_MspInit(void)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800e25e:	2300      	movs	r3, #0
 800e260:	60fb      	str	r3, [r7, #12]
 800e262:	4b2c      	ldr	r3, [pc, #176]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e266:	4a2b      	ldr	r2, [pc, #172]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e268:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e26c:	6453      	str	r3, [r2, #68]	; 0x44
 800e26e:	4b29      	ldr	r3, [pc, #164]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e272:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e276:	60fb      	str	r3, [r7, #12]
 800e278:	68fb      	ldr	r3, [r7, #12]
  
  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 800e27a:	4b26      	ldr	r3, [pc, #152]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27e:	4a25      	ldr	r2, [pc, #148]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e280:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e284:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 800e286:	4b23      	ldr	r3, [pc, #140]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28a:	4a22      	ldr	r2, [pc, #136]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e28c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e290:	6253      	str	r3, [r2, #36]	; 0x24
  
  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800e292:	2300      	movs	r3, #0
 800e294:	60bb      	str	r3, [r7, #8]
 800e296:	4b1f      	ldr	r3, [pc, #124]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e29a:	4a1e      	ldr	r2, [pc, #120]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e29c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e2a0:	6313      	str	r3, [r2, #48]	; 0x30
 800e2a2:	4b1c      	ldr	r3, [pc, #112]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2aa:	60bb      	str	r3, [r7, #8]
 800e2ac:	68bb      	ldr	r3, [r7, #8]
  
  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 800e2ae:	4b19      	ldr	r3, [pc, #100]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2b0:	691b      	ldr	r3, [r3, #16]
 800e2b2:	4a18      	ldr	r2, [pc, #96]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e2b8:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 800e2ba:	4b16      	ldr	r3, [pc, #88]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	4a15      	ldr	r2, [pc, #84]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e2c4:	6113      	str	r3, [r2, #16]
  
  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	607b      	str	r3, [r7, #4]
 800e2ca:	4b12      	ldr	r3, [pc, #72]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ce:	4a11      	ldr	r2, [pc, #68]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e2d4:	6453      	str	r3, [r2, #68]	; 0x44
 800e2d6:	4b0f      	ldr	r3, [pc, #60]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e2de:	607b      	str	r3, [r7, #4]
 800e2e0:	687b      	ldr	r3, [r7, #4]
  
  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 800e2e2:	4b0c      	ldr	r3, [pc, #48]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e6:	4a0b      	ldr	r2, [pc, #44]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e2ec:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800e2ee:	4b09      	ldr	r3, [pc, #36]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f2:	4a08      	ldr	r2, [pc, #32]	; (800e314 <BSP_LCD_MspInit+0xbc>)
 800e2f4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800e2f8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 0xF, 0);
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	210f      	movs	r1, #15
 800e2fe:	205c      	movs	r0, #92	; 0x5c
 800e300:	f7f4 ffd4 	bl	80032ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800e304:	205c      	movs	r0, #92	; 0x5c
 800e306:	f7f4 ffed 	bl	80032e4 <HAL_NVIC_EnableIRQ>
}
 800e30a:	bf00      	nop
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	40023800 	.word	0x40023800

0800e318 <LTDC_Init>:
  * @brief  Initialize the LTDC
  * @param  None
  * @retval None
  */
static void LTDC_Init(void)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	af00      	add	r7, sp, #0
  /* DeInit */
  hltdc_disco.Instance = LTDC;
 800e31c:	4b1f      	ldr	r3, [pc, #124]	; (800e39c <LTDC_Init+0x84>)
 800e31e:	4a20      	ldr	r2, [pc, #128]	; (800e3a0 <LTDC_Init+0x88>)
 800e320:	601a      	str	r2, [r3, #0]
  HAL_LTDC_DeInit(&hltdc_disco);
 800e322:	481e      	ldr	r0, [pc, #120]	; (800e39c <LTDC_Init+0x84>)
 800e324:	f7f9 fa16 	bl	8007754 <HAL_LTDC_DeInit>

  /* LTDC Config */
  /* Timing and polarity */
  hltdc_disco.Init.HorizontalSync = HSYNC;
 800e328:	4b1c      	ldr	r3, [pc, #112]	; (800e39c <LTDC_Init+0x84>)
 800e32a:	2201      	movs	r2, #1
 800e32c:	615a      	str	r2, [r3, #20]
  hltdc_disco.Init.VerticalSync = VSYNC;
 800e32e:	4b1b      	ldr	r3, [pc, #108]	; (800e39c <LTDC_Init+0x84>)
 800e330:	2201      	movs	r2, #1
 800e332:	619a      	str	r2, [r3, #24]
  hltdc_disco.Init.AccumulatedHBP = HSYNC+HBP;
 800e334:	4b19      	ldr	r3, [pc, #100]	; (800e39c <LTDC_Init+0x84>)
 800e336:	2202      	movs	r2, #2
 800e338:	61da      	str	r2, [r3, #28]
  hltdc_disco.Init.AccumulatedVBP = VSYNC+VBP;
 800e33a:	4b18      	ldr	r3, [pc, #96]	; (800e39c <LTDC_Init+0x84>)
 800e33c:	2202      	movs	r2, #2
 800e33e:	621a      	str	r2, [r3, #32]
  hltdc_disco.Init.AccumulatedActiveH = VSYNC+VBP+VACT;
 800e340:	4b16      	ldr	r3, [pc, #88]	; (800e39c <LTDC_Init+0x84>)
 800e342:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e346:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc_disco.Init.AccumulatedActiveW = HSYNC+HBP+HACT;
 800e348:	4b14      	ldr	r3, [pc, #80]	; (800e39c <LTDC_Init+0x84>)
 800e34a:	22ca      	movs	r2, #202	; 0xca
 800e34c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc_disco.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 800e34e:	4b13      	ldr	r3, [pc, #76]	; (800e39c <LTDC_Init+0x84>)
 800e350:	f240 12e3 	movw	r2, #483	; 0x1e3
 800e354:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc_disco.Init.TotalWidth = HSYNC+HBP+HACT+HFP;
 800e356:	4b11      	ldr	r3, [pc, #68]	; (800e39c <LTDC_Init+0x84>)
 800e358:	22cb      	movs	r2, #203	; 0xcb
 800e35a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* background value */
  hltdc_disco.Init.Backcolor.Blue = 0;
 800e35c:	4b0f      	ldr	r3, [pc, #60]	; (800e39c <LTDC_Init+0x84>)
 800e35e:	2200      	movs	r2, #0
 800e360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_disco.Init.Backcolor.Green = 0;
 800e364:	4b0d      	ldr	r3, [pc, #52]	; (800e39c <LTDC_Init+0x84>)
 800e366:	2200      	movs	r2, #0
 800e368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_disco.Init.Backcolor.Red = 0;
 800e36c:	4b0b      	ldr	r3, [pc, #44]	; (800e39c <LTDC_Init+0x84>)
 800e36e:	2200      	movs	r2, #0
 800e370:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Polarity */
  hltdc_disco.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800e374:	4b09      	ldr	r3, [pc, #36]	; (800e39c <LTDC_Init+0x84>)
 800e376:	2200      	movs	r2, #0
 800e378:	605a      	str	r2, [r3, #4]
  hltdc_disco.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800e37a:	4b08      	ldr	r3, [pc, #32]	; (800e39c <LTDC_Init+0x84>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	609a      	str	r2, [r3, #8]
  hltdc_disco.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800e380:	4b06      	ldr	r3, [pc, #24]	; (800e39c <LTDC_Init+0x84>)
 800e382:	2200      	movs	r2, #0
 800e384:	60da      	str	r2, [r3, #12]
  hltdc_disco.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800e386:	4b05      	ldr	r3, [pc, #20]	; (800e39c <LTDC_Init+0x84>)
 800e388:	2200      	movs	r2, #0
 800e38a:	611a      	str	r2, [r3, #16]
  hltdc_disco.Instance = LTDC;
 800e38c:	4b03      	ldr	r3, [pc, #12]	; (800e39c <LTDC_Init+0x84>)
 800e38e:	4a04      	ldr	r2, [pc, #16]	; (800e3a0 <LTDC_Init+0x88>)
 800e390:	601a      	str	r2, [r3, #0]

  HAL_LTDC_Init(&hltdc_disco);
 800e392:	4802      	ldr	r0, [pc, #8]	; (800e39c <LTDC_Init+0x84>)
 800e394:	f7f9 f90e 	bl	80075b4 <HAL_LTDC_Init>
}
 800e398:	bf00      	nop
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	20035798 	.word	0x20035798
 800e3a0:	40016800 	.word	0x40016800

0800e3a4 <LCD_LL_Init>:
  * @brief  Initialize the LCD Controller.
  * @param  None
  * @retval None
  */
static void LCD_LL_Init(void) 
{   
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b098      	sub	sp, #96	; 0x60
 800e3a8:	af02      	add	r7, sp, #8
  static DSI_LPCmdTypeDef          LPCmd;
  static DSI_PLLInitTypeDef        PLLInit;

  /* Toggle Hardware Reset of the DSI LCD using
   * its XRES signal (active low) */
  LCD_LL_Reset();
 800e3aa:	f7ff ff1f 	bl	800e1ec <LCD_LL_Reset>
   * This will set IP blocks LTDC, DSI and DMA2D
   * - out of reset
   * - clocked
   * - NVIC IRQ related to IP blocks enabled
   */
  BSP_LCD_MspInit();
 800e3ae:	f7ff ff53 	bl	800e258 <BSP_LCD_MspInit>
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 5 = 76.8 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 76.8 MHz / 2 = 38.4 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800e3b2:	2308      	movs	r3, #8
 800e3b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800e3b6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800e3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800e3bc:	2305      	movs	r3, #5
 800e3be:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800e3c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e3c4:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800e3c6:	f107 031c 	add.w	r3, r7, #28
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fb f95c 	bl	8009688 <HAL_RCCEx_PeriphCLKConfig>

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_disco.Instance = DSI;
 800e3d0:	4b77      	ldr	r3, [pc, #476]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e3d2:	4a78      	ldr	r2, [pc, #480]	; (800e5b4 <LCD_LL_Init+0x210>)
 800e3d4:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_disco));
 800e3d6:	4876      	ldr	r0, [pc, #472]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e3d8:	f7f5 fcd0 	bl	8003d7c <HAL_DSI_DeInit>

  PLLInit.PLLNDIV  = 125;
 800e3dc:	4b76      	ldr	r3, [pc, #472]	; (800e5b8 <LCD_LL_Init+0x214>)
 800e3de:	227d      	movs	r2, #125	; 0x7d
 800e3e0:	601a      	str	r2, [r3, #0]
  PLLInit.PLLIDF   = DSI_PLL_IN_DIV2;
 800e3e2:	4b75      	ldr	r3, [pc, #468]	; (800e5b8 <LCD_LL_Init+0x214>)
 800e3e4:	2202      	movs	r2, #2
 800e3e6:	605a      	str	r2, [r3, #4]
  PLLInit.PLLODF   = DSI_PLL_OUT_DIV1;
 800e3e8:	4b73      	ldr	r3, [pc, #460]	; (800e5b8 <LCD_LL_Init+0x214>)
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	609a      	str	r2, [r3, #8]

  hdsi_disco.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800e3ee:	4b70      	ldr	r3, [pc, #448]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	60da      	str	r2, [r3, #12]
  hdsi_disco.Init.TXEscapeCkdiv = 0x4;
 800e3f4:	4b6e      	ldr	r3, [pc, #440]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e3f6:	2204      	movs	r2, #4
 800e3f8:	609a      	str	r2, [r3, #8]
  HAL_DSI_Init(&(hdsi_disco), &(PLLInit));
 800e3fa:	496f      	ldr	r1, [pc, #444]	; (800e5b8 <LCD_LL_Init+0x214>)
 800e3fc:	486c      	ldr	r0, [pc, #432]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e3fe:	f7f5 fba1 	bl	8003b44 <HAL_DSI_Init>

  /* Configure the DSI for Command mode */
  CmdCfg.VirtualChannelID      = 0;
 800e402:	4b6e      	ldr	r3, [pc, #440]	; (800e5bc <LCD_LL_Init+0x218>)
 800e404:	2200      	movs	r2, #0
 800e406:	601a      	str	r2, [r3, #0]
  CmdCfg.HSPolarity            = DSI_HSYNC_ACTIVE_HIGH;
 800e408:	4b6c      	ldr	r3, [pc, #432]	; (800e5bc <LCD_LL_Init+0x218>)
 800e40a:	2200      	movs	r2, #0
 800e40c:	615a      	str	r2, [r3, #20]
  CmdCfg.VSPolarity            = DSI_VSYNC_ACTIVE_HIGH;
 800e40e:	4b6b      	ldr	r3, [pc, #428]	; (800e5bc <LCD_LL_Init+0x218>)
 800e410:	2200      	movs	r2, #0
 800e412:	619a      	str	r2, [r3, #24]
  CmdCfg.DEPolarity            = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800e414:	4b69      	ldr	r3, [pc, #420]	; (800e5bc <LCD_LL_Init+0x218>)
 800e416:	2200      	movs	r2, #0
 800e418:	61da      	str	r2, [r3, #28]
  CmdCfg.ColorCoding           = DSI_RGB565;
 800e41a:	4b68      	ldr	r3, [pc, #416]	; (800e5bc <LCD_LL_Init+0x218>)
 800e41c:	2200      	movs	r2, #0
 800e41e:	605a      	str	r2, [r3, #4]
  CmdCfg.CommandSize           = HACT;
 800e420:	4b66      	ldr	r3, [pc, #408]	; (800e5bc <LCD_LL_Init+0x218>)
 800e422:	22c8      	movs	r2, #200	; 0xc8
 800e424:	609a      	str	r2, [r3, #8]
  CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 800e426:	4b65      	ldr	r3, [pc, #404]	; (800e5bc <LCD_LL_Init+0x218>)
 800e428:	2210      	movs	r2, #16
 800e42a:	60da      	str	r2, [r3, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800e42c:	4b63      	ldr	r3, [pc, #396]	; (800e5bc <LCD_LL_Init+0x218>)
 800e42e:	2200      	movs	r2, #0
 800e430:	611a      	str	r2, [r3, #16]
  CmdCfg.VSyncPol              = DSI_VSYNC_FALLING;
 800e432:	4b62      	ldr	r3, [pc, #392]	; (800e5bc <LCD_LL_Init+0x218>)
 800e434:	2200      	movs	r2, #0
 800e436:	621a      	str	r2, [r3, #32]
  CmdCfg.AutomaticRefresh      = DSI_AR_DISABLE;
 800e438:	4b60      	ldr	r3, [pc, #384]	; (800e5bc <LCD_LL_Init+0x218>)
 800e43a:	2200      	movs	r2, #0
 800e43c:	625a      	str	r2, [r3, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest  = DSI_TE_ACKNOWLEDGE_ENABLE;
 800e43e:	4b5f      	ldr	r3, [pc, #380]	; (800e5bc <LCD_LL_Init+0x218>)
 800e440:	2201      	movs	r2, #1
 800e442:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi_disco, &CmdCfg);
 800e444:	495d      	ldr	r1, [pc, #372]	; (800e5bc <LCD_LL_Init+0x218>)
 800e446:	485a      	ldr	r0, [pc, #360]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e448:	f7f5 fdf3 	bl	8004032 <HAL_DSI_ConfigAdaptedCommandMode>

  LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_ENABLE;
 800e44c:	4b5c      	ldr	r3, [pc, #368]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e44e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e452:	601a      	str	r2, [r3, #0]
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_ENABLE;
 800e454:	4b5a      	ldr	r3, [pc, #360]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e45a:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_ENABLE;
 800e45c:	4b58      	ldr	r3, [pc, #352]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e45e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e462:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_ENABLE;
 800e464:	4b56      	ldr	r3, [pc, #344]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e46a:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_ENABLE;
 800e46c:	4b54      	ldr	r3, [pc, #336]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e46e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e472:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_ENABLE;
 800e474:	4b52      	ldr	r3, [pc, #328]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e476:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e47a:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_ENABLE;
 800e47c:	4b50      	ldr	r3, [pc, #320]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e47e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e482:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_ENABLE;
 800e484:	4b4e      	ldr	r3, [pc, #312]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e486:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e48a:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_ENABLE;
 800e48c:	4b4c      	ldr	r3, [pc, #304]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e48e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e492:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_ENABLE;
 800e494:	4b4a      	ldr	r3, [pc, #296]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e496:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e49a:	625a      	str	r2, [r3, #36]	; 0x24
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_ENABLE;
 800e49c:	4b48      	ldr	r3, [pc, #288]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e49e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e4a2:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigCommand(&hdsi_disco, &LPCmd);
 800e4a4:	4946      	ldr	r1, [pc, #280]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e4a6:	4842      	ldr	r0, [pc, #264]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e4a8:	f7f5 fe9a 	bl	80041e0 <HAL_DSI_ConfigCommand>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 800e4ac:	4b45      	ldr	r3, [pc, #276]	; (800e5c4 <LCD_LL_Init+0x220>)
 800e4ae:	2223      	movs	r2, #35	; 0x23
 800e4b0:	601a      	str	r2, [r3, #0]
  PhyTimings.ClockLaneLP2HSTime = 35;
 800e4b2:	4b44      	ldr	r3, [pc, #272]	; (800e5c4 <LCD_LL_Init+0x220>)
 800e4b4:	2223      	movs	r2, #35	; 0x23
 800e4b6:	605a      	str	r2, [r3, #4]
  PhyTimings.DataLaneHS2LPTime = 35;
 800e4b8:	4b42      	ldr	r3, [pc, #264]	; (800e5c4 <LCD_LL_Init+0x220>)
 800e4ba:	2223      	movs	r2, #35	; 0x23
 800e4bc:	609a      	str	r2, [r3, #8]
  PhyTimings.DataLaneLP2HSTime = 35;
 800e4be:	4b41      	ldr	r3, [pc, #260]	; (800e5c4 <LCD_LL_Init+0x220>)
 800e4c0:	2223      	movs	r2, #35	; 0x23
 800e4c2:	60da      	str	r2, [r3, #12]
  PhyTimings.DataLaneMaxReadTime = 0;
 800e4c4:	4b3f      	ldr	r3, [pc, #252]	; (800e5c4 <LCD_LL_Init+0x220>)
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	611a      	str	r2, [r3, #16]
  PhyTimings.StopWaitTime = 10;
 800e4ca:	4b3e      	ldr	r3, [pc, #248]	; (800e5c4 <LCD_LL_Init+0x220>)
 800e4cc:	220a      	movs	r2, #10
 800e4ce:	615a      	str	r2, [r3, #20]
  HAL_DSI_ConfigPhyTimer(&hdsi_disco, &PhyTimings);
 800e4d0:	493c      	ldr	r1, [pc, #240]	; (800e5c4 <LCD_LL_Init+0x220>)
 800e4d2:	4837      	ldr	r0, [pc, #220]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e4d4:	f7f5 ff0a 	bl	80042ec <HAL_DSI_ConfigPhyTimer>

  /* Initialize LTDC */
  LTDC_Init();
 800e4d8:	f7ff ff1e 	bl	800e318 <LTDC_Init>

  /* Start DSI */
  HAL_DSI_Start(&(hdsi_disco));
 800e4dc:	4834      	ldr	r0, [pc, #208]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e4de:	f7f5 ff6f 	bl	80043c0 <HAL_DSI_Start>
  /* Initialize the NT35510 LCD Display IC Driver (TechShine LCD IC Driver)
   *  depending on configuration set in 'hdsivideo_handle'.
   */

  /* Send Display off DCS Command to display */
  HAL_DSI_ShortWrite(&(hdsi_disco),
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	2328      	movs	r3, #40	; 0x28
 800e4e8:	2215      	movs	r2, #21
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	4830      	ldr	r0, [pc, #192]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e4ee:	f7f5 ffc4 	bl	800447a <HAL_DSI_ShortWrite>
                     0,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     NT35510_CMD_DISPOFF,
                     0x00);

  NT35510_Init(NT35510_FORMAT_RBG565, NT35510_ORIENTATION_LANDSCAPE);
 800e4f2:	2101      	movs	r1, #1
 800e4f4:	2002      	movs	r0, #2
 800e4f6:	f7f3 fc45 	bl	8001d84 <NT35510_Init>
                     0x00);

  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
#endif

  LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_DISABLE;
 800e4fa:	4b31      	ldr	r3, [pc, #196]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	601a      	str	r2, [r3, #0]
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 800e500:	4b2f      	ldr	r3, [pc, #188]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e502:	2200      	movs	r2, #0
 800e504:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_DISABLE;
 800e506:	4b2e      	ldr	r3, [pc, #184]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e508:	2200      	movs	r2, #0
 800e50a:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 800e50c:	4b2c      	ldr	r3, [pc, #176]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e50e:	2200      	movs	r2, #0
 800e510:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_DISABLE;
 800e512:	4b2b      	ldr	r3, [pc, #172]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e514:	2200      	movs	r2, #0
 800e516:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 800e518:	4b29      	ldr	r3, [pc, #164]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e51a:	2200      	movs	r2, #0
 800e51c:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_DISABLE;
 800e51e:	4b28      	ldr	r3, [pc, #160]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e520:	2200      	movs	r2, #0
 800e522:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 800e524:	4b26      	ldr	r3, [pc, #152]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e526:	2200      	movs	r2, #0
 800e528:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_DISABLE;
 800e52a:	4b25      	ldr	r3, [pc, #148]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e52c:	2200      	movs	r2, #0
 800e52e:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 800e530:	4b23      	ldr	r3, [pc, #140]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e532:	2200      	movs	r2, #0
 800e534:	625a      	str	r2, [r3, #36]	; 0x24
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 800e536:	4b22      	ldr	r3, [pc, #136]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e538:	2200      	movs	r2, #0
 800e53a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigCommand(&hdsi_disco, &LPCmd);
 800e53c:	4920      	ldr	r1, [pc, #128]	; (800e5c0 <LCD_LL_Init+0x21c>)
 800e53e:	481c      	ldr	r0, [pc, #112]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e540:	f7f5 fe4e 	bl	80041e0 <HAL_DSI_ConfigCommand>

  HAL_DSI_ConfigFlowControl(&hdsi_disco, DSI_FLOW_CONTROL_BTA);
 800e544:	2104      	movs	r1, #4
 800e546:	481a      	ldr	r0, [pc, #104]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e548:	f7f5 fea8 	bl	800429c <HAL_DSI_ConfigFlowControl>

  /* Enable GPIOJ clock */
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800e54c:	2300      	movs	r3, #0
 800e54e:	607b      	str	r3, [r7, #4]
 800e550:	4b1d      	ldr	r3, [pc, #116]	; (800e5c8 <LCD_LL_Init+0x224>)
 800e552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e554:	4a1c      	ldr	r2, [pc, #112]	; (800e5c8 <LCD_LL_Init+0x224>)
 800e556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e55a:	6313      	str	r3, [r2, #48]	; 0x30
 800e55c:	4b1a      	ldr	r3, [pc, #104]	; (800e5c8 <LCD_LL_Init+0x224>)
 800e55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e564:	607b      	str	r3, [r7, #4]
 800e566:	687b      	ldr	r3, [r7, #4]

  /* Configure DSI_TE pin from MB1166 : Tearing effect on separated GPIO from KoD LCD */
  /* that is mapped on GPIOJ2 as alternate DSI function (DSI_TE)                      */
  /* This pin is used only when the LCD and DSI link is configured in command mode    */
  /* Not used in DSI Video mode.                                                      */
  GPIO_Init_Structure.Pin       = GPIO_PIN_2;
 800e568:	2304      	movs	r3, #4
 800e56a:	60bb      	str	r3, [r7, #8]
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800e56c:	2302      	movs	r3, #2
 800e56e:	60fb      	str	r3, [r7, #12]
  GPIO_Init_Structure.Pull      = GPIO_NOPULL;
 800e570:	2300      	movs	r3, #0
 800e572:	613b      	str	r3, [r7, #16]
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 800e574:	2303      	movs	r3, #3
 800e576:	617b      	str	r3, [r7, #20]
  GPIO_Init_Structure.Alternate = GPIO_AF13_DSI;
 800e578:	230d      	movs	r3, #13
 800e57a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 800e57c:	f107 0308 	add.w	r3, r7, #8
 800e580:	4619      	mov	r1, r3
 800e582:	4812      	ldr	r0, [pc, #72]	; (800e5cc <LCD_LL_Init+0x228>)
 800e584:	f7f6 f834 	bl	80045f0 <HAL_GPIO_Init>

  DMA2D_FillBuffer(0, (U32 *)LCD_LAYER0_FRAME_BUFFER, XSIZE_PHYS,YSIZE_PHYS, 0, 0x00);
 800e588:	2300      	movs	r3, #0
 800e58a:	9301      	str	r3, [sp, #4]
 800e58c:	2300      	movs	r3, #0
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800e594:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e598:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e59c:	2000      	movs	r0, #0
 800e59e:	f000 f8e3 	bl	800e768 <DMA2D_FillBuffer>

  /* Refresh the display */
  HAL_DSI_Refresh(&hdsi_disco);
 800e5a2:	4803      	ldr	r0, [pc, #12]	; (800e5b0 <LCD_LL_Init+0x20c>)
 800e5a4:	f7f5 ff48 	bl	8004438 <HAL_DSI_Refresh>
}
 800e5a8:	bf00      	nop
 800e5aa:	3758      	adds	r7, #88	; 0x58
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	20035840 	.word	0x20035840
 800e5b4:	40016c00 	.word	0x40016c00
 800e5b8:	20035898 	.word	0x20035898
 800e5bc:	200358a4 	.word	0x200358a4
 800e5c0:	200358d0 	.word	0x200358d0
 800e5c4:	20035904 	.word	0x20035904
 800e5c8:	40023800 	.word	0x40023800
 800e5cc:	40022400 	.word	0x40022400

0800e5d0 <LCD_LL_LayerInit>:
  * @brief  Initialize the LCD layers.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_LayerInit(U32 LayerIndex, U32 address) 
{   
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b090      	sub	sp, #64	; 0x40
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  LTDC_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = HACT;
 800e5de:	23c8      	movs	r3, #200	; 0xc8
 800e5e0:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = YSIZE_PHYS; 
 800e5e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800e5ea:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = GetPixelformat(LayerIndex);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 f829 	bl	800e644 <GetPixelformat>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = address;
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800e5fa:	23ff      	movs	r3, #255	; 0xff
 800e5fc:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800e602:	2300      	movs	r3, #0
 800e604:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800e608:	2300      	movs	r3, #0
 800e60a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800e60e:	2300      	movs	r3, #0
 800e610:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800e614:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e618:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800e61a:	2307      	movs	r3, #7
 800e61c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = HACT;
 800e61e:	23c8      	movs	r3, #200	; 0xc8
 800e620:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = YSIZE_PHYS;
 800e622:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800e626:	63bb      	str	r3, [r7, #56]	; 0x38

  HAL_LTDC_ConfigLayer(&hltdc_disco, &Layercfg, LayerIndex); 
 800e628:	f107 030c 	add.w	r3, r7, #12
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	4619      	mov	r1, r3
 800e630:	4803      	ldr	r0, [pc, #12]	; (800e640 <LCD_LL_LayerInit+0x70>)
 800e632:	f7f9 f9bc 	bl	80079ae <HAL_LTDC_ConfigLayer>
}
 800e636:	bf00      	nop
 800e638:	3740      	adds	r7, #64	; 0x40
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	20035798 	.word	0x20035798

0800e644 <GetPixelformat>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static U32 GetPixelformat(U32 LayerIndex)
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  if (LayerIndex == 0)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d101      	bne.n	800e656 <GetPixelformat+0x12>
  {
    return LTDC_PIXEL_FORMAT_RGB565;
 800e652:	2302      	movs	r3, #2
 800e654:	e000      	b.n	800e658 <GetPixelformat+0x14>
  } 
  else
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 800e656:	2303      	movs	r3, #3
  } 
}
 800e658:	4618      	mov	r0, r3
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr

0800e664 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
 800e670:	603b      	str	r3, [r7, #0]
  U32 PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f7ff ffe6 	bl	800e644 <GetPixelformat>
 800e678:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 800e67a:	4b16      	ldr	r3, [pc, #88]	; (800e6d4 <DMA2D_CopyBuffer+0x70>)
 800e67c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e680:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 800e682:	4a14      	ldr	r2, [pc, #80]	; (800e6d4 <DMA2D_CopyBuffer+0x70>)
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 800e688:	4a12      	ldr	r2, [pc, #72]	; (800e6d4 <DMA2D_CopyBuffer+0x70>)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 800e68e:	4a11      	ldr	r2, [pc, #68]	; (800e6d4 <DMA2D_CopyBuffer+0x70>)
 800e690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e692:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 800e694:	4a0f      	ldr	r2, [pc, #60]	; (800e6d4 <DMA2D_CopyBuffer+0x70>)
 800e696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e698:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 800e69a:	4a0e      	ldr	r2, [pc, #56]	; (800e6d4 <DMA2D_CopyBuffer+0x70>)
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	61d3      	str	r3, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	041b      	lsls	r3, r3, #16
 800e6a4:	6a3a      	ldr	r2, [r7, #32]
 800e6a6:	b292      	uxth	r2, r2
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	4a0a      	ldr	r2, [pc, #40]	; (800e6d4 <DMA2D_CopyBuffer+0x70>)
 800e6ac:	430b      	orrs	r3, r1
 800e6ae:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 800e6b0:	4b08      	ldr	r3, [pc, #32]	; (800e6d4 <DMA2D_CopyBuffer+0x70>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a07      	ldr	r2, [pc, #28]	; (800e6d4 <DMA2D_CopyBuffer+0x70>)
 800e6b6:	f043 0301 	orr.w	r3, r3, #1
 800e6ba:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 800e6bc:	bf00      	nop
 800e6be:	4b05      	ldr	r3, [pc, #20]	; (800e6d4 <DMA2D_CopyBuffer+0x70>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f003 0301 	and.w	r3, r3, #1
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1f9      	bne.n	800e6be <DMA2D_CopyBuffer+0x5a>
  {
  }
}
 800e6ca:	bf00      	nop
 800e6cc:	bf00      	nop
 800e6ce:	3718      	adds	r7, #24
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	4002b000 	.word	0x4002b000

0800e6d8 <DMA2D_CopyBufferWithAlpha>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBufferWithAlpha(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	607a      	str	r2, [r7, #4]
 800e6e4:	603b      	str	r3, [r7, #0]
  uint32_t PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f7ff ffac 	bl	800e644 <GetPixelformat>
 800e6ec:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 800e6ee:	4b1c      	ldr	r3, [pc, #112]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e6f0:	4a1c      	ldr	r2, [pc, #112]	; (800e764 <DMA2D_CopyBufferWithAlpha+0x8c>)
 800e6f2:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 800e6f4:	4a1a      	ldr	r2, [pc, #104]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 800e6fa:	4a19      	ldr	r2, [pc, #100]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 800e700:	4a17      	ldr	r2, [pc, #92]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6153      	str	r3, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 800e706:	4a16      	ldr	r2, [pc, #88]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70a:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 800e70c:	4a14      	ldr	r2, [pc, #80]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e710:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 800e712:	4a13      	ldr	r2, [pc, #76]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e716:	6193      	str	r3, [r2, #24]

  /* Set up pixel format */  
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 800e718:	4b11      	ldr	r3, [pc, #68]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	61da      	str	r2, [r3, #28]
  DMA2D->BGPFCCR = PixelFormat;
 800e71e:	4a10      	ldr	r2, [pc, #64]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 800e724:	4a0e      	ldr	r2, [pc, #56]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	041b      	lsls	r3, r3, #16
 800e72e:	6a3a      	ldr	r2, [r7, #32]
 800e730:	b292      	uxth	r2, r2
 800e732:	4611      	mov	r1, r2
 800e734:	4a0a      	ldr	r2, [pc, #40]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e736:	430b      	orrs	r3, r1
 800e738:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 800e73a:	4b09      	ldr	r3, [pc, #36]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	4a08      	ldr	r2, [pc, #32]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e740:	f043 0301 	orr.w	r3, r3, #1
 800e744:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 800e746:	bf00      	nop
 800e748:	4b05      	ldr	r3, [pc, #20]	; (800e760 <DMA2D_CopyBufferWithAlpha+0x88>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	d1f9      	bne.n	800e748 <DMA2D_CopyBufferWithAlpha+0x70>
  {
  }
}
 800e754:	bf00      	nop
 800e756:	bf00      	nop
 800e758:	3718      	adds	r7, #24
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	4002b000 	.word	0x4002b000
 800e764:	00020200 	.word	0x00020200

0800e768 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.           
  * @retval None.
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex) 
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b086      	sub	sp, #24
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
 800e774:	603b      	str	r3, [r7, #0]
  U32 PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7ff ff64 	bl	800e644 <GetPixelformat>
 800e77c:	6178      	str	r0, [r7, #20]

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 800e77e:	4b14      	ldr	r3, [pc, #80]	; (800e7d0 <DMA2D_FillBuffer+0x68>)
 800e780:	4a14      	ldr	r2, [pc, #80]	; (800e7d4 <DMA2D_FillBuffer+0x6c>)
 800e782:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 800e784:	4a12      	ldr	r2, [pc, #72]	; (800e7d0 <DMA2D_FillBuffer+0x68>)
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;                      
 800e78a:	4a11      	ldr	r2, [pc, #68]	; (800e7d0 <DMA2D_FillBuffer+0x68>)
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;                        
 800e790:	4a0f      	ldr	r2, [pc, #60]	; (800e7d0 <DMA2D_FillBuffer+0x68>)
 800e792:	6a3b      	ldr	r3, [r7, #32]
 800e794:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    
 800e796:	4a0e      	ldr	r2, [pc, #56]	; (800e7d0 <DMA2D_FillBuffer+0x68>)
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	041b      	lsls	r3, r3, #16
 800e7a0:	683a      	ldr	r2, [r7, #0]
 800e7a2:	b292      	uxth	r2, r2
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	4a0a      	ldr	r2, [pc, #40]	; (800e7d0 <DMA2D_FillBuffer+0x68>)
 800e7a8:	430b      	orrs	r3, r1
 800e7aa:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START; 
 800e7ac:	4b08      	ldr	r3, [pc, #32]	; (800e7d0 <DMA2D_FillBuffer+0x68>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4a07      	ldr	r2, [pc, #28]	; (800e7d0 <DMA2D_FillBuffer+0x68>)
 800e7b2:	f043 0301 	orr.w	r3, r3, #1
 800e7b6:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 800e7b8:	bf00      	nop
 800e7ba:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <DMA2D_FillBuffer+0x68>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f003 0301 	and.w	r3, r3, #1
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d1f9      	bne.n	800e7ba <DMA2D_FillBuffer+0x52>
  {
  }
}
 800e7c6:	bf00      	nop
 800e7c8:	bf00      	nop
 800e7ca:	3718      	adds	r7, #24
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	4002b000 	.word	0x4002b000
 800e7d4:	00030200 	.word	0x00030200

0800e7d8 <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 800e7e0:	4912      	ldr	r1, [pc, #72]	; (800e82c <GetBufferSize+0x54>)
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	00db      	lsls	r3, r3, #3
 800e7e8:	1a9b      	subs	r3, r3, r2
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	440b      	add	r3, r1
 800e7ee:	330c      	adds	r3, #12
 800e7f0:	6819      	ldr	r1, [r3, #0]
 800e7f2:	480e      	ldr	r0, [pc, #56]	; (800e82c <GetBufferSize+0x54>)
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	00db      	lsls	r3, r3, #3
 800e7fa:	1a9b      	subs	r3, r3, r2
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	4403      	add	r3, r0
 800e800:	3310      	adds	r3, #16
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	fb03 f101 	mul.w	r1, r3, r1
 800e808:	4808      	ldr	r0, [pc, #32]	; (800e82c <GetBufferSize+0x54>)
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	4613      	mov	r3, r2
 800e80e:	00db      	lsls	r3, r3, #3
 800e810:	1a9b      	subs	r3, r3, r2
 800e812:	009b      	lsls	r3, r3, #2
 800e814:	4403      	add	r3, r0
 800e816:	3314      	adds	r3, #20
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	fb01 f303 	mul.w	r3, r1, r3
}
 800e81e:	4618      	mov	r0, r3
 800e820:	370c      	adds	r7, #12
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	2003585c 	.word	0x2003585c

0800e830 <LCD_LL_CopyBuffer>:
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) 
{
 800e830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e832:	b08d      	sub	sp, #52	; 0x34
 800e834:	af04      	add	r7, sp, #16
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	607a      	str	r2, [r7, #4]
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	4618      	mov	r0, r3
 800e840:	f7ff ffca 	bl	800e7d8 <GetBufferSize>
 800e844:	61f8      	str	r0, [r7, #28]
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800e846:	4926      	ldr	r1, [pc, #152]	; (800e8e0 <LCD_LL_CopyBuffer+0xb0>)
 800e848:	68fa      	ldr	r2, [r7, #12]
 800e84a:	4613      	mov	r3, r2
 800e84c:	00db      	lsls	r3, r3, #3
 800e84e:	1a9b      	subs	r3, r3, r2
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	440b      	add	r3, r1
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4619      	mov	r1, r3
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	69fa      	ldr	r2, [r7, #28]
 800e85c:	fb02 f303 	mul.w	r3, r2, r3
 800e860:	440b      	add	r3, r1
 800e862:	61bb      	str	r3, [r7, #24]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 800e864:	491e      	ldr	r1, [pc, #120]	; (800e8e0 <LCD_LL_CopyBuffer+0xb0>)
 800e866:	68fa      	ldr	r2, [r7, #12]
 800e868:	4613      	mov	r3, r2
 800e86a:	00db      	lsls	r3, r3, #3
 800e86c:	1a9b      	subs	r3, r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	440b      	add	r3, r1
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4619      	mov	r1, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	69fa      	ldr	r2, [r7, #28]
 800e87a:	fb02 f303 	mul.w	r3, r2, r3
 800e87e:	440b      	add	r3, r1
 800e880:	617b      	str	r3, [r7, #20]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	69b9      	ldr	r1, [r7, #24]
 800e886:	697c      	ldr	r4, [r7, #20]
 800e888:	4d15      	ldr	r5, [pc, #84]	; (800e8e0 <LCD_LL_CopyBuffer+0xb0>)
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	4613      	mov	r3, r2
 800e88e:	00db      	lsls	r3, r3, #3
 800e890:	1a9b      	subs	r3, r3, r2
 800e892:	009b      	lsls	r3, r3, #2
 800e894:	442b      	add	r3, r5
 800e896:	330c      	adds	r3, #12
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	461e      	mov	r6, r3
 800e89c:	4d10      	ldr	r5, [pc, #64]	; (800e8e0 <LCD_LL_CopyBuffer+0xb0>)
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	00db      	lsls	r3, r3, #3
 800e8a4:	1a9b      	subs	r3, r3, r2
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	442b      	add	r3, r5
 800e8aa:	3310      	adds	r3, #16
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	9302      	str	r3, [sp, #8]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	9301      	str	r3, [sp, #4]
 800e8b8:	9200      	str	r2, [sp, #0]
 800e8ba:	4633      	mov	r3, r6
 800e8bc:	4622      	mov	r2, r4
 800e8be:	f7ff fed1 	bl	800e664 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 800e8c2:	4907      	ldr	r1, [pc, #28]	; (800e8e0 <LCD_LL_CopyBuffer+0xb0>)
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	00db      	lsls	r3, r3, #3
 800e8ca:	1a9b      	subs	r3, r3, r2
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	440b      	add	r3, r1
 800e8d0:	3308      	adds	r3, #8
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	601a      	str	r2, [r3, #0]
}
 800e8d6:	bf00      	nop
 800e8d8:	3724      	adds	r7, #36	; 0x24
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	2003585c 	.word	0x2003585c

0800e8e4 <LCD_LL_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 800e8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8e6:	b08f      	sub	sp, #60	; 0x3c
 800e8e8:	af04      	add	r7, sp, #16
 800e8ea:	6178      	str	r0, [r7, #20]
 800e8ec:	6139      	str	r1, [r7, #16]
 800e8ee:	60fa      	str	r2, [r7, #12]
 800e8f0:	60bb      	str	r3, [r7, #8]
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7ff ff6f 	bl	800e7d8 <GetBufferSize>
 800e8fa:	6278      	str	r0, [r7, #36]	; 0x24
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800e8fc:	4942      	ldr	r1, [pc, #264]	; (800ea08 <LCD_LL_CopyRect+0x124>)
 800e8fe:	697a      	ldr	r2, [r7, #20]
 800e900:	4613      	mov	r3, r2
 800e902:	00db      	lsls	r3, r3, #3
 800e904:	1a9b      	subs	r3, r3, r2
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	440b      	add	r3, r1
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	461c      	mov	r4, r3
 800e90e:	493e      	ldr	r1, [pc, #248]	; (800ea08 <LCD_LL_CopyRect+0x124>)
 800e910:	697a      	ldr	r2, [r7, #20]
 800e912:	4613      	mov	r3, r2
 800e914:	00db      	lsls	r3, r3, #3
 800e916:	1a9b      	subs	r3, r3, r2
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	440b      	add	r3, r1
 800e91c:	330c      	adds	r3, #12
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	fb03 f202 	mul.w	r2, r3, r2
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	18d1      	adds	r1, r2, r3
 800e92a:	4837      	ldr	r0, [pc, #220]	; (800ea08 <LCD_LL_CopyRect+0x124>)
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	4613      	mov	r3, r2
 800e930:	00db      	lsls	r3, r3, #3
 800e932:	1a9b      	subs	r3, r3, r2
 800e934:	009b      	lsls	r3, r3, #2
 800e936:	4403      	add	r3, r0
 800e938:	3314      	adds	r3, #20
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	fb01 f303 	mul.w	r3, r1, r3
 800e940:	4618      	mov	r0, r3
 800e942:	4931      	ldr	r1, [pc, #196]	; (800ea08 <LCD_LL_CopyRect+0x124>)
 800e944:	697a      	ldr	r2, [r7, #20]
 800e946:	4613      	mov	r3, r2
 800e948:	00db      	lsls	r3, r3, #3
 800e94a:	1a9b      	subs	r3, r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	440b      	add	r3, r1
 800e950:	3304      	adds	r3, #4
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	461a      	mov	r2, r3
 800e956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e958:	fb02 f303 	mul.w	r3, r2, r3
 800e95c:	4403      	add	r3, r0
 800e95e:	4423      	add	r3, r4
 800e960:	623b      	str	r3, [r7, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 800e962:	4929      	ldr	r1, [pc, #164]	; (800ea08 <LCD_LL_CopyRect+0x124>)
 800e964:	697a      	ldr	r2, [r7, #20]
 800e966:	4613      	mov	r3, r2
 800e968:	00db      	lsls	r3, r3, #3
 800e96a:	1a9b      	subs	r3, r3, r2
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	440b      	add	r3, r1
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	461c      	mov	r4, r3
 800e974:	4924      	ldr	r1, [pc, #144]	; (800ea08 <LCD_LL_CopyRect+0x124>)
 800e976:	697a      	ldr	r2, [r7, #20]
 800e978:	4613      	mov	r3, r2
 800e97a:	00db      	lsls	r3, r3, #3
 800e97c:	1a9b      	subs	r3, r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	440b      	add	r3, r1
 800e982:	330c      	adds	r3, #12
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e988:	fb03 f202 	mul.w	r2, r3, r2
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	18d1      	adds	r1, r2, r3
 800e990:	481d      	ldr	r0, [pc, #116]	; (800ea08 <LCD_LL_CopyRect+0x124>)
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	4613      	mov	r3, r2
 800e996:	00db      	lsls	r3, r3, #3
 800e998:	1a9b      	subs	r3, r3, r2
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	4403      	add	r3, r0
 800e99e:	3314      	adds	r3, #20
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	fb01 f303 	mul.w	r3, r1, r3
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	4917      	ldr	r1, [pc, #92]	; (800ea08 <LCD_LL_CopyRect+0x124>)
 800e9aa:	697a      	ldr	r2, [r7, #20]
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	00db      	lsls	r3, r3, #3
 800e9b0:	1a9b      	subs	r3, r3, r2
 800e9b2:	009b      	lsls	r3, r3, #2
 800e9b4:	440b      	add	r3, r1
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9be:	fb02 f303 	mul.w	r3, r2, r3
 800e9c2:	4403      	add	r3, r0
 800e9c4:	4423      	add	r3, r4
 800e9c6:	61fb      	str	r3, [r7, #28]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 800e9c8:	6978      	ldr	r0, [r7, #20]
 800e9ca:	6a3c      	ldr	r4, [r7, #32]
 800e9cc:	69fd      	ldr	r5, [r7, #28]
 800e9ce:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 800e9d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e9d2:	4b0d      	ldr	r3, [pc, #52]	; (800ea08 <LCD_LL_CopyRect+0x124>)
 800e9d4:	607b      	str	r3, [r7, #4]
 800e9d6:	697a      	ldr	r2, [r7, #20]
 800e9d8:	4613      	mov	r3, r2
 800e9da:	00db      	lsls	r3, r3, #3
 800e9dc:	1a9b      	subs	r3, r3, r2
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	330c      	adds	r3, #12
 800e9e6:	681a      	ldr	r2, [r3, #0]
 800e9e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9ea:	1ad3      	subs	r3, r2, r3
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	9302      	str	r3, [sp, #8]
 800e9f2:	9201      	str	r2, [sp, #4]
 800e9f4:	9100      	str	r1, [sp, #0]
 800e9f6:	4633      	mov	r3, r6
 800e9f8:	462a      	mov	r2, r5
 800e9fa:	4621      	mov	r1, r4
 800e9fc:	f7ff fe32 	bl	800e664 <DMA2D_CopyBuffer>
}
 800ea00:	bf00      	nop
 800ea02:	372c      	adds	r7, #44	; 0x2c
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea08:	2003585c 	.word	0x2003585c

0800ea0c <LCD_LL_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.             
  * @retval None.
  */
static void LCD_LL_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex) 
{
 800ea0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea0e:	b08b      	sub	sp, #44	; 0x2c
 800ea10:	af02      	add	r7, sp, #8
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
 800ea18:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 800ea1a:	f002 fd53 	bl	80114c4 <GUI_GetDrawMode>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d110      	bne.n	800ea46 <LCD_LL_FillRect+0x3a>
  {		
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 800ea24:	2200      	movs	r2, #0
 800ea26:	2119      	movs	r1, #25
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f007 f92f 	bl	8015c8c <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 800ea2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea30:	683a      	ldr	r2, [r7, #0]
 800ea32:	6879      	ldr	r1, [r7, #4]
 800ea34:	68b8      	ldr	r0, [r7, #8]
 800ea36:	f005 fccf 	bl	80143d8 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800ea3a:	4a31      	ldr	r2, [pc, #196]	; (800eb00 <LCD_LL_FillRect+0xf4>)
 800ea3c:	2119      	movs	r1, #25
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f007 f924 	bl	8015c8c <LCD_SetDevFunc>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }	
}
 800ea44:	e058      	b.n	800eaf8 <LCD_LL_FillRect+0xec>
    xSize = x1 - x0 + 1;
 800ea46:	683a      	ldr	r2, [r7, #0]
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	61fb      	str	r3, [r7, #28]
    ySize = y1 - y0 + 1;
 800ea50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	1ad3      	subs	r3, r2, r3
 800ea56:	3301      	adds	r3, #1
 800ea58:	61bb      	str	r3, [r7, #24]
    BufferSize = GetBufferSize(LayerIndex);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7ff febb 	bl	800e7d8 <GetBufferSize>
 800ea62:	6178      	str	r0, [r7, #20]
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800ea64:	4927      	ldr	r1, [pc, #156]	; (800eb04 <LCD_LL_FillRect+0xf8>)
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	00db      	lsls	r3, r3, #3
 800ea6c:	1a9b      	subs	r3, r3, r2
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	440b      	add	r3, r1
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	461c      	mov	r4, r3
 800ea76:	4923      	ldr	r1, [pc, #140]	; (800eb04 <LCD_LL_FillRect+0xf8>)
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	00db      	lsls	r3, r3, #3
 800ea7e:	1a9b      	subs	r3, r3, r2
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	440b      	add	r3, r1
 800ea84:	330c      	adds	r3, #12
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	fb03 f202 	mul.w	r2, r3, r2
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	18d1      	adds	r1, r2, r3
 800ea92:	481c      	ldr	r0, [pc, #112]	; (800eb04 <LCD_LL_FillRect+0xf8>)
 800ea94:	68fa      	ldr	r2, [r7, #12]
 800ea96:	4613      	mov	r3, r2
 800ea98:	00db      	lsls	r3, r3, #3
 800ea9a:	1a9b      	subs	r3, r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4403      	add	r3, r0
 800eaa0:	3314      	adds	r3, #20
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	fb01 f303 	mul.w	r3, r1, r3
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	4916      	ldr	r1, [pc, #88]	; (800eb04 <LCD_LL_FillRect+0xf8>)
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	4613      	mov	r3, r2
 800eab0:	00db      	lsls	r3, r3, #3
 800eab2:	1a9b      	subs	r3, r3, r2
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	440b      	add	r3, r1
 800eab8:	3308      	adds	r3, #8
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	461a      	mov	r2, r3
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	fb02 f303 	mul.w	r3, r2, r3
 800eac4:	4403      	add	r3, r0
 800eac6:	4423      	add	r3, r4
 800eac8:	613b      	str	r3, [r7, #16]
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	6939      	ldr	r1, [r7, #16]
 800eace:	69fc      	ldr	r4, [r7, #28]
 800ead0:	69bd      	ldr	r5, [r7, #24]
 800ead2:	4e0c      	ldr	r6, [pc, #48]	; (800eb04 <LCD_LL_FillRect+0xf8>)
 800ead4:	68fa      	ldr	r2, [r7, #12]
 800ead6:	4613      	mov	r3, r2
 800ead8:	00db      	lsls	r3, r3, #3
 800eada:	1a9b      	subs	r3, r3, r2
 800eadc:	009b      	lsls	r3, r3, #2
 800eade:	4433      	add	r3, r6
 800eae0:	330c      	adds	r3, #12
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	1ad3      	subs	r3, r2, r3
 800eae8:	461a      	mov	r2, r3
 800eaea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaec:	9301      	str	r3, [sp, #4]
 800eaee:	9200      	str	r2, [sp, #0]
 800eaf0:	462b      	mov	r3, r5
 800eaf2:	4622      	mov	r2, r4
 800eaf4:	f7ff fe38 	bl	800e768 <DMA2D_FillBuffer>
}
 800eaf8:	bf00      	nop
 800eafa:	3724      	adds	r7, #36	; 0x24
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb00:	0800ea0d 	.word	0x0800ea0d
 800eb04:	2003585c 	.word	0x2003585c

0800eb08 <DMA2D_DrawBitmapL8>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  U32 OffSrc, U32 OffDst, U32 PixelFormatDst, U32 xSize, U32 ySize)
{	
 800eb08:	b480      	push	{r7}
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	607a      	str	r2, [r7, #4]
 800eb14:	603b      	str	r3, [r7, #0]
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 800eb16:	4b18      	ldr	r3, [pc, #96]	; (800eb78 <DMA2D_DrawBitmapL8+0x70>)
 800eb18:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 800eb1c:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 800eb1e:	4a16      	ldr	r2, [pc, #88]	; (800eb78 <DMA2D_DrawBitmapL8+0x70>)
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 800eb24:	4a14      	ldr	r2, [pc, #80]	; (800eb78 <DMA2D_DrawBitmapL8+0x70>)
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 800eb2a:	4a13      	ldr	r2, [pc, #76]	; (800eb78 <DMA2D_DrawBitmapL8+0x70>)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 800eb30:	4a11      	ldr	r2, [pc, #68]	; (800eb78 <DMA2D_DrawBitmapL8+0x70>)
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 800eb36:	4b10      	ldr	r3, [pc, #64]	; (800eb78 <DMA2D_DrawBitmapL8+0x70>)
 800eb38:	2205      	movs	r2, #5
 800eb3a:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 800eb3c:	4a0e      	ldr	r2, [pc, #56]	; (800eb78 <DMA2D_DrawBitmapL8+0x70>)
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transferred) */
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	041a      	lsls	r2, r3, #16
 800eb46:	490c      	ldr	r1, [pc, #48]	; (800eb78 <DMA2D_DrawBitmapL8+0x70>)
 800eb48:	6a3b      	ldr	r3, [r7, #32]
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	644b      	str	r3, [r1, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 800eb4e:	4b0a      	ldr	r3, [pc, #40]	; (800eb78 <DMA2D_DrawBitmapL8+0x70>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	4a09      	ldr	r2, [pc, #36]	; (800eb78 <DMA2D_DrawBitmapL8+0x70>)
 800eb54:	f043 0301 	orr.w	r3, r3, #1
 800eb58:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 800eb5a:	bf00      	nop
 800eb5c:	4b06      	ldr	r3, [pc, #24]	; (800eb78 <DMA2D_DrawBitmapL8+0x70>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f003 0301 	and.w	r3, r3, #1
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1f9      	bne.n	800eb5c <DMA2D_DrawBitmapL8+0x54>
  {
  }	
}
 800eb68:	bf00      	nop
 800eb6a:	bf00      	nop
 800eb6c:	3714      	adds	r7, #20
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	4002b000 	.word	0x4002b000

0800eb7c <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 800eb7c:	b5b0      	push	{r4, r5, r7, lr}
 800eb7e:	b08c      	sub	sp, #48	; 0x30
 800eb80:	af04      	add	r7, sp, #16
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	607a      	str	r2, [r7, #4]
 800eb88:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7ff fe23 	bl	800e7d8 <GetBufferSize>
 800eb92:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800eb94:	492c      	ldr	r1, [pc, #176]	; (800ec48 <LCD_LL_DrawBitmap16bpp+0xcc>)
 800eb96:	68fa      	ldr	r2, [r7, #12]
 800eb98:	4613      	mov	r3, r2
 800eb9a:	00db      	lsls	r3, r3, #3
 800eb9c:	1a9b      	subs	r3, r3, r2
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	440b      	add	r3, r1
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	461c      	mov	r4, r3
 800eba6:	4928      	ldr	r1, [pc, #160]	; (800ec48 <LCD_LL_DrawBitmap16bpp+0xcc>)
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	4613      	mov	r3, r2
 800ebac:	00db      	lsls	r3, r3, #3
 800ebae:	1a9b      	subs	r3, r3, r2
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	440b      	add	r3, r1
 800ebb4:	330c      	adds	r3, #12
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	fb03 f202 	mul.w	r2, r3, r2
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	18d1      	adds	r1, r2, r3
 800ebc2:	4821      	ldr	r0, [pc, #132]	; (800ec48 <LCD_LL_DrawBitmap16bpp+0xcc>)
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	00db      	lsls	r3, r3, #3
 800ebca:	1a9b      	subs	r3, r3, r2
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	4403      	add	r3, r0
 800ebd0:	3314      	adds	r3, #20
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	fb01 f303 	mul.w	r3, r1, r3
 800ebd8:	4618      	mov	r0, r3
 800ebda:	491b      	ldr	r1, [pc, #108]	; (800ec48 <LCD_LL_DrawBitmap16bpp+0xcc>)
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	4613      	mov	r3, r2
 800ebe0:	00db      	lsls	r3, r3, #3
 800ebe2:	1a9b      	subs	r3, r3, r2
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	440b      	add	r3, r1
 800ebe8:	3308      	adds	r3, #8
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	461a      	mov	r2, r3
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	fb02 f303 	mul.w	r3, r2, r3
 800ebf4:	4403      	add	r3, r0
 800ebf6:	4423      	add	r3, r4
 800ebf8:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 2) - xSize;
 800ebfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfc:	0fda      	lsrs	r2, r3, #31
 800ebfe:	4413      	add	r3, r2
 800ec00:	105b      	asrs	r3, r3, #1
 800ec02:	461a      	mov	r2, r3
 800ec04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800ec0a:	490f      	ldr	r1, [pc, #60]	; (800ec48 <LCD_LL_DrawBitmap16bpp+0xcc>)
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	00db      	lsls	r3, r3, #3
 800ec12:	1a9b      	subs	r3, r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	440b      	add	r3, r1
 800ec18:	330c      	adds	r3, #12
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1e:	1ad3      	subs	r3, r2, r3
 800ec20:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	69bc      	ldr	r4, [r7, #24]
 800ec26:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ec28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec2a:	697a      	ldr	r2, [r7, #20]
 800ec2c:	6939      	ldr	r1, [r7, #16]
 800ec2e:	9102      	str	r1, [sp, #8]
 800ec30:	9201      	str	r2, [sp, #4]
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	462b      	mov	r3, r5
 800ec36:	4622      	mov	r2, r4
 800ec38:	6839      	ldr	r1, [r7, #0]
 800ec3a:	f7ff fd13 	bl	800e664 <DMA2D_CopyBuffer>
}
 800ec3e:	bf00      	nop
 800ec40:	3720      	adds	r7, #32
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bdb0      	pop	{r4, r5, r7, pc}
 800ec46:	bf00      	nop
 800ec48:	2003585c 	.word	0x2003585c

0800ec4c <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 800ec4c:	b5b0      	push	{r4, r5, r7, lr}
 800ec4e:	b08c      	sub	sp, #48	; 0x30
 800ec50:	af04      	add	r7, sp, #16
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	607a      	str	r2, [r7, #4]
 800ec58:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7ff fdbb 	bl	800e7d8 <GetBufferSize>
 800ec62:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800ec64:	492c      	ldr	r1, [pc, #176]	; (800ed18 <LCD_LL_DrawBitmap32bpp+0xcc>)
 800ec66:	68fa      	ldr	r2, [r7, #12]
 800ec68:	4613      	mov	r3, r2
 800ec6a:	00db      	lsls	r3, r3, #3
 800ec6c:	1a9b      	subs	r3, r3, r2
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	440b      	add	r3, r1
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	461c      	mov	r4, r3
 800ec76:	4928      	ldr	r1, [pc, #160]	; (800ed18 <LCD_LL_DrawBitmap32bpp+0xcc>)
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	00db      	lsls	r3, r3, #3
 800ec7e:	1a9b      	subs	r3, r3, r2
 800ec80:	009b      	lsls	r3, r3, #2
 800ec82:	440b      	add	r3, r1
 800ec84:	330c      	adds	r3, #12
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	fb03 f202 	mul.w	r2, r3, r2
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	18d1      	adds	r1, r2, r3
 800ec92:	4821      	ldr	r0, [pc, #132]	; (800ed18 <LCD_LL_DrawBitmap32bpp+0xcc>)
 800ec94:	68fa      	ldr	r2, [r7, #12]
 800ec96:	4613      	mov	r3, r2
 800ec98:	00db      	lsls	r3, r3, #3
 800ec9a:	1a9b      	subs	r3, r3, r2
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	4403      	add	r3, r0
 800eca0:	3314      	adds	r3, #20
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	fb01 f303 	mul.w	r3, r1, r3
 800eca8:	4618      	mov	r0, r3
 800ecaa:	491b      	ldr	r1, [pc, #108]	; (800ed18 <LCD_LL_DrawBitmap32bpp+0xcc>)
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	4613      	mov	r3, r2
 800ecb0:	00db      	lsls	r3, r3, #3
 800ecb2:	1a9b      	subs	r3, r3, r2
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	440b      	add	r3, r1
 800ecb8:	3308      	adds	r3, #8
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	fb02 f303 	mul.w	r3, r2, r3
 800ecc4:	4403      	add	r3, r0
 800ecc6:	4423      	add	r3, r4
 800ecc8:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800ecca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	da00      	bge.n	800ecd2 <LCD_LL_DrawBitmap32bpp+0x86>
 800ecd0:	3303      	adds	r3, #3
 800ecd2:	109b      	asrs	r3, r3, #2
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd8:	1ad3      	subs	r3, r2, r3
 800ecda:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800ecdc:	490e      	ldr	r1, [pc, #56]	; (800ed18 <LCD_LL_DrawBitmap32bpp+0xcc>)
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	4613      	mov	r3, r2
 800ece2:	00db      	lsls	r3, r3, #3
 800ece4:	1a9b      	subs	r3, r3, r2
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	440b      	add	r3, r1
 800ecea:	330c      	adds	r3, #12
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf0:	1ad3      	subs	r3, r2, r3
 800ecf2:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	69bc      	ldr	r4, [r7, #24]
 800ecf8:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ecfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecfc:	697a      	ldr	r2, [r7, #20]
 800ecfe:	6939      	ldr	r1, [r7, #16]
 800ed00:	9102      	str	r1, [sp, #8]
 800ed02:	9201      	str	r2, [sp, #4]
 800ed04:	9300      	str	r3, [sp, #0]
 800ed06:	462b      	mov	r3, r5
 800ed08:	4622      	mov	r2, r4
 800ed0a:	6839      	ldr	r1, [r7, #0]
 800ed0c:	f7ff fce4 	bl	800e6d8 <DMA2D_CopyBufferWithAlpha>
}
 800ed10:	bf00      	nop
 800ed12:	3720      	adds	r7, #32
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bdb0      	pop	{r4, r5, r7, pc}
 800ed18:	2003585c 	.word	0x2003585c

0800ed1c <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 800ed1c:	b590      	push	{r4, r7, lr}
 800ed1e:	b08f      	sub	sp, #60	; 0x3c
 800ed20:	af04      	add	r7, sp, #16
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	60b9      	str	r1, [r7, #8]
 800ed26:	607a      	str	r2, [r7, #4]
 800ed28:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7ff fd53 	bl	800e7d8 <GetBufferSize>
 800ed32:	6278      	str	r0, [r7, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800ed34:	492c      	ldr	r1, [pc, #176]	; (800ede8 <LCD_LL_DrawBitmap8bpp+0xcc>)
 800ed36:	68fa      	ldr	r2, [r7, #12]
 800ed38:	4613      	mov	r3, r2
 800ed3a:	00db      	lsls	r3, r3, #3
 800ed3c:	1a9b      	subs	r3, r3, r2
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	440b      	add	r3, r1
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	461c      	mov	r4, r3
 800ed46:	4928      	ldr	r1, [pc, #160]	; (800ede8 <LCD_LL_DrawBitmap8bpp+0xcc>)
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	00db      	lsls	r3, r3, #3
 800ed4e:	1a9b      	subs	r3, r3, r2
 800ed50:	009b      	lsls	r3, r3, #2
 800ed52:	440b      	add	r3, r1
 800ed54:	330c      	adds	r3, #12
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	fb03 f202 	mul.w	r2, r3, r2
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	18d1      	adds	r1, r2, r3
 800ed62:	4821      	ldr	r0, [pc, #132]	; (800ede8 <LCD_LL_DrawBitmap8bpp+0xcc>)
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	4613      	mov	r3, r2
 800ed68:	00db      	lsls	r3, r3, #3
 800ed6a:	1a9b      	subs	r3, r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	4403      	add	r3, r0
 800ed70:	3314      	adds	r3, #20
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	fb01 f303 	mul.w	r3, r1, r3
 800ed78:	4618      	mov	r0, r3
 800ed7a:	491b      	ldr	r1, [pc, #108]	; (800ede8 <LCD_LL_DrawBitmap8bpp+0xcc>)
 800ed7c:	68fa      	ldr	r2, [r7, #12]
 800ed7e:	4613      	mov	r3, r2
 800ed80:	00db      	lsls	r3, r3, #3
 800ed82:	1a9b      	subs	r3, r3, r2
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	440b      	add	r3, r1
 800ed88:	3308      	adds	r3, #8
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed90:	fb02 f303 	mul.w	r3, r2, r3
 800ed94:	4403      	add	r3, r0
 800ed96:	4423      	add	r3, r4
 800ed98:	623b      	str	r3, [r7, #32]
  OffLineSrc = BytesPerLine - xSize;
 800ed9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9e:	1ad3      	subs	r3, r2, r3
 800eda0:	61fb      	str	r3, [r7, #28]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800eda2:	4911      	ldr	r1, [pc, #68]	; (800ede8 <LCD_LL_DrawBitmap8bpp+0xcc>)
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	4613      	mov	r3, r2
 800eda8:	00db      	lsls	r3, r3, #3
 800edaa:	1a9b      	subs	r3, r3, r2
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	440b      	add	r3, r1
 800edb0:	330c      	adds	r3, #12
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb6:	1ad3      	subs	r3, r2, r3
 800edb8:	61bb      	str	r3, [r7, #24]
  PixelFormat = GetPixelformat(LayerIndex);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7ff fc41 	bl	800e644 <GetPixelformat>
 800edc2:	6178      	str	r0, [r7, #20]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 800edc4:	6a39      	ldr	r1, [r7, #32]
 800edc6:	69f8      	ldr	r0, [r7, #28]
 800edc8:	69bc      	ldr	r4, [r7, #24]
 800edca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edce:	9202      	str	r2, [sp, #8]
 800edd0:	9301      	str	r3, [sp, #4]
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	4623      	mov	r3, r4
 800edd8:	4602      	mov	r2, r0
 800edda:	6838      	ldr	r0, [r7, #0]
 800eddc:	f7ff fe94 	bl	800eb08 <DMA2D_DrawBitmapL8>
}
 800ede0:	bf00      	nop
 800ede2:	372c      	adds	r7, #44	; 0x2c
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd90      	pop	{r4, r7, pc}
 800ede8:	2003585c 	.word	0x2003585c

0800edec <LCD_SetUpdateRegion>:
  * @brief  Set LCD updated region.
  * @param  idx: active region index.
  * @retval None
  */
void LCD_SetUpdateRegion(int idx)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af02      	add	r7, sp, #8
 800edf2:	6078      	str	r0, [r7, #4]
  HAL_DSI_LongWrite(&hdsi_disco, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	009b      	lsls	r3, r3, #2
 800edf8:	4a07      	ldr	r2, [pc, #28]	; (800ee18 <LCD_SetUpdateRegion+0x2c>)
 800edfa:	4413      	add	r3, r2
 800edfc:	9301      	str	r3, [sp, #4]
 800edfe:	232a      	movs	r3, #42	; 0x2a
 800ee00:	9300      	str	r3, [sp, #0]
 800ee02:	2304      	movs	r3, #4
 800ee04:	2239      	movs	r2, #57	; 0x39
 800ee06:	2100      	movs	r1, #0
 800ee08:	4804      	ldr	r0, [pc, #16]	; (800ee1c <LCD_SetUpdateRegion+0x30>)
 800ee0a:	f7f5 fb58 	bl	80044be <HAL_DSI_LongWrite>
}
 800ee0e:	bf00      	nop
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	20000558 	.word	0x20000558
 800ee1c:	20035840 	.word	0x20035840

0800ee20 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  uint32_t index = 0;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	60fb      	str	r3, [r7, #12]

  if(!LCD_Refershing)
 800ee2c:	4b1e      	ldr	r3, [pc, #120]	; (800eea8 <HAL_DSI_TearingEffectCallback+0x88>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d134      	bne.n	800ee9e <HAL_DSI_TearingEffectCallback+0x7e>
  {
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800ee34:	2300      	movs	r3, #0
 800ee36:	60fb      	str	r3, [r7, #12]
 800ee38:	e025      	b.n	800ee86 <HAL_DSI_TearingEffectCallback+0x66>
    {
      if(layer_prop[index].pending_buffer >= 0)
 800ee3a:	491c      	ldr	r1, [pc, #112]	; (800eeac <HAL_DSI_TearingEffectCallback+0x8c>)
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	00db      	lsls	r3, r3, #3
 800ee42:	1a9b      	subs	r3, r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	440b      	add	r3, r1
 800ee48:	3304      	adds	r3, #4
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	db17      	blt.n	800ee80 <HAL_DSI_TearingEffectCallback+0x60>
      {
        GUI_MULTIBUF_ConfirmEx(index,  layer_prop[index].pending_buffer);
 800ee50:	68f8      	ldr	r0, [r7, #12]
 800ee52:	4916      	ldr	r1, [pc, #88]	; (800eeac <HAL_DSI_TearingEffectCallback+0x8c>)
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	4613      	mov	r3, r2
 800ee58:	00db      	lsls	r3, r3, #3
 800ee5a:	1a9b      	subs	r3, r3, r2
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	440b      	add	r3, r1
 800ee60:	3304      	adds	r3, #4
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4619      	mov	r1, r3
 800ee66:	f003 fd7f 	bl	8012968 <GUI_MULTIBUF_ConfirmEx>
        layer_prop[index].pending_buffer = -1;
 800ee6a:	4910      	ldr	r1, [pc, #64]	; (800eeac <HAL_DSI_TearingEffectCallback+0x8c>)
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	4613      	mov	r3, r2
 800ee70:	00db      	lsls	r3, r3, #3
 800ee72:	1a9b      	subs	r3, r3, r2
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	440b      	add	r3, r1
 800ee78:	3304      	adds	r3, #4
 800ee7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee7e:	601a      	str	r2, [r3, #0]
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	3301      	adds	r3, #1
 800ee84:	60fb      	str	r3, [r7, #12]
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	d9d6      	bls.n	800ee3a <HAL_DSI_TearingEffectCallback+0x1a>
      } 
    }    
    LCD_Refershing = 1;
 800ee8c:	4b06      	ldr	r3, [pc, #24]	; (800eea8 <HAL_DSI_TearingEffectCallback+0x88>)
 800ee8e:	2201      	movs	r2, #1
 800ee90:	601a      	str	r2, [r3, #0]
    LCD_ActiveRegion = 1;
 800ee92:	4b07      	ldr	r3, [pc, #28]	; (800eeb0 <HAL_DSI_TearingEffectCallback+0x90>)
 800ee94:	2201      	movs	r2, #1
 800ee96:	601a      	str	r2, [r3, #0]
    HAL_DSI_Refresh(hdsi); 
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f7f5 facd 	bl	8004438 <HAL_DSI_Refresh>
  }
}  
 800ee9e:	bf00      	nop
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	20035894 	.word	0x20035894
 800eeac:	2003585c 	.word	0x2003585c
 800eeb0:	20000568 	.word	0x20000568

0800eeb4 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b088      	sub	sp, #32
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  uint32_t index = 0;
 800eebc:	2300      	movs	r3, #0
 800eebe:	61fb      	str	r3, [r7, #28]

  if(LCD_ActiveRegion < ZONES )
 800eec0:	4b57      	ldr	r3, [pc, #348]	; (800f020 <HAL_DSI_EndOfRefreshCallback+0x16c>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2b03      	cmp	r3, #3
 800eec6:	dc5b      	bgt.n	800ef80 <HAL_DSI_EndOfRefreshCallback+0xcc>
  {
    LCD_Refershing = 1;
 800eec8:	4b56      	ldr	r3, [pc, #344]	; (800f024 <HAL_DSI_EndOfRefreshCallback+0x170>)
 800eeca:	2201      	movs	r2, #1
 800eecc:	601a      	str	r2, [r3, #0]
    /* Disable DSI Wrapper */
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800eece:	2300      	movs	r3, #0
 800eed0:	61bb      	str	r3, [r7, #24]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f022 0208 	bic.w	r2, r2, #8
 800eee2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eeee:	f003 0308 	and.w	r3, r3, #8
 800eef2:	61bb      	str	r3, [r7, #24]
 800eef4:	69bb      	ldr	r3, [r7, #24]
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800eef6:	2300      	movs	r3, #0
 800eef8:	61fb      	str	r3, [r7, #28]
 800eefa:	e016      	b.n	800ef2a <HAL_DSI_EndOfRefreshCallback+0x76>
    {
      /* Update LTDC configuration */
      LTDC_LAYER(&hltdc_disco, index)->CFBAR  = LCD_Addr[index] + LCD_ActiveRegion  * HACT * 2;
 800eefc:	4a4a      	ldr	r2, [pc, #296]	; (800f028 <HAL_DSI_EndOfRefreshCallback+0x174>)
 800eefe:	69fb      	ldr	r3, [r7, #28]
 800ef00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef04:	4a46      	ldr	r2, [pc, #280]	; (800f020 <HAL_DSI_EndOfRefreshCallback+0x16c>)
 800ef06:	6812      	ldr	r2, [r2, #0]
 800ef08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ef0c:	fb01 f202 	mul.w	r2, r1, r2
 800ef10:	4611      	mov	r1, r2
 800ef12:	4a46      	ldr	r2, [pc, #280]	; (800f02c <HAL_DSI_EndOfRefreshCallback+0x178>)
 800ef14:	6812      	ldr	r2, [r2, #0]
 800ef16:	4610      	mov	r0, r2
 800ef18:	69fa      	ldr	r2, [r7, #28]
 800ef1a:	01d2      	lsls	r2, r2, #7
 800ef1c:	4402      	add	r2, r0
 800ef1e:	3284      	adds	r2, #132	; 0x84
 800ef20:	440b      	add	r3, r1
 800ef22:	6293      	str	r3, [r2, #40]	; 0x28
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800ef24:	69fb      	ldr	r3, [r7, #28]
 800ef26:	3301      	adds	r3, #1
 800ef28:	61fb      	str	r3, [r7, #28]
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d9e5      	bls.n	800eefc <HAL_DSI_EndOfRefreshCallback+0x48>
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc_disco);
 800ef30:	4b3e      	ldr	r3, [pc, #248]	; (800f02c <HAL_DSI_EndOfRefreshCallback+0x178>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef36:	4b3d      	ldr	r3, [pc, #244]	; (800f02c <HAL_DSI_EndOfRefreshCallback+0x178>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f042 0201 	orr.w	r2, r2, #1
 800ef3e:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800ef40:	2300      	movs	r3, #0
 800ef42:	617b      	str	r3, [r7, #20]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f042 0208 	orr.w	r2, r2, #8
 800ef54:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef60:	f003 0308 	and.w	r3, r3, #8
 800ef64:	617b      	str	r3, [r7, #20]
 800ef66:	697b      	ldr	r3, [r7, #20]
    LCD_SetUpdateRegion(LCD_ActiveRegion++);
 800ef68:	4b2d      	ldr	r3, [pc, #180]	; (800f020 <HAL_DSI_EndOfRefreshCallback+0x16c>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	1c5a      	adds	r2, r3, #1
 800ef6e:	492c      	ldr	r1, [pc, #176]	; (800f020 <HAL_DSI_EndOfRefreshCallback+0x16c>)
 800ef70:	600a      	str	r2, [r1, #0]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7ff ff3a 	bl	800edec <LCD_SetUpdateRegion>
    /* Refresh the right part of the display */
    HAL_DSI_Refresh(hdsi);
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7f5 fa5d 	bl	8004438 <HAL_DSI_Refresh>
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc_disco);
    __HAL_DSI_WRAPPER_ENABLE(&hdsi_disco);  
    LCD_SetUpdateRegion(0); 
  }
}
 800ef7e:	e04b      	b.n	800f018 <HAL_DSI_EndOfRefreshCallback+0x164>
    LCD_Refershing = 0;
 800ef80:	4b28      	ldr	r3, [pc, #160]	; (800f024 <HAL_DSI_EndOfRefreshCallback+0x170>)
 800ef82:	2200      	movs	r2, #0
 800ef84:	601a      	str	r2, [r3, #0]
    __HAL_DSI_WRAPPER_DISABLE(&hdsi_disco);
 800ef86:	2300      	movs	r3, #0
 800ef88:	613b      	str	r3, [r7, #16]
 800ef8a:	4b29      	ldr	r3, [pc, #164]	; (800f030 <HAL_DSI_EndOfRefreshCallback+0x17c>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ef92:	4b27      	ldr	r3, [pc, #156]	; (800f030 <HAL_DSI_EndOfRefreshCallback+0x17c>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f022 0208 	bic.w	r2, r2, #8
 800ef9a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800ef9e:	4b24      	ldr	r3, [pc, #144]	; (800f030 <HAL_DSI_EndOfRefreshCallback+0x17c>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800efa6:	f003 0308 	and.w	r3, r3, #8
 800efaa:	613b      	str	r3, [r7, #16]
 800efac:	693b      	ldr	r3, [r7, #16]
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800efae:	2300      	movs	r3, #0
 800efb0:	61fb      	str	r3, [r7, #28]
 800efb2:	e00f      	b.n	800efd4 <HAL_DSI_EndOfRefreshCallback+0x120>
      LTDC_LAYER(&hltdc_disco, index)->CFBAR  = LCD_Addr[index];
 800efb4:	4b1d      	ldr	r3, [pc, #116]	; (800f02c <HAL_DSI_EndOfRefreshCallback+0x178>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	461a      	mov	r2, r3
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	01db      	lsls	r3, r3, #7
 800efbe:	4413      	add	r3, r2
 800efc0:	3384      	adds	r3, #132	; 0x84
 800efc2:	4619      	mov	r1, r3
 800efc4:	4a18      	ldr	r2, [pc, #96]	; (800f028 <HAL_DSI_EndOfRefreshCallback+0x174>)
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efcc:	628b      	str	r3, [r1, #40]	; 0x28
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	3301      	adds	r3, #1
 800efd2:	61fb      	str	r3, [r7, #28]
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d9ec      	bls.n	800efb4 <HAL_DSI_EndOfRefreshCallback+0x100>
    __HAL_LTDC_RELOAD_CONFIG(&hltdc_disco);
 800efda:	4b14      	ldr	r3, [pc, #80]	; (800f02c <HAL_DSI_EndOfRefreshCallback+0x178>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efe0:	4b12      	ldr	r3, [pc, #72]	; (800f02c <HAL_DSI_EndOfRefreshCallback+0x178>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f042 0201 	orr.w	r2, r2, #1
 800efe8:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(&hdsi_disco);  
 800efea:	2300      	movs	r3, #0
 800efec:	60fb      	str	r3, [r7, #12]
 800efee:	4b10      	ldr	r3, [pc, #64]	; (800f030 <HAL_DSI_EndOfRefreshCallback+0x17c>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800eff6:	4b0e      	ldr	r3, [pc, #56]	; (800f030 <HAL_DSI_EndOfRefreshCallback+0x17c>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f042 0208 	orr.w	r2, r2, #8
 800effe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800f002:	4b0b      	ldr	r3, [pc, #44]	; (800f030 <HAL_DSI_EndOfRefreshCallback+0x17c>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f00a:	f003 0308 	and.w	r3, r3, #8
 800f00e:	60fb      	str	r3, [r7, #12]
 800f010:	68fb      	ldr	r3, [r7, #12]
    LCD_SetUpdateRegion(0); 
 800f012:	2000      	movs	r0, #0
 800f014:	f7ff feea 	bl	800edec <LCD_SetUpdateRegion>
}
 800f018:	bf00      	nop
 800f01a:	3720      	adds	r7, #32
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	20000568 	.word	0x20000568
 800f024:	20035894 	.word	0x20035894
 800f028:	20000574 	.word	0x20000574
 800f02c:	20035798 	.word	0x20035798
 800f030:	20035840 	.word	0x20035840

0800f034 <LCD_ReqTear>:
  * @brief  Request TE at scanline.
  * @param  None
  * @retval None
  */
void LCD_ReqTear(void)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af02      	add	r7, sp, #8
  static uint8_t ScanLineParams[2];
#if (ZONES == 4 )
  uint16_t scanline = 283;
 800f03a:	f240 131b 	movw	r3, #283	; 0x11b
 800f03e:	80fb      	strh	r3, [r7, #6]
#elif (ZONES == 2 )
  uint16_t scanline = 200;
#endif
  ScanLineParams[0] = scanline >> 8;
 800f040:	88fb      	ldrh	r3, [r7, #6]
 800f042:	0a1b      	lsrs	r3, r3, #8
 800f044:	b29b      	uxth	r3, r3
 800f046:	b2da      	uxtb	r2, r3
 800f048:	4b0d      	ldr	r3, [pc, #52]	; (800f080 <LCD_ReqTear+0x4c>)
 800f04a:	701a      	strb	r2, [r3, #0]
  ScanLineParams[1] = scanline & 0x00FF;
 800f04c:	88fb      	ldrh	r3, [r7, #6]
 800f04e:	b2da      	uxtb	r2, r3
 800f050:	4b0b      	ldr	r3, [pc, #44]	; (800f080 <LCD_ReqTear+0x4c>)
 800f052:	705a      	strb	r2, [r3, #1]
  
  HAL_DSI_LongWrite(&hdsi_disco, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);     
 800f054:	4b0a      	ldr	r3, [pc, #40]	; (800f080 <LCD_ReqTear+0x4c>)
 800f056:	9301      	str	r3, [sp, #4]
 800f058:	2344      	movs	r3, #68	; 0x44
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	2302      	movs	r3, #2
 800f05e:	2239      	movs	r2, #57	; 0x39
 800f060:	2100      	movs	r1, #0
 800f062:	4808      	ldr	r0, [pc, #32]	; (800f084 <LCD_ReqTear+0x50>)
 800f064:	f7f5 fa2b 	bl	80044be <HAL_DSI_LongWrite>
  /* set_tear_on */
  HAL_DSI_ShortWrite(&hdsi_disco, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);  
 800f068:	2300      	movs	r3, #0
 800f06a:	9300      	str	r3, [sp, #0]
 800f06c:	2335      	movs	r3, #53	; 0x35
 800f06e:	2215      	movs	r2, #21
 800f070:	2100      	movs	r1, #0
 800f072:	4804      	ldr	r0, [pc, #16]	; (800f084 <LCD_ReqTear+0x50>)
 800f074:	f7f5 fa01 	bl	800447a <HAL_DSI_ShortWrite>
}
 800f078:	bf00      	nop
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	2003591c 	.word	0x2003591c
 800f084:	20035840 	.word	0x20035840

0800f088 <LCD_X_Config>:
  *         display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af02      	add	r7, sp, #8
  U32 i;

  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800f08e:	2300      	movs	r3, #0
 800f090:	607b      	str	r3, [r7, #4]
 800f092:	e007      	b.n	800f0a4 <LCD_X_Config+0x1c>
  {
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2103      	movs	r1, #3
 800f098:	4618      	mov	r0, r3
 800f09a:	f003 fc7b 	bl	8012994 <GUI_MULTIBUF_ConfigEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	607b      	str	r3, [r7, #4]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d9f4      	bls.n	800f094 <LCD_X_Config+0xc>
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	4979      	ldr	r1, [pc, #484]	; (800f294 <LCD_X_Config+0x20c>)
 800f0b0:	4879      	ldr	r0, [pc, #484]	; (800f298 <LCD_X_Config+0x210>)
 800f0b2:	f002 fe87 	bl	8011dc4 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	f005 ff1c 	bl	8014ef4 <LCD_GetSwapXYEx>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00e      	beq.n	800f0e0 <LCD_X_Config+0x58>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 800f0c2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f0c6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800f0ca:	2000      	movs	r0, #0
 800f0cc:	f006 fe2c 	bl	8015d28 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 800f0d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f0d4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800f0d8:	2000      	movs	r0, #0
 800f0da:	f006 fe6f 	bl	8015dbc <LCD_SetVSizeEx>
 800f0de:	e00d      	b.n	800f0fc <LCD_X_Config+0x74>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 800f0e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f0e4:	f44f 7148 	mov.w	r1, #800	; 0x320
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	f006 fe1d 	bl	8015d28 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 800f0ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f0f2:	f44f 7148 	mov.w	r1, #800	; 0x320
 800f0f6:	2000      	movs	r0, #0
 800f0f8:	f006 fe60 	bl	8015dbc <LCD_SetVSizeEx>
  }
#if (GUI_NUM_LAYERS > 1)
  /* Set display driver and color conversion for 2nd layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_1, COLOR_CONVERSION_1, 0, 1);
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	2200      	movs	r2, #0
 800f100:	4966      	ldr	r1, [pc, #408]	; (800f29c <LCD_X_Config+0x214>)
 800f102:	4865      	ldr	r0, [pc, #404]	; (800f298 <LCD_X_Config+0x210>)
 800f104:	f002 fe5e 	bl	8011dc4 <GUI_DEVICE_CreateAndLink>

  /* Set size of 2nd layer */
  if (LCD_GetSwapXYEx(1)) {
 800f108:	2001      	movs	r0, #1
 800f10a:	f005 fef3 	bl	8014ef4 <LCD_GetSwapXYEx>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00e      	beq.n	800f132 <LCD_X_Config+0xaa>
    LCD_SetSizeEx (1, YSIZE_PHYS, XSIZE_PHYS);
 800f114:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f118:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800f11c:	2001      	movs	r0, #1
 800f11e:	f006 fe03 	bl	8015d28 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 800f122:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f126:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800f12a:	2001      	movs	r0, #1
 800f12c:	f006 fe46 	bl	8015dbc <LCD_SetVSizeEx>
 800f130:	e00d      	b.n	800f14e <LCD_X_Config+0xc6>
  } else {
    LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
 800f132:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f136:	f44f 7148 	mov.w	r1, #800	; 0x320
 800f13a:	2001      	movs	r0, #1
 800f13c:	f006 fdf4 	bl	8015d28 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 800f140:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f144:	f44f 7148 	mov.w	r1, #800	; 0x320
 800f148:	2001      	movs	r0, #1
 800f14a:	f006 fe37 	bl	8015dbc <LCD_SetVSizeEx>
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 800f14e:	4b54      	ldr	r3, [pc, #336]	; (800f2a0 <LCD_X_Config+0x218>)
 800f150:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800f154:	601a      	str	r2, [r3, #0]

#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 800f156:	4b52      	ldr	r3, [pc, #328]	; (800f2a0 <LCD_X_Config+0x218>)
 800f158:	4a52      	ldr	r2, [pc, #328]	; (800f2a4 <LCD_X_Config+0x21c>)
 800f15a:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800f15c:	2300      	movs	r3, #0
 800f15e:	607b      	str	r3, [r7, #4]
 800f160:	e059      	b.n	800f216 <LCD_X_Config+0x18e>
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 800f162:	4a51      	ldr	r2, [pc, #324]	; (800f2a8 <LCD_X_Config+0x220>)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f16a:	484d      	ldr	r0, [pc, #308]	; (800f2a0 <LCD_X_Config+0x218>)
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	4613      	mov	r3, r2
 800f170:	00db      	lsls	r3, r3, #3
 800f172:	1a9b      	subs	r3, r3, r2
 800f174:	009b      	lsls	r3, r3, #2
 800f176:	4403      	add	r3, r0
 800f178:	3318      	adds	r3, #24
 800f17a:	6019      	str	r1, [r3, #0]

    layer_prop[i].pending_buffer = -1;
 800f17c:	4948      	ldr	r1, [pc, #288]	; (800f2a0 <LCD_X_Config+0x218>)
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	4613      	mov	r3, r2
 800f182:	00db      	lsls	r3, r3, #3
 800f184:	1a9b      	subs	r3, r3, r2
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	440b      	add	r3, r1
 800f18a:	3304      	adds	r3, #4
 800f18c:	f04f 32ff 	mov.w	r2, #4294967295
 800f190:	601a      	str	r2, [r3, #0]

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	4618      	mov	r0, r3
 800f196:	f005 fe6d 	bl	8014e74 <LCD_GetBitsPerPixelEx>
 800f19a:	4603      	mov	r3, r0
 800f19c:	10d9      	asrs	r1, r3, #3
 800f19e:	4840      	ldr	r0, [pc, #256]	; (800f2a0 <LCD_X_Config+0x218>)
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	00db      	lsls	r3, r3, #3
 800f1a6:	1a9b      	subs	r3, r3, r2
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	4403      	add	r3, r0
 800f1ac:	3314      	adds	r3, #20
 800f1ae:	6019      	str	r1, [r3, #0]

    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a3e      	ldr	r2, [pc, #248]	; (800f2ac <LCD_X_Config+0x224>)
 800f1b4:	2121      	movs	r1, #33	; 0x21
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f006 fd68 	bl	8015c8c <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4a3c      	ldr	r2, [pc, #240]	; (800f2b0 <LCD_X_Config+0x228>)
 800f1c0:	2123      	movs	r1, #35	; 0x23
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f006 fd62 	bl	8015c8c <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a3a      	ldr	r2, [pc, #232]	; (800f2b4 <LCD_X_Config+0x22c>)
 800f1cc:	2119      	movs	r1, #25
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f006 fd5c 	bl	8015c8c <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	4a38      	ldr	r2, [pc, #224]	; (800f2b8 <LCD_X_Config+0x230>)
 800f1d8:	2125      	movs	r1, #37	; 0x25
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f006 fd56 	bl	8015c8c <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	4a36      	ldr	r2, [pc, #216]	; (800f2bc <LCD_X_Config+0x234>)
 800f1e4:	2124      	movs	r1, #36	; 0x24
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f006 fd50 	bl	8015c8c <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp); 
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	4a34      	ldr	r2, [pc, #208]	; (800f2c0 <LCD_X_Config+0x238>)
 800f1f0:	2128      	movs	r1, #40	; 0x28
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f006 fd4a 	bl	8015c8c <LCD_SetDevFunc>

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	4929      	ldr	r1, [pc, #164]	; (800f2a0 <LCD_X_Config+0x218>)
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	4613      	mov	r3, r2
 800f200:	00db      	lsls	r3, r3, #3
 800f202:	1a9b      	subs	r3, r3, r2
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	440b      	add	r3, r1
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4619      	mov	r1, r3
 800f20c:	f006 fdbe 	bl	8015d8c <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	3301      	adds	r3, #1
 800f214:	607b      	str	r3, [r7, #4]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d9a2      	bls.n	800f162 <LCD_X_Config+0xda>
  }

  LCD_LL_Init ();
 800f21c:	f7ff f8c2 	bl	800e3a4 <LCD_LL_Init>

  LCD_LL_LayerInit(0, LCD_LAYER0_FRAME_BUFFER);
 800f220:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800f224:	2000      	movs	r0, #0
 800f226:	f7ff f9d3 	bl	800e5d0 <LCD_LL_LayerInit>
#if (GUI_NUM_LAYERS > 1)    
  LCD_LL_LayerInit(1, LCD_LAYER1_FRAME_BUFFER);
 800f22a:	491e      	ldr	r1, [pc, #120]	; (800f2a4 <LCD_X_Config+0x21c>)
 800f22c:	2001      	movs	r0, #1
 800f22e:	f7ff f9cf 	bl	800e5d0 <LCD_LL_LayerInit>
#endif

  HAL_DSI_LongWrite(&hdsi_disco, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[0]);
 800f232:	4b24      	ldr	r3, [pc, #144]	; (800f2c4 <LCD_X_Config+0x23c>)
 800f234:	9301      	str	r3, [sp, #4]
 800f236:	232a      	movs	r3, #42	; 0x2a
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	2304      	movs	r3, #4
 800f23c:	2239      	movs	r2, #57	; 0x39
 800f23e:	2100      	movs	r1, #0
 800f240:	4821      	ldr	r0, [pc, #132]	; (800f2c8 <LCD_X_Config+0x240>)
 800f242:	f7f5 f93c 	bl	80044be <HAL_DSI_LongWrite>
  HAL_DSI_LongWrite(&hdsi_disco, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_PASET, pPage);
 800f246:	4b21      	ldr	r3, [pc, #132]	; (800f2cc <LCD_X_Config+0x244>)
 800f248:	9301      	str	r3, [sp, #4]
 800f24a:	232b      	movs	r3, #43	; 0x2b
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	2304      	movs	r3, #4
 800f250:	2239      	movs	r2, #57	; 0x39
 800f252:	2100      	movs	r1, #0
 800f254:	481c      	ldr	r0, [pc, #112]	; (800f2c8 <LCD_X_Config+0x240>)
 800f256:	f7f5 f932 	bl	80044be <HAL_DSI_LongWrite>

  /* Update pitch : the draw is done on the whole physical X Size */
  HAL_LTDC_SetPitch(&hltdc_disco, XSIZE_PHYS, 0);
 800f25a:	2200      	movs	r2, #0
 800f25c:	f44f 7148 	mov.w	r1, #800	; 0x320
 800f260:	481b      	ldr	r0, [pc, #108]	; (800f2d0 <LCD_X_Config+0x248>)
 800f262:	f7f8 fd4b 	bl	8007cfc <HAL_LTDC_SetPitch>
#if (GUI_NUM_LAYERS > 1)    
  HAL_LTDC_SetPitch(&hltdc_disco, XSIZE_PHYS, 1);
 800f266:	2201      	movs	r2, #1
 800f268:	f44f 7148 	mov.w	r1, #800	; 0x320
 800f26c:	4818      	ldr	r0, [pc, #96]	; (800f2d0 <LCD_X_Config+0x248>)
 800f26e:	f7f8 fd45 	bl	8007cfc <HAL_LTDC_SetPitch>
#endif

  HAL_Delay(20);
 800f272:	2014      	movs	r0, #20
 800f274:	f7f3 ff3e 	bl	80030f4 <HAL_Delay>

  LCD_ReqTear();
 800f278:	f7ff fedc 	bl	800f034 <LCD_ReqTear>

  /* Send Display off DCS Command to display */
  HAL_DSI_ShortWrite(&(hdsi_disco),
 800f27c:	2300      	movs	r3, #0
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	2329      	movs	r3, #41	; 0x29
 800f282:	2215      	movs	r2, #21
 800f284:	2100      	movs	r1, #0
 800f286:	4810      	ldr	r0, [pc, #64]	; (800f2c8 <LCD_X_Config+0x240>)
 800f288:	f7f5 f8f7 	bl	800447a <HAL_DSI_ShortWrite>
                     0,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPON,
                     0x00);
}
 800f28c:	bf00      	nop
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	080254fc 	.word	0x080254fc
 800f298:	080258f8 	.word	0x080258f8
 800f29c:	080254e4 	.word	0x080254e4
 800f2a0:	2003585c 	.word	0x2003585c
 800f2a4:	c0400000 	.word	0xc0400000
 800f2a8:	2000056c 	.word	0x2000056c
 800f2ac:	0800e831 	.word	0x0800e831
 800f2b0:	0800e8e5 	.word	0x0800e8e5
 800f2b4:	0800ea0d 	.word	0x0800ea0d
 800f2b8:	0800ed1d 	.word	0x0800ed1d
 800f2bc:	0800eb7d 	.word	0x0800eb7d
 800f2c0:	0800ec4d 	.word	0x0800ec4d
 800f2c4:	20000558 	.word	0x20000558
 800f2c8:	20035840 	.word	0x20035840
 800f2cc:	20000554 	.word	0x20000554
 800f2d0:	20035798 	.word	0x20035798

0800f2d4 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 800f2d4:	b590      	push	{r4, r7, lr}
 800f2d6:	b08f      	sub	sp, #60	; 0x3c
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
  int r = 0;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	637b      	str	r3, [r7, #52]	; 0x34
  U32 addr;
  int xPos, yPos;
  U32 Color;

  LCD_X_SHOWBUFFER_INFO * p;  
  switch (Cmd) 
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	3b03      	subs	r3, #3
 800f2e8:	2b0b      	cmp	r3, #11
 800f2ea:	f200 817f 	bhi.w	800f5ec <LCD_X_DisplayDriver+0x318>
 800f2ee:	a201      	add	r2, pc, #4	; (adr r2, 800f2f4 <LCD_X_DisplayDriver+0x20>)
 800f2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f4:	0800f325 	.word	0x0800f325
 800f2f8:	0800f5ed 	.word	0x0800f5ed
 800f2fc:	0800f3f3 	.word	0x0800f3f3
 800f300:	0800f405 	.word	0x0800f405
 800f304:	0800f537 	.word	0x0800f537
 800f308:	0800f521 	.word	0x0800f521
 800f30c:	0800f417 	.word	0x0800f417
 800f310:	0800f585 	.word	0x0800f585
 800f314:	0800f5ed 	.word	0x0800f5ed
 800f318:	0800f595 	.word	0x0800f595
 800f31c:	0800f5c1 	.word	0x0800f5c1
 800f320:	0800f375 	.word	0x0800f375
  {   
  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 800f324:	49a2      	ldr	r1, [pc, #648]	; (800f5b0 <LCD_X_DisplayDriver+0x2dc>)
 800f326:	68fa      	ldr	r2, [r7, #12]
 800f328:	4613      	mov	r3, r2
 800f32a:	00db      	lsls	r3, r3, #3
 800f32c:	1a9b      	subs	r3, r3, r2
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	440b      	add	r3, r1
 800f332:	6819      	ldr	r1, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6858      	ldr	r0, [r3, #4]
 800f338:	4c9d      	ldr	r4, [pc, #628]	; (800f5b0 <LCD_X_DisplayDriver+0x2dc>)
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	4613      	mov	r3, r2
 800f33e:	00db      	lsls	r3, r3, #3
 800f340:	1a9b      	subs	r3, r3, r2
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	4423      	add	r3, r4
 800f346:	330c      	adds	r3, #12
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	fb03 f000 	mul.w	r0, r3, r0
 800f34e:	4c98      	ldr	r4, [pc, #608]	; (800f5b0 <LCD_X_DisplayDriver+0x2dc>)
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	4613      	mov	r3, r2
 800f354:	00db      	lsls	r3, r3, #3
 800f356:	1a9b      	subs	r3, r3, r2
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	4423      	add	r3, r4
 800f35c:	3314      	adds	r3, #20
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	fb00 f303 	mul.w	r3, r0, r3
 800f364:	440b      	add	r3, r1
 800f366:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_LTDC_SetAddress(&hltdc_disco, addr, LayerIndex);
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f36c:	4891      	ldr	r0, [pc, #580]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f36e:	f7f8 fc8e 	bl	8007c8e <HAL_LTDC_SetAddress>
    break;
 800f372:	e13e      	b.n	800f5f2 <LCD_X_DisplayDriver+0x31e>

  case LCD_X_SHOWBUFFER: 
    p = (LCD_X_SHOWBUFFER_INFO *)pData;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	633b      	str	r3, [r7, #48]	; 0x30
    LCD_Addr[LayerIndex] = layer_prop[LayerIndex].address + \
 800f378:	498d      	ldr	r1, [pc, #564]	; (800f5b0 <LCD_X_DisplayDriver+0x2dc>)
 800f37a:	68fa      	ldr	r2, [r7, #12]
 800f37c:	4613      	mov	r3, r2
 800f37e:	00db      	lsls	r3, r3, #3
 800f380:	1a9b      	subs	r3, r3, r2
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	440b      	add	r3, r1
 800f386:	6819      	ldr	r1, [r3, #0]
      layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel * p->Index;
 800f388:	4889      	ldr	r0, [pc, #548]	; (800f5b0 <LCD_X_DisplayDriver+0x2dc>)
 800f38a:	68fa      	ldr	r2, [r7, #12]
 800f38c:	4613      	mov	r3, r2
 800f38e:	00db      	lsls	r3, r3, #3
 800f390:	1a9b      	subs	r3, r3, r2
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	4403      	add	r3, r0
 800f396:	330c      	adds	r3, #12
 800f398:	6818      	ldr	r0, [r3, #0]
 800f39a:	4c85      	ldr	r4, [pc, #532]	; (800f5b0 <LCD_X_DisplayDriver+0x2dc>)
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	4613      	mov	r3, r2
 800f3a0:	00db      	lsls	r3, r3, #3
 800f3a2:	1a9b      	subs	r3, r3, r2
 800f3a4:	009b      	lsls	r3, r3, #2
 800f3a6:	4423      	add	r3, r4
 800f3a8:	3310      	adds	r3, #16
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	fb03 f000 	mul.w	r0, r3, r0
 800f3b0:	4c7f      	ldr	r4, [pc, #508]	; (800f5b0 <LCD_X_DisplayDriver+0x2dc>)
 800f3b2:	68fa      	ldr	r2, [r7, #12]
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	00db      	lsls	r3, r3, #3
 800f3b8:	1a9b      	subs	r3, r3, r2
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	4423      	add	r3, r4
 800f3be:	3314      	adds	r3, #20
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	fb00 f303 	mul.w	r3, r0, r3
 800f3c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3c8:	6812      	ldr	r2, [r2, #0]
 800f3ca:	fb02 f303 	mul.w	r3, r2, r3
    LCD_Addr[LayerIndex] = layer_prop[LayerIndex].address + \
 800f3ce:	440b      	add	r3, r1
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	4a79      	ldr	r2, [pc, #484]	; (800f5b8 <LCD_X_DisplayDriver+0x2e4>)
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    layer_prop[LayerIndex].pending_buffer = p->Index;
 800f3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3dc:	6819      	ldr	r1, [r3, #0]
 800f3de:	4874      	ldr	r0, [pc, #464]	; (800f5b0 <LCD_X_DisplayDriver+0x2dc>)
 800f3e0:	68fa      	ldr	r2, [r7, #12]
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	00db      	lsls	r3, r3, #3
 800f3e6:	1a9b      	subs	r3, r3, r2
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	4403      	add	r3, r0
 800f3ec:	3304      	adds	r3, #4
 800f3ee:	6019      	str	r1, [r3, #0]
    break;
 800f3f0:	e0ff      	b.n	800f5f2 <LCD_X_DisplayDriver+0x31e>

  case LCD_X_ON: 
    __HAL_LTDC_ENABLE(&hltdc_disco);
 800f3f2:	4b70      	ldr	r3, [pc, #448]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	699a      	ldr	r2, [r3, #24]
 800f3f8:	4b6e      	ldr	r3, [pc, #440]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f042 0201 	orr.w	r2, r2, #1
 800f400:	619a      	str	r2, [r3, #24]
    break;
 800f402:	e0f6      	b.n	800f5f2 <LCD_X_DisplayDriver+0x31e>

  case LCD_X_OFF: 
    __HAL_LTDC_DISABLE(&hltdc_disco);
 800f404:	4b6b      	ldr	r3, [pc, #428]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	699a      	ldr	r2, [r3, #24]
 800f40a:	4b6a      	ldr	r3, [pc, #424]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f022 0201 	bic.w	r2, r2, #1
 800f412:	619a      	str	r2, [r3, #24]
    break;
 800f414:	e0ed      	b.n	800f5f2 <LCD_X_DisplayDriver+0x31e>

  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d13a      	bne.n	800f494 <LCD_X_DisplayDriver+0x1c0>
    {
      __HAL_DSI_WRAPPER_DISABLE(&hdsi_disco);
 800f41e:	2300      	movs	r3, #0
 800f420:	61fb      	str	r3, [r7, #28]
 800f422:	4b66      	ldr	r3, [pc, #408]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f42a:	4b64      	ldr	r3, [pc, #400]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f022 0208 	bic.w	r2, r2, #8
 800f432:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800f436:	4b61      	ldr	r3, [pc, #388]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f43e:	f003 0308 	and.w	r3, r3, #8
 800f442:	61fb      	str	r3, [r7, #28]
 800f444:	69fb      	ldr	r3, [r7, #28]
      __HAL_LTDC_LAYER_ENABLE(&hltdc_disco, LayerIndex); 
 800f446:	4b5b      	ldr	r3, [pc, #364]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	461a      	mov	r2, r3
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	01db      	lsls	r3, r3, #7
 800f450:	4413      	add	r3, r2
 800f452:	3384      	adds	r3, #132	; 0x84
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	4a57      	ldr	r2, [pc, #348]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f458:	6812      	ldr	r2, [r2, #0]
 800f45a:	4611      	mov	r1, r2
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	01d2      	lsls	r2, r2, #7
 800f460:	440a      	add	r2, r1
 800f462:	3284      	adds	r2, #132	; 0x84
 800f464:	f043 0301 	orr.w	r3, r3, #1
 800f468:	6013      	str	r3, [r2, #0]
      __HAL_DSI_WRAPPER_ENABLE(&hdsi_disco);
 800f46a:	2300      	movs	r3, #0
 800f46c:	61bb      	str	r3, [r7, #24]
 800f46e:	4b53      	ldr	r3, [pc, #332]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f476:	4b51      	ldr	r3, [pc, #324]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f042 0208 	orr.w	r2, r2, #8
 800f47e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800f482:	4b4e      	ldr	r3, [pc, #312]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f48a:	f003 0308 	and.w	r3, r3, #8
 800f48e:	61bb      	str	r3, [r7, #24]
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	e039      	b.n	800f508 <LCD_X_DisplayDriver+0x234>
    }
    else
    {
      __HAL_DSI_WRAPPER_DISABLE(&hdsi_disco);
 800f494:	2300      	movs	r3, #0
 800f496:	617b      	str	r3, [r7, #20]
 800f498:	4b48      	ldr	r3, [pc, #288]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f4a0:	4b46      	ldr	r3, [pc, #280]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f022 0208 	bic.w	r2, r2, #8
 800f4a8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800f4ac:	4b43      	ldr	r3, [pc, #268]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f4b4:	f003 0308 	and.w	r3, r3, #8
 800f4b8:	617b      	str	r3, [r7, #20]
 800f4ba:	697b      	ldr	r3, [r7, #20]
      __HAL_LTDC_LAYER_DISABLE(&hltdc_disco, LayerIndex); 
 800f4bc:	4b3d      	ldr	r3, [pc, #244]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	01db      	lsls	r3, r3, #7
 800f4c6:	4413      	add	r3, r2
 800f4c8:	3384      	adds	r3, #132	; 0x84
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4a39      	ldr	r2, [pc, #228]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f4ce:	6812      	ldr	r2, [r2, #0]
 800f4d0:	4611      	mov	r1, r2
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	01d2      	lsls	r2, r2, #7
 800f4d6:	440a      	add	r2, r1
 800f4d8:	3284      	adds	r2, #132	; 0x84
 800f4da:	f023 0301 	bic.w	r3, r3, #1
 800f4de:	6013      	str	r3, [r2, #0]
      __HAL_DSI_WRAPPER_ENABLE(&hdsi_disco);
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	613b      	str	r3, [r7, #16]
 800f4e4:	4b35      	ldr	r3, [pc, #212]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f4ec:	4b33      	ldr	r3, [pc, #204]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f042 0208 	orr.w	r2, r2, #8
 800f4f4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800f4f8:	4b30      	ldr	r3, [pc, #192]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f500:	f003 0308 	and.w	r3, r3, #8
 800f504:	613b      	str	r3, [r7, #16]
 800f506:	693b      	ldr	r3, [r7, #16]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc_disco); 
 800f508:	4b2a      	ldr	r3, [pc, #168]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f50e:	4b29      	ldr	r3, [pc, #164]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f042 0201 	orr.w	r2, r2, #1
 800f516:	625a      	str	r2, [r3, #36]	; 0x24

    HAL_DSI_Refresh(&hdsi_disco); 
 800f518:	4828      	ldr	r0, [pc, #160]	; (800f5bc <LCD_X_DisplayDriver+0x2e8>)
 800f51a:	f7f4 ff8d 	bl	8004438 <HAL_DSI_Refresh>
    break;
 800f51e:	e068      	b.n	800f5f2 <LCD_X_DisplayDriver+0x31e>

  case LCD_X_SETPOS: 
    HAL_LTDC_SetWindowPosition(&hltdc_disco, 
                               ((LCD_X_SETPOS_INFO *)pData)->xPos, 
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc_disco, 
 800f524:	4619      	mov	r1, r3
                               ((LCD_X_SETPOS_INFO *)pData)->yPos, 
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	685b      	ldr	r3, [r3, #4]
    HAL_LTDC_SetWindowPosition(&hltdc_disco, 
 800f52a:	461a      	mov	r2, r3
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	4821      	ldr	r0, [pc, #132]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f530:	f7f8 fb31 	bl	8007b96 <HAL_LTDC_SetWindowPosition>
                               LayerIndex);
    break;
 800f534:	e05d      	b.n	800f5f2 <LCD_X_DisplayDriver+0x31e>

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 800f536:	f107 0220 	add.w	r2, r7, #32
 800f53a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f53e:	4619      	mov	r1, r3
 800f540:	68f8      	ldr	r0, [r7, #12]
 800f542:	f003 fb35 	bl	8012bb0 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6819      	ldr	r1, [r3, #0]
 800f54a:	4819      	ldr	r0, [pc, #100]	; (800f5b0 <LCD_X_DisplayDriver+0x2dc>)
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	4613      	mov	r3, r2
 800f550:	00db      	lsls	r3, r3, #3
 800f552:	1a9b      	subs	r3, r3, r2
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	4403      	add	r3, r0
 800f558:	330c      	adds	r3, #12
 800f55a:	6019      	str	r1, [r3, #0]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6859      	ldr	r1, [r3, #4]
 800f560:	4813      	ldr	r0, [pc, #76]	; (800f5b0 <LCD_X_DisplayDriver+0x2dc>)
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	4613      	mov	r3, r2
 800f566:	00db      	lsls	r3, r3, #3
 800f568:	1a9b      	subs	r3, r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	4403      	add	r3, r0
 800f56e:	3310      	adds	r3, #16
 800f570:	6019      	str	r1, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc_disco, xPos, yPos, LayerIndex);
 800f572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f574:	4619      	mov	r1, r3
 800f576:	6a3b      	ldr	r3, [r7, #32]
 800f578:	461a      	mov	r2, r3
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	480d      	ldr	r0, [pc, #52]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f57e:	f7f8 fb0a 	bl	8007b96 <HAL_LTDC_SetWindowPosition>
    break;
 800f582:	e036      	b.n	800f5f2 <LCD_X_DisplayDriver+0x31e>

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc_disco, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	4619      	mov	r1, r3
 800f58c:	4809      	ldr	r0, [pc, #36]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f58e:	f7f8 fb48 	bl	8007c22 <HAL_LTDC_SetAlpha>
    break;
 800f592:	e02e      	b.n	800f5f2 <LCD_X_DisplayDriver+0x31e>

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d004      	beq.n	800f5a6 <LCD_X_DisplayDriver+0x2d2>
    {
      HAL_LTDC_EnableColorKeying(&hltdc_disco, LayerIndex);
 800f59c:	68f9      	ldr	r1, [r7, #12]
 800f59e:	4805      	ldr	r0, [pc, #20]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f5a0:	f7f8 fa87 	bl	8007ab2 <HAL_LTDC_EnableColorKeying>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc_disco, LayerIndex);      
    }
    break;
 800f5a4:	e025      	b.n	800f5f2 <LCD_X_DisplayDriver+0x31e>
      HAL_LTDC_DisableColorKeying(&hltdc_disco, LayerIndex);      
 800f5a6:	68f9      	ldr	r1, [r7, #12]
 800f5a8:	4802      	ldr	r0, [pc, #8]	; (800f5b4 <LCD_X_DisplayDriver+0x2e0>)
 800f5aa:	f7f8 fabb 	bl	8007b24 <HAL_LTDC_DisableColorKeying>
    break;
 800f5ae:	e020      	b.n	800f5f2 <LCD_X_DisplayDriver+0x31e>
 800f5b0:	2003585c 	.word	0x2003585c
 800f5b4:	20035798 	.word	0x20035798
 800f5b8:	20000574 	.word	0x20000574
 800f5bc:	20035840 	.word	0x20035840

  case LCD_X_SETCHROMA:
    
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	0c1b      	lsrs	r3, r3, #16
 800f5c6:	b2da      	uxtb	r2, r3
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800f5d0:	431a      	orrs	r2, r3
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	041b      	lsls	r3, r3, #16
 800f5d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_LTDC_ConfigColorKeying(&hltdc_disco, Color, LayerIndex);
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f5e4:	4805      	ldr	r0, [pc, #20]	; (800f5fc <LCD_X_DisplayDriver+0x328>)
 800f5e6:	f7f8 fa20 	bl	8007a2a <HAL_LTDC_ConfigColorKeying>
    break;
 800f5ea:	e002      	b.n	800f5f2 <LCD_X_DisplayDriver+0x31e>

  default:
    r = -1;
 800f5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return r;
 800f5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	373c      	adds	r7, #60	; 0x3c
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd90      	pop	{r4, r7, pc}
 800f5fc:	20035798 	.word	0x20035798

0800f600 <DSI_IRQHandler>:
  * @brief  This function handles DSI Handler.
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	af00      	add	r7, sp, #0
  HAL_DSI_IRQHandler(&hdsi_disco);
 800f604:	4802      	ldr	r0, [pc, #8]	; (800f610 <DSI_IRQHandler+0x10>)
 800f606:	f7f4 fc41 	bl	8003e8c <HAL_DSI_IRQHandler>
}
 800f60a:	bf00      	nop
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	20035840 	.word	0x20035840

0800f614 <GUI_X_GetTime>:
and delay function. Default time unit (tick), normally is
1 ms.
*/

int GUI_X_GetTime(void)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	af00      	add	r7, sp, #0
  return ((int) osKernelSysTick());
 800f618:	f7fb fc9b 	bl	800af52 <osKernelSysTick>
 800f61c:	4603      	mov	r3, r0
}
 800f61e:	4618      	mov	r0, r3
 800f620:	bd80      	pop	{r7, pc}

0800f622 <GUI_X_Delay>:

void GUI_X_Delay(int ms)
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b082      	sub	sp, #8
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
  osDelay( ms );
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fb fcce 	bl	800afce <osDelay>
}
 800f632:	bf00      	nop
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <GUI_X_Init>:
* GUI_X_Init() is called from GUI_Init is a possibility to init
* some hardware which needs to be up and running before the GUI.
* If not required, leave this routine blank.
*/

void GUI_X_Init(void) {
 800f63a:	b480      	push	{r7}
 800f63c:	af00      	add	r7, sp, #0
}
 800f63e:	bf00      	nop
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 800f64e:	2300      	movs	r3, #0
 800f650:	607b      	str	r3, [r7, #4]
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 800f652:	1d3b      	adds	r3, r7, #4
 800f654:	4618      	mov	r0, r3
 800f656:	f7fb fd2f 	bl	800b0b8 <osMutexCreate>
 800f65a:	4603      	mov	r3, r0
 800f65c:	4a07      	ldr	r2, [pc, #28]	; (800f67c <GUI_X_InitOS+0x34>)
 800f65e:	6013      	str	r3, [r2, #0]
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 800f660:	2300      	movs	r3, #0
 800f662:	603b      	str	r3, [r7, #0]
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 800f664:	463b      	mov	r3, r7
 800f666:	2101      	movs	r1, #1
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fb fdb5 	bl	800b1d8 <osSemaphoreCreate>
 800f66e:	4603      	mov	r3, r0
 800f670:	4a03      	ldr	r2, [pc, #12]	; (800f680 <GUI_X_InitOS+0x38>)
 800f672:	6013      	str	r3, [r2, #0]
}
 800f674:	bf00      	nop
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	20035920 	.word	0x20035920
 800f680:	20035924 	.word	0x20035924

0800f684 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
 800f684:	b580      	push	{r7, lr}
 800f686:	af00      	add	r7, sp, #0
  osMutexRelease(osMutex);
 800f688:	4b03      	ldr	r3, [pc, #12]	; (800f698 <GUI_X_Unlock+0x14>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7fb fd6d 	bl	800b16c <osMutexRelease>
}
 800f692:	bf00      	nop
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	20035920 	.word	0x20035920

0800f69c <GUI_X_Lock>:

void GUI_X_Lock(void)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	af00      	add	r7, sp, #0
  osMutexWait(osMutex , osWaitForever) ;
 800f6a0:	4b04      	ldr	r3, [pc, #16]	; (800f6b4 <GUI_X_Lock+0x18>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f04f 31ff 	mov.w	r1, #4294967295
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7fb fd11 	bl	800b0d0 <osMutexWait>
}
 800f6ae:	bf00      	nop
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	20035920 	.word	0x20035920

0800f6b8 <GUI_X_GetTaskId>:

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	af00      	add	r7, sp, #0
  return ((U32) osThreadGetId());
 800f6bc:	f7fb fc80 	bl	800afc0 <osThreadGetId>
 800f6c0:	4603      	mov	r3, r0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	bd80      	pop	{r7, pc}

0800f6c6 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b082      	sub	sp, #8
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer (hhcd->pData);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f000 f85d 	bl	800f794 <USBH_LL_IncTimer>
}
 800f6da:	bf00      	nop
 800f6dc:	3708      	adds	r7, #8
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}

0800f6e2 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f6e2:	b580      	push	{r7, lr}
 800f6e4:	b082      	sub	sp, #8
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f000 f8a1 	bl	800f838 <USBH_LL_Connect>
}
 800f6f6:	bf00      	nop
 800f6f8:	3708      	adds	r7, #8
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b082      	sub	sp, #8
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f70c:	4618      	mov	r0, r3
 800f70e:	f000 f8b6 	bl	800f87e <USBH_LL_Disconnect>
}
 800f712:	bf00      	nop
 800f714:	3708      	adds	r7, #8
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}

0800f71a <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f71a:	b580      	push	{r7, lr}
 800f71c:	b082      	sub	sp, #8
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f728:	4618      	mov	r0, r3
 800f72a:	f000 f85d 	bl	800f7e8 <USBH_LL_PortEnabled>
} 
 800f72e:	bf00      	nop
 800f730:	3708      	adds	r7, #8
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}

0800f736 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f736:	b580      	push	{r7, lr}
 800f738:	b082      	sub	sp, #8
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f744:	4618      	mov	r0, r3
 800f746:	f000 f869 	bl	800f81c <USBH_LL_PortDisabled>
} 
 800f74a:	bf00      	nop
 800f74c:	3708      	adds	r7, #8
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: Channel number 
  * @param  urb_state: URB State
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b082      	sub	sp, #8
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
 800f75a:	460b      	mov	r3, r1
 800f75c:	70fb      	strb	r3, [r7, #3]
 800f75e:	4613      	mov	r3, r2
 800f760:	70bb      	strb	r3, [r7, #2]
#if (USBH_USE_OS == 1)   
  USBH_LL_NotifyURBChange(hhcd->pData);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f768:	4618      	mov	r0, r3
 800f76a:	f000 f8ba 	bl	800f8e2 <USBH_LL_NotifyURBChange>
#endif
}
 800f76e:	bf00      	nop
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b082      	sub	sp, #8
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800f784:	4618      	mov	r0, r3
 800f786:	f7f5 fa22 	bl	8004bce <HAL_HCD_Stop>
  return USBH_OK; 
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 800f7a2:	1c5a      	adds	r2, r3, #1
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
  USBH_HandleSof(phost);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 f804 	bl	800f7b8 <USBH_HandleSof>
}
 800f7b0:	bf00      	nop
 800f7b2:	3708      	adds	r7, #8
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	2b0b      	cmp	r3, #11
 800f7c8:	d10a      	bne.n	800f7e0 <USBH_HandleSof+0x28>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d005      	beq.n	800f7e0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 800f7da:	699b      	ldr	r3, [r3, #24]
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	4798      	blx	r3
  }
}
 800f7e0:	bf00      	nop
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f80c:	2200      	movs	r2, #0
 800f80e:	4619      	mov	r1, r3
 800f810:	f7fb fd06 	bl	800b220 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800f814:	bf00      	nop
}
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b083      	sub	sp, #12
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2200      	movs	r2, #0
 800f828:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  return;
 800f82c:	bf00      	nop
}
 800f82e:	370c      	adds	r7, #12
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2201      	movs	r2, #1
 800f844:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2200      	movs	r2, #0
 800f84c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2201      	movs	r2, #1
 800f85c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f86c:	2200      	movs	r2, #0
 800f86e:	4619      	mov	r1, r3
 800f870:	f7fb fcd6 	bl	800b220 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f874:	2300      	movs	r3, #0
}
 800f876:	4618      	mov	r0, r3
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}

0800f87e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f87e:	b580      	push	{r7, lr}
 800f880:	b082      	sub	sp, #8
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2201      	movs	r2, #1
 800f88a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_connected = 0U;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2200      	movs	r2, #0
 800f892:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2200      	movs	r2, #0
 800f89a:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f7ff ff69 	bl	800f776 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	791b      	ldrb	r3, [r3, #4]
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 f830 	bl	800f910 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	795b      	ldrb	r3, [r3, #5]
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 f82a 	bl	800f910 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2201      	movs	r2, #1
 800f8c0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	f7fb fca4 	bl	800b220 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f8d8:	2300      	movs	r3, #0
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}

0800f8e2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b082      	sub	sp, #8
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f8fe:	2200      	movs	r2, #0
 800f900:	4619      	mov	r1, r3
 800f902:	f7fb fc8d 	bl	800b220 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800f906:	2300      	movs	r3, #0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3708      	adds	r7, #8
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	460b      	mov	r3, r1
 800f91a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800f91c:	78fb      	ldrb	r3, [r7, #3]
 800f91e:	2b0f      	cmp	r3, #15
 800f920:	d80f      	bhi.n	800f942 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f922:	78fb      	ldrb	r3, [r7, #3]
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	4413      	add	r3, r2
 800f92e:	685a      	ldr	r2, [r3, #4]
 800f930:	78fb      	ldrb	r3, [r7, #3]
 800f932:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f936:	6879      	ldr	r1, [r7, #4]
 800f938:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	440b      	add	r3, r1
 800f940:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f942:	2300      	movs	r3, #0
}
 800f944:	4618      	mov	r0, r3
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <GL_FillCircleAA_HiRes>:
 800f950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f954:	b083      	sub	sp, #12
 800f956:	4681      	mov	r9, r0
 800f958:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800fa44 <GL_FillCircleAA_HiRes+0xf4>
 800f95c:	9101      	str	r1, [sp, #4]
 800f95e:	460c      	mov	r4, r1
 800f960:	1a80      	subs	r0, r0, r2
 800f962:	eb09 0102 	add.w	r1, r9, r2
 800f966:	4617      	mov	r7, r2
 800f968:	f000 fa00 	bl	800fd6c <GUI_AA_Init_HiRes>
 800f96c:	f8da 3000 	ldr.w	r3, [sl]
 800f970:	eb07 75d7 	add.w	r5, r7, r7, lsr #31
 800f974:	695b      	ldr	r3, [r3, #20]
 800f976:	106d      	asrs	r5, r5, #1
 800f978:	193a      	adds	r2, r7, r4
 800f97a:	fb07 5507 	mla	r5, r7, r7, r5
 800f97e:	ebc7 0804 	rsb	r8, r7, r4
 800f982:	9200      	str	r2, [sp, #0]
 800f984:	b15b      	cbz	r3, 800f99e <GL_FillCircleAA_HiRes+0x4e>
 800f986:	4611      	mov	r1, r2
 800f988:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f98c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f990:	4291      	cmp	r1, r2
 800f992:	bfa8      	it	ge
 800f994:	4611      	movge	r1, r2
 800f996:	4598      	cmp	r8, r3
 800f998:	9100      	str	r1, [sp, #0]
 800f99a:	bfb8      	it	lt
 800f99c:	4698      	movlt	r8, r3
 800f99e:	2f01      	cmp	r7, #1
 800f9a0:	dd4d      	ble.n	800fa3e <GL_FillCircleAA_HiRes+0xee>
 800f9a2:	9b01      	ldr	r3, [sp, #4]
 800f9a4:	463c      	mov	r4, r7
 800f9a6:	1e5e      	subs	r6, r3, #1
 800f9a8:	f04f 0b01 	mov.w	fp, #1
 800f9ac:	4546      	cmp	r6, r8
 800f9ae:	db17      	blt.n	800f9e0 <GL_FillCircleAA_HiRes+0x90>
 800f9b0:	9b00      	ldr	r3, [sp, #0]
 800f9b2:	429e      	cmp	r6, r3
 800f9b4:	dc14      	bgt.n	800f9e0 <GL_FillCircleAA_HiRes+0x90>
 800f9b6:	fb0b f20b 	mul.w	r2, fp, fp
 800f9ba:	fb04 2304 	mla	r3, r4, r4, r2
 800f9be:	429d      	cmp	r5, r3
 800f9c0:	da04      	bge.n	800f9cc <GL_FillCircleAA_HiRes+0x7c>
 800f9c2:	3c01      	subs	r4, #1
 800f9c4:	fb04 2304 	mla	r3, r4, r4, r2
 800f9c8:	429d      	cmp	r5, r3
 800f9ca:	dbfa      	blt.n	800f9c2 <GL_FillCircleAA_HiRes+0x72>
 800f9cc:	f8da 3000 	ldr.w	r3, [sl]
 800f9d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9d2:	eb09 0204 	add.w	r2, r9, r4
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4631      	mov	r1, r6
 800f9da:	ebc4 0009 	rsb	r0, r4, r9
 800f9de:	4798      	blx	r3
 800f9e0:	f10b 0b01 	add.w	fp, fp, #1
 800f9e4:	455f      	cmp	r7, fp
 800f9e6:	f106 36ff 	add.w	r6, r6, #4294967295
 800f9ea:	d1df      	bne.n	800f9ac <GL_FillCircleAA_HiRes+0x5c>
 800f9ec:	9e01      	ldr	r6, [sp, #4]
 800f9ee:	463c      	mov	r4, r7
 800f9f0:	f04f 0b00 	mov.w	fp, #0
 800f9f4:	45b0      	cmp	r8, r6
 800f9f6:	dc17      	bgt.n	800fa28 <GL_FillCircleAA_HiRes+0xd8>
 800f9f8:	9b00      	ldr	r3, [sp, #0]
 800f9fa:	42b3      	cmp	r3, r6
 800f9fc:	db14      	blt.n	800fa28 <GL_FillCircleAA_HiRes+0xd8>
 800f9fe:	fb0b f20b 	mul.w	r2, fp, fp
 800fa02:	fb04 2304 	mla	r3, r4, r4, r2
 800fa06:	429d      	cmp	r5, r3
 800fa08:	da04      	bge.n	800fa14 <GL_FillCircleAA_HiRes+0xc4>
 800fa0a:	3c01      	subs	r4, #1
 800fa0c:	fb04 2304 	mla	r3, r4, r4, r2
 800fa10:	429d      	cmp	r5, r3
 800fa12:	dbfa      	blt.n	800fa0a <GL_FillCircleAA_HiRes+0xba>
 800fa14:	f8da 3000 	ldr.w	r3, [sl]
 800fa18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa1a:	eb09 0204 	add.w	r2, r9, r4
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4631      	mov	r1, r6
 800fa22:	ebc4 0009 	rsb	r0, r4, r9
 800fa26:	4798      	blx	r3
 800fa28:	f10b 0b01 	add.w	fp, fp, #1
 800fa2c:	455f      	cmp	r7, fp
 800fa2e:	f106 0601 	add.w	r6, r6, #1
 800fa32:	d1df      	bne.n	800f9f4 <GL_FillCircleAA_HiRes+0xa4>
 800fa34:	b003      	add	sp, #12
 800fa36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa3a:	f000 ba3b 	b.w	800feb4 <GUI_AA_Exit>
 800fa3e:	2f00      	cmp	r7, #0
 800fa40:	ddf8      	ble.n	800fa34 <GL_FillCircleAA_HiRes+0xe4>
 800fa42:	e7d3      	b.n	800f9ec <GL_FillCircleAA_HiRes+0x9c>
 800fa44:	20000014 	.word	0x20000014

0800fa48 <GUI_AA_FillCircle>:
 800fa48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa4c:	4f30      	ldr	r7, [pc, #192]	; (800fb10 <GUI_AA_FillCircle+0xc8>)
 800fa4e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800fb14 <GUI_AA_FillCircle+0xcc>
 800fa52:	b083      	sub	sp, #12
 800fa54:	4605      	mov	r5, r0
 800fa56:	460c      	mov	r4, r1
 800fa58:	4616      	mov	r6, r2
 800fa5a:	f003 f939 	bl	8012cd0 <GUI_Lock>
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	b1db      	cbz	r3, 800fa9a <GUI_AA_FillCircle+0x52>
 800fa62:	f8d9 3000 	ldr.w	r3, [r9]
 800fa66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa6a:	2000      	movs	r0, #0
 800fa6c:	4415      	add	r5, r2
 800fa6e:	441c      	add	r4, r3
 800fa70:	f00a fd02 	bl	801a478 <WM__InitIVRSearch>
 800fa74:	b188      	cbz	r0, 800fa9a <GUI_AA_FillCircle+0x52>
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	4632      	mov	r2, r6
 800fa7a:	4621      	mov	r1, r4
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	4798      	blx	r3
 800fa80:	4680      	mov	r8, r0
 800fa82:	f00a fbd3 	bl	801a22c <WM__GetNextIVR>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d1f5      	bne.n	800fa76 <GUI_AA_FillCircle+0x2e>
 800fa8a:	f1b8 0f00 	cmp.w	r8, #0
 800fa8e:	d104      	bne.n	800fa9a <GUI_AA_FillCircle+0x52>
 800fa90:	f003 f914 	bl	8012cbc <GUI_Unlock>
 800fa94:	b003      	add	sp, #12
 800fa96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa9a:	f00c fe4f 	bl	801c73c <WM__GetOrgX_AA>
 800fa9e:	4405      	add	r5, r0
 800faa0:	f00c fe5a 	bl	801c758 <WM__GetOrgY_AA>
 800faa4:	f8d9 3000 	ldr.w	r3, [r9]
 800faa8:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800faac:	4404      	add	r4, r0
 800faae:	b332      	cbz	r2, 800fafe <GUI_AA_FillCircle+0xb6>
 800fab0:	1ba8      	subs	r0, r5, r6
 800fab2:	f000 f9f1 	bl	800fe98 <GUI_AA_HiRes2Pixel>
 800fab6:	f8ad 0000 	strh.w	r0, [sp]
 800faba:	19a8      	adds	r0, r5, r6
 800fabc:	f000 f9ec 	bl	800fe98 <GUI_AA_HiRes2Pixel>
 800fac0:	f8ad 0004 	strh.w	r0, [sp, #4]
 800fac4:	1ba0      	subs	r0, r4, r6
 800fac6:	f000 f9e7 	bl	800fe98 <GUI_AA_HiRes2Pixel>
 800faca:	f8ad 0002 	strh.w	r0, [sp, #2]
 800face:	19a0      	adds	r0, r4, r6
 800fad0:	f000 f9e2 	bl	800fe98 <GUI_AA_HiRes2Pixel>
 800fad4:	f8ad 0006 	strh.w	r0, [sp, #6]
 800fad8:	4668      	mov	r0, sp
 800fada:	f00a fccd 	bl	801a478 <WM__InitIVRSearch>
 800fade:	2800      	cmp	r0, #0
 800fae0:	d0d6      	beq.n	800fa90 <GUI_AA_FillCircle+0x48>
 800fae2:	4632      	mov	r2, r6
 800fae4:	4621      	mov	r1, r4
 800fae6:	4628      	mov	r0, r5
 800fae8:	f7ff ff32 	bl	800f950 <GL_FillCircleAA_HiRes>
 800faec:	f00a fb9e 	bl	801a22c <WM__GetNextIVR>
 800faf0:	2800      	cmp	r0, #0
 800faf2:	d1f6      	bne.n	800fae2 <GUI_AA_FillCircle+0x9a>
 800faf4:	f003 f8e2 	bl	8012cbc <GUI_Unlock>
 800faf8:	b003      	add	sp, #12
 800fafa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fafe:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fb02:	fb03 f505 	mul.w	r5, r3, r5
 800fb06:	fb03 f404 	mul.w	r4, r3, r4
 800fb0a:	fb03 f606 	mul.w	r6, r3, r6
 800fb0e:	e7cf      	b.n	800fab0 <GUI_AA_FillCircle+0x68>
 800fb10:	20000598 	.word	0x20000598
 800fb14:	20000014 	.word	0x20000014

0800fb18 <_FlushLine>:
 800fb18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800fc20 <_FlushLine+0x108>
 800fb20:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800fc30 <_FlushLine+0x118>
 800fb24:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fb28:	f8db 3000 	ldr.w	r3, [fp]
 800fb2c:	e898 0024 	ldmia.w	r8, {r2, r5}
 800fb30:	1aad      	subs	r5, r5, r2
 800fb32:	428d      	cmp	r5, r1
 800fb34:	f893 6068 	ldrb.w	r6, [r3, #104]	; 0x68
 800fb38:	bfa8      	it	ge
 800fb3a:	f101 35ff 	addge.w	r5, r1, #4294967295
 800fb3e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fb40:	fb16 f606 	smulbb	r6, r6, r6
 800fb44:	2900      	cmp	r1, #0
 800fb46:	d067      	beq.n	800fc18 <_FlushLine+0x100>
 800fb48:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800fb4c:	4b34      	ldr	r3, [pc, #208]	; (800fc20 <_FlushLine+0x108>)
 800fb4e:	1aa4      	subs	r4, r4, r2
 800fb50:	42a5      	cmp	r5, r4
 800fb52:	6918      	ldr	r0, [r3, #16]
 800fb54:	db2e      	blt.n	800fbb4 <_FlushLine+0x9c>
 800fb56:	ea4f 0a66 	mov.w	sl, r6, asr #1
 800fb5a:	f04f 090f 	mov.w	r9, #15
 800fb5e:	5d03      	ldrb	r3, [r0, r4]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d048      	beq.n	800fbf6 <_FlushLine+0xde>
 800fb64:	429e      	cmp	r6, r3
 800fb66:	d138      	bne.n	800fbda <_FlushLine+0xc2>
 800fb68:	42a5      	cmp	r5, r4
 800fb6a:	f104 0701 	add.w	r7, r4, #1
 800fb6e:	dd46      	ble.n	800fbfe <_FlushLine+0xe6>
 800fb70:	5dc1      	ldrb	r1, [r0, r7]
 800fb72:	428e      	cmp	r6, r1
 800fb74:	eb00 0307 	add.w	r3, r0, r7
 800fb78:	bf08      	it	eq
 800fb7a:	46a6      	moveq	lr, r4
 800fb7c:	d004      	beq.n	800fb88 <_FlushLine+0x70>
 800fb7e:	e03e      	b.n	800fbfe <_FlushLine+0xe6>
 800fb80:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800fb84:	428e      	cmp	r6, r1
 800fb86:	d138      	bne.n	800fbfa <_FlushLine+0xe2>
 800fb88:	f10e 0e01 	add.w	lr, lr, #1
 800fb8c:	4575      	cmp	r5, lr
 800fb8e:	d1f7      	bne.n	800fb80 <_FlushLine+0x68>
 800fb90:	46ae      	mov	lr, r5
 800fb92:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800fb96:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	18a0      	adds	r0, r4, r2
 800fb9e:	4472      	add	r2, lr
 800fba0:	f10e 0701 	add.w	r7, lr, #1
 800fba4:	4798      	blx	r3
 800fba6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fbaa:	f8d8 2000 	ldr.w	r2, [r8]
 800fbae:	42bd      	cmp	r5, r7
 800fbb0:	463c      	mov	r4, r7
 800fbb2:	dad4      	bge.n	800fb5e <_FlushLine+0x46>
 800fbb4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800fbb8:	491a      	ldr	r1, [pc, #104]	; (800fc24 <_FlushLine+0x10c>)
 800fbba:	1a9a      	subs	r2, r3, r2
 800fbbc:	3201      	adds	r2, #1
 800fbbe:	680b      	ldr	r3, [r1, #0]
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	4798      	blx	r3
 800fbc4:	4b18      	ldr	r3, [pc, #96]	; (800fc28 <_FlushLine+0x110>)
 800fbc6:	f8c8 3014 	str.w	r3, [r8, #20]
 800fbca:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800fbce:	f8c8 3004 	str.w	r3, [r8, #4]
 800fbd2:	f8c8 200c 	str.w	r2, [r8, #12]
 800fbd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbda:	18a0      	adds	r0, r4, r2
 800fbdc:	fb19 a303 	smlabb	r3, r9, r3, sl
 800fbe0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800fbe4:	fb93 f2f6 	sdiv	r2, r3, r6
 800fbe8:	b2d2      	uxtb	r2, r2
 800fbea:	f004 ffb5 	bl	8014b58 <LCD_SetPixelAA4_Trans>
 800fbee:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fbf2:	f8d8 2000 	ldr.w	r2, [r8]
 800fbf6:	1c67      	adds	r7, r4, #1
 800fbf8:	e7d9      	b.n	800fbae <_FlushLine+0x96>
 800fbfa:	45a6      	cmp	lr, r4
 800fbfc:	d1c9      	bne.n	800fb92 <_FlushLine+0x7a>
 800fbfe:	f8db 3000 	ldr.w	r3, [fp]
 800fc02:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800fc06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc08:	18a0      	adds	r0, r4, r2
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	4798      	blx	r3
 800fc0e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fc12:	f8d8 2000 	ldr.w	r2, [r8]
 800fc16:	e7ca      	b.n	800fbae <_FlushLine+0x96>
 800fc18:	4904      	ldr	r1, [pc, #16]	; (800fc2c <_FlushLine+0x114>)
 800fc1a:	66d9      	str	r1, [r3, #108]	; 0x6c
 800fc1c:	e794      	b.n	800fb48 <_FlushLine+0x30>
 800fc1e:	bf00      	nop
 800fc20:	200005a0 	.word	0x200005a0
 800fc24:	20000040 	.word	0x20000040
 800fc28:	ffffc001 	.word	0xffffc001
 800fc2c:	08014b59 	.word	0x08014b59
 800fc30:	20000014 	.word	0x20000014

0800fc34 <_OnExit>:
 800fc34:	b510      	push	{r4, lr}
 800fc36:	4c03      	ldr	r4, [pc, #12]	; (800fc44 <_OnExit+0x10>)
 800fc38:	6a20      	ldr	r0, [r4, #32]
 800fc3a:	f000 ff27 	bl	8010a8c <GUI_ALLOC_FreeFixedBlock>
 800fc3e:	2300      	movs	r3, #0
 800fc40:	6223      	str	r3, [r4, #32]
 800fc42:	bd10      	pop	{r4, pc}
 800fc44:	200005a0 	.word	0x200005a0

0800fc48 <_DrawHLine>:
 800fc48:	4282      	cmp	r2, r0
 800fc4a:	db75      	blt.n	800fd38 <_DrawHLine+0xf0>
 800fc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc50:	4d44      	ldr	r5, [pc, #272]	; (800fd64 <_DrawHLine+0x11c>)
 800fc52:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800fd68 <_DrawHLine+0x120>
 800fc56:	4614      	mov	r4, r2
 800fc58:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fc5c:	682a      	ldr	r2, [r5, #0]
 800fc5e:	4680      	mov	r8, r0
 800fc60:	f892 0068 	ldrb.w	r0, [r2, #104]	; 0x68
 800fc64:	fb91 f2f0 	sdiv	r2, r1, r0
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	460e      	mov	r6, r1
 800fc6c:	d008      	beq.n	800fc80 <_DrawHLine+0x38>
 800fc6e:	f7ff ff53 	bl	800fb18 <_FlushLine>
 800fc72:	682b      	ldr	r3, [r5, #0]
 800fc74:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 800fc78:	fb96 f6f0 	sdiv	r6, r6, r0
 800fc7c:	f8c9 6014 	str.w	r6, [r9, #20]
 800fc80:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800fc84:	4938      	ldr	r1, [pc, #224]	; (800fd68 <_DrawHLine+0x120>)
 800fc86:	fb98 f3f0 	sdiv	r3, r8, r0
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800fc90:	bfb8      	it	lt
 800fc92:	60cb      	strlt	r3, [r1, #12]
 800fc94:	f8d9 7000 	ldr.w	r7, [r9]
 800fc98:	4933      	ldr	r1, [pc, #204]	; (800fd68 <_DrawHLine+0x120>)
 800fc9a:	fb94 f6f0 	sdiv	r6, r4, r0
 800fc9e:	4296      	cmp	r6, r2
 800fca0:	4a31      	ldr	r2, [pc, #196]	; (800fd68 <_DrawHLine+0x120>)
 800fca2:	bfc8      	it	gt
 800fca4:	604e      	strgt	r6, [r1, #4]
 800fca6:	42bb      	cmp	r3, r7
 800fca8:	69d2      	ldr	r2, [r2, #28]
 800fcaa:	da3c      	bge.n	800fd26 <_DrawHLine+0xde>
 800fcac:	4296      	cmp	r6, r2
 800fcae:	fb00 f807 	mul.w	r8, r0, r7
 800fcb2:	dc3a      	bgt.n	800fd2a <_DrawHLine+0xe2>
 800fcb4:	4544      	cmp	r4, r8
 800fcb6:	db3d      	blt.n	800fd34 <_DrawHLine+0xec>
 800fcb8:	fb98 f3f0 	sdiv	r3, r8, r0
 800fcbc:	fb94 f6f0 	sdiv	r6, r4, r0
 800fcc0:	f8d9 c010 	ldr.w	ip, [r9, #16]
 800fcc4:	1bd9      	subs	r1, r3, r7
 800fcc6:	1af2      	subs	r2, r6, r3
 800fcc8:	eb0c 0e01 	add.w	lr, ip, r1
 800fccc:	d03f      	beq.n	800fd4e <_DrawHLine+0x106>
 800fcce:	3301      	adds	r3, #1
 800fcd0:	f81c 9001 	ldrb.w	r9, [ip, r1]
 800fcd4:	fb13 f300 	smulbb	r3, r3, r0
 800fcd8:	ebc8 0003 	rsb	r0, r8, r3
 800fcdc:	4448      	add	r0, r9
 800fcde:	2a01      	cmp	r2, #1
 800fce0:	f80c 0001 	strb.w	r0, [ip, r1]
 800fce4:	f10e 0c01 	add.w	ip, lr, #1
 800fce8:	dd0d      	ble.n	800fd06 <_DrawHLine+0xbe>
 800fcea:	4496      	add	lr, r2
 800fcec:	4663      	mov	r3, ip
 800fcee:	6828      	ldr	r0, [r5, #0]
 800fcf0:	f813 1b01 	ldrb.w	r1, [r3], #1
 800fcf4:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 800fcf8:	4573      	cmp	r3, lr
 800fcfa:	4401      	add	r1, r0
 800fcfc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fd00:	d1f5      	bne.n	800fcee <_DrawHLine+0xa6>
 800fd02:	3a01      	subs	r2, #1
 800fd04:	4494      	add	ip, r2
 800fd06:	682b      	ldr	r3, [r5, #0]
 800fd08:	f89c 1000 	ldrb.w	r1, [ip]
 800fd0c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fd10:	2f00      	cmp	r7, #0
 800fd12:	db12      	blt.n	800fd3a <_DrawHLine+0xf2>
 800fd14:	3401      	adds	r4, #1
 800fd16:	fb13 f306 	smulbb	r3, r3, r6
 800fd1a:	1ae3      	subs	r3, r4, r3
 800fd1c:	440b      	add	r3, r1
 800fd1e:	f88c 3000 	strb.w	r3, [ip]
 800fd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd26:	4296      	cmp	r6, r2
 800fd28:	ddca      	ble.n	800fcc0 <_DrawHLine+0x78>
 800fd2a:	fb02 0200 	mla	r2, r2, r0, r0
 800fd2e:	1e54      	subs	r4, r2, #1
 800fd30:	4544      	cmp	r4, r8
 800fd32:	dac1      	bge.n	800fcb8 <_DrawHLine+0x70>
 800fd34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd38:	4770      	bx	lr
 800fd3a:	3e01      	subs	r6, #1
 800fd3c:	fb13 f306 	smulbb	r3, r3, r6
 800fd40:	3401      	adds	r4, #1
 800fd42:	1ae3      	subs	r3, r4, r3
 800fd44:	440b      	add	r3, r1
 800fd46:	f88c 3000 	strb.w	r3, [ip]
 800fd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd4e:	f81c 3001 	ldrb.w	r3, [ip, r1]
 800fd52:	1c60      	adds	r0, r4, #1
 800fd54:	ebc8 0000 	rsb	r0, r8, r0
 800fd58:	4418      	add	r0, r3
 800fd5a:	f80c 0001 	strb.w	r0, [ip, r1]
 800fd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd62:	bf00      	nop
 800fd64:	20000014 	.word	0x20000014
 800fd68:	200005a0 	.word	0x200005a0

0800fd6c <GUI_AA_Init_HiRes>:
 800fd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd70:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800fe94 <GUI_AA_Init_HiRes+0x128>
 800fd74:	4c3f      	ldr	r4, [pc, #252]	; (800fe74 <GUI_AA_Init_HiRes+0x108>)
 800fd76:	f8d9 3000 	ldr.w	r3, [r9]
 800fd7a:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800fd7e:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 800fd82:	fb90 f7f5 	sdiv	r7, r0, r5
 800fd86:	fb91 f5f5 	sdiv	r5, r1, r5
 800fd8a:	f1b8 0f00 	cmp.w	r8, #0
 800fd8e:	d053      	beq.n	800fe38 <GUI_AA_Init_HiRes+0xcc>
 800fd90:	2600      	movs	r6, #0
 800fd92:	4939      	ldr	r1, [pc, #228]	; (800fe78 <GUI_AA_Init_HiRes+0x10c>)
 800fd94:	68a2      	ldr	r2, [r4, #8]
 800fd96:	6808      	ldr	r0, [r1, #0]
 800fd98:	42b8      	cmp	r0, r7
 800fd9a:	bfb8      	it	lt
 800fd9c:	4638      	movlt	r0, r7
 800fd9e:	1a29      	subs	r1, r5, r0
 800fda0:	4291      	cmp	r1, r2
 800fda2:	bfa4      	itt	ge
 800fda4:	1885      	addge	r5, r0, r2
 800fda6:	f105 35ff 	addge.w	r5, r5, #4294967295
 800fdaa:	42a8      	cmp	r0, r5
 800fdac:	dd41      	ble.n	800fe32 <GUI_AA_Init_HiRes+0xc6>
 800fdae:	2601      	movs	r6, #1
 800fdb0:	4632      	mov	r2, r6
 800fdb2:	4605      	mov	r5, r0
 800fdb4:	f8d3 e064 	ldr.w	lr, [r3, #100]	; 0x64
 800fdb8:	4930      	ldr	r1, [pc, #192]	; (800fe7c <GUI_AA_Init_HiRes+0x110>)
 800fdba:	6020      	str	r0, [r4, #0]
 800fdbc:	f8d1 a000 	ldr.w	sl, [r1]
 800fdc0:	4f2f      	ldr	r7, [pc, #188]	; (800fe80 <GUI_AA_Init_HiRes+0x114>)
 800fdc2:	61e5      	str	r5, [r4, #28]
 800fdc4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fdc8:	665f      	str	r7, [r3, #100]	; 0x64
 800fdca:	4b2e      	ldr	r3, [pc, #184]	; (800fe84 <GUI_AA_Init_HiRes+0x118>)
 800fdcc:	f8c4 e018 	str.w	lr, [r4, #24]
 800fdd0:	e887 0003 	stmia.w	r7, {r0, r1}
 800fdd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fdd6:	4640      	mov	r0, r8
 800fdd8:	2100      	movs	r1, #0
 800fdda:	f8c4 8010 	str.w	r8, [r4, #16]
 800fdde:	47d0      	blx	sl
 800fde0:	f8d9 0000 	ldr.w	r0, [r9]
 800fde4:	4d28      	ldr	r5, [pc, #160]	; (800fe88 <GUI_AA_Init_HiRes+0x11c>)
 800fde6:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 800fdea:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800fdee:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 800fdf2:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 800fdf6:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 800fdfa:	6165      	str	r5, [r4, #20]
 800fdfc:	3201      	adds	r2, #1
 800fdfe:	3301      	adds	r3, #1
 800fe00:	fb12 f201 	smulbb	r2, r2, r1
 800fe04:	fb13 f301 	smulbb	r3, r3, r1
 800fe08:	fb1e fe01 	smulbb	lr, lr, r1
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	fb1c f101 	smulbb	r1, ip, r1
 800fe12:	3a01      	subs	r2, #1
 800fe14:	3b01      	subs	r3, #1
 800fe16:	f643 7cff 	movw	ip, #16383	; 0x3fff
 800fe1a:	6147      	str	r7, [r0, #20]
 800fe1c:	8722      	strh	r2, [r4, #56]	; 0x38
 800fe1e:	4630      	mov	r0, r6
 800fe20:	8763      	strh	r3, [r4, #58]	; 0x3a
 800fe22:	f8a4 e034 	strh.w	lr, [r4, #52]	; 0x34
 800fe26:	86e1      	strh	r1, [r4, #54]	; 0x36
 800fe28:	6065      	str	r5, [r4, #4]
 800fe2a:	f8c4 c00c 	str.w	ip, [r4, #12]
 800fe2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe32:	1a2a      	subs	r2, r5, r0
 800fe34:	3201      	adds	r2, #1
 800fe36:	e7bd      	b.n	800fdb4 <GUI_AA_Init_HiRes+0x48>
 800fe38:	4b14      	ldr	r3, [pc, #80]	; (800fe8c <GUI_AA_Init_HiRes+0x120>)
 800fe3a:	6818      	ldr	r0, [r3, #0]
 800fe3c:	60a0      	str	r0, [r4, #8]
 800fe3e:	b1a8      	cbz	r0, 800fe6c <GUI_AA_Init_HiRes+0x100>
 800fe40:	f000 fe2e 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 800fe44:	f8df a02c 	ldr.w	sl, [pc, #44]	; 800fe74 <GUI_AA_Init_HiRes+0x108>
 800fe48:	6220      	str	r0, [r4, #32]
 800fe4a:	b158      	cbz	r0, 800fe64 <GUI_AA_Init_HiRes+0xf8>
 800fe4c:	4650      	mov	r0, sl
 800fe4e:	4b10      	ldr	r3, [pc, #64]	; (800fe90 <GUI_AA_Init_HiRes+0x124>)
 800fe50:	f840 3f24 	str.w	r3, [r0, #36]!
 800fe54:	f001 fef4 	bl	8011c40 <GUI__RegisterExit>
 800fe58:	2600      	movs	r6, #0
 800fe5a:	f8da 8020 	ldr.w	r8, [sl, #32]
 800fe5e:	f8d9 3000 	ldr.w	r3, [r9]
 800fe62:	e796      	b.n	800fd92 <GUI_AA_Init_HiRes+0x26>
 800fe64:	f8d9 3000 	ldr.w	r3, [r9]
 800fe68:	2601      	movs	r6, #1
 800fe6a:	e792      	b.n	800fd92 <GUI_AA_Init_HiRes+0x26>
 800fe6c:	f005 f8f2 	bl	8015054 <LCD_GetVXSizeMax>
 800fe70:	60a0      	str	r0, [r4, #8]
 800fe72:	e7e5      	b.n	800fe40 <GUI_AA_Init_HiRes+0xd4>
 800fe74:	200005a0 	.word	0x200005a0
 800fe78:	20035dd4 	.word	0x20035dd4
 800fe7c:	20000040 	.word	0x20000040
 800fe80:	200005cc 	.word	0x200005cc
 800fe84:	0800fc49 	.word	0x0800fc49
 800fe88:	ffffc001 	.word	0xffffc001
 800fe8c:	20035df0 	.word	0x20035df0
 800fe90:	0800fc35 	.word	0x0800fc35
 800fe94:	20000014 	.word	0x20000014

0800fe98 <GUI_AA_HiRes2Pixel>:
 800fe98:	4b05      	ldr	r3, [pc, #20]	; (800feb0 <GUI_AA_HiRes2Pixel+0x18>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fea0:	b90b      	cbnz	r3, 800fea6 <GUI_AA_HiRes2Pixel+0xe>
 800fea2:	b200      	sxth	r0, r0
 800fea4:	4770      	bx	lr
 800fea6:	fb90 f0f3 	sdiv	r0, r0, r3
 800feaa:	b200      	sxth	r0, r0
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop
 800feb0:	20000014 	.word	0x20000014

0800feb4 <GUI_AA_Exit>:
 800feb4:	b508      	push	{r3, lr}
 800feb6:	f7ff fe2f 	bl	800fb18 <_FlushLine>
 800feba:	4b04      	ldr	r3, [pc, #16]	; (800fecc <GUI_AA_Exit+0x18>)
 800febc:	4a04      	ldr	r2, [pc, #16]	; (800fed0 <GUI_AA_Exit+0x1c>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	6992      	ldr	r2, [r2, #24]
 800fec2:	665a      	str	r2, [r3, #100]	; 0x64
 800fec4:	f103 0208 	add.w	r2, r3, #8
 800fec8:	615a      	str	r2, [r3, #20]
 800feca:	bd08      	pop	{r3, pc}
 800fecc:	20000014 	.word	0x20000014
 800fed0:	200005a0 	.word	0x200005a0

0800fed4 <_Color2Index_M1555I>:
 800fed4:	490a      	ldr	r1, [pc, #40]	; (800ff00 <_Color2Index_M1555I+0x2c>)
 800fed6:	b2c3      	uxtb	r3, r0
 800fed8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800fedc:	b410      	push	{r4}
 800fede:	5c8a      	ldrb	r2, [r1, r2]
 800fee0:	5ccc      	ldrb	r4, [r1, r3]
 800fee2:	0fc3      	lsrs	r3, r0, #31
 800fee4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800fee8:	03db      	lsls	r3, r3, #15
 800feea:	eb02 2284 	add.w	r2, r2, r4, lsl #10
 800feee:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800fef2:	5c08      	ldrb	r0, [r1, r0]
 800fef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fef8:	4413      	add	r3, r2
 800fefa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800fefe:	4770      	bx	lr
 800ff00:	0802565c 	.word	0x0802565c

0800ff04 <_Index2Color_M1555I>:
 800ff04:	f000 031f 	and.w	r3, r0, #31
 800ff08:	f3c0 2284 	ubfx	r2, r0, #10, #5
 800ff0c:	490a      	ldr	r1, [pc, #40]	; (800ff38 <_Index2Color_M1555I+0x34>)
 800ff0e:	b410      	push	{r4}
 800ff10:	f3c0 1444 	ubfx	r4, r0, #5, #5
 800ff14:	5ccb      	ldrb	r3, [r1, r3]
 800ff16:	5c8a      	ldrb	r2, [r1, r2]
 800ff18:	5d09      	ldrb	r1, [r1, r4]
 800ff1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff1e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800ff22:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800ff26:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ff2a:	bf14      	ite	ne
 800ff2c:	2000      	movne	r0, #0
 800ff2e:	f04f 407f 	moveq.w	r0, #4278190080	; 0xff000000
 800ff32:	4418      	add	r0, r3
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop
 800ff38:	0802589c 	.word	0x0802589c

0800ff3c <_GetIndexMask_M1555I>:
 800ff3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop

0800ff44 <_Color2IndexBulk_M1555I>:
 800ff44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff46:	4c13      	ldr	r4, [pc, #76]	; (800ff94 <_Color2IndexBulk_M1555I+0x50>)
 800ff48:	f8d4 e000 	ldr.w	lr, [r4]
 800ff4c:	f1be 0f00 	cmp.w	lr, #0
 800ff50:	d003      	beq.n	800ff5a <_Color2IndexBulk_M1555I+0x16>
 800ff52:	46f4      	mov	ip, lr
 800ff54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff58:	4760      	bx	ip
 800ff5a:	4606      	mov	r6, r0
 800ff5c:	480e      	ldr	r0, [pc, #56]	; (800ff98 <_Color2IndexBulk_M1555I+0x54>)
 800ff5e:	460c      	mov	r4, r1
 800ff60:	4615      	mov	r5, r2
 800ff62:	461f      	mov	r7, r3
 800ff64:	f856 1b04 	ldr.w	r1, [r6], #4
 800ff68:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800ff6c:	b2cb      	uxtb	r3, r1
 800ff6e:	5c82      	ldrb	r2, [r0, r2]
 800ff70:	5cc3      	ldrb	r3, [r0, r3]
 800ff72:	f3c1 2e07 	ubfx	lr, r1, #8, #8
 800ff76:	eb02 2283 	add.w	r2, r2, r3, lsl #10
 800ff7a:	43cb      	mvns	r3, r1
 800ff7c:	0fdb      	lsrs	r3, r3, #31
 800ff7e:	f810 100e 	ldrb.w	r1, [r0, lr]
 800ff82:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 800ff86:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ff8a:	3d01      	subs	r5, #1
 800ff8c:	8023      	strh	r3, [r4, #0]
 800ff8e:	443c      	add	r4, r7
 800ff90:	d1e8      	bne.n	800ff64 <_Color2IndexBulk_M1555I+0x20>
 800ff92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff94:	200005dc 	.word	0x200005dc
 800ff98:	0802565c 	.word	0x0802565c

0800ff9c <_Index2ColorBulk_M1555I>:
 800ff9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff9e:	4c18      	ldr	r4, [pc, #96]	; (8010000 <_Index2ColorBulk_M1555I+0x64>)
 800ffa0:	6864      	ldr	r4, [r4, #4]
 800ffa2:	b11c      	cbz	r4, 800ffac <_Index2ColorBulk_M1555I+0x10>
 800ffa4:	46a4      	mov	ip, r4
 800ffa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ffaa:	4760      	bx	ip
 800ffac:	468e      	mov	lr, r1
 800ffae:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 800ffb2:	3901      	subs	r1, #1
 800ffb4:	3a01      	subs	r2, #1
 800ffb6:	fb03 0002 	mla	r0, r3, r2, r0
 800ffba:	4e12      	ldr	r6, [pc, #72]	; (8010004 <_Index2ColorBulk_M1555I+0x68>)
 800ffbc:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
 800ffc0:	425b      	negs	r3, r3
 800ffc2:	e000      	b.n	800ffc6 <_Index2ColorBulk_M1555I+0x2a>
 800ffc4:	3a01      	subs	r2, #1
 800ffc6:	8805      	ldrh	r5, [r0, #0]
 800ffc8:	f005 071f 	and.w	r7, r5, #31
 800ffcc:	f3c5 2484 	ubfx	r4, r5, #10, #5
 800ffd0:	f816 e007 	ldrb.w	lr, [r6, r7]
 800ffd4:	5d34      	ldrb	r4, [r6, r4]
 800ffd6:	f3c5 1744 	ubfx	r7, r5, #5, #5
 800ffda:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 800ffde:	eb04 440e 	add.w	r4, r4, lr, lsl #16
 800ffe2:	5df7      	ldrb	r7, [r6, r7]
 800ffe4:	bf0c      	ite	eq
 800ffe6:	f04f 457f 	moveq.w	r5, #4278190080	; 0xff000000
 800ffea:	2500      	movne	r5, #0
 800ffec:	442c      	add	r4, r5
 800ffee:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800fff2:	4418      	add	r0, r3
 800fff4:	f841 4904 	str.w	r4, [r1], #-4
 800fff8:	2a00      	cmp	r2, #0
 800fffa:	d1e3      	bne.n	800ffc4 <_Index2ColorBulk_M1555I+0x28>
 800fffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fffe:	bf00      	nop
 8010000:	200005dc 	.word	0x200005dc
 8010004:	0802589c 	.word	0x0802589c

08010008 <LCD_Index2Color_M565>:
 8010008:	b410      	push	{r4}
 801000a:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 801000e:	f000 041f 	and.w	r4, r0, #31
 8010012:	4a07      	ldr	r2, [pc, #28]	; (8010030 <LCD_Index2Color_M565+0x28>)
 8010014:	4907      	ldr	r1, [pc, #28]	; (8010034 <LCD_Index2Color_M565+0x2c>)
 8010016:	5cd3      	ldrb	r3, [r2, r3]
 8010018:	5d12      	ldrb	r2, [r2, r4]
 801001a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801001e:	f3c0 1045 	ubfx	r0, r0, #5, #6
 8010022:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8010026:	5c08      	ldrb	r0, [r1, r0]
 8010028:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop
 8010030:	0802589c 	.word	0x0802589c
 8010034:	0802585c 	.word	0x0802585c

08010038 <_Color2Index_M565>:
 8010038:	b410      	push	{r4}
 801003a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801003e:	b2c4      	uxtb	r4, r0
 8010040:	4a06      	ldr	r2, [pc, #24]	; (801005c <_Color2Index_M565+0x24>)
 8010042:	4907      	ldr	r1, [pc, #28]	; (8010060 <_Color2Index_M565+0x28>)
 8010044:	5cd3      	ldrb	r3, [r2, r3]
 8010046:	5d12      	ldrb	r2, [r2, r4]
 8010048:	f85d 4b04 	ldr.w	r4, [sp], #4
 801004c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8010050:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8010054:	5c08      	ldrb	r0, [r1, r0]
 8010056:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 801005a:	4770      	bx	lr
 801005c:	0802565c 	.word	0x0802565c
 8010060:	0802555c 	.word	0x0802555c

08010064 <_GetIndexMask_M565>:
 8010064:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop

0801006c <_Color2IndexBulk>:
 801006c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801006e:	4c13      	ldr	r4, [pc, #76]	; (80100bc <_Color2IndexBulk+0x50>)
 8010070:	f8d4 e000 	ldr.w	lr, [r4]
 8010074:	f1be 0f00 	cmp.w	lr, #0
 8010078:	d003      	beq.n	8010082 <_Color2IndexBulk+0x16>
 801007a:	46f4      	mov	ip, lr
 801007c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010080:	4760      	bx	ip
 8010082:	4606      	mov	r6, r0
 8010084:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80100c4 <_Color2IndexBulk+0x58>
 8010088:	480d      	ldr	r0, [pc, #52]	; (80100c0 <_Color2IndexBulk+0x54>)
 801008a:	460c      	mov	r4, r1
 801008c:	4615      	mov	r5, r2
 801008e:	461f      	mov	r7, r3
 8010090:	f856 3b04 	ldr.w	r3, [r6], #4
 8010094:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010098:	fa5f fe83 	uxtb.w	lr, r3
 801009c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80100a0:	5c82      	ldrb	r2, [r0, r2]
 80100a2:	f810 300e 	ldrb.w	r3, [r0, lr]
 80100a6:	f81c 1001 	ldrb.w	r1, [ip, r1]
 80100aa:	eb02 23c3 	add.w	r3, r2, r3, lsl #11
 80100ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80100b2:	3d01      	subs	r5, #1
 80100b4:	8023      	strh	r3, [r4, #0]
 80100b6:	443c      	add	r4, r7
 80100b8:	d1ea      	bne.n	8010090 <_Color2IndexBulk+0x24>
 80100ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100bc:	200005e4 	.word	0x200005e4
 80100c0:	0802565c 	.word	0x0802565c
 80100c4:	0802555c 	.word	0x0802555c

080100c8 <_Index2ColorBulk>:
 80100c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100cc:	4c15      	ldr	r4, [pc, #84]	; (8010124 <_Index2ColorBulk+0x5c>)
 80100ce:	6864      	ldr	r4, [r4, #4]
 80100d0:	b11c      	cbz	r4, 80100da <_Index2ColorBulk+0x12>
 80100d2:	46a4      	mov	ip, r4
 80100d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100d8:	4760      	bx	ip
 80100da:	4688      	mov	r8, r1
 80100dc:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 80100e0:	3901      	subs	r1, #1
 80100e2:	3a01      	subs	r2, #1
 80100e4:	fb03 0002 	mla	r0, r3, r2, r0
 80100e8:	4f0f      	ldr	r7, [pc, #60]	; (8010128 <_Index2ColorBulk+0x60>)
 80100ea:	f8df e040 	ldr.w	lr, [pc, #64]	; 801012c <_Index2ColorBulk+0x64>
 80100ee:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 80100f2:	425b      	negs	r3, r3
 80100f4:	e000      	b.n	80100f8 <_Index2ColorBulk+0x30>
 80100f6:	3a01      	subs	r2, #1
 80100f8:	8804      	ldrh	r4, [r0, #0]
 80100fa:	0ae5      	lsrs	r5, r4, #11
 80100fc:	f004 0c1f 	and.w	ip, r4, #31
 8010100:	f3c4 1645 	ubfx	r6, r4, #5, #6
 8010104:	5d7d      	ldrb	r5, [r7, r5]
 8010106:	f817 400c 	ldrb.w	r4, [r7, ip]
 801010a:	f81e 6006 	ldrb.w	r6, [lr, r6]
 801010e:	eb05 4404 	add.w	r4, r5, r4, lsl #16
 8010112:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8010116:	4418      	add	r0, r3
 8010118:	f841 4904 	str.w	r4, [r1], #-4
 801011c:	2a00      	cmp	r2, #0
 801011e:	d1ea      	bne.n	80100f6 <_Index2ColorBulk+0x2e>
 8010120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010124:	200005e4 	.word	0x200005e4
 8010128:	0802589c 	.word	0x0802589c
 801012c:	0802585c 	.word	0x0802585c

08010130 <_AddFreeMemory>:
 8010130:	4bc0      	ldr	r3, [pc, #768]	; (8010434 <_AddFreeMemory+0x304>)
 8010132:	68da      	ldr	r2, [r3, #12]
 8010134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010136:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8010138:	3a01      	subs	r2, #1
 801013a:	4422      	add	r2, r4
 801013c:	180d      	adds	r5, r1, r0
 801013e:	42aa      	cmp	r2, r5
 8010140:	d303      	bcc.n	801014a <_AddFreeMemory+0x1a>
 8010142:	580a      	ldr	r2, [r1, r0]
 8010144:	2a00      	cmp	r2, #0
 8010146:	f000 80a1 	beq.w	801028c <_AddFreeMemory+0x15c>
 801014a:	428c      	cmp	r4, r1
 801014c:	d205      	bcs.n	801015a <_AddFreeMemory+0x2a>
 801014e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8010152:	1a8a      	subs	r2, r1, r2
 8010154:	6814      	ldr	r4, [r2, #0]
 8010156:	2c00      	cmp	r4, #0
 8010158:	d04a      	beq.n	80101f0 <_AddFreeMemory+0xc0>
 801015a:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 801015e:	4ab5      	ldr	r2, [pc, #724]	; (8010434 <_AddFreeMemory+0x304>)
 8010160:	42a0      	cmp	r0, r4
 8010162:	f080 811e 	bcs.w	80103a2 <_AddFreeMemory+0x272>
 8010166:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 801016a:	42a0      	cmp	r0, r4
 801016c:	f080 811b 	bcs.w	80103a6 <_AddFreeMemory+0x276>
 8010170:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8010174:	42a0      	cmp	r0, r4
 8010176:	f080 8118 	bcs.w	80103aa <_AddFreeMemory+0x27a>
 801017a:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 801017e:	42a0      	cmp	r0, r4
 8010180:	f080 8115 	bcs.w	80103ae <_AddFreeMemory+0x27e>
 8010184:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
 8010188:	42a0      	cmp	r0, r4
 801018a:	f080 8112 	bcs.w	80103b2 <_AddFreeMemory+0x282>
 801018e:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 8010192:	42a0      	cmp	r0, r4
 8010194:	f080 810f 	bcs.w	80103b6 <_AddFreeMemory+0x286>
 8010198:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 801019c:	42a0      	cmp	r0, r4
 801019e:	f080 810c 	bcs.w	80103ba <_AddFreeMemory+0x28a>
 80101a2:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
 80101a6:	42a0      	cmp	r0, r4
 80101a8:	f080 8109 	bcs.w	80103be <_AddFreeMemory+0x28e>
 80101ac:	6f94      	ldr	r4, [r2, #120]	; 0x78
 80101ae:	42a0      	cmp	r0, r4
 80101b0:	f080 8107 	bcs.w	80103c2 <_AddFreeMemory+0x292>
 80101b4:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80101b6:	4290      	cmp	r0, r2
 80101b8:	f080 8105 	bcs.w	80103c6 <_AddFreeMemory+0x296>
 80101bc:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80101be:	4a9d      	ldr	r2, [pc, #628]	; (8010434 <_AddFreeMemory+0x304>)
 80101c0:	42a0      	cmp	r0, r4
 80101c2:	f080 8102 	bcs.w	80103ca <_AddFreeMemory+0x29a>
 80101c6:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80101c8:	42a0      	cmp	r0, r4
 80101ca:	f080 8100 	bcs.w	80103ce <_AddFreeMemory+0x29e>
 80101ce:	6d94      	ldr	r4, [r2, #88]	; 0x58
 80101d0:	42a0      	cmp	r0, r4
 80101d2:	f080 80fe 	bcs.w	80103d2 <_AddFreeMemory+0x2a2>
 80101d6:	6d14      	ldr	r4, [r2, #80]	; 0x50
 80101d8:	42a0      	cmp	r0, r4
 80101da:	f080 80fc 	bcs.w	80103d6 <_AddFreeMemory+0x2a6>
 80101de:	6c94      	ldr	r4, [r2, #72]	; 0x48
 80101e0:	42a0      	cmp	r0, r4
 80101e2:	f080 80fa 	bcs.w	80103da <_AddFreeMemory+0x2aa>
 80101e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80101e8:	4290      	cmp	r0, r2
 80101ea:	f080 80a6 	bcs.w	801033a <_AddFreeMemory+0x20a>
 80101ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101f0:	6851      	ldr	r1, [r2, #4]
 80101f2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80101f6:	4c8f      	ldr	r4, [pc, #572]	; (8010434 <_AddFreeMemory+0x304>)
 80101f8:	42a9      	cmp	r1, r5
 80101fa:	4408      	add	r0, r1
 80101fc:	f080 80f9 	bcs.w	80103f2 <_AddFreeMemory+0x2c2>
 8010200:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8010204:	42a9      	cmp	r1, r5
 8010206:	f080 8106 	bcs.w	8010416 <_AddFreeMemory+0x2e6>
 801020a:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 801020e:	42a9      	cmp	r1, r5
 8010210:	f080 80ff 	bcs.w	8010412 <_AddFreeMemory+0x2e2>
 8010214:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8010218:	42a9      	cmp	r1, r5
 801021a:	f080 80f8 	bcs.w	801040e <_AddFreeMemory+0x2de>
 801021e:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8010222:	42a9      	cmp	r1, r5
 8010224:	f080 80fc 	bcs.w	8010420 <_AddFreeMemory+0x2f0>
 8010228:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 801022c:	42a9      	cmp	r1, r5
 801022e:	f080 80ff 	bcs.w	8010430 <_AddFreeMemory+0x300>
 8010232:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8010236:	42a9      	cmp	r1, r5
 8010238:	f080 80f8 	bcs.w	801042c <_AddFreeMemory+0x2fc>
 801023c:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 8010240:	42a1      	cmp	r1, r4
 8010242:	f080 80f1 	bcs.w	8010428 <_AddFreeMemory+0x2f8>
 8010246:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8010248:	4c7a      	ldr	r4, [pc, #488]	; (8010434 <_AddFreeMemory+0x304>)
 801024a:	42a9      	cmp	r1, r5
 801024c:	f080 80ea 	bcs.w	8010424 <_AddFreeMemory+0x2f4>
 8010250:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8010252:	42a9      	cmp	r1, r5
 8010254:	f080 8113 	bcs.w	801047e <_AddFreeMemory+0x34e>
 8010258:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 801025a:	42a9      	cmp	r1, r5
 801025c:	f080 810d 	bcs.w	801047a <_AddFreeMemory+0x34a>
 8010260:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8010262:	42a9      	cmp	r1, r5
 8010264:	f080 8107 	bcs.w	8010476 <_AddFreeMemory+0x346>
 8010268:	6da5      	ldr	r5, [r4, #88]	; 0x58
 801026a:	42a9      	cmp	r1, r5
 801026c:	f080 8101 	bcs.w	8010472 <_AddFreeMemory+0x342>
 8010270:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8010272:	42a9      	cmp	r1, r5
 8010274:	f080 80fb 	bcs.w	801046e <_AddFreeMemory+0x33e>
 8010278:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 801027a:	42a9      	cmp	r1, r5
 801027c:	f080 8104 	bcs.w	8010488 <_AddFreeMemory+0x358>
 8010280:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8010282:	42a1      	cmp	r1, r4
 8010284:	f080 8081 	bcs.w	801038a <_AddFreeMemory+0x25a>
 8010288:	4611      	mov	r1, r2
 801028a:	e766      	b.n	801015a <_AddFreeMemory+0x2a>
 801028c:	686a      	ldr	r2, [r5, #4]
 801028e:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 8010292:	42b2      	cmp	r2, r6
 8010294:	4410      	add	r0, r2
 8010296:	f080 80ae 	bcs.w	80103f6 <_AddFreeMemory+0x2c6>
 801029a:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 801029e:	42b2      	cmp	r2, r6
 80102a0:	f080 80b2 	bcs.w	8010408 <_AddFreeMemory+0x2d8>
 80102a4:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 80102a8:	42b2      	cmp	r2, r6
 80102aa:	f080 80aa 	bcs.w	8010402 <_AddFreeMemory+0x2d2>
 80102ae:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80102b2:	42b2      	cmp	r2, r6
 80102b4:	f080 80a2 	bcs.w	80103fc <_AddFreeMemory+0x2cc>
 80102b8:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80102bc:	42b2      	cmp	r2, r6
 80102be:	f080 80ac 	bcs.w	801041a <_AddFreeMemory+0x2ea>
 80102c2:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 80102c6:	42b2      	cmp	r2, r6
 80102c8:	f080 80bf 	bcs.w	801044a <_AddFreeMemory+0x31a>
 80102cc:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 80102d0:	42b2      	cmp	r2, r6
 80102d2:	f080 80b7 	bcs.w	8010444 <_AddFreeMemory+0x314>
 80102d6:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 80102da:	42b2      	cmp	r2, r6
 80102dc:	f080 80af 	bcs.w	801043e <_AddFreeMemory+0x30e>
 80102e0:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 80102e2:	42ba      	cmp	r2, r7
 80102e4:	f080 80a8 	bcs.w	8010438 <_AddFreeMemory+0x308>
 80102e8:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 80102ea:	42ba      	cmp	r2, r7
 80102ec:	f080 80b9 	bcs.w	8010462 <_AddFreeMemory+0x332>
 80102f0:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80102f2:	42ba      	cmp	r2, r7
 80102f4:	f080 80b2 	bcs.w	801045c <_AddFreeMemory+0x32c>
 80102f8:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 80102fa:	42ba      	cmp	r2, r7
 80102fc:	f080 80ab 	bcs.w	8010456 <_AddFreeMemory+0x326>
 8010300:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 8010302:	42ba      	cmp	r2, r7
 8010304:	f080 80a4 	bcs.w	8010450 <_AddFreeMemory+0x320>
 8010308:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 801030a:	42ba      	cmp	r2, r7
 801030c:	f080 80ac 	bcs.w	8010468 <_AddFreeMemory+0x338>
 8010310:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8010312:	42ba      	cmp	r2, r7
 8010314:	f080 80b5 	bcs.w	8010482 <_AddFreeMemory+0x352>
 8010318:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801031a:	42b2      	cmp	r2, r6
 801031c:	f4ff af15 	bcc.w	801014a <_AddFreeMemory+0x1a>
 8010320:	f04f 0e00 	mov.w	lr, #0
 8010324:	681e      	ldr	r6, [r3, #0]
 8010326:	68af      	ldr	r7, [r5, #8]
 8010328:	68ed      	ldr	r5, [r5, #12]
 801032a:	1ab2      	subs	r2, r6, r2
 801032c:	601a      	str	r2, [r3, #0]
 801032e:	b107      	cbz	r7, 8010332 <_AddFreeMemory+0x202>
 8010330:	607d      	str	r5, [r7, #4]
 8010332:	2d00      	cmp	r5, #0
 8010334:	d058      	beq.n	80103e8 <_AddFreeMemory+0x2b8>
 8010336:	602f      	str	r7, [r5, #0]
 8010338:	e707      	b.n	801014a <_AddFreeMemory+0x1a>
 801033a:	2200      	movs	r2, #0
 801033c:	3208      	adds	r2, #8
 801033e:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 8010342:	180d      	adds	r5, r1, r0
 8010344:	6864      	ldr	r4, [r4, #4]
 8010346:	608c      	str	r4, [r1, #8]
 8010348:	2600      	movs	r6, #0
 801034a:	600e      	str	r6, [r1, #0]
 801034c:	6048      	str	r0, [r1, #4]
 801034e:	6109      	str	r1, [r1, #16]
 8010350:	f101 0608 	add.w	r6, r1, #8
 8010354:	f845 0c04 	str.w	r0, [r5, #-4]
 8010358:	b104      	cbz	r4, 801035c <_AddFreeMemory+0x22c>
 801035a:	6066      	str	r6, [r4, #4]
 801035c:	2500      	movs	r5, #0
 801035e:	608c      	str	r4, [r1, #8]
 8010360:	60cd      	str	r5, [r1, #12]
 8010362:	6819      	ldr	r1, [r3, #0]
 8010364:	f893 5029 	ldrb.w	r5, [r3, #41]	; 0x29
 8010368:	4c32      	ldr	r4, [pc, #200]	; (8010434 <_AddFreeMemory+0x304>)
 801036a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801036e:	4401      	add	r1, r0
 8010370:	6056      	str	r6, [r2, #4]
 8010372:	6019      	str	r1, [r3, #0]
 8010374:	2d00      	cmp	r5, #0
 8010376:	f47f af3a 	bne.w	80101ee <_AddFreeMemory+0xbe>
 801037a:	68e3      	ldr	r3, [r4, #12]
 801037c:	68a2      	ldr	r2, [r4, #8]
 801037e:	1a59      	subs	r1, r3, r1
 8010380:	4291      	cmp	r1, r2
 8010382:	f67f af34 	bls.w	80101ee <_AddFreeMemory+0xbe>
 8010386:	60a1      	str	r1, [r4, #8]
 8010388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801038a:	2700      	movs	r7, #0
 801038c:	681c      	ldr	r4, [r3, #0]
 801038e:	6895      	ldr	r5, [r2, #8]
 8010390:	68d6      	ldr	r6, [r2, #12]
 8010392:	1a61      	subs	r1, r4, r1
 8010394:	6019      	str	r1, [r3, #0]
 8010396:	b105      	cbz	r5, 801039a <_AddFreeMemory+0x26a>
 8010398:	606e      	str	r6, [r5, #4]
 801039a:	b306      	cbz	r6, 80103de <_AddFreeMemory+0x2ae>
 801039c:	6035      	str	r5, [r6, #0]
 801039e:	4611      	mov	r1, r2
 80103a0:	e6db      	b.n	801015a <_AddFreeMemory+0x2a>
 80103a2:	220f      	movs	r2, #15
 80103a4:	e7ca      	b.n	801033c <_AddFreeMemory+0x20c>
 80103a6:	220e      	movs	r2, #14
 80103a8:	e7c8      	b.n	801033c <_AddFreeMemory+0x20c>
 80103aa:	220d      	movs	r2, #13
 80103ac:	e7c6      	b.n	801033c <_AddFreeMemory+0x20c>
 80103ae:	220c      	movs	r2, #12
 80103b0:	e7c4      	b.n	801033c <_AddFreeMemory+0x20c>
 80103b2:	220b      	movs	r2, #11
 80103b4:	e7c2      	b.n	801033c <_AddFreeMemory+0x20c>
 80103b6:	220a      	movs	r2, #10
 80103b8:	e7c0      	b.n	801033c <_AddFreeMemory+0x20c>
 80103ba:	2209      	movs	r2, #9
 80103bc:	e7be      	b.n	801033c <_AddFreeMemory+0x20c>
 80103be:	2208      	movs	r2, #8
 80103c0:	e7bc      	b.n	801033c <_AddFreeMemory+0x20c>
 80103c2:	2207      	movs	r2, #7
 80103c4:	e7ba      	b.n	801033c <_AddFreeMemory+0x20c>
 80103c6:	2206      	movs	r2, #6
 80103c8:	e7b8      	b.n	801033c <_AddFreeMemory+0x20c>
 80103ca:	2205      	movs	r2, #5
 80103cc:	e7b6      	b.n	801033c <_AddFreeMemory+0x20c>
 80103ce:	2204      	movs	r2, #4
 80103d0:	e7b4      	b.n	801033c <_AddFreeMemory+0x20c>
 80103d2:	2203      	movs	r2, #3
 80103d4:	e7b2      	b.n	801033c <_AddFreeMemory+0x20c>
 80103d6:	2202      	movs	r2, #2
 80103d8:	e7b0      	b.n	801033c <_AddFreeMemory+0x20c>
 80103da:	2201      	movs	r2, #1
 80103dc:	e7ae      	b.n	801033c <_AddFreeMemory+0x20c>
 80103de:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80103e2:	4611      	mov	r1, r2
 80103e4:	647d      	str	r5, [r7, #68]	; 0x44
 80103e6:	e6b8      	b.n	801015a <_AddFreeMemory+0x2a>
 80103e8:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 80103ec:	f8ce 7044 	str.w	r7, [lr, #68]	; 0x44
 80103f0:	e6ab      	b.n	801014a <_AddFreeMemory+0x1a>
 80103f2:	270f      	movs	r7, #15
 80103f4:	e7ca      	b.n	801038c <_AddFreeMemory+0x25c>
 80103f6:	f04f 0e0f 	mov.w	lr, #15
 80103fa:	e793      	b.n	8010324 <_AddFreeMemory+0x1f4>
 80103fc:	f04f 0e0c 	mov.w	lr, #12
 8010400:	e790      	b.n	8010324 <_AddFreeMemory+0x1f4>
 8010402:	f04f 0e0d 	mov.w	lr, #13
 8010406:	e78d      	b.n	8010324 <_AddFreeMemory+0x1f4>
 8010408:	f04f 0e0e 	mov.w	lr, #14
 801040c:	e78a      	b.n	8010324 <_AddFreeMemory+0x1f4>
 801040e:	270c      	movs	r7, #12
 8010410:	e7bc      	b.n	801038c <_AddFreeMemory+0x25c>
 8010412:	270d      	movs	r7, #13
 8010414:	e7ba      	b.n	801038c <_AddFreeMemory+0x25c>
 8010416:	270e      	movs	r7, #14
 8010418:	e7b8      	b.n	801038c <_AddFreeMemory+0x25c>
 801041a:	f04f 0e0b 	mov.w	lr, #11
 801041e:	e781      	b.n	8010324 <_AddFreeMemory+0x1f4>
 8010420:	270b      	movs	r7, #11
 8010422:	e7b3      	b.n	801038c <_AddFreeMemory+0x25c>
 8010424:	2707      	movs	r7, #7
 8010426:	e7b1      	b.n	801038c <_AddFreeMemory+0x25c>
 8010428:	2708      	movs	r7, #8
 801042a:	e7af      	b.n	801038c <_AddFreeMemory+0x25c>
 801042c:	2709      	movs	r7, #9
 801042e:	e7ad      	b.n	801038c <_AddFreeMemory+0x25c>
 8010430:	270a      	movs	r7, #10
 8010432:	e7ab      	b.n	801038c <_AddFreeMemory+0x25c>
 8010434:	20035d08 	.word	0x20035d08
 8010438:	f04f 0e07 	mov.w	lr, #7
 801043c:	e772      	b.n	8010324 <_AddFreeMemory+0x1f4>
 801043e:	f04f 0e08 	mov.w	lr, #8
 8010442:	e76f      	b.n	8010324 <_AddFreeMemory+0x1f4>
 8010444:	f04f 0e09 	mov.w	lr, #9
 8010448:	e76c      	b.n	8010324 <_AddFreeMemory+0x1f4>
 801044a:	f04f 0e0a 	mov.w	lr, #10
 801044e:	e769      	b.n	8010324 <_AddFreeMemory+0x1f4>
 8010450:	f04f 0e03 	mov.w	lr, #3
 8010454:	e766      	b.n	8010324 <_AddFreeMemory+0x1f4>
 8010456:	f04f 0e04 	mov.w	lr, #4
 801045a:	e763      	b.n	8010324 <_AddFreeMemory+0x1f4>
 801045c:	f04f 0e05 	mov.w	lr, #5
 8010460:	e760      	b.n	8010324 <_AddFreeMemory+0x1f4>
 8010462:	f04f 0e06 	mov.w	lr, #6
 8010466:	e75d      	b.n	8010324 <_AddFreeMemory+0x1f4>
 8010468:	f04f 0e02 	mov.w	lr, #2
 801046c:	e75a      	b.n	8010324 <_AddFreeMemory+0x1f4>
 801046e:	2702      	movs	r7, #2
 8010470:	e78c      	b.n	801038c <_AddFreeMemory+0x25c>
 8010472:	2703      	movs	r7, #3
 8010474:	e78a      	b.n	801038c <_AddFreeMemory+0x25c>
 8010476:	2704      	movs	r7, #4
 8010478:	e788      	b.n	801038c <_AddFreeMemory+0x25c>
 801047a:	2705      	movs	r7, #5
 801047c:	e786      	b.n	801038c <_AddFreeMemory+0x25c>
 801047e:	2706      	movs	r7, #6
 8010480:	e784      	b.n	801038c <_AddFreeMemory+0x25c>
 8010482:	f04f 0e01 	mov.w	lr, #1
 8010486:	e74d      	b.n	8010324 <_AddFreeMemory+0x1f4>
 8010488:	2701      	movs	r7, #1
 801048a:	e77f      	b.n	801038c <_AddFreeMemory+0x25c>

0801048c <_RemoveHoles>:
 801048c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010490:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010638 <_RemoveHoles+0x1ac>
 8010494:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8010498:	f8d8 700c 	ldr.w	r7, [r8, #12]
 801049c:	e893 0060 	ldmia.w	r3, {r5, r6}
 80104a0:	3f01      	subs	r7, #1
 80104a2:	b083      	sub	sp, #12
 80104a4:	4683      	mov	fp, r0
 80104a6:	441f      	add	r7, r3
 80104a8:	46c1      	mov	r9, r8
 80104aa:	b135      	cbz	r5, 80104ba <_RemoveHoles+0x2e>
 80104ac:	4433      	add	r3, r6
 80104ae:	429f      	cmp	r7, r3
 80104b0:	d906      	bls.n	80104c0 <_RemoveHoles+0x34>
 80104b2:	e893 0060 	ldmia.w	r3, {r5, r6}
 80104b6:	2d00      	cmp	r5, #0
 80104b8:	d1f8      	bne.n	80104ac <_RemoveHoles+0x20>
 80104ba:	1999      	adds	r1, r3, r6
 80104bc:	428f      	cmp	r7, r1
 80104be:	d803      	bhi.n	80104c8 <_RemoveHoles+0x3c>
 80104c0:	2001      	movs	r0, #1
 80104c2:	b003      	add	sp, #12
 80104c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c8:	599d      	ldr	r5, [r3, r6]
 80104ca:	684c      	ldr	r4, [r1, #4]
 80104cc:	b155      	cbz	r5, 80104e4 <_RemoveHoles+0x58>
 80104ce:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80104d2:	f812 0035 	ldrb.w	r0, [r2, r5, lsl #3]
 80104d6:	2801      	cmp	r0, #1
 80104d8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80104dc:	d005      	beq.n	80104ea <_RemoveHoles+0x5e>
 80104de:	4626      	mov	r6, r4
 80104e0:	460b      	mov	r3, r1
 80104e2:	e7e2      	b.n	80104aa <_RemoveHoles+0x1e>
 80104e4:	4626      	mov	r6, r4
 80104e6:	460b      	mov	r3, r1
 80104e8:	e7e7      	b.n	80104ba <_RemoveHoles+0x2e>
 80104ea:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 80104ee:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
 80104f2:	42b0      	cmp	r0, r6
 80104f4:	d976      	bls.n	80105e4 <_RemoveHoles+0x158>
 80104f6:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 80104fa:	42b0      	cmp	r0, r6
 80104fc:	d975      	bls.n	80105ea <_RemoveHoles+0x15e>
 80104fe:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 8010502:	42b0      	cmp	r0, r6
 8010504:	d974      	bls.n	80105f0 <_RemoveHoles+0x164>
 8010506:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 801050a:	42b0      	cmp	r0, r6
 801050c:	d973      	bls.n	80105f6 <_RemoveHoles+0x16a>
 801050e:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 8010512:	4286      	cmp	r6, r0
 8010514:	d278      	bcs.n	8010608 <_RemoveHoles+0x17c>
 8010516:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 801051a:	4286      	cmp	r6, r0
 801051c:	d277      	bcs.n	801060e <_RemoveHoles+0x182>
 801051e:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 8010522:	4286      	cmp	r6, r0
 8010524:	d26a      	bcs.n	80105fc <_RemoveHoles+0x170>
 8010526:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 801052a:	4286      	cmp	r6, r0
 801052c:	d269      	bcs.n	8010602 <_RemoveHoles+0x176>
 801052e:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 8010532:	4286      	cmp	r6, r0
 8010534:	d274      	bcs.n	8010620 <_RemoveHoles+0x194>
 8010536:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 801053a:	4286      	cmp	r6, r0
 801053c:	d273      	bcs.n	8010626 <_RemoveHoles+0x19a>
 801053e:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 8010542:	4286      	cmp	r6, r0
 8010544:	d272      	bcs.n	801062c <_RemoveHoles+0x1a0>
 8010546:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 801054a:	4286      	cmp	r6, r0
 801054c:	d262      	bcs.n	8010614 <_RemoveHoles+0x188>
 801054e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8010552:	4286      	cmp	r6, r0
 8010554:	d261      	bcs.n	801061a <_RemoveHoles+0x18e>
 8010556:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 801055a:	4286      	cmp	r6, r0
 801055c:	d269      	bcs.n	8010632 <_RemoveHoles+0x1a6>
 801055e:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 8010562:	4286      	cmp	r6, r0
 8010564:	d21f      	bcs.n	80105a6 <_RemoveHoles+0x11a>
 8010566:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 801056a:	4286      	cmp	r6, r0
 801056c:	d231      	bcs.n	80105d2 <_RemoveHoles+0x146>
 801056e:	6053      	str	r3, [r2, #4]
 8010570:	4618      	mov	r0, r3
 8010572:	4622      	mov	r2, r4
 8010574:	f014 feb4 	bl	80252e0 <memmove>
 8010578:	4555      	cmp	r5, sl
 801057a:	4603      	mov	r3, r0
 801057c:	d00b      	beq.n	8010596 <_RemoveHoles+0x10a>
 801057e:	441c      	add	r4, r3
 8010580:	4630      	mov	r0, r6
 8010582:	4621      	mov	r1, r4
 8010584:	f7ff fdd4 	bl	8010130 <_AddFreeMemory>
 8010588:	f1bb 0f00 	cmp.w	fp, #0
 801058c:	d001      	beq.n	8010592 <_RemoveHoles+0x106>
 801058e:	4558      	cmp	r0, fp
 8010590:	d207      	bcs.n	80105a2 <_RemoveHoles+0x116>
 8010592:	4623      	mov	r3, r4
 8010594:	e78b      	b.n	80104ae <_RemoveHoles+0x22>
 8010596:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801059a:	1b92      	subs	r2, r2, r6
 801059c:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 80105a0:	e7ed      	b.n	801057e <_RemoveHoles+0xf2>
 80105a2:	2000      	movs	r0, #0
 80105a4:	e78d      	b.n	80104c2 <_RemoveHoles+0x36>
 80105a6:	2001      	movs	r0, #1
 80105a8:	9001      	str	r0, [sp, #4]
 80105aa:	f8d8 0000 	ldr.w	r0, [r8]
 80105ae:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80105b2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80105b6:	1b80      	subs	r0, r0, r6
 80105b8:	f8c8 0000 	str.w	r0, [r8]
 80105bc:	f1be 0f00 	cmp.w	lr, #0
 80105c0:	d001      	beq.n	80105c6 <_RemoveHoles+0x13a>
 80105c2:	f8ce c004 	str.w	ip, [lr, #4]
 80105c6:	f1bc 0f00 	cmp.w	ip, #0
 80105ca:	d005      	beq.n	80105d8 <_RemoveHoles+0x14c>
 80105cc:	f8cc e000 	str.w	lr, [ip]
 80105d0:	e7cd      	b.n	801056e <_RemoveHoles+0xe2>
 80105d2:	2000      	movs	r0, #0
 80105d4:	9001      	str	r0, [sp, #4]
 80105d6:	e7e8      	b.n	80105aa <_RemoveHoles+0x11e>
 80105d8:	9801      	ldr	r0, [sp, #4]
 80105da:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 80105de:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 80105e2:	e7c4      	b.n	801056e <_RemoveHoles+0xe2>
 80105e4:	200f      	movs	r0, #15
 80105e6:	9001      	str	r0, [sp, #4]
 80105e8:	e7df      	b.n	80105aa <_RemoveHoles+0x11e>
 80105ea:	200e      	movs	r0, #14
 80105ec:	9001      	str	r0, [sp, #4]
 80105ee:	e7dc      	b.n	80105aa <_RemoveHoles+0x11e>
 80105f0:	200d      	movs	r0, #13
 80105f2:	9001      	str	r0, [sp, #4]
 80105f4:	e7d9      	b.n	80105aa <_RemoveHoles+0x11e>
 80105f6:	200c      	movs	r0, #12
 80105f8:	9001      	str	r0, [sp, #4]
 80105fa:	e7d6      	b.n	80105aa <_RemoveHoles+0x11e>
 80105fc:	2009      	movs	r0, #9
 80105fe:	9001      	str	r0, [sp, #4]
 8010600:	e7d3      	b.n	80105aa <_RemoveHoles+0x11e>
 8010602:	2008      	movs	r0, #8
 8010604:	9001      	str	r0, [sp, #4]
 8010606:	e7d0      	b.n	80105aa <_RemoveHoles+0x11e>
 8010608:	200b      	movs	r0, #11
 801060a:	9001      	str	r0, [sp, #4]
 801060c:	e7cd      	b.n	80105aa <_RemoveHoles+0x11e>
 801060e:	200a      	movs	r0, #10
 8010610:	9001      	str	r0, [sp, #4]
 8010612:	e7ca      	b.n	80105aa <_RemoveHoles+0x11e>
 8010614:	2004      	movs	r0, #4
 8010616:	9001      	str	r0, [sp, #4]
 8010618:	e7c7      	b.n	80105aa <_RemoveHoles+0x11e>
 801061a:	2003      	movs	r0, #3
 801061c:	9001      	str	r0, [sp, #4]
 801061e:	e7c4      	b.n	80105aa <_RemoveHoles+0x11e>
 8010620:	2007      	movs	r0, #7
 8010622:	9001      	str	r0, [sp, #4]
 8010624:	e7c1      	b.n	80105aa <_RemoveHoles+0x11e>
 8010626:	2006      	movs	r0, #6
 8010628:	9001      	str	r0, [sp, #4]
 801062a:	e7be      	b.n	80105aa <_RemoveHoles+0x11e>
 801062c:	2005      	movs	r0, #5
 801062e:	9001      	str	r0, [sp, #4]
 8010630:	e7bb      	b.n	80105aa <_RemoveHoles+0x11e>
 8010632:	2002      	movs	r0, #2
 8010634:	9001      	str	r0, [sp, #4]
 8010636:	e7b8      	b.n	80105aa <_RemoveHoles+0x11e>
 8010638:	20035d08 	.word	0x20035d08

0801063c <_EnlargeBlocks>:
 801063c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010640:	4c32      	ldr	r4, [pc, #200]	; (801070c <_EnlargeBlocks+0xd0>)
 8010642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010644:	b973      	cbnz	r3, 8010664 <_EnlargeBlocks+0x28>
 8010646:	4b32      	ldr	r3, [pc, #200]	; (8010710 <_EnlargeBlocks+0xd4>)
 8010648:	689d      	ldr	r5, [r3, #8]
 801064a:	685b      	ldr	r3, [r3, #4]
 801064c:	3508      	adds	r5, #8
 801064e:	fbb3 f5f5 	udiv	r5, r3, r5
 8010652:	3502      	adds	r5, #2
 8010654:	00e8      	lsls	r0, r5, #3
 8010656:	f000 f85f 	bl	8010718 <_Alloc>
 801065a:	4607      	mov	r7, r0
 801065c:	b960      	cbnz	r0, 8010678 <_EnlargeBlocks+0x3c>
 801065e:	2001      	movs	r0, #1
 8010660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010664:	6923      	ldr	r3, [r4, #16]
 8010666:	1d1d      	adds	r5, r3, #4
 8010668:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 801066c:	00e8      	lsls	r0, r5, #3
 801066e:	f000 f853 	bl	8010718 <_Alloc>
 8010672:	4607      	mov	r7, r0
 8010674:	2800      	cmp	r0, #0
 8010676:	d0f2      	beq.n	801065e <_EnlargeBlocks+0x22>
 8010678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801067a:	6922      	ldr	r2, [r4, #16]
 801067c:	4b25      	ldr	r3, [pc, #148]	; (8010714 <_EnlargeBlocks+0xd8>)
 801067e:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8010688:	00d2      	lsls	r2, r2, #3
 801068a:	6846      	ldr	r6, [r0, #4]
 801068c:	3608      	adds	r6, #8
 801068e:	4630      	mov	r0, r6
 8010690:	4798      	blx	r3
 8010692:	6920      	ldr	r0, [r4, #16]
 8010694:	6366      	str	r6, [r4, #52]	; 0x34
 8010696:	1e69      	subs	r1, r5, #1
 8010698:	4288      	cmp	r0, r1
 801069a:	62e7      	str	r7, [r4, #44]	; 0x2c
 801069c:	d233      	bcs.n	8010706 <_EnlargeBlocks+0xca>
 801069e:	eb06 02c0 	add.w	r2, r6, r0, lsl #3
 80106a2:	4603      	mov	r3, r0
 80106a4:	3301      	adds	r3, #1
 80106a6:	428b      	cmp	r3, r1
 80106a8:	6053      	str	r3, [r2, #4]
 80106aa:	f102 0208 	add.w	r2, r2, #8
 80106ae:	d1f9      	bne.n	80106a4 <_EnlargeBlocks+0x68>
 80106b0:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 80106b4:	2600      	movs	r6, #0
 80106b6:	604e      	str	r6, [r1, #4]
 80106b8:	6863      	ldr	r3, [r4, #4]
 80106ba:	6260      	str	r0, [r4, #36]	; 0x24
 80106bc:	1a1b      	subs	r3, r3, r0
 80106be:	442b      	add	r3, r5
 80106c0:	6125      	str	r5, [r4, #16]
 80106c2:	6063      	str	r3, [r4, #4]
 80106c4:	4c11      	ldr	r4, [pc, #68]	; (801070c <_EnlargeBlocks+0xd0>)
 80106c6:	f1b8 0f00 	cmp.w	r8, #0
 80106ca:	d019      	beq.n	8010700 <_EnlargeBlocks+0xc4>
 80106cc:	f002 fb00 	bl	8012cd0 <GUI_Lock>
 80106d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80106d2:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 80106d6:	442b      	add	r3, r5
 80106d8:	6859      	ldr	r1, [r3, #4]
 80106da:	6848      	ldr	r0, [r1, #4]
 80106dc:	f7ff fd28 	bl	8010130 <_AddFreeMemory>
 80106e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106e2:	6863      	ldr	r3, [r4, #4]
 80106e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80106e6:	440d      	add	r5, r1
 80106e8:	3301      	adds	r3, #1
 80106ea:	6063      	str	r3, [r4, #4]
 80106ec:	606a      	str	r2, [r5, #4]
 80106ee:	f801 6038 	strb.w	r6, [r1, r8, lsl #3]
 80106f2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 80106f6:	f002 fae1 	bl	8012cbc <GUI_Unlock>
 80106fa:	4630      	mov	r0, r6
 80106fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010700:	4640      	mov	r0, r8
 8010702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010706:	4601      	mov	r1, r0
 8010708:	e7d2      	b.n	80106b0 <_EnlargeBlocks+0x74>
 801070a:	bf00      	nop
 801070c:	20035d08 	.word	0x20035d08
 8010710:	200005ec 	.word	0x200005ec
 8010714:	2000003c 	.word	0x2000003c

08010718 <_Alloc>:
 8010718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801071c:	4cc0      	ldr	r4, [pc, #768]	; (8010a20 <_Alloc+0x308>)
 801071e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010722:	4605      	mov	r5, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	f000 80f8 	beq.w	801091a <_Alloc+0x202>
 801072a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801072c:	6823      	ldr	r3, [r4, #0]
 801072e:	4285      	cmp	r5, r0
 8010730:	bf24      	itt	cs
 8010732:	1ce8      	addcs	r0, r5, #3
 8010734:	f020 0003 	biccs.w	r0, r0, #3
 8010738:	f100 060c 	add.w	r6, r0, #12
 801073c:	42b3      	cmp	r3, r6
 801073e:	4db8      	ldr	r5, [pc, #736]	; (8010a20 <_Alloc+0x308>)
 8010740:	d202      	bcs.n	8010748 <_Alloc+0x30>
 8010742:	2000      	movs	r0, #0
 8010744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010748:	686b      	ldr	r3, [r5, #4]
 801074a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801074c:	4293      	cmp	r3, r2
 801074e:	f240 8154 	bls.w	80109fa <_Alloc+0x2e2>
 8010752:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010754:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010756:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 801075a:	3b01      	subs	r3, #1
 801075c:	eb02 0108 	add.w	r1, r2, r8
 8010760:	6063      	str	r3, [r4, #4]
 8010762:	684b      	ldr	r3, [r1, #4]
 8010764:	6263      	str	r3, [r4, #36]	; 0x24
 8010766:	2301      	movs	r3, #1
 8010768:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
 801076c:	2d00      	cmp	r5, #0
 801076e:	d0e8      	beq.n	8010742 <_Alloc+0x2a>
 8010770:	4fab      	ldr	r7, [pc, #684]	; (8010a20 <_Alloc+0x308>)
 8010772:	f8d4 e0b8 	ldr.w	lr, [r4, #184]	; 0xb8
 8010776:	4576      	cmp	r6, lr
 8010778:	f080 8121 	bcs.w	80109be <_Alloc+0x2a6>
 801077c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010780:	429e      	cmp	r6, r3
 8010782:	f080 811e 	bcs.w	80109c2 <_Alloc+0x2aa>
 8010786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801078a:	429e      	cmp	r6, r3
 801078c:	f080 811b 	bcs.w	80109c6 <_Alloc+0x2ae>
 8010790:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010794:	429e      	cmp	r6, r3
 8010796:	f080 811a 	bcs.w	80109ce <_Alloc+0x2b6>
 801079a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801079e:	429e      	cmp	r6, r3
 80107a0:	f080 8113 	bcs.w	80109ca <_Alloc+0x2b2>
 80107a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107a8:	429e      	cmp	r6, r3
 80107aa:	f080 8114 	bcs.w	80109d6 <_Alloc+0x2be>
 80107ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80107b2:	429e      	cmp	r6, r3
 80107b4:	f080 810d 	bcs.w	80109d2 <_Alloc+0x2ba>
 80107b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107bc:	429e      	cmp	r6, r3
 80107be:	f080 810e 	bcs.w	80109de <_Alloc+0x2c6>
 80107c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107c4:	429e      	cmp	r6, r3
 80107c6:	f080 8108 	bcs.w	80109da <_Alloc+0x2c2>
 80107ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107cc:	429e      	cmp	r6, r3
 80107ce:	f080 810a 	bcs.w	80109e6 <_Alloc+0x2ce>
 80107d2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80107d4:	429e      	cmp	r6, r3
 80107d6:	f080 8104 	bcs.w	80109e2 <_Alloc+0x2ca>
 80107da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107dc:	429e      	cmp	r6, r3
 80107de:	f080 8104 	bcs.w	80109ea <_Alloc+0x2d2>
 80107e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107e4:	429e      	cmp	r6, r3
 80107e6:	f080 8102 	bcs.w	80109ee <_Alloc+0x2d6>
 80107ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ec:	429e      	cmp	r6, r3
 80107ee:	f080 8102 	bcs.w	80109f6 <_Alloc+0x2de>
 80107f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107f4:	429e      	cmp	r6, r3
 80107f6:	f080 80fc 	bcs.w	80109f2 <_Alloc+0x2da>
 80107fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107fc:	429e      	cmp	r6, r3
 80107fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010802:	bf28      	it	cs
 8010804:	2300      	movcs	r3, #0
 8010806:	2b0f      	cmp	r3, #15
 8010808:	d812      	bhi.n	8010830 <_Alloc+0x118>
 801080a:	2100      	movs	r1, #0
 801080c:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 8010810:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010812:	b92b      	cbnz	r3, 8010820 <_Alloc+0x108>
 8010814:	e007      	b.n	8010826 <_Alloc+0x10e>
 8010816:	685a      	ldr	r2, [r3, #4]
 8010818:	4296      	cmp	r6, r2
 801081a:	d91d      	bls.n	8010858 <_Alloc+0x140>
 801081c:	689b      	ldr	r3, [r3, #8]
 801081e:	b113      	cbz	r3, 8010826 <_Alloc+0x10e>
 8010820:	689b      	ldr	r3, [r3, #8]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d1f7      	bne.n	8010816 <_Alloc+0xfe>
 8010826:	3101      	adds	r1, #1
 8010828:	2910      	cmp	r1, #16
 801082a:	f100 0008 	add.w	r0, r0, #8
 801082e:	d1ef      	bne.n	8010810 <_Alloc+0xf8>
 8010830:	4630      	mov	r0, r6
 8010832:	f7ff fe2b 	bl	801048c <_RemoveHoles>
 8010836:	2800      	cmp	r0, #0
 8010838:	d09b      	beq.n	8010772 <_Alloc+0x5a>
 801083a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801083c:	6863      	ldr	r3, [r4, #4]
 801083e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010840:	4490      	add	r8, r2
 8010842:	2600      	movs	r6, #0
 8010844:	3301      	adds	r3, #1
 8010846:	6063      	str	r3, [r4, #4]
 8010848:	f8c8 1004 	str.w	r1, [r8, #4]
 801084c:	f802 6035 	strb.w	r6, [r2, r5, lsl #3]
 8010850:	4630      	mov	r0, r6
 8010852:	6265      	str	r5, [r4, #36]	; 0x24
 8010854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010858:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801085a:	1b97      	subs	r7, r2, r6
 801085c:	f101 000c 	add.w	r0, r1, #12
 8010860:	4287      	cmp	r7, r0
 8010862:	bf2c      	ite	cs
 8010864:	4630      	movcs	r0, r6
 8010866:	4610      	movcc	r0, r2
 8010868:	4596      	cmp	lr, r2
 801086a:	f240 80f5 	bls.w	8010a58 <_Alloc+0x340>
 801086e:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 8010872:	4e6b      	ldr	r6, [pc, #428]	; (8010a20 <_Alloc+0x308>)
 8010874:	42ba      	cmp	r2, r7
 8010876:	f080 80f1 	bcs.w	8010a5c <_Alloc+0x344>
 801087a:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 801087e:	42ba      	cmp	r2, r7
 8010880:	f080 80e8 	bcs.w	8010a54 <_Alloc+0x33c>
 8010884:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8010888:	42ba      	cmp	r2, r7
 801088a:	f080 80cd 	bcs.w	8010a28 <_Alloc+0x310>
 801088e:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 8010892:	42ba      	cmp	r2, r7
 8010894:	f080 80d8 	bcs.w	8010a48 <_Alloc+0x330>
 8010898:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 801089c:	4297      	cmp	r7, r2
 801089e:	f240 80df 	bls.w	8010a60 <_Alloc+0x348>
 80108a2:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 80108a6:	4297      	cmp	r7, r2
 80108a8:	f240 80de 	bls.w	8010a68 <_Alloc+0x350>
 80108ac:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 80108b0:	4297      	cmp	r7, r2
 80108b2:	f240 80d7 	bls.w	8010a64 <_Alloc+0x34c>
 80108b6:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 80108b8:	4297      	cmp	r7, r2
 80108ba:	f240 80e5 	bls.w	8010a88 <_Alloc+0x370>
 80108be:	6f36      	ldr	r6, [r6, #112]	; 0x70
 80108c0:	4296      	cmp	r6, r2
 80108c2:	f240 80df 	bls.w	8010a84 <_Alloc+0x36c>
 80108c6:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 80108c8:	4f55      	ldr	r7, [pc, #340]	; (8010a20 <_Alloc+0x308>)
 80108ca:	4296      	cmp	r6, r2
 80108cc:	f240 80d8 	bls.w	8010a80 <_Alloc+0x368>
 80108d0:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 80108d2:	4296      	cmp	r6, r2
 80108d4:	f240 80d2 	bls.w	8010a7c <_Alloc+0x364>
 80108d8:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 80108da:	42b2      	cmp	r2, r6
 80108dc:	f080 80cc 	bcs.w	8010a78 <_Alloc+0x360>
 80108e0:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80108e2:	4296      	cmp	r6, r2
 80108e4:	f240 80c6 	bls.w	8010a74 <_Alloc+0x35c>
 80108e8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 80108ea:	42b2      	cmp	r2, r6
 80108ec:	f080 80c0 	bcs.w	8010a70 <_Alloc+0x358>
 80108f0:	4291      	cmp	r1, r2
 80108f2:	f240 80bb 	bls.w	8010a6c <_Alloc+0x354>
 80108f6:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80108f8:	1819      	adds	r1, r3, r0
 80108fa:	44a0      	add	r8, r4
 80108fc:	4290      	cmp	r0, r2
 80108fe:	f04f 0400 	mov.w	r4, #0
 8010902:	f8c8 3004 	str.w	r3, [r8, #4]
 8010906:	601d      	str	r5, [r3, #0]
 8010908:	6058      	str	r0, [r3, #4]
 801090a:	611b      	str	r3, [r3, #16]
 801090c:	609c      	str	r4, [r3, #8]
 801090e:	f841 0c04 	str.w	r0, [r1, #-4]
 8010912:	db7e      	blt.n	8010a12 <_Alloc+0x2fa>
 8010914:	4628      	mov	r0, r5
 8010916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801091a:	4b42      	ldr	r3, [pc, #264]	; (8010a24 <_Alloc+0x30c>)
 801091c:	689a      	ldr	r2, [r3, #8]
 801091e:	6858      	ldr	r0, [r3, #4]
 8010920:	2101      	movs	r1, #1
 8010922:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8010926:	b90a      	cbnz	r2, 801092c <_Alloc+0x214>
 8010928:	0882      	lsrs	r2, r0, #2
 801092a:	609a      	str	r2, [r3, #8]
 801092c:	265a      	movs	r6, #90	; 0x5a
 801092e:	6226      	str	r6, [r4, #32]
 8010930:	2710      	movs	r7, #16
 8010932:	2220      	movs	r2, #32
 8010934:	2640      	movs	r6, #64	; 0x40
 8010936:	6819      	ldr	r1, [r3, #0]
 8010938:	6427      	str	r7, [r4, #64]	; 0x40
 801093a:	64a2      	str	r2, [r4, #72]	; 0x48
 801093c:	6526      	str	r6, [r4, #80]	; 0x50
 801093e:	2780      	movs	r7, #128	; 0x80
 8010940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010944:	f44f 7600 	mov.w	r6, #512	; 0x200
 8010948:	65a7      	str	r7, [r4, #88]	; 0x58
 801094a:	6622      	str	r2, [r4, #96]	; 0x60
 801094c:	66a6      	str	r6, [r4, #104]	; 0x68
 801094e:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8010952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010956:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 801095a:	f1a1 0314 	sub.w	r3, r1, #20
 801095e:	6727      	str	r7, [r4, #112]	; 0x70
 8010960:	67a2      	str	r2, [r4, #120]	; 0x78
 8010962:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8010966:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 801096a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801096e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8010972:	4403      	add	r3, r0
 8010974:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
 8010978:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801097c:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 8010980:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8010984:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010988:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 801098c:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
 8010990:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
 8010994:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
 8010998:	2202      	movs	r2, #2
 801099a:	2601      	movs	r6, #1
 801099c:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80109a0:	63a1      	str	r1, [r4, #56]	; 0x38
 80109a2:	6363      	str	r3, [r4, #52]	; 0x34
 80109a4:	6122      	str	r2, [r4, #16]
 80109a6:	60e0      	str	r0, [r4, #12]
 80109a8:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
 80109ac:	605e      	str	r6, [r3, #4]
 80109ae:	6266      	str	r6, [r4, #36]	; 0x24
 80109b0:	6066      	str	r6, [r4, #4]
 80109b2:	f7ff fbbd 	bl	8010130 <_AddFreeMemory>
 80109b6:	f7ff fe41 	bl	801063c <_EnlargeBlocks>
 80109ba:	6326      	str	r6, [r4, #48]	; 0x30
 80109bc:	e6b5      	b.n	801072a <_Alloc+0x12>
 80109be:	210f      	movs	r1, #15
 80109c0:	e724      	b.n	801080c <_Alloc+0xf4>
 80109c2:	210e      	movs	r1, #14
 80109c4:	e722      	b.n	801080c <_Alloc+0xf4>
 80109c6:	210d      	movs	r1, #13
 80109c8:	e720      	b.n	801080c <_Alloc+0xf4>
 80109ca:	210b      	movs	r1, #11
 80109cc:	e71e      	b.n	801080c <_Alloc+0xf4>
 80109ce:	210c      	movs	r1, #12
 80109d0:	e71c      	b.n	801080c <_Alloc+0xf4>
 80109d2:	2109      	movs	r1, #9
 80109d4:	e71a      	b.n	801080c <_Alloc+0xf4>
 80109d6:	210a      	movs	r1, #10
 80109d8:	e718      	b.n	801080c <_Alloc+0xf4>
 80109da:	2107      	movs	r1, #7
 80109dc:	e716      	b.n	801080c <_Alloc+0xf4>
 80109de:	2108      	movs	r1, #8
 80109e0:	e714      	b.n	801080c <_Alloc+0xf4>
 80109e2:	2105      	movs	r1, #5
 80109e4:	e712      	b.n	801080c <_Alloc+0xf4>
 80109e6:	2106      	movs	r1, #6
 80109e8:	e710      	b.n	801080c <_Alloc+0xf4>
 80109ea:	2104      	movs	r1, #4
 80109ec:	e70e      	b.n	801080c <_Alloc+0xf4>
 80109ee:	2103      	movs	r1, #3
 80109f0:	e70c      	b.n	801080c <_Alloc+0xf4>
 80109f2:	2101      	movs	r1, #1
 80109f4:	e70a      	b.n	801080c <_Alloc+0xf4>
 80109f6:	2102      	movs	r1, #2
 80109f8:	e708      	b.n	801080c <_Alloc+0xf4>
 80109fa:	3a01      	subs	r2, #1
 80109fc:	632a      	str	r2, [r5, #48]	; 0x30
 80109fe:	f7ff fe1d 	bl	801063c <_EnlargeBlocks>
 8010a02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010a04:	3301      	adds	r3, #1
 8010a06:	632b      	str	r3, [r5, #48]	; 0x30
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	f47f ae9a 	bne.w	8010742 <_Alloc+0x2a>
 8010a0e:	686b      	ldr	r3, [r5, #4]
 8010a10:	e69f      	b.n	8010752 <_Alloc+0x3a>
 8010a12:	1a10      	subs	r0, r2, r0
 8010a14:	f7ff fb8c 	bl	8010130 <_AddFreeMemory>
 8010a18:	4628      	mov	r0, r5
 8010a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a1e:	bf00      	nop
 8010a20:	20035d08 	.word	0x20035d08
 8010a24:	200005ec 	.word	0x200005ec
 8010a28:	210c      	movs	r1, #12
 8010a2a:	6826      	ldr	r6, [r4, #0]
 8010a2c:	689f      	ldr	r7, [r3, #8]
 8010a2e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8010a32:	1ab6      	subs	r6, r6, r2
 8010a34:	6026      	str	r6, [r4, #0]
 8010a36:	b10f      	cbz	r7, 8010a3c <_Alloc+0x324>
 8010a38:	f8c7 e004 	str.w	lr, [r7, #4]
 8010a3c:	f1be 0f00 	cmp.w	lr, #0
 8010a40:	d004      	beq.n	8010a4c <_Alloc+0x334>
 8010a42:	f8ce 7000 	str.w	r7, [lr]
 8010a46:	e756      	b.n	80108f6 <_Alloc+0x1de>
 8010a48:	210b      	movs	r1, #11
 8010a4a:	e7ee      	b.n	8010a2a <_Alloc+0x312>
 8010a4c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8010a50:	644f      	str	r7, [r1, #68]	; 0x44
 8010a52:	e750      	b.n	80108f6 <_Alloc+0x1de>
 8010a54:	210d      	movs	r1, #13
 8010a56:	e7e8      	b.n	8010a2a <_Alloc+0x312>
 8010a58:	210f      	movs	r1, #15
 8010a5a:	e7e6      	b.n	8010a2a <_Alloc+0x312>
 8010a5c:	210e      	movs	r1, #14
 8010a5e:	e7e4      	b.n	8010a2a <_Alloc+0x312>
 8010a60:	210a      	movs	r1, #10
 8010a62:	e7e2      	b.n	8010a2a <_Alloc+0x312>
 8010a64:	2108      	movs	r1, #8
 8010a66:	e7e0      	b.n	8010a2a <_Alloc+0x312>
 8010a68:	2109      	movs	r1, #9
 8010a6a:	e7de      	b.n	8010a2a <_Alloc+0x312>
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	e7dc      	b.n	8010a2a <_Alloc+0x312>
 8010a70:	2101      	movs	r1, #1
 8010a72:	e7da      	b.n	8010a2a <_Alloc+0x312>
 8010a74:	2102      	movs	r1, #2
 8010a76:	e7d8      	b.n	8010a2a <_Alloc+0x312>
 8010a78:	2103      	movs	r1, #3
 8010a7a:	e7d6      	b.n	8010a2a <_Alloc+0x312>
 8010a7c:	2104      	movs	r1, #4
 8010a7e:	e7d4      	b.n	8010a2a <_Alloc+0x312>
 8010a80:	2105      	movs	r1, #5
 8010a82:	e7d2      	b.n	8010a2a <_Alloc+0x312>
 8010a84:	2106      	movs	r1, #6
 8010a86:	e7d0      	b.n	8010a2a <_Alloc+0x312>
 8010a88:	2107      	movs	r1, #7
 8010a8a:	e7ce      	b.n	8010a2a <_Alloc+0x312>

08010a8c <GUI_ALLOC_FreeFixedBlock>:
 8010a8c:	b128      	cbz	r0, 8010a9a <GUI_ALLOC_FreeFixedBlock+0xe>
 8010a8e:	4a03      	ldr	r2, [pc, #12]	; (8010a9c <GUI_ALLOC_FreeFixedBlock+0x10>)
 8010a90:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8010a92:	6003      	str	r3, [r0, #0]
 8010a94:	b103      	cbz	r3, 8010a98 <GUI_ALLOC_FreeFixedBlock+0xc>
 8010a96:	6058      	str	r0, [r3, #4]
 8010a98:	63d0      	str	r0, [r2, #60]	; 0x3c
 8010a9a:	4770      	bx	lr
 8010a9c:	20035d08 	.word	0x20035d08

08010aa0 <GUI_ALLOC_GetFixedBlock>:
 8010aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aa2:	4e89      	ldr	r6, [pc, #548]	; (8010cc8 <GUI_ALLOC_GetFixedBlock+0x228>)
 8010aa4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8010aa8:	4604      	mov	r4, r0
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d02f      	beq.n	8010b0e <GUI_ALLOC_GetFixedBlock+0x6e>
 8010aae:	3403      	adds	r4, #3
 8010ab0:	6c35      	ldr	r5, [r6, #64]	; 0x40
 8010ab2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8010ab4:	f024 0403 	bic.w	r4, r4, #3
 8010ab8:	3404      	adds	r4, #4
 8010aba:	42a5      	cmp	r5, r4
 8010abc:	bf38      	it	cc
 8010abe:	4625      	movcc	r5, r4
 8010ac0:	b162      	cbz	r2, 8010adc <GUI_ALLOC_GetFixedBlock+0x3c>
 8010ac2:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8010ac6:	429d      	cmp	r5, r3
 8010ac8:	4614      	mov	r4, r2
 8010aca:	d104      	bne.n	8010ad6 <GUI_ALLOC_GetFixedBlock+0x36>
 8010acc:	e014      	b.n	8010af8 <GUI_ALLOC_GetFixedBlock+0x58>
 8010ace:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010ad2:	429d      	cmp	r5, r3
 8010ad4:	d010      	beq.n	8010af8 <GUI_ALLOC_GetFixedBlock+0x58>
 8010ad6:	6824      	ldr	r4, [r4, #0]
 8010ad8:	2c00      	cmp	r4, #0
 8010ada:	d1f8      	bne.n	8010ace <GUI_ALLOC_GetFixedBlock+0x2e>
 8010adc:	68f3      	ldr	r3, [r6, #12]
 8010ade:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8010ae0:	441c      	add	r4, r3
 8010ae2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8010ae6:	1a61      	subs	r1, r4, r1
 8010ae8:	680b      	ldr	r3, [r1, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d165      	bne.n	8010bba <GUI_ALLOC_GetFixedBlock+0x11a>
 8010aee:	684b      	ldr	r3, [r1, #4]
 8010af0:	429d      	cmp	r5, r3
 8010af2:	dd6c      	ble.n	8010bce <GUI_ALLOC_GetFixedBlock+0x12e>
 8010af4:	2400      	movs	r4, #0
 8010af6:	e008      	b.n	8010b0a <GUI_ALLOC_GetFixedBlock+0x6a>
 8010af8:	6823      	ldr	r3, [r4, #0]
 8010afa:	b10b      	cbz	r3, 8010b00 <GUI_ALLOC_GetFixedBlock+0x60>
 8010afc:	6861      	ldr	r1, [r4, #4]
 8010afe:	6059      	str	r1, [r3, #4]
 8010b00:	6861      	ldr	r1, [r4, #4]
 8010b02:	b101      	cbz	r1, 8010b06 <GUI_ALLOC_GetFixedBlock+0x66>
 8010b04:	600b      	str	r3, [r1, #0]
 8010b06:	42a2      	cmp	r2, r4
 8010b08:	d053      	beq.n	8010bb2 <GUI_ALLOC_GetFixedBlock+0x112>
 8010b0a:	4620      	mov	r0, r4
 8010b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b0e:	4b6f      	ldr	r3, [pc, #444]	; (8010ccc <GUI_ALLOC_GetFixedBlock+0x22c>)
 8010b10:	689a      	ldr	r2, [r3, #8]
 8010b12:	6858      	ldr	r0, [r3, #4]
 8010b14:	2101      	movs	r1, #1
 8010b16:	f886 1028 	strb.w	r1, [r6, #40]	; 0x28
 8010b1a:	b90a      	cbnz	r2, 8010b20 <GUI_ALLOC_GetFixedBlock+0x80>
 8010b1c:	0882      	lsrs	r2, r0, #2
 8010b1e:	609a      	str	r2, [r3, #8]
 8010b20:	255a      	movs	r5, #90	; 0x5a
 8010b22:	6235      	str	r5, [r6, #32]
 8010b24:	2710      	movs	r7, #16
 8010b26:	2220      	movs	r2, #32
 8010b28:	2540      	movs	r5, #64	; 0x40
 8010b2a:	6819      	ldr	r1, [r3, #0]
 8010b2c:	6437      	str	r7, [r6, #64]	; 0x40
 8010b2e:	64b2      	str	r2, [r6, #72]	; 0x48
 8010b30:	6535      	str	r5, [r6, #80]	; 0x50
 8010b32:	2780      	movs	r7, #128	; 0x80
 8010b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b38:	f44f 7500 	mov.w	r5, #512	; 0x200
 8010b3c:	65b7      	str	r7, [r6, #88]	; 0x58
 8010b3e:	6632      	str	r2, [r6, #96]	; 0x60
 8010b40:	66b5      	str	r5, [r6, #104]	; 0x68
 8010b42:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8010b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010b4a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8010b4e:	f1a1 0314 	sub.w	r3, r1, #20
 8010b52:	6737      	str	r7, [r6, #112]	; 0x70
 8010b54:	67b2      	str	r2, [r6, #120]	; 0x78
 8010b56:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
 8010b5a:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8010b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010b62:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8010b66:	4403      	add	r3, r0
 8010b68:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
 8010b6c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8010b70:	f8c6 5098 	str.w	r5, [r6, #152]	; 0x98
 8010b74:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8010b78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010b7c:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8010b80:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
 8010b84:	f8c6 20a8 	str.w	r2, [r6, #168]	; 0xa8
 8010b88:	f8c6 50b0 	str.w	r5, [r6, #176]	; 0xb0
 8010b8c:	2202      	movs	r2, #2
 8010b8e:	2501      	movs	r5, #1
 8010b90:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8010b94:	63b1      	str	r1, [r6, #56]	; 0x38
 8010b96:	6373      	str	r3, [r6, #52]	; 0x34
 8010b98:	6132      	str	r2, [r6, #16]
 8010b9a:	60f0      	str	r0, [r6, #12]
 8010b9c:	f8c6 70b8 	str.w	r7, [r6, #184]	; 0xb8
 8010ba0:	605d      	str	r5, [r3, #4]
 8010ba2:	6275      	str	r5, [r6, #36]	; 0x24
 8010ba4:	6075      	str	r5, [r6, #4]
 8010ba6:	f7ff fac3 	bl	8010130 <_AddFreeMemory>
 8010baa:	f7ff fd47 	bl	801063c <_EnlargeBlocks>
 8010bae:	6335      	str	r5, [r6, #48]	; 0x30
 8010bb0:	e77d      	b.n	8010aae <GUI_ALLOC_GetFixedBlock+0xe>
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	63f3      	str	r3, [r6, #60]	; 0x3c
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bba:	2000      	movs	r0, #0
 8010bbc:	f7ff fc66 	bl	801048c <_RemoveHoles>
 8010bc0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8010bc4:	1a61      	subs	r1, r4, r1
 8010bc6:	680b      	ldr	r3, [r1, #0]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d193      	bne.n	8010af4 <GUI_ALLOC_GetFixedBlock+0x54>
 8010bcc:	e78f      	b.n	8010aee <GUI_ALLOC_GetFixedBlock+0x4e>
 8010bce:	f8d6 70b8 	ldr.w	r7, [r6, #184]	; 0xb8
 8010bd2:	4a3d      	ldr	r2, [pc, #244]	; (8010cc8 <GUI_ALLOC_GetFixedBlock+0x228>)
 8010bd4:	1b58      	subs	r0, r3, r5
 8010bd6:	1d04      	adds	r4, r0, #4
 8010bd8:	42bb      	cmp	r3, r7
 8010bda:	440c      	add	r4, r1
 8010bdc:	d272      	bcs.n	8010cc4 <GUI_ALLOC_GetFixedBlock+0x224>
 8010bde:	f8d2 70b0 	ldr.w	r7, [r2, #176]	; 0xb0
 8010be2:	42bb      	cmp	r3, r7
 8010be4:	d26c      	bcs.n	8010cc0 <GUI_ALLOC_GetFixedBlock+0x220>
 8010be6:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
 8010bea:	42bb      	cmp	r3, r7
 8010bec:	d266      	bcs.n	8010cbc <GUI_ALLOC_GetFixedBlock+0x21c>
 8010bee:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 8010bf2:	42bb      	cmp	r3, r7
 8010bf4:	d260      	bcs.n	8010cb8 <GUI_ALLOC_GetFixedBlock+0x218>
 8010bf6:	f8d2 7098 	ldr.w	r7, [r2, #152]	; 0x98
 8010bfa:	429f      	cmp	r7, r3
 8010bfc:	d95a      	bls.n	8010cb4 <GUI_ALLOC_GetFixedBlock+0x214>
 8010bfe:	f8d2 7090 	ldr.w	r7, [r2, #144]	; 0x90
 8010c02:	42bb      	cmp	r3, r7
 8010c04:	d254      	bcs.n	8010cb0 <GUI_ALLOC_GetFixedBlock+0x210>
 8010c06:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 8010c0a:	42bb      	cmp	r3, r7
 8010c0c:	d24e      	bcs.n	8010cac <GUI_ALLOC_GetFixedBlock+0x20c>
 8010c0e:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
 8010c12:	42bb      	cmp	r3, r7
 8010c14:	d248      	bcs.n	8010ca8 <GUI_ALLOC_GetFixedBlock+0x208>
 8010c16:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d243      	bcs.n	8010ca4 <GUI_ALLOC_GetFixedBlock+0x204>
 8010c1c:	6f37      	ldr	r7, [r6, #112]	; 0x70
 8010c1e:	4a2a      	ldr	r2, [pc, #168]	; (8010cc8 <GUI_ALLOC_GetFixedBlock+0x228>)
 8010c20:	42bb      	cmp	r3, r7
 8010c22:	d23d      	bcs.n	8010ca0 <GUI_ALLOC_GetFixedBlock+0x200>
 8010c24:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8010c26:	42bb      	cmp	r3, r7
 8010c28:	d238      	bcs.n	8010c9c <GUI_ALLOC_GetFixedBlock+0x1fc>
 8010c2a:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8010c2c:	42bb      	cmp	r3, r7
 8010c2e:	d233      	bcs.n	8010c98 <GUI_ALLOC_GetFixedBlock+0x1f8>
 8010c30:	6d97      	ldr	r7, [r2, #88]	; 0x58
 8010c32:	42bb      	cmp	r3, r7
 8010c34:	d22e      	bcs.n	8010c94 <GUI_ALLOC_GetFixedBlock+0x1f4>
 8010c36:	6d17      	ldr	r7, [r2, #80]	; 0x50
 8010c38:	42bb      	cmp	r3, r7
 8010c3a:	d229      	bcs.n	8010c90 <GUI_ALLOC_GetFixedBlock+0x1f0>
 8010c3c:	6c97      	ldr	r7, [r2, #72]	; 0x48
 8010c3e:	42bb      	cmp	r3, r7
 8010c40:	d224      	bcs.n	8010c8c <GUI_ALLOC_GetFixedBlock+0x1ec>
 8010c42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010c44:	4293      	cmp	r3, r2
 8010c46:	d20c      	bcs.n	8010c62 <GUI_ALLOC_GetFixedBlock+0x1c2>
 8010c48:	68f2      	ldr	r2, [r6, #12]
 8010c4a:	6973      	ldr	r3, [r6, #20]
 8010c4c:	1b52      	subs	r2, r2, r5
 8010c4e:	442b      	add	r3, r5
 8010c50:	60f2      	str	r2, [r6, #12]
 8010c52:	6173      	str	r3, [r6, #20]
 8010c54:	b910      	cbnz	r0, 8010c5c <GUI_ALLOC_GetFixedBlock+0x1bc>
 8010c56:	f844 5c04 	str.w	r5, [r4, #-4]
 8010c5a:	e756      	b.n	8010b0a <GUI_ALLOC_GetFixedBlock+0x6a>
 8010c5c:	f7ff fa68 	bl	8010130 <_AddFreeMemory>
 8010c60:	e7f9      	b.n	8010c56 <GUI_ALLOC_GetFixedBlock+0x1b6>
 8010c62:	2200      	movs	r2, #0
 8010c64:	6837      	ldr	r7, [r6, #0]
 8010c66:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8010c6a:	1afb      	subs	r3, r7, r3
 8010c6c:	6033      	str	r3, [r6, #0]
 8010c6e:	68cb      	ldr	r3, [r1, #12]
 8010c70:	f1be 0f00 	cmp.w	lr, #0
 8010c74:	d001      	beq.n	8010c7a <GUI_ALLOC_GetFixedBlock+0x1da>
 8010c76:	f8ce 3004 	str.w	r3, [lr, #4]
 8010c7a:	b113      	cbz	r3, 8010c82 <GUI_ALLOC_GetFixedBlock+0x1e2>
 8010c7c:	f8c3 e000 	str.w	lr, [r3]
 8010c80:	e7e2      	b.n	8010c48 <GUI_ALLOC_GetFixedBlock+0x1a8>
 8010c82:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8010c86:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
 8010c8a:	e7dd      	b.n	8010c48 <GUI_ALLOC_GetFixedBlock+0x1a8>
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	e7e9      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010c90:	2202      	movs	r2, #2
 8010c92:	e7e7      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010c94:	2203      	movs	r2, #3
 8010c96:	e7e5      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010c98:	2204      	movs	r2, #4
 8010c9a:	e7e3      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010c9c:	2205      	movs	r2, #5
 8010c9e:	e7e1      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010ca0:	2206      	movs	r2, #6
 8010ca2:	e7df      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010ca4:	2207      	movs	r2, #7
 8010ca6:	e7dd      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010ca8:	2208      	movs	r2, #8
 8010caa:	e7db      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010cac:	2209      	movs	r2, #9
 8010cae:	e7d9      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010cb0:	220a      	movs	r2, #10
 8010cb2:	e7d7      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010cb4:	220b      	movs	r2, #11
 8010cb6:	e7d5      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010cb8:	220c      	movs	r2, #12
 8010cba:	e7d3      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010cbc:	220d      	movs	r2, #13
 8010cbe:	e7d1      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010cc0:	220e      	movs	r2, #14
 8010cc2:	e7cf      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010cc4:	220f      	movs	r2, #15
 8010cc6:	e7cd      	b.n	8010c64 <GUI_ALLOC_GetFixedBlock+0x1c4>
 8010cc8:	20035d08 	.word	0x20035d08
 8010ccc:	200005ec 	.word	0x200005ec

08010cd0 <GUI_ALLOC_AllocNoInit>:
 8010cd0:	b900      	cbnz	r0, 8010cd4 <GUI_ALLOC_AllocNoInit+0x4>
 8010cd2:	4770      	bx	lr
 8010cd4:	b510      	push	{r4, lr}
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	f001 fffa 	bl	8012cd0 <GUI_Lock>
 8010cdc:	4620      	mov	r0, r4
 8010cde:	f7ff fd1b 	bl	8010718 <_Alloc>
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	f001 ffea 	bl	8012cbc <GUI_Unlock>
 8010ce8:	4620      	mov	r0, r4
 8010cea:	bd10      	pop	{r4, pc}

08010cec <GUI_ALLOC_h2p>:
 8010cec:	4b03      	ldr	r3, [pc, #12]	; (8010cfc <GUI_ALLOC_h2p+0x10>)
 8010cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cf0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010cf4:	6840      	ldr	r0, [r0, #4]
 8010cf6:	3008      	adds	r0, #8
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	20035d08 	.word	0x20035d08

08010d00 <GUI_ALLOC_LockH>:
 8010d00:	4a07      	ldr	r2, [pc, #28]	; (8010d20 <GUI_ALLOC_LockH+0x20>)
 8010d02:	69d1      	ldr	r1, [r2, #28]
 8010d04:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8010d06:	3101      	adds	r1, #1
 8010d08:	61d1      	str	r1, [r2, #28]
 8010d0a:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 8010d0e:	3201      	adds	r2, #1
 8010d10:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 8010d14:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8010d18:	6858      	ldr	r0, [r3, #4]
 8010d1a:	3008      	adds	r0, #8
 8010d1c:	4770      	bx	lr
 8010d1e:	bf00      	nop
 8010d20:	20035d08 	.word	0x20035d08

08010d24 <GUI_ALLOC_UnlockH>:
 8010d24:	b430      	push	{r4, r5}
 8010d26:	6803      	ldr	r3, [r0, #0]
 8010d28:	4a0a      	ldr	r2, [pc, #40]	; (8010d54 <GUI_ALLOC_UnlockH+0x30>)
 8010d2a:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8010d2e:	4604      	mov	r4, r0
 8010d30:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8010d32:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d903      	bls.n	8010d42 <GUI_ALLOC_UnlockH+0x1e>
 8010d3a:	69d1      	ldr	r1, [r2, #28]
 8010d3c:	b109      	cbz	r1, 8010d42 <GUI_ALLOC_UnlockH+0x1e>
 8010d3e:	3901      	subs	r1, #1
 8010d40:	61d1      	str	r1, [r2, #28]
 8010d42:	3b01      	subs	r3, #1
 8010d44:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	4610      	mov	r0, r2
 8010d4c:	6022      	str	r2, [r4, #0]
 8010d4e:	bc30      	pop	{r4, r5}
 8010d50:	4770      	bx	lr
 8010d52:	bf00      	nop
 8010d54:	20035d08 	.word	0x20035d08

08010d58 <GUI_ALLOC_GetMaxSize>:
 8010d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d5a:	4c4a      	ldr	r4, [pc, #296]	; (8010e84 <GUI_ALLOC_GetMaxSize+0x12c>)
 8010d5c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d03d      	beq.n	8010de0 <GUI_ALLOC_GetMaxSize+0x88>
 8010d64:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8010d68:	4a46      	ldr	r2, [pc, #280]	; (8010e84 <GUI_ALLOC_GetMaxSize+0x12c>)
 8010d6a:	bb3b      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010d6c:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8010d70:	bb23      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010d72:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 8010d76:	bb0b      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010d78:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8010d7c:	b9f3      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010d7e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8010d82:	b9db      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010d84:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8010d88:	b9c3      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010d8a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8010d8e:	b9ab      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010d90:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8010d94:	b993      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010d96:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8010d98:	b983      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010d9a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8010d9c:	b973      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010d9e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010da0:	b963      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010da2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010da4:	b953      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010da6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8010da8:	b943      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010daa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8010dac:	b933      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010dae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8010db0:	b923      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010db2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010db4:	b913      	cbnz	r3, 8010dbc <GUI_ALLOC_GetMaxSize+0x64>
 8010db6:	f06f 000b 	mvn.w	r0, #11
 8010dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dbc:	689b      	ldr	r3, [r3, #8]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d0f9      	beq.n	8010db6 <GUI_ALLOC_GetMaxSize+0x5e>
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	e001      	b.n	8010dca <GUI_ALLOC_GetMaxSize+0x72>
 8010dc6:	689b      	ldr	r3, [r3, #8]
 8010dc8:	b143      	cbz	r3, 8010ddc <GUI_ALLOC_GetMaxSize+0x84>
 8010dca:	6859      	ldr	r1, [r3, #4]
 8010dcc:	689b      	ldr	r3, [r3, #8]
 8010dce:	4291      	cmp	r1, r2
 8010dd0:	4610      	mov	r0, r2
 8010dd2:	bf84      	itt	hi
 8010dd4:	460a      	movhi	r2, r1
 8010dd6:	4610      	movhi	r0, r2
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d1f4      	bne.n	8010dc6 <GUI_ALLOC_GetMaxSize+0x6e>
 8010ddc:	380c      	subs	r0, #12
 8010dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010de0:	4b29      	ldr	r3, [pc, #164]	; (8010e88 <GUI_ALLOC_GetMaxSize+0x130>)
 8010de2:	689a      	ldr	r2, [r3, #8]
 8010de4:	6858      	ldr	r0, [r3, #4]
 8010de6:	2101      	movs	r1, #1
 8010de8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8010dec:	b90a      	cbnz	r2, 8010df2 <GUI_ALLOC_GetMaxSize+0x9a>
 8010dee:	0882      	lsrs	r2, r0, #2
 8010df0:	609a      	str	r2, [r3, #8]
 8010df2:	6819      	ldr	r1, [r3, #0]
 8010df4:	63a1      	str	r1, [r4, #56]	; 0x38
 8010df6:	265a      	movs	r6, #90	; 0x5a
 8010df8:	2210      	movs	r2, #16
 8010dfa:	2520      	movs	r5, #32
 8010dfc:	6226      	str	r6, [r4, #32]
 8010dfe:	6422      	str	r2, [r4, #64]	; 0x40
 8010e00:	64a5      	str	r5, [r4, #72]	; 0x48
 8010e02:	2740      	movs	r7, #64	; 0x40
 8010e04:	2680      	movs	r6, #128	; 0x80
 8010e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010e0a:	f44f 7500 	mov.w	r5, #512	; 0x200
 8010e0e:	f1a1 0314 	sub.w	r3, r1, #20
 8010e12:	6527      	str	r7, [r4, #80]	; 0x50
 8010e14:	65a6      	str	r6, [r4, #88]	; 0x58
 8010e16:	6622      	str	r2, [r4, #96]	; 0x60
 8010e18:	66a5      	str	r5, [r4, #104]	; 0x68
 8010e1a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8010e1e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8010e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010e26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8010e2a:	4403      	add	r3, r0
 8010e2c:	6727      	str	r7, [r4, #112]	; 0x70
 8010e2e:	67a6      	str	r6, [r4, #120]	; 0x78
 8010e30:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8010e34:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8010e38:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8010e3c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8010e40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010e44:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8010e48:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8010e4c:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 8010e50:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8010e54:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8010e58:	2202      	movs	r2, #2
 8010e5a:	2501      	movs	r5, #1
 8010e5c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8010e60:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8010e64:	6363      	str	r3, [r4, #52]	; 0x34
 8010e66:	6122      	str	r2, [r4, #16]
 8010e68:	60e0      	str	r0, [r4, #12]
 8010e6a:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 8010e6e:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8010e72:	605d      	str	r5, [r3, #4]
 8010e74:	6265      	str	r5, [r4, #36]	; 0x24
 8010e76:	6065      	str	r5, [r4, #4]
 8010e78:	f7ff f95a 	bl	8010130 <_AddFreeMemory>
 8010e7c:	f7ff fbde 	bl	801063c <_EnlargeBlocks>
 8010e80:	6325      	str	r5, [r4, #48]	; 0x30
 8010e82:	e76f      	b.n	8010d64 <GUI_ALLOC_GetMaxSize+0xc>
 8010e84:	20035d08 	.word	0x20035d08
 8010e88:	200005ec 	.word	0x200005ec

08010e8c <GUI_ALLOC_RequestSize>:
 8010e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8e:	4c58      	ldr	r4, [pc, #352]	; (8010ff0 <GUI_ALLOC_RequestSize+0x164>)
 8010e90:	f001 ff1e 	bl	8012cd0 <GUI_Lock>
 8010e94:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d057      	beq.n	8010f4c <GUI_ALLOC_RequestSize+0xc0>
 8010e9c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8010ea0:	4a53      	ldr	r2, [pc, #332]	; (8010ff0 <GUI_ALLOC_RequestSize+0x164>)
 8010ea2:	bb9b      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010ea4:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8010ea8:	bb83      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010eaa:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 8010eae:	bb6b      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010eb0:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8010eb4:	bb53      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010eb6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8010eba:	bb3b      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010ebc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8010ec0:	bb23      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010ec2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8010ec6:	bb0b      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010ec8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8010ecc:	b9f3      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010ece:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8010ed0:	b9e3      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010ed2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8010ed4:	b9d3      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010ed6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010ed8:	b9c3      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010eda:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010edc:	b9b3      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010ede:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8010ee0:	b9a3      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010ee2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8010ee4:	b993      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010ee6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8010ee8:	b983      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010eea:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010eec:	b973      	cbnz	r3, 8010f0c <GUI_ALLOC_RequestSize+0x80>
 8010eee:	f06f 030b 	mvn.w	r3, #11
 8010ef2:	4940      	ldr	r1, [pc, #256]	; (8010ff4 <GUI_ALLOC_RequestSize+0x168>)
 8010ef4:	17da      	asrs	r2, r3, #31
 8010ef6:	fb81 1303 	smull	r1, r3, r1, r3
 8010efa:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 8010efe:	6a24      	ldr	r4, [r4, #32]
 8010f00:	fb04 f403 	mul.w	r4, r4, r3
 8010f04:	f001 feda 	bl	8012cbc <GUI_Unlock>
 8010f08:	4620      	mov	r0, r4
 8010f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f0c:	689b      	ldr	r3, [r3, #8]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d0f5      	beq.n	8010efe <GUI_ALLOC_RequestSize+0x72>
 8010f12:	2200      	movs	r2, #0
 8010f14:	e001      	b.n	8010f1a <GUI_ALLOC_RequestSize+0x8e>
 8010f16:	689b      	ldr	r3, [r3, #8]
 8010f18:	b143      	cbz	r3, 8010f2c <GUI_ALLOC_RequestSize+0xa0>
 8010f1a:	6859      	ldr	r1, [r3, #4]
 8010f1c:	689b      	ldr	r3, [r3, #8]
 8010f1e:	4291      	cmp	r1, r2
 8010f20:	4610      	mov	r0, r2
 8010f22:	bf84      	itt	hi
 8010f24:	460a      	movhi	r2, r1
 8010f26:	4610      	movhi	r0, r2
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d1f4      	bne.n	8010f16 <GUI_ALLOC_RequestSize+0x8a>
 8010f2c:	380c      	subs	r0, #12
 8010f2e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8010f32:	4603      	mov	r3, r0
 8010f34:	d8dd      	bhi.n	8010ef2 <GUI_ALLOC_RequestSize+0x66>
 8010f36:	6a22      	ldr	r2, [r4, #32]
 8010f38:	4b2e      	ldr	r3, [pc, #184]	; (8010ff4 <GUI_ALLOC_RequestSize+0x168>)
 8010f3a:	fb02 f000 	mul.w	r0, r2, r0
 8010f3e:	fba3 2300 	umull	r2, r3, r3, r0
 8010f42:	095c      	lsrs	r4, r3, #5
 8010f44:	f001 feba 	bl	8012cbc <GUI_Unlock>
 8010f48:	4620      	mov	r0, r4
 8010f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f4c:	4b2a      	ldr	r3, [pc, #168]	; (8010ff8 <GUI_ALLOC_RequestSize+0x16c>)
 8010f4e:	689a      	ldr	r2, [r3, #8]
 8010f50:	6858      	ldr	r0, [r3, #4]
 8010f52:	2101      	movs	r1, #1
 8010f54:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8010f58:	b90a      	cbnz	r2, 8010f5e <GUI_ALLOC_RequestSize+0xd2>
 8010f5a:	0882      	lsrs	r2, r0, #2
 8010f5c:	609a      	str	r2, [r3, #8]
 8010f5e:	6819      	ldr	r1, [r3, #0]
 8010f60:	63a1      	str	r1, [r4, #56]	; 0x38
 8010f62:	265a      	movs	r6, #90	; 0x5a
 8010f64:	2210      	movs	r2, #16
 8010f66:	2520      	movs	r5, #32
 8010f68:	6226      	str	r6, [r4, #32]
 8010f6a:	6422      	str	r2, [r4, #64]	; 0x40
 8010f6c:	64a5      	str	r5, [r4, #72]	; 0x48
 8010f6e:	2740      	movs	r7, #64	; 0x40
 8010f70:	2680      	movs	r6, #128	; 0x80
 8010f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010f76:	f44f 7500 	mov.w	r5, #512	; 0x200
 8010f7a:	f1a1 0314 	sub.w	r3, r1, #20
 8010f7e:	6527      	str	r7, [r4, #80]	; 0x50
 8010f80:	65a6      	str	r6, [r4, #88]	; 0x58
 8010f82:	6622      	str	r2, [r4, #96]	; 0x60
 8010f84:	66a5      	str	r5, [r4, #104]	; 0x68
 8010f86:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8010f8a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8010f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010f92:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8010f96:	4403      	add	r3, r0
 8010f98:	6727      	str	r7, [r4, #112]	; 0x70
 8010f9a:	67a6      	str	r6, [r4, #120]	; 0x78
 8010f9c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8010fa0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8010fa4:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8010fa8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8010fac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010fb0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8010fb4:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8010fb8:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 8010fbc:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8010fc0:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8010fc4:	2202      	movs	r2, #2
 8010fc6:	2501      	movs	r5, #1
 8010fc8:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8010fcc:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8010fd0:	6363      	str	r3, [r4, #52]	; 0x34
 8010fd2:	6122      	str	r2, [r4, #16]
 8010fd4:	60e0      	str	r0, [r4, #12]
 8010fd6:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 8010fda:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8010fde:	605d      	str	r5, [r3, #4]
 8010fe0:	6265      	str	r5, [r4, #36]	; 0x24
 8010fe2:	6065      	str	r5, [r4, #4]
 8010fe4:	f7ff f8a4 	bl	8010130 <_AddFreeMemory>
 8010fe8:	f7ff fb28 	bl	801063c <_EnlargeBlocks>
 8010fec:	6325      	str	r5, [r4, #48]	; 0x30
 8010fee:	e755      	b.n	8010e9c <GUI_ALLOC_RequestSize+0x10>
 8010ff0:	20035d08 	.word	0x20035d08
 8010ff4:	51eb851f 	.word	0x51eb851f
 8010ff8:	200005ec 	.word	0x200005ec

08010ffc <GUI_ALLOC_Lock>:
 8010ffc:	4a02      	ldr	r2, [pc, #8]	; (8011008 <GUI_ALLOC_Lock+0xc>)
 8010ffe:	6993      	ldr	r3, [r2, #24]
 8011000:	3301      	adds	r3, #1
 8011002:	6193      	str	r3, [r2, #24]
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop
 8011008:	20035d08 	.word	0x20035d08

0801100c <GUI_ALLOC_Unlock>:
 801100c:	4a02      	ldr	r2, [pc, #8]	; (8011018 <GUI_ALLOC_Unlock+0xc>)
 801100e:	6993      	ldr	r3, [r2, #24]
 8011010:	3b01      	subs	r3, #1
 8011012:	6193      	str	r3, [r2, #24]
 8011014:	4770      	bx	lr
 8011016:	bf00      	nop
 8011018:	20035d08 	.word	0x20035d08

0801101c <GUI_ALLOC_AssignMemory>:
 801101c:	4b02      	ldr	r3, [pc, #8]	; (8011028 <GUI_ALLOC_AssignMemory+0xc>)
 801101e:	f021 0103 	bic.w	r1, r1, #3
 8011022:	e883 0003 	stmia.w	r3, {r0, r1}
 8011026:	4770      	bx	lr
 8011028:	200005ec 	.word	0x200005ec

0801102c <GUI_ALLOC_Free>:
 801102c:	b900      	cbnz	r0, 8011030 <GUI_ALLOC_Free+0x4>
 801102e:	4770      	bx	lr
 8011030:	b570      	push	{r4, r5, r6, lr}
 8011032:	4c0d      	ldr	r4, [pc, #52]	; (8011068 <GUI_ALLOC_Free+0x3c>)
 8011034:	4605      	mov	r5, r0
 8011036:	f001 fe4b 	bl	8012cd0 <GUI_Lock>
 801103a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801103c:	00ee      	lsls	r6, r5, #3
 801103e:	4433      	add	r3, r6
 8011040:	6859      	ldr	r1, [r3, #4]
 8011042:	6848      	ldr	r0, [r1, #4]
 8011044:	f7ff f874 	bl	8010130 <_AddFreeMemory>
 8011048:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801104a:	6863      	ldr	r3, [r4, #4]
 801104c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801104e:	4416      	add	r6, r2
 8011050:	3301      	adds	r3, #1
 8011052:	2000      	movs	r0, #0
 8011054:	6063      	str	r3, [r4, #4]
 8011056:	6071      	str	r1, [r6, #4]
 8011058:	f802 0035 	strb.w	r0, [r2, r5, lsl #3]
 801105c:	6265      	str	r5, [r4, #36]	; 0x24
 801105e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011062:	f001 be2b 	b.w	8012cbc <GUI_Unlock>
 8011066:	bf00      	nop
 8011068:	20035d08 	.word	0x20035d08

0801106c <GUI_ALLOC_FreePtr>:
 801106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801106e:	4605      	mov	r5, r0
 8011070:	f001 fe2e 	bl	8012cd0 <GUI_Lock>
 8011074:	682c      	ldr	r4, [r5, #0]
 8011076:	b1b4      	cbz	r4, 80110a6 <GUI_ALLOC_FreePtr+0x3a>
 8011078:	4e0e      	ldr	r6, [pc, #56]	; (80110b4 <GUI_ALLOC_FreePtr+0x48>)
 801107a:	f001 fe29 	bl	8012cd0 <GUI_Lock>
 801107e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011080:	00e7      	lsls	r7, r4, #3
 8011082:	443b      	add	r3, r7
 8011084:	6859      	ldr	r1, [r3, #4]
 8011086:	6848      	ldr	r0, [r1, #4]
 8011088:	f7ff f852 	bl	8010130 <_AddFreeMemory>
 801108c:	6b71      	ldr	r1, [r6, #52]	; 0x34
 801108e:	6873      	ldr	r3, [r6, #4]
 8011090:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011092:	440f      	add	r7, r1
 8011094:	3301      	adds	r3, #1
 8011096:	2000      	movs	r0, #0
 8011098:	6073      	str	r3, [r6, #4]
 801109a:	607a      	str	r2, [r7, #4]
 801109c:	f801 0034 	strb.w	r0, [r1, r4, lsl #3]
 80110a0:	6274      	str	r4, [r6, #36]	; 0x24
 80110a2:	f001 fe0b 	bl	8012cbc <GUI_Unlock>
 80110a6:	2300      	movs	r3, #0
 80110a8:	602b      	str	r3, [r5, #0]
 80110aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80110ae:	f001 be05 	b.w	8012cbc <GUI_Unlock>
 80110b2:	bf00      	nop
 80110b4:	20035d08 	.word	0x20035d08

080110b8 <GUI_ALLOC_FreePtrArray>:
 80110b8:	2900      	cmp	r1, #0
 80110ba:	dd2b      	ble.n	8011114 <GUI_ALLOC_FreePtrArray+0x5c>
 80110bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110c0:	2500      	movs	r5, #0
 80110c2:	4f15      	ldr	r7, [pc, #84]	; (8011118 <GUI_ALLOC_FreePtrArray+0x60>)
 80110c4:	468a      	mov	sl, r1
 80110c6:	1f04      	subs	r4, r0, #4
 80110c8:	46a9      	mov	r9, r5
 80110ca:	f001 fe01 	bl	8012cd0 <GUI_Lock>
 80110ce:	f854 6f04 	ldr.w	r6, [r4, #4]!
 80110d2:	3501      	adds	r5, #1
 80110d4:	b1b6      	cbz	r6, 8011104 <GUI_ALLOC_FreePtrArray+0x4c>
 80110d6:	f001 fdfb 	bl	8012cd0 <GUI_Lock>
 80110da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110dc:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 80110e0:	4443      	add	r3, r8
 80110e2:	6859      	ldr	r1, [r3, #4]
 80110e4:	6848      	ldr	r0, [r1, #4]
 80110e6:	f7ff f823 	bl	8010130 <_AddFreeMemory>
 80110ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110f0:	4488      	add	r8, r1
 80110f2:	3301      	adds	r3, #1
 80110f4:	607b      	str	r3, [r7, #4]
 80110f6:	f8c8 2004 	str.w	r2, [r8, #4]
 80110fa:	f801 9036 	strb.w	r9, [r1, r6, lsl #3]
 80110fe:	627e      	str	r6, [r7, #36]	; 0x24
 8011100:	f001 fddc 	bl	8012cbc <GUI_Unlock>
 8011104:	f8c4 9000 	str.w	r9, [r4]
 8011108:	f001 fdd8 	bl	8012cbc <GUI_Unlock>
 801110c:	45aa      	cmp	sl, r5
 801110e:	d1dc      	bne.n	80110ca <GUI_ALLOC_FreePtrArray+0x12>
 8011110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011114:	4770      	bx	lr
 8011116:	bf00      	nop
 8011118:	20035d08 	.word	0x20035d08

0801111c <GUI_ALLOC_AllocInit>:
 801111c:	b909      	cbnz	r1, 8011122 <GUI_ALLOC_AllocInit+0x6>
 801111e:	4608      	mov	r0, r1
 8011120:	4770      	bx	lr
 8011122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011126:	460e      	mov	r6, r1
 8011128:	4605      	mov	r5, r0
 801112a:	f001 fdd1 	bl	8012cd0 <GUI_Lock>
 801112e:	f001 fdcf 	bl	8012cd0 <GUI_Lock>
 8011132:	4630      	mov	r0, r6
 8011134:	f7ff faf0 	bl	8010718 <_Alloc>
 8011138:	4604      	mov	r4, r0
 801113a:	f001 fdbf 	bl	8012cbc <GUI_Unlock>
 801113e:	b324      	cbz	r4, 801118a <GUI_ALLOC_AllocInit+0x6e>
 8011140:	4f17      	ldr	r7, [pc, #92]	; (80111a0 <GUI_ALLOC_AllocInit+0x84>)
 8011142:	69fa      	ldr	r2, [r7, #28]
 8011144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011146:	3201      	adds	r2, #1
 8011148:	61fa      	str	r2, [r7, #28]
 801114a:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
 801114e:	3201      	adds	r2, #1
 8011150:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 8011154:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011158:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801115c:	f108 0008 	add.w	r0, r8, #8
 8011160:	b1c5      	cbz	r5, 8011194 <GUI_ALLOC_AllocInit+0x78>
 8011162:	4b10      	ldr	r3, [pc, #64]	; (80111a4 <GUI_ALLOC_AllocInit+0x88>)
 8011164:	4632      	mov	r2, r6
 8011166:	4629      	mov	r1, r5
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	4798      	blx	r3
 801116c:	f8d8 1000 	ldr.w	r1, [r8]
 8011170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011172:	4d0b      	ldr	r5, [pc, #44]	; (80111a0 <GUI_ALLOC_AllocInit+0x84>)
 8011174:	f812 3031 	ldrb.w	r3, [r2, r1, lsl #3]
 8011178:	2b01      	cmp	r3, #1
 801117a:	d903      	bls.n	8011184 <GUI_ALLOC_AllocInit+0x68>
 801117c:	69e8      	ldr	r0, [r5, #28]
 801117e:	b108      	cbz	r0, 8011184 <GUI_ALLOC_AllocInit+0x68>
 8011180:	3801      	subs	r0, #1
 8011182:	61e8      	str	r0, [r5, #28]
 8011184:	3b01      	subs	r3, #1
 8011186:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 801118a:	f001 fd97 	bl	8012cbc <GUI_Unlock>
 801118e:	4620      	mov	r0, r4
 8011190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011194:	4b04      	ldr	r3, [pc, #16]	; (80111a8 <GUI_ALLOC_AllocInit+0x8c>)
 8011196:	4632      	mov	r2, r6
 8011198:	4629      	mov	r1, r5
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	4798      	blx	r3
 801119e:	e7e5      	b.n	801116c <GUI_ALLOC_AllocInit+0x50>
 80111a0:	20035d08 	.word	0x20035d08
 80111a4:	2000003c 	.word	0x2000003c
 80111a8:	20000040 	.word	0x20000040

080111ac <GUI_ALLOC_AllocZero>:
 80111ac:	b570      	push	{r4, r5, r6, lr}
 80111ae:	4605      	mov	r5, r0
 80111b0:	f001 fd8e 	bl	8012cd0 <GUI_Lock>
 80111b4:	b925      	cbnz	r5, 80111c0 <GUI_ALLOC_AllocZero+0x14>
 80111b6:	2400      	movs	r4, #0
 80111b8:	f001 fd80 	bl	8012cbc <GUI_Unlock>
 80111bc:	4620      	mov	r0, r4
 80111be:	bd70      	pop	{r4, r5, r6, pc}
 80111c0:	f001 fd86 	bl	8012cd0 <GUI_Lock>
 80111c4:	4628      	mov	r0, r5
 80111c6:	f7ff faa7 	bl	8010718 <_Alloc>
 80111ca:	4604      	mov	r4, r0
 80111cc:	f001 fd76 	bl	8012cbc <GUI_Unlock>
 80111d0:	2c00      	cmp	r4, #0
 80111d2:	d0f0      	beq.n	80111b6 <GUI_ALLOC_AllocZero+0xa>
 80111d4:	4e14      	ldr	r6, [pc, #80]	; (8011228 <GUI_ALLOC_AllocZero+0x7c>)
 80111d6:	4915      	ldr	r1, [pc, #84]	; (801122c <GUI_ALLOC_AllocZero+0x80>)
 80111d8:	69f2      	ldr	r2, [r6, #28]
 80111da:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80111dc:	3201      	adds	r2, #1
 80111de:	61f2      	str	r2, [r6, #28]
 80111e0:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
 80111e4:	3201      	adds	r2, #1
 80111e6:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 80111ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80111ee:	462a      	mov	r2, r5
 80111f0:	685d      	ldr	r5, [r3, #4]
 80111f2:	680b      	ldr	r3, [r1, #0]
 80111f4:	f105 0008 	add.w	r0, r5, #8
 80111f8:	2100      	movs	r1, #0
 80111fa:	4798      	blx	r3
 80111fc:	6829      	ldr	r1, [r5, #0]
 80111fe:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8011200:	f812 3031 	ldrb.w	r3, [r2, r1, lsl #3]
 8011204:	2b01      	cmp	r3, #1
 8011206:	d901      	bls.n	801120c <GUI_ALLOC_AllocZero+0x60>
 8011208:	69f0      	ldr	r0, [r6, #28]
 801120a:	b930      	cbnz	r0, 801121a <GUI_ALLOC_AllocZero+0x6e>
 801120c:	3b01      	subs	r3, #1
 801120e:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 8011212:	f001 fd53 	bl	8012cbc <GUI_Unlock>
 8011216:	4620      	mov	r0, r4
 8011218:	bd70      	pop	{r4, r5, r6, pc}
 801121a:	3801      	subs	r0, #1
 801121c:	3b01      	subs	r3, #1
 801121e:	61f0      	str	r0, [r6, #28]
 8011220:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 8011224:	e7f5      	b.n	8011212 <GUI_ALLOC_AllocZero+0x66>
 8011226:	bf00      	nop
 8011228:	20035d08 	.word	0x20035d08
 801122c:	20000040 	.word	0x20000040

08011230 <GUI_ALLOC_Realloc>:
 8011230:	b909      	cbnz	r1, 8011236 <GUI_ALLOC_Realloc+0x6>
 8011232:	2000      	movs	r0, #0
 8011234:	4770      	bx	lr
 8011236:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801123a:	460f      	mov	r7, r1
 801123c:	4606      	mov	r6, r0
 801123e:	f001 fd47 	bl	8012cd0 <GUI_Lock>
 8011242:	4638      	mov	r0, r7
 8011244:	f7ff fa68 	bl	8010718 <_Alloc>
 8011248:	4605      	mov	r5, r0
 801124a:	f001 fd37 	bl	8012cbc <GUI_Unlock>
 801124e:	2d00      	cmp	r5, #0
 8011250:	d065      	beq.n	801131e <GUI_ALLOC_Realloc+0xee>
 8011252:	2e00      	cmp	r6, #0
 8011254:	d05a      	beq.n	801130c <GUI_ALLOC_Realloc+0xdc>
 8011256:	4c33      	ldr	r4, [pc, #204]	; (8011324 <GUI_ALLOC_Realloc+0xf4>)
 8011258:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801125a:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 801125e:	4443      	add	r3, r8
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	6859      	ldr	r1, [r3, #4]
 8011264:	390c      	subs	r1, #12
 8011266:	428f      	cmp	r7, r1
 8011268:	bfa8      	it	ge
 801126a:	460f      	movge	r7, r1
 801126c:	f001 fd30 	bl	8012cd0 <GUI_Lock>
 8011270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011272:	69e2      	ldr	r2, [r4, #28]
 8011274:	f813 0035 	ldrb.w	r0, [r3, r5, lsl #3]
 8011278:	492b      	ldr	r1, [pc, #172]	; (8011328 <GUI_ALLOC_Realloc+0xf8>)
 801127a:	3001      	adds	r0, #1
 801127c:	f803 0035 	strb.w	r0, [r3, r5, lsl #3]
 8011280:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 8011284:	3202      	adds	r2, #2
 8011286:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801128a:	61e2      	str	r2, [r4, #28]
 801128c:	f813 2036 	ldrb.w	r2, [r3, r6, lsl #3]
 8011290:	3201      	adds	r2, #1
 8011292:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 8011296:	4443      	add	r3, r8
 8011298:	463a      	mov	r2, r7
 801129a:	685f      	ldr	r7, [r3, #4]
 801129c:	680b      	ldr	r3, [r1, #0]
 801129e:	f109 0008 	add.w	r0, r9, #8
 80112a2:	f107 0108 	add.w	r1, r7, #8
 80112a6:	4798      	blx	r3
 80112a8:	f8d9 1000 	ldr.w	r1, [r9]
 80112ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112ae:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
 80112b2:	2a01      	cmp	r2, #1
 80112b4:	d901      	bls.n	80112ba <GUI_ALLOC_Realloc+0x8a>
 80112b6:	69e0      	ldr	r0, [r4, #28]
 80112b8:	bb70      	cbnz	r0, 8011318 <GUI_ALLOC_Realloc+0xe8>
 80112ba:	3a01      	subs	r2, #1
 80112bc:	f803 2031 	strb.w	r2, [r3, r1, lsl #3]
 80112c0:	6839      	ldr	r1, [r7, #0]
 80112c2:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
 80112c6:	2a01      	cmp	r2, #1
 80112c8:	d902      	bls.n	80112d0 <GUI_ALLOC_Realloc+0xa0>
 80112ca:	69e0      	ldr	r0, [r4, #28]
 80112cc:	4f15      	ldr	r7, [pc, #84]	; (8011324 <GUI_ALLOC_Realloc+0xf4>)
 80112ce:	bb00      	cbnz	r0, 8011312 <GUI_ALLOC_Realloc+0xe2>
 80112d0:	3a01      	subs	r2, #1
 80112d2:	f803 2031 	strb.w	r2, [r3, r1, lsl #3]
 80112d6:	f001 fcfb 	bl	8012cd0 <GUI_Lock>
 80112da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112dc:	4443      	add	r3, r8
 80112de:	2700      	movs	r7, #0
 80112e0:	6859      	ldr	r1, [r3, #4]
 80112e2:	6848      	ldr	r0, [r1, #4]
 80112e4:	f7fe ff24 	bl	8010130 <_AddFreeMemory>
 80112e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80112ea:	6862      	ldr	r2, [r4, #4]
 80112ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80112ee:	eb00 0308 	add.w	r3, r0, r8
 80112f2:	3201      	adds	r2, #1
 80112f4:	6062      	str	r2, [r4, #4]
 80112f6:	6059      	str	r1, [r3, #4]
 80112f8:	f800 7036 	strb.w	r7, [r0, r6, lsl #3]
 80112fc:	6266      	str	r6, [r4, #36]	; 0x24
 80112fe:	f001 fcdd 	bl	8012cbc <GUI_Unlock>
 8011302:	f001 fcdb 	bl	8012cbc <GUI_Unlock>
 8011306:	4628      	mov	r0, r5
 8011308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801130c:	4628      	mov	r0, r5
 801130e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011312:	3801      	subs	r0, #1
 8011314:	61f8      	str	r0, [r7, #28]
 8011316:	e7db      	b.n	80112d0 <GUI_ALLOC_Realloc+0xa0>
 8011318:	3801      	subs	r0, #1
 801131a:	61e0      	str	r0, [r4, #28]
 801131c:	e7cd      	b.n	80112ba <GUI_ALLOC_Realloc+0x8a>
 801131e:	2000      	movs	r0, #0
 8011320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011324:	20035d08 	.word	0x20035d08
 8011328:	2000003c 	.word	0x2000003c

0801132c <GL_DispChar>:
 801132c:	280a      	cmp	r0, #10
 801132e:	b538      	push	{r3, r4, r5, lr}
 8011330:	d014      	beq.n	801135c <GL_DispChar+0x30>
 8011332:	280d      	cmp	r0, #13
 8011334:	4604      	mov	r4, r0
 8011336:	d010      	beq.n	801135a <GL_DispChar+0x2e>
 8011338:	f001 fcca 	bl	8012cd0 <GUI_Lock>
 801133c:	4b11      	ldr	r3, [pc, #68]	; (8011384 <GL_DispChar+0x58>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	69db      	ldr	r3, [r3, #28]
 8011342:	4620      	mov	r0, r4
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	4798      	blx	r3
 8011348:	4b0f      	ldr	r3, [pc, #60]	; (8011388 <GL_DispChar+0x5c>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	b10b      	cbz	r3, 8011352 <GL_DispChar+0x26>
 801134e:	4620      	mov	r0, r4
 8011350:	4798      	blx	r3
 8011352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011356:	f001 bcb1 	b.w	8012cbc <GUI_Unlock>
 801135a:	bd38      	pop	{r3, r4, r5, pc}
 801135c:	4c09      	ldr	r4, [pc, #36]	; (8011384 <GL_DispChar+0x58>)
 801135e:	f001 fcb7 	bl	8012cd0 <GUI_Lock>
 8011362:	f001 fcb5 	bl	8012cd0 <GUI_Lock>
 8011366:	6823      	ldr	r3, [r4, #0]
 8011368:	69db      	ldr	r3, [r3, #28]
 801136a:	7e5d      	ldrb	r5, [r3, #25]
 801136c:	f001 fca6 	bl	8012cbc <GUI_Unlock>
 8011370:	6823      	ldr	r3, [r4, #0]
 8011372:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8011374:	8c19      	ldrh	r1, [r3, #32]
 8011376:	8459      	strh	r1, [r3, #34]	; 0x22
 8011378:	442a      	add	r2, r5
 801137a:	849a      	strh	r2, [r3, #36]	; 0x24
 801137c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011380:	f001 bc9c 	b.w	8012cbc <GUI_Unlock>
 8011384:	20000014 	.word	0x20000014
 8011388:	20035e20 	.word	0x20035e20

0801138c <GUI_GetYAdjust>:
 801138c:	b510      	push	{r4, lr}
 801138e:	f001 fc9f 	bl	8012cd0 <GUI_Lock>
 8011392:	4b0f      	ldr	r3, [pc, #60]	; (80113d0 <GUI_GetYAdjust+0x44>)
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8011398:	f003 030c 	and.w	r3, r3, #12
 801139c:	2b08      	cmp	r3, #8
 801139e:	d008      	beq.n	80113b2 <GUI_GetYAdjust+0x26>
 80113a0:	2b0c      	cmp	r3, #12
 80113a2:	d006      	beq.n	80113b2 <GUI_GetYAdjust+0x26>
 80113a4:	2b04      	cmp	r3, #4
 80113a6:	d00b      	beq.n	80113c0 <GUI_GetYAdjust+0x34>
 80113a8:	2400      	movs	r4, #0
 80113aa:	f001 fc87 	bl	8012cbc <GUI_Unlock>
 80113ae:	4620      	mov	r0, r4
 80113b0:	bd10      	pop	{r4, pc}
 80113b2:	69d3      	ldr	r3, [r2, #28]
 80113b4:	7e1c      	ldrb	r4, [r3, #24]
 80113b6:	0864      	lsrs	r4, r4, #1
 80113b8:	f001 fc80 	bl	8012cbc <GUI_Unlock>
 80113bc:	4620      	mov	r0, r4
 80113be:	bd10      	pop	{r4, pc}
 80113c0:	69d3      	ldr	r3, [r2, #28]
 80113c2:	7e1c      	ldrb	r4, [r3, #24]
 80113c4:	3c01      	subs	r4, #1
 80113c6:	f001 fc79 	bl	8012cbc <GUI_Unlock>
 80113ca:	4620      	mov	r0, r4
 80113cc:	bd10      	pop	{r4, pc}
 80113ce:	bf00      	nop
 80113d0:	20000014 	.word	0x20000014

080113d4 <GUI_GetFontDistY>:
 80113d4:	b510      	push	{r4, lr}
 80113d6:	f001 fc7b 	bl	8012cd0 <GUI_Lock>
 80113da:	4b04      	ldr	r3, [pc, #16]	; (80113ec <GUI_GetFontDistY+0x18>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	69db      	ldr	r3, [r3, #28]
 80113e0:	7e5c      	ldrb	r4, [r3, #25]
 80113e2:	f001 fc6b 	bl	8012cbc <GUI_Unlock>
 80113e6:	4620      	mov	r0, r4
 80113e8:	bd10      	pop	{r4, pc}
 80113ea:	bf00      	nop
 80113ec:	20000014 	.word	0x20000014

080113f0 <GUI_GetCharDistX>:
 80113f0:	b510      	push	{r4, lr}
 80113f2:	4604      	mov	r4, r0
 80113f4:	f001 fc6c 	bl	8012cd0 <GUI_Lock>
 80113f8:	4b05      	ldr	r3, [pc, #20]	; (8011410 <GUI_GetCharDistX+0x20>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	69db      	ldr	r3, [r3, #28]
 80113fe:	2100      	movs	r1, #0
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	4620      	mov	r0, r4
 8011404:	4798      	blx	r3
 8011406:	4604      	mov	r4, r0
 8011408:	f001 fc58 	bl	8012cbc <GUI_Unlock>
 801140c:	4620      	mov	r0, r4
 801140e:	bd10      	pop	{r4, pc}
 8011410:	20000014 	.word	0x20000014

08011414 <GUI_GetCharDistXEx>:
 8011414:	b538      	push	{r3, r4, r5, lr}
 8011416:	4604      	mov	r4, r0
 8011418:	460d      	mov	r5, r1
 801141a:	f001 fc59 	bl	8012cd0 <GUI_Lock>
 801141e:	4b06      	ldr	r3, [pc, #24]	; (8011438 <GUI_GetCharDistXEx+0x24>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	69db      	ldr	r3, [r3, #28]
 8011424:	4629      	mov	r1, r5
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	4620      	mov	r0, r4
 801142a:	4798      	blx	r3
 801142c:	4604      	mov	r4, r0
 801142e:	f001 fc45 	bl	8012cbc <GUI_Unlock>
 8011432:	4620      	mov	r0, r4
 8011434:	bd38      	pop	{r3, r4, r5, pc}
 8011436:	bf00      	nop
 8011438:	20000014 	.word	0x20000014

0801143c <GUI_CalcColorDist>:
 801143c:	b2c3      	uxtb	r3, r0
 801143e:	b2ca      	uxtb	r2, r1
 8011440:	1a9a      	subs	r2, r3, r2
 8011442:	b292      	uxth	r2, r2
 8011444:	b430      	push	{r4, r5}
 8011446:	b215      	sxth	r5, r2
 8011448:	2d00      	cmp	r5, #0
 801144a:	bfbc      	itt	lt
 801144c:	4252      	neglt	r2, r2
 801144e:	b215      	sxthlt	r5, r2
 8011450:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011454:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011458:	1a9b      	subs	r3, r3, r2
 801145a:	b29b      	uxth	r3, r3
 801145c:	0c09      	lsrs	r1, r1, #16
 801145e:	b21a      	sxth	r2, r3
 8011460:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8011464:	2a00      	cmp	r2, #0
 8011466:	b289      	uxth	r1, r1
 8011468:	b20c      	sxth	r4, r1
 801146a:	bfbc      	itt	lt
 801146c:	425b      	neglt	r3, r3
 801146e:	b21a      	sxthlt	r2, r3
 8011470:	2c00      	cmp	r4, #0
 8011472:	bfbc      	itt	lt
 8011474:	4249      	neglt	r1, r1
 8011476:	b20c      	sxthlt	r4, r1
 8011478:	fb02 f202 	mul.w	r2, r2, r2
 801147c:	fb05 2005 	mla	r0, r5, r5, r2
 8011480:	b2a1      	uxth	r1, r4
 8011482:	fb01 0001 	mla	r0, r1, r1, r0
 8011486:	bc30      	pop	{r4, r5}
 8011488:	4770      	bx	lr
 801148a:	bf00      	nop

0801148c <GUI_GetClientRect>:
 801148c:	b108      	cbz	r0, 8011492 <GUI_GetClientRect+0x6>
 801148e:	f009 bde5 	b.w	801b05c <WM_GetClientRect>
 8011492:	4770      	bx	lr

08011494 <GUI_GetBkColor>:
 8011494:	b510      	push	{r4, lr}
 8011496:	f001 fc1b 	bl	8012cd0 <GUI_Lock>
 801149a:	f003 fc9b 	bl	8014dd4 <LCD_GetBkColorIndex>
 801149e:	f003 fb03 	bl	8014aa8 <LCD_Index2Color>
 80114a2:	4604      	mov	r4, r0
 80114a4:	f001 fc0a 	bl	8012cbc <GUI_Unlock>
 80114a8:	4620      	mov	r0, r4
 80114aa:	bd10      	pop	{r4, pc}

080114ac <GUI_GetColor>:
 80114ac:	b510      	push	{r4, lr}
 80114ae:	f001 fc0f 	bl	8012cd0 <GUI_Lock>
 80114b2:	f003 fc97 	bl	8014de4 <LCD_GetColorIndex>
 80114b6:	f003 faf7 	bl	8014aa8 <LCD_Index2Color>
 80114ba:	4604      	mov	r4, r0
 80114bc:	f001 fbfe 	bl	8012cbc <GUI_Unlock>
 80114c0:	4620      	mov	r0, r4
 80114c2:	bd10      	pop	{r4, pc}

080114c4 <GUI_GetDrawMode>:
 80114c4:	b510      	push	{r4, lr}
 80114c6:	f001 fc03 	bl	8012cd0 <GUI_Lock>
 80114ca:	4b03      	ldr	r3, [pc, #12]	; (80114d8 <GUI_GetDrawMode+0x14>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	7c1c      	ldrb	r4, [r3, #16]
 80114d0:	f001 fbf4 	bl	8012cbc <GUI_Unlock>
 80114d4:	4620      	mov	r0, r4
 80114d6:	bd10      	pop	{r4, pc}
 80114d8:	20000014 	.word	0x20000014

080114dc <GUI_GetFont>:
 80114dc:	b510      	push	{r4, lr}
 80114de:	f001 fbf7 	bl	8012cd0 <GUI_Lock>
 80114e2:	4b03      	ldr	r3, [pc, #12]	; (80114f0 <GUI_GetFont+0x14>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	69dc      	ldr	r4, [r3, #28]
 80114e8:	f001 fbe8 	bl	8012cbc <GUI_Unlock>
 80114ec:	4620      	mov	r0, r4
 80114ee:	bd10      	pop	{r4, pc}
 80114f0:	20000014 	.word	0x20000014

080114f4 <GUI_GetFontSizeY>:
 80114f4:	b510      	push	{r4, lr}
 80114f6:	f001 fbeb 	bl	8012cd0 <GUI_Lock>
 80114fa:	4b05      	ldr	r3, [pc, #20]	; (8011510 <GUI_GetFontSizeY+0x1c>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	69db      	ldr	r3, [r3, #28]
 8011500:	7e1c      	ldrb	r4, [r3, #24]
 8011502:	7edb      	ldrb	r3, [r3, #27]
 8011504:	fb14 f403 	smulbb	r4, r4, r3
 8011508:	f001 fbd8 	bl	8012cbc <GUI_Unlock>
 801150c:	4620      	mov	r0, r4
 801150e:	bd10      	pop	{r4, pc}
 8011510:	20000014 	.word	0x20000014

08011514 <GUI_GetOrg>:
 8011514:	b538      	push	{r3, r4, r5, lr}
 8011516:	4605      	mov	r5, r0
 8011518:	460c      	mov	r4, r1
 801151a:	f001 fbd9 	bl	8012cd0 <GUI_Lock>
 801151e:	4a06      	ldr	r2, [pc, #24]	; (8011538 <GUI_GetOrg+0x24>)
 8011520:	4b06      	ldr	r3, [pc, #24]	; (801153c <GUI_GetOrg+0x28>)
 8011522:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011526:	f9b3 3000 	ldrsh.w	r3, [r3]
 801152a:	602a      	str	r2, [r5, #0]
 801152c:	6023      	str	r3, [r4, #0]
 801152e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011532:	f001 bbc3 	b.w	8012cbc <GUI_Unlock>
 8011536:	bf00      	nop
 8011538:	20035dde 	.word	0x20035dde
 801153c:	20035e10 	.word	0x20035e10

08011540 <GUI_GetVersionString>:
 8011540:	4804      	ldr	r0, [pc, #16]	; (8011554 <GUI_GetVersionString+0x14>)
 8011542:	2334      	movs	r3, #52	; 0x34
 8011544:	2135      	movs	r1, #53	; 0x35
 8011546:	2261      	movs	r2, #97	; 0x61
 8011548:	7001      	strb	r1, [r0, #0]
 801154a:	7102      	strb	r2, [r0, #4]
 801154c:	7083      	strb	r3, [r0, #2]
 801154e:	70c3      	strb	r3, [r0, #3]
 8011550:	4770      	bx	lr
 8011552:	bf00      	nop
 8011554:	20000000 	.word	0x20000000

08011558 <GUI_GetYSizeOfFont>:
 8011558:	7e02      	ldrb	r2, [r0, #24]
 801155a:	7ec0      	ldrb	r0, [r0, #27]
 801155c:	fb02 f000 	mul.w	r0, r2, r0
 8011560:	4770      	bx	lr
 8011562:	bf00      	nop

08011564 <GUI_MergeRect>:
 8011564:	b320      	cbz	r0, 80115b0 <GUI_MergeRect+0x4c>
 8011566:	b321      	cbz	r1, 80115b2 <GUI_MergeRect+0x4e>
 8011568:	b322      	cbz	r2, 80115b4 <GUI_MergeRect+0x50>
 801156a:	f9b2 c000 	ldrsh.w	ip, [r2]
 801156e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011572:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011574:	f9b1 5000 	ldrsh.w	r5, [r1]
 8011578:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801157c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8011580:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8011584:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8011588:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801158c:	4565      	cmp	r5, ip
 801158e:	bfa8      	it	ge
 8011590:	4665      	movge	r5, ip
 8011592:	45a6      	cmp	lr, r4
 8011594:	4671      	mov	r1, lr
 8011596:	bfa8      	it	ge
 8011598:	4621      	movge	r1, r4
 801159a:	42ba      	cmp	r2, r7
 801159c:	bfb8      	it	lt
 801159e:	463a      	movlt	r2, r7
 80115a0:	42b3      	cmp	r3, r6
 80115a2:	bfb8      	it	lt
 80115a4:	4633      	movlt	r3, r6
 80115a6:	8005      	strh	r5, [r0, #0]
 80115a8:	8041      	strh	r1, [r0, #2]
 80115aa:	8082      	strh	r2, [r0, #4]
 80115ac:	80c3      	strh	r3, [r0, #6]
 80115ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115b0:	4770      	bx	lr
 80115b2:	4611      	mov	r1, r2
 80115b4:	680b      	ldr	r3, [r1, #0]
 80115b6:	684a      	ldr	r2, [r1, #4]
 80115b8:	6042      	str	r2, [r0, #4]
 80115ba:	6003      	str	r3, [r0, #0]
 80115bc:	4770      	bx	lr
 80115be:	bf00      	nop

080115c0 <GUI_MoveRect>:
 80115c0:	b178      	cbz	r0, 80115e2 <GUI_MoveRect+0x22>
 80115c2:	b470      	push	{r4, r5, r6}
 80115c4:	8806      	ldrh	r6, [r0, #0]
 80115c6:	8844      	ldrh	r4, [r0, #2]
 80115c8:	8885      	ldrh	r5, [r0, #4]
 80115ca:	88c3      	ldrh	r3, [r0, #6]
 80115cc:	b289      	uxth	r1, r1
 80115ce:	b292      	uxth	r2, r2
 80115d0:	440e      	add	r6, r1
 80115d2:	4414      	add	r4, r2
 80115d4:	4429      	add	r1, r5
 80115d6:	8006      	strh	r6, [r0, #0]
 80115d8:	8044      	strh	r4, [r0, #2]
 80115da:	bc70      	pop	{r4, r5, r6}
 80115dc:	441a      	add	r2, r3
 80115de:	8081      	strh	r1, [r0, #4]
 80115e0:	80c2      	strh	r2, [r0, #6]
 80115e2:	4770      	bx	lr

080115e4 <GUI_Exec>:
 80115e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e8:	4f12      	ldr	r7, [pc, #72]	; (8011634 <GUI_Exec+0x50>)
 80115ea:	4e13      	ldr	r6, [pc, #76]	; (8011638 <GUI_Exec+0x54>)
 80115ec:	f8df 804c 	ldr.w	r8, [pc, #76]	; 801163c <GUI_Exec+0x58>
 80115f0:	2500      	movs	r5, #0
 80115f2:	683c      	ldr	r4, [r7, #0]
 80115f4:	b11c      	cbz	r4, 80115fe <GUI_Exec+0x1a>
 80115f6:	47a0      	blx	r4
 80115f8:	1c04      	adds	r4, r0, #0
 80115fa:	bf18      	it	ne
 80115fc:	2401      	movne	r4, #1
 80115fe:	f009 f927 	bl	801a850 <WM_Exec>
 8011602:	6833      	ldr	r3, [r6, #0]
 8011604:	2800      	cmp	r0, #0
 8011606:	bf18      	it	ne
 8011608:	2401      	movne	r4, #1
 801160a:	b14b      	cbz	r3, 8011620 <GUI_Exec+0x3c>
 801160c:	4798      	blx	r3
 801160e:	b138      	cbz	r0, 8011620 <GUI_Exec+0x3c>
 8011610:	f8d8 3000 	ldr.w	r3, [r8]
 8011614:	b113      	cbz	r3, 801161c <GUI_Exec+0x38>
 8011616:	2401      	movs	r4, #1
 8011618:	4798      	blx	r3
 801161a:	b13c      	cbz	r4, 801162c <GUI_Exec+0x48>
 801161c:	2501      	movs	r5, #1
 801161e:	e7e8      	b.n	80115f2 <GUI_Exec+0xe>
 8011620:	f8d8 3000 	ldr.w	r3, [r8]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d1f7      	bne.n	8011618 <GUI_Exec+0x34>
 8011628:	2c00      	cmp	r4, #0
 801162a:	d1f7      	bne.n	801161c <GUI_Exec+0x38>
 801162c:	4628      	mov	r0, r5
 801162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011632:	bf00      	nop
 8011634:	20035e08 	.word	0x20035e08
 8011638:	20035de4 	.word	0x20035de4
 801163c:	20035e04 	.word	0x20035e04

08011640 <GUI_GetBitmapPixelIndex>:
 8011640:	2800      	cmp	r0, #0
 8011642:	d050      	beq.n	80116e6 <GUI_GetBitmapPixelIndex+0xa6>
 8011644:	88c3      	ldrh	r3, [r0, #6]
 8011646:	3b01      	subs	r3, #1
 8011648:	b510      	push	{r4, lr}
 801164a:	8884      	ldrh	r4, [r0, #4]
 801164c:	6880      	ldr	r0, [r0, #8]
 801164e:	2b1f      	cmp	r3, #31
 8011650:	d847      	bhi.n	80116e2 <GUI_GetBitmapPixelIndex+0xa2>
 8011652:	e8df f003 	tbb	[pc, r3]
 8011656:	2316      	.short	0x2316
 8011658:	46463146 	.word	0x46463146
 801165c:	46463c46 	.word	0x46463c46
 8011660:	46464646 	.word	0x46464646
 8011664:	46464046 	.word	0x46464046
 8011668:	46464646 	.word	0x46464646
 801166c:	46464646 	.word	0x46464646
 8011670:	46464646 	.word	0x46464646
 8011674:	1046      	.short	0x1046
 8011676:	10a3      	asrs	r3, r4, #2
 8011678:	fb02 1103 	mla	r1, r2, r3, r1
 801167c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8011680:	bd10      	pop	{r4, pc}
 8011682:	fb02 f204 	mul.w	r2, r2, r4
 8011686:	eb00 04d1 	add.w	r4, r0, r1, lsr #3
 801168a:	43c8      	mvns	r0, r1
 801168c:	5ca3      	ldrb	r3, [r4, r2]
 801168e:	f000 0007 	and.w	r0, r0, #7
 8011692:	fa23 f000 	lsr.w	r0, r3, r0
 8011696:	f000 0001 	and.w	r0, r0, #1
 801169a:	bd10      	pop	{r4, pc}
 801169c:	fb02 f204 	mul.w	r2, r2, r4
 80116a0:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 80116a4:	ea6f 0041 	mvn.w	r0, r1, lsl #1
 80116a8:	5ca3      	ldrb	r3, [r4, r2]
 80116aa:	f000 0006 	and.w	r0, r0, #6
 80116ae:	fa23 f000 	lsr.w	r0, r3, r0
 80116b2:	f000 0003 	and.w	r0, r0, #3
 80116b6:	bd10      	pop	{r4, pc}
 80116b8:	fb02 f204 	mul.w	r2, r2, r4
 80116bc:	eb00 0451 	add.w	r4, r0, r1, lsr #1
 80116c0:	07cb      	lsls	r3, r1, #31
 80116c2:	5ca0      	ldrb	r0, [r4, r2]
 80116c4:	bf4c      	ite	mi
 80116c6:	f000 000f 	andmi.w	r0, r0, #15
 80116ca:	0900      	lsrpl	r0, r0, #4
 80116cc:	bd10      	pop	{r4, pc}
 80116ce:	fb02 0404 	mla	r4, r2, r4, r0
 80116d2:	5c60      	ldrb	r0, [r4, r1]
 80116d4:	bd10      	pop	{r4, pc}
 80116d6:	1063      	asrs	r3, r4, #1
 80116d8:	fb02 1103 	mla	r1, r2, r3, r1
 80116dc:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80116e0:	bd10      	pop	{r4, pc}
 80116e2:	2000      	movs	r0, #0
 80116e4:	bd10      	pop	{r4, pc}
 80116e6:	4770      	bx	lr

080116e8 <GUI_GotoXY>:
 80116e8:	b538      	push	{r3, r4, r5, lr}
 80116ea:	4605      	mov	r5, r0
 80116ec:	460c      	mov	r4, r1
 80116ee:	f001 faef 	bl	8012cd0 <GUI_Lock>
 80116f2:	4b04      	ldr	r3, [pc, #16]	; (8011704 <GUI_GotoXY+0x1c>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	845d      	strh	r5, [r3, #34]	; 0x22
 80116f8:	849c      	strh	r4, [r3, #36]	; 0x24
 80116fa:	f001 fadf 	bl	8012cbc <GUI_Unlock>
 80116fe:	2000      	movs	r0, #0
 8011700:	bd38      	pop	{r3, r4, r5, pc}
 8011702:	bf00      	nop
 8011704:	20000014 	.word	0x20000014

08011708 <GUI_SetPenSize>:
 8011708:	b538      	push	{r3, r4, r5, lr}
 801170a:	4605      	mov	r5, r0
 801170c:	f001 fae0 	bl	8012cd0 <GUI_Lock>
 8011710:	4b03      	ldr	r3, [pc, #12]	; (8011720 <GUI_SetPenSize+0x18>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	7e1c      	ldrb	r4, [r3, #24]
 8011716:	761d      	strb	r5, [r3, #24]
 8011718:	f001 fad0 	bl	8012cbc <GUI_Unlock>
 801171c:	4620      	mov	r0, r4
 801171e:	bd38      	pop	{r3, r4, r5, pc}
 8011720:	20000014 	.word	0x20000014

08011724 <GUI_RectsIntersect>:
 8011724:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011728:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801172c:	429a      	cmp	r2, r3
 801172e:	dc14      	bgt.n	801175a <GUI_RectsIntersect+0x36>
 8011730:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8011734:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8011738:	429a      	cmp	r2, r3
 801173a:	dc0e      	bgt.n	801175a <GUI_RectsIntersect+0x36>
 801173c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011740:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011744:	429a      	cmp	r2, r3
 8011746:	dc08      	bgt.n	801175a <GUI_RectsIntersect+0x36>
 8011748:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 801174c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011750:	4283      	cmp	r3, r0
 8011752:	bfcc      	ite	gt
 8011754:	2000      	movgt	r0, #0
 8011756:	2001      	movle	r0, #1
 8011758:	4770      	bx	lr
 801175a:	2000      	movs	r0, #0
 801175c:	4770      	bx	lr
 801175e:	bf00      	nop

08011760 <GUI_SaveContext_W>:
 8011760:	b508      	push	{r3, lr}
 8011762:	4b03      	ldr	r3, [pc, #12]	; (8011770 <GUI_SaveContext_W+0x10>)
 8011764:	2274      	movs	r2, #116	; 0x74
 8011766:	6819      	ldr	r1, [r3, #0]
 8011768:	f013 fe08 	bl	802537c <memcpy>
 801176c:	bd08      	pop	{r3, pc}
 801176e:	bf00      	nop
 8011770:	20000014 	.word	0x20000014

08011774 <GUI_RestoreContext>:
 8011774:	b508      	push	{r3, lr}
 8011776:	4b03      	ldr	r3, [pc, #12]	; (8011784 <GUI_RestoreContext+0x10>)
 8011778:	4601      	mov	r1, r0
 801177a:	2274      	movs	r2, #116	; 0x74
 801177c:	6818      	ldr	r0, [r3, #0]
 801177e:	f013 fdfd 	bl	802537c <memcpy>
 8011782:	bd08      	pop	{r3, pc}
 8011784:	20000014 	.word	0x20000014

08011788 <GUI_SelectLCD>:
 8011788:	b508      	push	{r3, lr}
 801178a:	f001 faa1 	bl	8012cd0 <GUI_Lock>
 801178e:	f004 fa41 	bl	8015c14 <LCD_SelectLCD>
 8011792:	f004 fb2d 	bl	8015df0 <LCD_UpdateColorIndices>
 8011796:	f009 f9a9 	bl	801aaec <WM_Activate>
 801179a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801179e:	f001 ba8d 	b.w	8012cbc <GUI_Unlock>
 80117a2:	bf00      	nop

080117a4 <GUI_SetBkColor>:
 80117a4:	b510      	push	{r4, lr}
 80117a6:	4604      	mov	r4, r0
 80117a8:	f001 fa92 	bl	8012cd0 <GUI_Lock>
 80117ac:	4620      	mov	r0, r4
 80117ae:	f003 f9a1 	bl	8014af4 <LCD_SetBkColor>
 80117b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117b6:	f001 ba81 	b.w	8012cbc <GUI_Unlock>
 80117ba:	bf00      	nop

080117bc <GUI_SetColor>:
 80117bc:	b510      	push	{r4, lr}
 80117be:	4604      	mov	r4, r0
 80117c0:	f001 fa86 	bl	8012cd0 <GUI_Lock>
 80117c4:	4620      	mov	r0, r4
 80117c6:	f003 f99b 	bl	8014b00 <LCD_SetColor>
 80117ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117ce:	f001 ba75 	b.w	8012cbc <GUI_Unlock>
 80117d2:	bf00      	nop

080117d4 <GL_SetDefault>:
 80117d4:	b538      	push	{r3, r4, r5, lr}
 80117d6:	4b20      	ldr	r3, [pc, #128]	; (8011858 <GL_SetDefault+0x84>)
 80117d8:	4c20      	ldr	r4, [pc, #128]	; (801185c <GL_SetDefault+0x88>)
 80117da:	681d      	ldr	r5, [r3, #0]
 80117dc:	f001 fa78 	bl	8012cd0 <GUI_Lock>
 80117e0:	4628      	mov	r0, r5
 80117e2:	f003 f987 	bl	8014af4 <LCD_SetBkColor>
 80117e6:	f001 fa69 	bl	8012cbc <GUI_Unlock>
 80117ea:	4b1d      	ldr	r3, [pc, #116]	; (8011860 <GL_SetDefault+0x8c>)
 80117ec:	681d      	ldr	r5, [r3, #0]
 80117ee:	f001 fa6f 	bl	8012cd0 <GUI_Lock>
 80117f2:	4628      	mov	r0, r5
 80117f4:	f003 f984 	bl	8014b00 <LCD_SetColor>
 80117f8:	f001 fa60 	bl	8012cbc <GUI_Unlock>
 80117fc:	f001 fa68 	bl	8012cd0 <GUI_Lock>
 8011800:	6823      	ldr	r3, [r4, #0]
 8011802:	2201      	movs	r2, #1
 8011804:	761a      	strb	r2, [r3, #24]
 8011806:	f001 fa59 	bl	8012cbc <GUI_Unlock>
 801180a:	f001 fa61 	bl	8012cd0 <GUI_Lock>
 801180e:	6823      	ldr	r3, [r4, #0]
 8011810:	2500      	movs	r5, #0
 8011812:	859d      	strh	r5, [r3, #44]	; 0x2c
 8011814:	f001 fa52 	bl	8012cbc <GUI_Unlock>
 8011818:	f001 fa5a 	bl	8012cd0 <GUI_Lock>
 801181c:	6823      	ldr	r3, [r4, #0]
 801181e:	855d      	strh	r5, [r3, #42]	; 0x2a
 8011820:	f001 fa4c 	bl	8012cbc <GUI_Unlock>
 8011824:	f001 fa54 	bl	8012cd0 <GUI_Lock>
 8011828:	4628      	mov	r0, r5
 801182a:	f002 fd45 	bl	80142b8 <LCD_SetDrawMode>
 801182e:	f001 fa45 	bl	8012cbc <GUI_Unlock>
 8011832:	4b0c      	ldr	r3, [pc, #48]	; (8011864 <GL_SetDefault+0x90>)
 8011834:	681d      	ldr	r5, [r3, #0]
 8011836:	f001 fa4b 	bl	8012cd0 <GUI_Lock>
 801183a:	6823      	ldr	r3, [r4, #0]
 801183c:	b105      	cbz	r5, 8011840 <GL_SetDefault+0x6c>
 801183e:	61dd      	str	r5, [r3, #28]
 8011840:	f001 fa3c 	bl	8012cbc <GUI_Unlock>
 8011844:	f001 fa44 	bl	8012cd0 <GUI_Lock>
 8011848:	6823      	ldr	r3, [r4, #0]
 801184a:	2200      	movs	r2, #0
 801184c:	769a      	strb	r2, [r3, #26]
 801184e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011852:	f001 ba33 	b.w	8012cbc <GUI_Unlock>
 8011856:	bf00      	nop
 8011858:	20000600 	.word	0x20000600
 801185c:	20000014 	.word	0x20000014
 8011860:	20000010 	.word	0x20000010
 8011864:	2000000c 	.word	0x2000000c

08011868 <GUI_SetDrawMode>:
 8011868:	b510      	push	{r4, lr}
 801186a:	4604      	mov	r4, r0
 801186c:	f001 fa30 	bl	8012cd0 <GUI_Lock>
 8011870:	4620      	mov	r0, r4
 8011872:	f002 fd21 	bl	80142b8 <LCD_SetDrawMode>
 8011876:	4604      	mov	r4, r0
 8011878:	f001 fa20 	bl	8012cbc <GUI_Unlock>
 801187c:	4620      	mov	r0, r4
 801187e:	bd10      	pop	{r4, pc}

08011880 <GUI_SetFont>:
 8011880:	b538      	push	{r3, r4, r5, lr}
 8011882:	4604      	mov	r4, r0
 8011884:	f001 fa24 	bl	8012cd0 <GUI_Lock>
 8011888:	4b04      	ldr	r3, [pc, #16]	; (801189c <GUI_SetFont+0x1c>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	69dd      	ldr	r5, [r3, #28]
 801188e:	b104      	cbz	r4, 8011892 <GUI_SetFont+0x12>
 8011890:	61dc      	str	r4, [r3, #28]
 8011892:	f001 fa13 	bl	8012cbc <GUI_Unlock>
 8011896:	4628      	mov	r0, r5
 8011898:	bd38      	pop	{r3, r4, r5, pc}
 801189a:	bf00      	nop
 801189c:	20000014 	.word	0x20000014

080118a0 <GUI_SetOrg>:
 80118a0:	b538      	push	{r3, r4, r5, lr}
 80118a2:	4605      	mov	r5, r0
 80118a4:	460c      	mov	r4, r1
 80118a6:	f001 fa13 	bl	8012cd0 <GUI_Lock>
 80118aa:	4a09      	ldr	r2, [pc, #36]	; (80118d0 <GUI_SetOrg+0x30>)
 80118ac:	4b09      	ldr	r3, [pc, #36]	; (80118d4 <GUI_SetOrg+0x34>)
 80118ae:	6812      	ldr	r2, [r2, #0]
 80118b0:	4909      	ldr	r1, [pc, #36]	; (80118d8 <GUI_SetOrg+0x38>)
 80118b2:	7c50      	ldrb	r0, [r2, #17]
 80118b4:	4a09      	ldr	r2, [pc, #36]	; (80118dc <GUI_SetOrg+0x3c>)
 80118b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80118ba:	800d      	strh	r5, [r1, #0]
 80118bc:	68c3      	ldr	r3, [r0, #12]
 80118be:	8014      	strh	r4, [r2, #0]
 80118c0:	4629      	mov	r1, r5
 80118c2:	4622      	mov	r2, r4
 80118c4:	6a1c      	ldr	r4, [r3, #32]
 80118c6:	47a0      	blx	r4
 80118c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118cc:	f001 b9f6 	b.w	8012cbc <GUI_Unlock>
 80118d0:	20000014 	.word	0x20000014
 80118d4:	20035df8 	.word	0x20035df8
 80118d8:	20035dde 	.word	0x20035dde
 80118dc:	20035e10 	.word	0x20035e10

080118e0 <GUI_SetTextMode>:
 80118e0:	b538      	push	{r3, r4, r5, lr}
 80118e2:	4605      	mov	r5, r0
 80118e4:	f001 f9f4 	bl	8012cd0 <GUI_Lock>
 80118e8:	4b04      	ldr	r3, [pc, #16]	; (80118fc <GUI_SetTextMode+0x1c>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 80118f0:	855d      	strh	r5, [r3, #42]	; 0x2a
 80118f2:	f001 f9e3 	bl	8012cbc <GUI_Unlock>
 80118f6:	4620      	mov	r0, r4
 80118f8:	bd38      	pop	{r3, r4, r5, pc}
 80118fa:	bf00      	nop
 80118fc:	20000014 	.word	0x20000014

08011900 <_InitContext>:
 8011900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011902:	4d1a      	ldr	r5, [pc, #104]	; (801196c <_InitContext+0x6c>)
 8011904:	4e1a      	ldr	r6, [pc, #104]	; (8011970 <_InitContext+0x70>)
 8011906:	68eb      	ldr	r3, [r5, #12]
 8011908:	4a1a      	ldr	r2, [pc, #104]	; (8011974 <_InitContext+0x74>)
 801190a:	4604      	mov	r4, r0
 801190c:	f103 0108 	add.w	r1, r3, #8
 8011910:	1d18      	adds	r0, r3, #4
 8011912:	f106 0784 	add.w	r7, r6, #132	; 0x84
 8011916:	6727      	str	r7, [r4, #112]	; 0x70
 8011918:	63d8      	str	r0, [r3, #60]	; 0x3c
 801191a:	639b      	str	r3, [r3, #56]	; 0x38
 801191c:	641b      	str	r3, [r3, #64]	; 0x40
 801191e:	6161      	str	r1, [r4, #20]
 8011920:	7c5b      	ldrb	r3, [r3, #17]
 8011922:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011926:	68c3      	ldr	r3, [r0, #12]
 8011928:	f104 0108 	add.w	r1, r4, #8
 801192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801192e:	4798      	blx	r3
 8011930:	68eb      	ldr	r3, [r5, #12]
 8011932:	4a11      	ldr	r2, [pc, #68]	; (8011978 <_InitContext+0x78>)
 8011934:	6869      	ldr	r1, [r5, #4]
 8011936:	6662      	str	r2, [r4, #100]	; 0x64
 8011938:	3308      	adds	r3, #8
 801193a:	2201      	movs	r2, #1
 801193c:	61e1      	str	r1, [r4, #28]
 801193e:	6163      	str	r3, [r4, #20]
 8011940:	7622      	strb	r2, [r4, #24]
 8011942:	76e2      	strb	r2, [r4, #27]
 8011944:	f009 fbb2 	bl	801b0ac <WM_GetDesktopWindow>
 8011948:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801194c:	2203      	movs	r2, #3
 801194e:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
 8011952:	6323      	str	r3, [r4, #48]	; 0x30
 8011954:	6363      	str	r3, [r4, #52]	; 0x34
 8011956:	64a0      	str	r0, [r4, #72]	; 0x48
 8011958:	6830      	ldr	r0, [r6, #0]
 801195a:	f003 f8cb 	bl	8014af4 <LCD_SetBkColor>
 801195e:	68a8      	ldr	r0, [r5, #8]
 8011960:	f003 f8ce 	bl	8014b00 <LCD_SetColor>
 8011964:	4b05      	ldr	r3, [pc, #20]	; (801197c <_InitContext+0x7c>)
 8011966:	4a06      	ldr	r2, [pc, #24]	; (8011980 <_InitContext+0x80>)
 8011968:	601a      	str	r2, [r3, #0]
 801196a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801196c:	20000008 	.word	0x20000008
 8011970:	20000600 	.word	0x20000600
 8011974:	20035df8 	.word	0x20035df8
 8011978:	08025514 	.word	0x08025514
 801197c:	20035e1c 	.word	0x20035e1c
 8011980:	0802554c 	.word	0x0802554c

08011984 <_OnExit>:
 8011984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011986:	4b0b      	ldr	r3, [pc, #44]	; (80119b4 <_OnExit+0x30>)
 8011988:	4e0b      	ldr	r6, [pc, #44]	; (80119b8 <_OnExit+0x34>)
 801198a:	2400      	movs	r4, #0
 801198c:	1d1d      	adds	r5, r3, #4
 801198e:	4621      	mov	r1, r4
 8011990:	2274      	movs	r2, #116	; 0x74
 8011992:	4628      	mov	r0, r5
 8011994:	6837      	ldr	r7, [r6, #0]
 8011996:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 801199a:	47b8      	blx	r7
 801199c:	6833      	ldr	r3, [r6, #0]
 801199e:	4807      	ldr	r0, [pc, #28]	; (80119bc <_OnExit+0x38>)
 80119a0:	4621      	mov	r1, r4
 80119a2:	2208      	movs	r2, #8
 80119a4:	4798      	blx	r3
 80119a6:	4a06      	ldr	r2, [pc, #24]	; (80119c0 <_OnExit+0x3c>)
 80119a8:	4906      	ldr	r1, [pc, #24]	; (80119c4 <_OnExit+0x40>)
 80119aa:	4b07      	ldr	r3, [pc, #28]	; (80119c8 <_OnExit+0x44>)
 80119ac:	7014      	strb	r4, [r2, #0]
 80119ae:	60cd      	str	r5, [r1, #12]
 80119b0:	601c      	str	r4, [r3, #0]
 80119b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119b4:	20000600 	.word	0x20000600
 80119b8:	20000040 	.word	0x20000040
 80119bc:	20035df8 	.word	0x20035df8
 80119c0:	20035ddc 	.word	0x20035ddc
 80119c4:	20000008 	.word	0x20000008
 80119c8:	20035dcc 	.word	0x20035dcc

080119cc <GUI_SetDefaultFont>:
 80119cc:	4b01      	ldr	r3, [pc, #4]	; (80119d4 <GUI_SetDefaultFont+0x8>)
 80119ce:	6058      	str	r0, [r3, #4]
 80119d0:	4770      	bx	lr
 80119d2:	bf00      	nop
 80119d4:	20000008 	.word	0x20000008

080119d8 <GUI_ClearRect>:
 80119d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119dc:	b082      	sub	sp, #8
 80119de:	4616      	mov	r6, r2
 80119e0:	461c      	mov	r4, r3
 80119e2:	4607      	mov	r7, r0
 80119e4:	460d      	mov	r5, r1
 80119e6:	f001 f973 	bl	8012cd0 <GUI_Lock>
 80119ea:	2004      	movs	r0, #4
 80119ec:	f002 fc64 	bl	80142b8 <LCD_SetDrawMode>
 80119f0:	4b13      	ldr	r3, [pc, #76]	; (8011a40 <GUI_ClearRect+0x68>)
 80119f2:	68db      	ldr	r3, [r3, #12]
 80119f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80119f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119f8:	4680      	mov	r8, r0
 80119fa:	4417      	add	r7, r2
 80119fc:	4416      	add	r6, r2
 80119fe:	441d      	add	r5, r3
 8011a00:	441c      	add	r4, r3
 8011a02:	4668      	mov	r0, sp
 8011a04:	f8ad 7000 	strh.w	r7, [sp]
 8011a08:	f8ad 6004 	strh.w	r6, [sp, #4]
 8011a0c:	f8ad 5002 	strh.w	r5, [sp, #2]
 8011a10:	f8ad 4006 	strh.w	r4, [sp, #6]
 8011a14:	f008 fd30 	bl	801a478 <WM__InitIVRSearch>
 8011a18:	b148      	cbz	r0, 8011a2e <GUI_ClearRect+0x56>
 8011a1a:	4623      	mov	r3, r4
 8011a1c:	4632      	mov	r2, r6
 8011a1e:	4629      	mov	r1, r5
 8011a20:	4638      	mov	r0, r7
 8011a22:	f002 fcd9 	bl	80143d8 <LCD_FillRect>
 8011a26:	f008 fc01 	bl	801a22c <WM__GetNextIVR>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d1f5      	bne.n	8011a1a <GUI_ClearRect+0x42>
 8011a2e:	4640      	mov	r0, r8
 8011a30:	f002 fc42 	bl	80142b8 <LCD_SetDrawMode>
 8011a34:	f001 f942 	bl	8012cbc <GUI_Unlock>
 8011a38:	b002      	add	sp, #8
 8011a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a3e:	bf00      	nop
 8011a40:	20000008 	.word	0x20000008

08011a44 <GUI_Clear>:
 8011a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a48:	2100      	movs	r1, #0
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	4608      	mov	r0, r1
 8011a4e:	f7ff fe4b 	bl	80116e8 <GUI_GotoXY>
 8011a52:	f001 f93d 	bl	8012cd0 <GUI_Lock>
 8011a56:	2004      	movs	r0, #4
 8011a58:	f002 fc2e 	bl	80142b8 <LCD_SetDrawMode>
 8011a5c:	4b17      	ldr	r3, [pc, #92]	; (8011abc <GUI_Clear+0x78>)
 8011a5e:	68db      	ldr	r3, [r3, #12]
 8011a60:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8011a62:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8011a64:	f5a5 577f 	sub.w	r7, r5, #16320	; 0x3fc0
 8011a68:	f5a4 567f 	sub.w	r6, r4, #16320	; 0x3fc0
 8011a6c:	f505 557f 	add.w	r5, r5, #16320	; 0x3fc0
 8011a70:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
 8011a74:	4680      	mov	r8, r0
 8011a76:	3f3f      	subs	r7, #63	; 0x3f
 8011a78:	353f      	adds	r5, #63	; 0x3f
 8011a7a:	3e3f      	subs	r6, #63	; 0x3f
 8011a7c:	343f      	adds	r4, #63	; 0x3f
 8011a7e:	4668      	mov	r0, sp
 8011a80:	f8ad 7000 	strh.w	r7, [sp]
 8011a84:	f8ad 5004 	strh.w	r5, [sp, #4]
 8011a88:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011a8c:	f8ad 4006 	strh.w	r4, [sp, #6]
 8011a90:	f008 fcf2 	bl	801a478 <WM__InitIVRSearch>
 8011a94:	b148      	cbz	r0, 8011aaa <GUI_Clear+0x66>
 8011a96:	4623      	mov	r3, r4
 8011a98:	462a      	mov	r2, r5
 8011a9a:	4631      	mov	r1, r6
 8011a9c:	4638      	mov	r0, r7
 8011a9e:	f002 fc9b 	bl	80143d8 <LCD_FillRect>
 8011aa2:	f008 fbc3 	bl	801a22c <WM__GetNextIVR>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	d1f5      	bne.n	8011a96 <GUI_Clear+0x52>
 8011aaa:	4640      	mov	r0, r8
 8011aac:	f002 fc04 	bl	80142b8 <LCD_SetDrawMode>
 8011ab0:	f001 f904 	bl	8012cbc <GUI_Unlock>
 8011ab4:	b002      	add	sp, #8
 8011ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aba:	bf00      	nop
 8011abc:	20000008 	.word	0x20000008

08011ac0 <GUI__Config>:
 8011ac0:	b530      	push	{r4, r5, lr}
 8011ac2:	4d1c      	ldr	r5, [pc, #112]	; (8011b34 <GUI__Config+0x74>)
 8011ac4:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8011ac8:	b085      	sub	sp, #20
 8011aca:	b10b      	cbz	r3, 8011ad0 <GUI__Config+0x10>
 8011acc:	b005      	add	sp, #20
 8011ace:	bd30      	pop	{r4, r5, pc}
 8011ad0:	4b19      	ldr	r3, [pc, #100]	; (8011b38 <GUI__Config+0x78>)
 8011ad2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011ad4:	466c      	mov	r4, sp
 8011ad6:	c407      	stmia	r4!, {r0, r1, r2}
 8011ad8:	a904      	add	r1, sp, #16
 8011ada:	f824 3b02 	strh.w	r3, [r4], #2
 8011ade:	0c1b      	lsrs	r3, r3, #16
 8011ae0:	7023      	strb	r3, [r4, #0]
 8011ae2:	f811 2d10 	ldrb.w	r2, [r1, #-16]!
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 8011aec:	f105 0484 	add.w	r4, r5, #132	; 0x84
 8011af0:	f804 2b01 	strb.w	r2, [r4], #1
 8011af4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011af8:	2a00      	cmp	r2, #0
 8011afa:	d1f9      	bne.n	8011af0 <GUI__Config+0x30>
 8011afc:	f7ff fd20 	bl	8011540 <GUI_GetVersionString>
 8011b00:	4623      	mov	r3, r4
 8011b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b06:	4619      	mov	r1, r3
 8011b08:	f803 2b01 	strb.w	r2, [r3], #1
 8011b0c:	7802      	ldrb	r2, [r0, #0]
 8011b0e:	2a00      	cmp	r2, #0
 8011b10:	d1f7      	bne.n	8011b02 <GUI__Config+0x42>
 8011b12:	704a      	strb	r2, [r1, #1]
 8011b14:	f7fc fb34 	bl	800e180 <GUI_X_Config>
 8011b18:	f001 f92a 	bl	8012d70 <GUITASK_Init>
 8011b1c:	f7fd fab4 	bl	800f088 <LCD_X_Config>
 8011b20:	4b06      	ldr	r3, [pc, #24]	; (8011b3c <GUI__Config+0x7c>)
 8011b22:	4807      	ldr	r0, [pc, #28]	; (8011b40 <GUI__Config+0x80>)
 8011b24:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8011b28:	b005      	add	sp, #20
 8011b2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b2e:	f000 b887 	b.w	8011c40 <GUI__RegisterExit>
 8011b32:	bf00      	nop
 8011b34:	20000600 	.word	0x20000600
 8011b38:	0802551c 	.word	0x0802551c
 8011b3c:	08011985 	.word	0x08011985
 8011b40:	20000698 	.word	0x20000698

08011b44 <GUI_Init>:
 8011b44:	b590      	push	{r4, r7, lr}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	4a34      	ldr	r2, [pc, #208]	; (8011c1c <GUI_Init+0xd8>)
 8011b4c:	4b33      	ldr	r3, [pc, #204]	; (8011c1c <GUI_Init+0xd8>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	f023 0301 	bic.w	r3, r3, #1
 8011b54:	6013      	str	r3, [r2, #0]
 8011b56:	4b32      	ldr	r3, [pc, #200]	; (8011c20 <GUI_Init+0xdc>)
 8011b58:	2201      	movs	r2, #1
 8011b5a:	601a      	str	r2, [r3, #0]
 8011b5c:	bf00      	nop
 8011b5e:	4b30      	ldr	r3, [pc, #192]	; (8011c20 <GUI_Init+0xdc>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d1fb      	bne.n	8011b5e <GUI_Init+0x1a>
 8011b66:	4b2f      	ldr	r3, [pc, #188]	; (8011c24 <GUI_Init+0xe0>)
 8011b68:	4a2f      	ldr	r2, [pc, #188]	; (8011c28 <GUI_Init+0xe4>)
 8011b6a:	601a      	str	r2, [r3, #0]
 8011b6c:	4b2d      	ldr	r3, [pc, #180]	; (8011c24 <GUI_Init+0xe0>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	4a2e      	ldr	r2, [pc, #184]	; (8011c2c <GUI_Init+0xe8>)
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d000      	beq.n	8011b78 <GUI_Init+0x34>
 8011b76:	e7fe      	b.n	8011b76 <GUI_Init+0x32>
 8011b78:	f7ff ffa2 	bl	8011ac0 <GUI__Config>
 8011b7c:	4b2c      	ldr	r3, [pc, #176]	; (8011c30 <GUI_Init+0xec>)
 8011b7e:	222e      	movs	r2, #46	; 0x2e
 8011b80:	701a      	strb	r2, [r3, #0]
 8011b82:	f7fd fd5a 	bl	800f63a <GUI_X_Init>
 8011b86:	482b      	ldr	r0, [pc, #172]	; (8011c34 <GUI_Init+0xf0>)
 8011b88:	f7ff feba 	bl	8011900 <_InitContext>
 8011b8c:	f002 fef6 	bl	801497c <emWin_LCD_Init>
 8011b90:	6078      	str	r0, [r7, #4]
 8011b92:	f003 fa7f 	bl	8015094 <LCD_GetXSizeDisplay>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	bf0c      	ite	eq
 8011b9c:	2301      	moveq	r3, #1
 8011b9e:	2300      	movne	r3, #0
 8011ba0:	b2dc      	uxtb	r4, r3
 8011ba2:	f003 fa7d 	bl	80150a0 <LCD_GetYSizeDisplay>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	bf0c      	ite	eq
 8011bac:	2301      	moveq	r3, #1
 8011bae:	2300      	movne	r3, #0
 8011bb0:	b2db      	uxtb	r3, r3
 8011bb2:	4323      	orrs	r3, r4
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d009      	beq.n	8011bce <GUI_Init+0x8a>
 8011bba:	f003 fa17 	bl	8014fec <LCD_GetXSizeMax>
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	f003 fa2e 	bl	8015020 <LCD_GetYSizeMax>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f003 fa5d 	bl	8015088 <LCD_SetDisplaySize>
 8011bce:	2100      	movs	r1, #0
 8011bd0:	2000      	movs	r0, #0
 8011bd2:	f7ff fe65 	bl	80118a0 <GUI_SetOrg>
 8011bd6:	f008 ffd1 	bl	801ab7c <WM_Init>
 8011bda:	f001 f905 	bl	8012de8 <GUITASK_CopyContext>
 8011bde:	4b16      	ldr	r3, [pc, #88]	; (8011c38 <GUI_Init+0xf4>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d012      	beq.n	8011c0c <GUI_Init+0xc8>
 8011be6:	e00d      	b.n	8011c04 <GUI_Init+0xc0>
 8011be8:	4b13      	ldr	r3, [pc, #76]	; (8011c38 <GUI_Init+0xf4>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d003      	beq.n	8011bfa <GUI_Init+0xb6>
 8011bf2:	4b11      	ldr	r3, [pc, #68]	; (8011c38 <GUI_Init+0xf4>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	4798      	blx	r3
 8011bfa:	4b0f      	ldr	r3, [pc, #60]	; (8011c38 <GUI_Init+0xf4>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	4a0d      	ldr	r2, [pc, #52]	; (8011c38 <GUI_Init+0xf4>)
 8011c02:	6013      	str	r3, [r2, #0]
 8011c04:	4b0c      	ldr	r3, [pc, #48]	; (8011c38 <GUI_Init+0xf4>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d1ed      	bne.n	8011be8 <GUI_Init+0xa4>
 8011c0c:	4b0b      	ldr	r3, [pc, #44]	; (8011c3c <GUI_Init+0xf8>)
 8011c0e:	2201      	movs	r2, #1
 8011c10:	701a      	strb	r2, [r3, #0]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	4618      	mov	r0, r3
 8011c16:	370c      	adds	r7, #12
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd90      	pop	{r4, r7, pc}
 8011c1c:	e0002000 	.word	0xe0002000
 8011c20:	40023008 	.word	0x40023008
 8011c24:	40023000 	.word	0x40023000
 8011c28:	f407a5c2 	.word	0xf407a5c2
 8011c2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8011c30:	20035df4 	.word	0x20035df4
 8011c34:	20000604 	.word	0x20000604
 8011c38:	2000067c 	.word	0x2000067c
 8011c3c:	20035e24 	.word	0x20035e24

08011c40 <GUI__RegisterExit>:
 8011c40:	b480      	push	{r7}
 8011c42:	b083      	sub	sp, #12
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
 8011c48:	4b06      	ldr	r3, [pc, #24]	; (8011c64 <GUI__RegisterExit+0x24>)
 8011c4a:	681a      	ldr	r2, [r3, #0]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	605a      	str	r2, [r3, #4]
 8011c50:	4a04      	ldr	r2, [pc, #16]	; (8011c64 <GUI__RegisterExit+0x24>)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	6013      	str	r3, [r2, #0]
 8011c56:	bf00      	nop
 8011c58:	370c      	adds	r7, #12
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c60:	4770      	bx	lr
 8011c62:	bf00      	nop
 8011c64:	20000678 	.word	0x20000678

08011c68 <GUI_DEVICE__GetpDriver>:
 8011c68:	2801      	cmp	r0, #1
 8011c6a:	dc0e      	bgt.n	8011c8a <GUI_DEVICE__GetpDriver+0x22>
 8011c6c:	4b08      	ldr	r3, [pc, #32]	; (8011c90 <GUI_DEVICE__GetpDriver+0x28>)
 8011c6e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8011c72:	b158      	cbz	r0, 8011c8c <GUI_DEVICE__GetpDriver+0x24>
 8011c74:	68c3      	ldr	r3, [r0, #12]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	b91b      	cbnz	r3, 8011c82 <GUI_DEVICE__GetpDriver+0x1a>
 8011c7a:	e008      	b.n	8011c8e <GUI_DEVICE__GetpDriver+0x26>
 8011c7c:	68c3      	ldr	r3, [r0, #12]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	b123      	cbz	r3, 8011c8c <GUI_DEVICE__GetpDriver+0x24>
 8011c82:	6800      	ldr	r0, [r0, #0]
 8011c84:	2800      	cmp	r0, #0
 8011c86:	d1f9      	bne.n	8011c7c <GUI_DEVICE__GetpDriver+0x14>
 8011c88:	4770      	bx	lr
 8011c8a:	2000      	movs	r0, #0
 8011c8c:	4770      	bx	lr
 8011c8e:	4770      	bx	lr
 8011c90:	20035df8 	.word	0x20035df8

08011c94 <GUI_DEVICE_Delete>:
 8011c94:	f7fe befa 	b.w	8010a8c <GUI_ALLOC_FreeFixedBlock>

08011c98 <GUI_DEVICE_Create>:
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	dc12      	bgt.n	8011cc2 <GUI_DEVICE_Create+0x2a>
 8011c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c9e:	4606      	mov	r6, r0
 8011ca0:	201c      	movs	r0, #28
 8011ca2:	4617      	mov	r7, r2
 8011ca4:	460c      	mov	r4, r1
 8011ca6:	461d      	mov	r5, r3
 8011ca8:	f7fe fefa 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8011cac:	b1b8      	cbz	r0, 8011cde <GUI_DEVICE_Create+0x46>
 8011cae:	b154      	cbz	r4, 8011cc6 <GUI_DEVICE_Create+0x2e>
 8011cb0:	6104      	str	r4, [r0, #16]
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	6083      	str	r3, [r0, #8]
 8011cb6:	6185      	str	r5, [r0, #24]
 8011cb8:	8287      	strh	r7, [r0, #20]
 8011cba:	60c6      	str	r6, [r0, #12]
 8011cbc:	6003      	str	r3, [r0, #0]
 8011cbe:	6043      	str	r3, [r0, #4]
 8011cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cc2:	2000      	movs	r0, #0
 8011cc4:	4770      	bx	lr
 8011cc6:	4b07      	ldr	r3, [pc, #28]	; (8011ce4 <GUI_DEVICE_Create+0x4c>)
 8011cc8:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8011ccc:	b90a      	cbnz	r2, 8011cd2 <GUI_DEVICE_Create+0x3a>
 8011cce:	e7f0      	b.n	8011cb2 <GUI_DEVICE_Create+0x1a>
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	6813      	ldr	r3, [r2, #0]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d1fb      	bne.n	8011cd0 <GUI_DEVICE_Create+0x38>
 8011cd8:	6913      	ldr	r3, [r2, #16]
 8011cda:	6103      	str	r3, [r0, #16]
 8011cdc:	e7e9      	b.n	8011cb2 <GUI_DEVICE_Create+0x1a>
 8011cde:	2000      	movs	r0, #0
 8011ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	20035df8 	.word	0x20035df8

08011ce8 <GUI_DEVICE_Unlink>:
 8011ce8:	4a0f      	ldr	r2, [pc, #60]	; (8011d28 <GUI_DEVICE_Unlink+0x40>)
 8011cea:	6981      	ldr	r1, [r0, #24]
 8011cec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cf0:	4298      	cmp	r0, r3
 8011cf2:	d00a      	beq.n	8011d0a <GUI_DEVICE_Unlink+0x22>
 8011cf4:	6842      	ldr	r2, [r0, #4]
 8011cf6:	b10a      	cbz	r2, 8011cfc <GUI_DEVICE_Unlink+0x14>
 8011cf8:	6803      	ldr	r3, [r0, #0]
 8011cfa:	6013      	str	r3, [r2, #0]
 8011cfc:	6803      	ldr	r3, [r0, #0]
 8011cfe:	b103      	cbz	r3, 8011d02 <GUI_DEVICE_Unlink+0x1a>
 8011d00:	605a      	str	r2, [r3, #4]
 8011d02:	2300      	movs	r3, #0
 8011d04:	6003      	str	r3, [r0, #0]
 8011d06:	6043      	str	r3, [r0, #4]
 8011d08:	4770      	bx	lr
 8011d0a:	6803      	ldr	r3, [r0, #0]
 8011d0c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011d10:	b12b      	cbz	r3, 8011d1e <GUI_DEVICE_Unlink+0x36>
 8011d12:	2200      	movs	r2, #0
 8011d14:	605a      	str	r2, [r3, #4]
 8011d16:	6842      	ldr	r2, [r0, #4]
 8011d18:	2a00      	cmp	r2, #0
 8011d1a:	d1ee      	bne.n	8011cfa <GUI_DEVICE_Unlink+0x12>
 8011d1c:	e7f0      	b.n	8011d00 <GUI_DEVICE_Unlink+0x18>
 8011d1e:	6842      	ldr	r2, [r0, #4]
 8011d20:	2a00      	cmp	r2, #0
 8011d22:	d1ea      	bne.n	8011cfa <GUI_DEVICE_Unlink+0x12>
 8011d24:	e7ed      	b.n	8011d02 <GUI_DEVICE_Unlink+0x1a>
 8011d26:	bf00      	nop
 8011d28:	20035df8 	.word	0x20035df8

08011d2c <GUI_DEVICE_Link>:
 8011d2c:	2800      	cmp	r0, #0
 8011d2e:	d03c      	beq.n	8011daa <GUI_DEVICE_Link+0x7e>
 8011d30:	b470      	push	{r4, r5, r6}
 8011d32:	6984      	ldr	r4, [r0, #24]
 8011d34:	2c01      	cmp	r4, #1
 8011d36:	dd03      	ble.n	8011d40 <GUI_DEVICE_Link+0x14>
 8011d38:	2301      	movs	r3, #1
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	bc70      	pop	{r4, r5, r6}
 8011d3e:	4770      	bx	lr
 8011d40:	4b1e      	ldr	r3, [pc, #120]	; (8011dbc <GUI_DEVICE_Link+0x90>)
 8011d42:	4d1f      	ldr	r5, [pc, #124]	; (8011dc0 <GUI_DEVICE_Link+0x94>)
 8011d44:	781a      	ldrb	r2, [r3, #0]
 8011d46:	4294      	cmp	r4, r2
 8011d48:	bfa4      	itt	ge
 8011d4a:	1c62      	addge	r2, r4, #1
 8011d4c:	701a      	strbge	r2, [r3, #0]
 8011d4e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011d52:	b90b      	cbnz	r3, 8011d58 <GUI_DEVICE_Link+0x2c>
 8011d54:	e02f      	b.n	8011db6 <GUI_DEVICE_Link+0x8a>
 8011d56:	4613      	mov	r3, r2
 8011d58:	685a      	ldr	r2, [r3, #4]
 8011d5a:	2a00      	cmp	r2, #0
 8011d5c:	d1fb      	bne.n	8011d56 <GUI_DEVICE_Link+0x2a>
 8011d5e:	68c2      	ldr	r2, [r0, #12]
 8011d60:	6811      	ldr	r1, [r2, #0]
 8011d62:	e002      	b.n	8011d6a <GUI_DEVICE_Link+0x3e>
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d0e6      	beq.n	8011d38 <GUI_DEVICE_Link+0xc>
 8011d6a:	68da      	ldr	r2, [r3, #12]
 8011d6c:	6812      	ldr	r2, [r2, #0]
 8011d6e:	4291      	cmp	r1, r2
 8011d70:	dbf8      	blt.n	8011d64 <GUI_DEVICE_Link+0x38>
 8011d72:	d00d      	beq.n	8011d90 <GUI_DEVICE_Link+0x64>
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	b1da      	cbz	r2, 8011db0 <GUI_DEVICE_Link+0x84>
 8011d78:	6010      	str	r0, [r2, #0]
 8011d7a:	6042      	str	r2, [r0, #4]
 8011d7c:	4298      	cmp	r0, r3
 8011d7e:	bf14      	ite	ne
 8011d80:	461a      	movne	r2, r3
 8011d82:	2200      	moveq	r2, #0
 8011d84:	6058      	str	r0, [r3, #4]
 8011d86:	2300      	movs	r3, #0
 8011d88:	6002      	str	r2, [r0, #0]
 8011d8a:	bc70      	pop	{r4, r5, r6}
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	4770      	bx	lr
 8011d90:	8a82      	ldrh	r2, [r0, #20]
 8011d92:	2a01      	cmp	r2, #1
 8011d94:	d1ee      	bne.n	8011d74 <GUI_DEVICE_Link+0x48>
 8011d96:	e004      	b.n	8011da2 <GUI_DEVICE_Link+0x76>
 8011d98:	68d3      	ldr	r3, [r2, #12]
 8011d9a:	681e      	ldr	r6, [r3, #0]
 8011d9c:	42b1      	cmp	r1, r6
 8011d9e:	4613      	mov	r3, r2
 8011da0:	dce8      	bgt.n	8011d74 <GUI_DEVICE_Link+0x48>
 8011da2:	681a      	ldr	r2, [r3, #0]
 8011da4:	2a00      	cmp	r2, #0
 8011da6:	d1f7      	bne.n	8011d98 <GUI_DEVICE_Link+0x6c>
 8011da8:	e7e4      	b.n	8011d74 <GUI_DEVICE_Link+0x48>
 8011daa:	2301      	movs	r3, #1
 8011dac:	4618      	mov	r0, r3
 8011dae:	4770      	bx	lr
 8011db0:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8011db4:	e7e2      	b.n	8011d7c <GUI_DEVICE_Link+0x50>
 8011db6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8011dba:	e7be      	b.n	8011d3a <GUI_DEVICE_Link+0xe>
 8011dbc:	20035e00 	.word	0x20035e00
 8011dc0:	20035df8 	.word	0x20035df8

08011dc4 <GUI_DEVICE_CreateAndLink>:
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	dc3b      	bgt.n	8011e40 <GUI_DEVICE_CreateAndLink+0x7c>
 8011dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dcc:	4681      	mov	r9, r0
 8011dce:	201c      	movs	r0, #28
 8011dd0:	4690      	mov	r8, r2
 8011dd2:	460f      	mov	r7, r1
 8011dd4:	461e      	mov	r6, r3
 8011dd6:	f7fe fe63 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8011dda:	4605      	mov	r5, r0
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	d07f      	beq.n	8011ee0 <GUI_DEVICE_CreateAndLink+0x11c>
 8011de0:	4a41      	ldr	r2, [pc, #260]	; (8011ee8 <GUI_DEVICE_CreateAndLink+0x124>)
 8011de2:	2f00      	cmp	r7, #0
 8011de4:	d031      	beq.n	8011e4a <GUI_DEVICE_CreateAndLink+0x86>
 8011de6:	2300      	movs	r3, #0
 8011de8:	f8df e104 	ldr.w	lr, [pc, #260]	; 8011ef0 <GUI_DEVICE_CreateAndLink+0x12c>
 8011dec:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8011df0:	6003      	str	r3, [r0, #0]
 8011df2:	f89e 1000 	ldrb.w	r1, [lr]
 8011df6:	6107      	str	r7, [r0, #16]
 8011df8:	428e      	cmp	r6, r1
 8011dfa:	6186      	str	r6, [r0, #24]
 8011dfc:	f8a0 8014 	strh.w	r8, [r0, #20]
 8011e00:	f8c0 900c 	str.w	r9, [r0, #12]
 8011e04:	6043      	str	r3, [r0, #4]
 8011e06:	6083      	str	r3, [r0, #8]
 8011e08:	db02      	blt.n	8011e10 <GUI_DEVICE_CreateAndLink+0x4c>
 8011e0a:	1c73      	adds	r3, r6, #1
 8011e0c:	f88e 3000 	strb.w	r3, [lr]
 8011e10:	2c00      	cmp	r4, #0
 8011e12:	d05d      	beq.n	8011ed0 <GUI_DEVICE_CreateAndLink+0x10c>
 8011e14:	4621      	mov	r1, r4
 8011e16:	684c      	ldr	r4, [r1, #4]
 8011e18:	2c00      	cmp	r4, #0
 8011e1a:	d1fb      	bne.n	8011e14 <GUI_DEVICE_CreateAndLink+0x50>
 8011e1c:	f8d9 0000 	ldr.w	r0, [r9]
 8011e20:	68cb      	ldr	r3, [r1, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	4283      	cmp	r3, r0
 8011e26:	dd2c      	ble.n	8011e82 <GUI_DEVICE_CreateAndLink+0xbe>
 8011e28:	6809      	ldr	r1, [r1, #0]
 8011e2a:	2900      	cmp	r1, #0
 8011e2c:	d1f8      	bne.n	8011e20 <GUI_DEVICE_CreateAndLink+0x5c>
 8011e2e:	b948      	cbnz	r0, 8011e44 <GUI_DEVICE_CreateAndLink+0x80>
 8011e30:	4b2e      	ldr	r3, [pc, #184]	; (8011eec <GUI_DEVICE_CreateAndLink+0x128>)
 8011e32:	3616      	adds	r6, #22
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	4628      	mov	r0, r5
 8011e38:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8011e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e40:	2000      	movs	r0, #0
 8011e42:	4770      	bx	lr
 8011e44:	4628      	mov	r0, r5
 8011e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e4a:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 8011e4e:	2900      	cmp	r1, #0
 8011e50:	d030      	beq.n	8011eb4 <GUI_DEVICE_CreateAndLink+0xf0>
 8011e52:	4608      	mov	r0, r1
 8011e54:	e000      	b.n	8011e58 <GUI_DEVICE_CreateAndLink+0x94>
 8011e56:	4618      	mov	r0, r3
 8011e58:	6803      	ldr	r3, [r0, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d1fb      	bne.n	8011e56 <GUI_DEVICE_CreateAndLink+0x92>
 8011e5e:	f8df e090 	ldr.w	lr, [pc, #144]	; 8011ef0 <GUI_DEVICE_CreateAndLink+0x12c>
 8011e62:	6900      	ldr	r0, [r0, #16]
 8011e64:	602b      	str	r3, [r5, #0]
 8011e66:	6128      	str	r0, [r5, #16]
 8011e68:	f89e 0000 	ldrb.w	r0, [lr]
 8011e6c:	61ae      	str	r6, [r5, #24]
 8011e6e:	4286      	cmp	r6, r0
 8011e70:	f8a5 8014 	strh.w	r8, [r5, #20]
 8011e74:	f8c5 900c 	str.w	r9, [r5, #12]
 8011e78:	606b      	str	r3, [r5, #4]
 8011e7a:	60ab      	str	r3, [r5, #8]
 8011e7c:	dbcb      	blt.n	8011e16 <GUI_DEVICE_CreateAndLink+0x52>
 8011e7e:	460c      	mov	r4, r1
 8011e80:	e7c3      	b.n	8011e0a <GUI_DEVICE_CreateAndLink+0x46>
 8011e82:	d00a      	beq.n	8011e9a <GUI_DEVICE_CreateAndLink+0xd6>
 8011e84:	684b      	ldr	r3, [r1, #4]
 8011e86:	b343      	cbz	r3, 8011eda <GUI_DEVICE_CreateAndLink+0x116>
 8011e88:	601d      	str	r5, [r3, #0]
 8011e8a:	606b      	str	r3, [r5, #4]
 8011e8c:	428d      	cmp	r5, r1
 8011e8e:	bf14      	ite	ne
 8011e90:	460b      	movne	r3, r1
 8011e92:	2300      	moveq	r3, #0
 8011e94:	604d      	str	r5, [r1, #4]
 8011e96:	602b      	str	r3, [r5, #0]
 8011e98:	e7c9      	b.n	8011e2e <GUI_DEVICE_CreateAndLink+0x6a>
 8011e9a:	f1b8 0f01 	cmp.w	r8, #1
 8011e9e:	d1f1      	bne.n	8011e84 <GUI_DEVICE_CreateAndLink+0xc0>
 8011ea0:	e004      	b.n	8011eac <GUI_DEVICE_CreateAndLink+0xe8>
 8011ea2:	68d9      	ldr	r1, [r3, #12]
 8011ea4:	680c      	ldr	r4, [r1, #0]
 8011ea6:	4284      	cmp	r4, r0
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	dbeb      	blt.n	8011e84 <GUI_DEVICE_CreateAndLink+0xc0>
 8011eac:	680b      	ldr	r3, [r1, #0]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d1f7      	bne.n	8011ea2 <GUI_DEVICE_CreateAndLink+0xde>
 8011eb2:	e7e7      	b.n	8011e84 <GUI_DEVICE_CreateAndLink+0xc0>
 8011eb4:	f8df e038 	ldr.w	lr, [pc, #56]	; 8011ef0 <GUI_DEVICE_CreateAndLink+0x12c>
 8011eb8:	6001      	str	r1, [r0, #0]
 8011eba:	f89e 3000 	ldrb.w	r3, [lr]
 8011ebe:	6186      	str	r6, [r0, #24]
 8011ec0:	429e      	cmp	r6, r3
 8011ec2:	f8a0 8014 	strh.w	r8, [r0, #20]
 8011ec6:	f8c0 900c 	str.w	r9, [r0, #12]
 8011eca:	6041      	str	r1, [r0, #4]
 8011ecc:	6081      	str	r1, [r0, #8]
 8011ece:	dad6      	bge.n	8011e7e <GUI_DEVICE_CreateAndLink+0xba>
 8011ed0:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8011ed4:	f8d9 0000 	ldr.w	r0, [r9]
 8011ed8:	e7a9      	b.n	8011e2e <GUI_DEVICE_CreateAndLink+0x6a>
 8011eda:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8011ede:	e7d5      	b.n	8011e8c <GUI_DEVICE_CreateAndLink+0xc8>
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ee6:	bf00      	nop
 8011ee8:	20035df8 	.word	0x20035df8
 8011eec:	20000014 	.word	0x20000014
 8011ef0:	20035e00 	.word	0x20035e00

08011ef4 <GUI_DEVICE_UnlinkTaskDevices>:
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	4770      	bx	lr

08011ef8 <GUI_DEVICE_LinkDevices>:
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	d04d      	beq.n	8011f98 <GUI_DEVICE_LinkDevices+0xa0>
 8011efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f00:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8011fa0 <GUI_DEVICE_LinkDevices+0xa8>
 8011f04:	4f25      	ldr	r7, [pc, #148]	; (8011f9c <GUI_DEVICE_LinkDevices+0xa4>)
 8011f06:	f89e 6000 	ldrb.w	r6, [lr]
 8011f0a:	46bc      	mov	ip, r7
 8011f0c:	e002      	b.n	8011f14 <GUI_DEVICE_LinkDevices+0x1c>
 8011f0e:	4628      	mov	r0, r5
 8011f10:	2d00      	cmp	r5, #0
 8011f12:	d027      	beq.n	8011f64 <GUI_DEVICE_LinkDevices+0x6c>
 8011f14:	6984      	ldr	r4, [r0, #24]
 8011f16:	6805      	ldr	r5, [r0, #0]
 8011f18:	2c01      	cmp	r4, #1
 8011f1a:	dcf8      	bgt.n	8011f0e <GUI_DEVICE_LinkDevices+0x16>
 8011f1c:	42b4      	cmp	r4, r6
 8011f1e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8011f22:	bfa4      	itt	ge
 8011f24:	1c66      	addge	r6, r4, #1
 8011f26:	b2f6      	uxtbge	r6, r6
 8011f28:	b90b      	cbnz	r3, 8011f2e <GUI_DEVICE_LinkDevices+0x36>
 8011f2a:	e032      	b.n	8011f92 <GUI_DEVICE_LinkDevices+0x9a>
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	685a      	ldr	r2, [r3, #4]
 8011f30:	2a00      	cmp	r2, #0
 8011f32:	d1fb      	bne.n	8011f2c <GUI_DEVICE_LinkDevices+0x34>
 8011f34:	68c2      	ldr	r2, [r0, #12]
 8011f36:	6811      	ldr	r1, [r2, #0]
 8011f38:	e002      	b.n	8011f40 <GUI_DEVICE_LinkDevices+0x48>
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d0e6      	beq.n	8011f0e <GUI_DEVICE_LinkDevices+0x16>
 8011f40:	68da      	ldr	r2, [r3, #12]
 8011f42:	6812      	ldr	r2, [r2, #0]
 8011f44:	428a      	cmp	r2, r1
 8011f46:	dcf8      	bgt.n	8011f3a <GUI_DEVICE_LinkDevices+0x42>
 8011f48:	d010      	beq.n	8011f6c <GUI_DEVICE_LinkDevices+0x74>
 8011f4a:	685a      	ldr	r2, [r3, #4]
 8011f4c:	b1a2      	cbz	r2, 8011f78 <GUI_DEVICE_LinkDevices+0x80>
 8011f4e:	6010      	str	r0, [r2, #0]
 8011f50:	6042      	str	r2, [r0, #4]
 8011f52:	4298      	cmp	r0, r3
 8011f54:	bf14      	ite	ne
 8011f56:	461a      	movne	r2, r3
 8011f58:	2200      	moveq	r2, #0
 8011f5a:	6058      	str	r0, [r3, #4]
 8011f5c:	6002      	str	r2, [r0, #0]
 8011f5e:	4628      	mov	r0, r5
 8011f60:	2d00      	cmp	r5, #0
 8011f62:	d1d7      	bne.n	8011f14 <GUI_DEVICE_LinkDevices+0x1c>
 8011f64:	f88e 6000 	strb.w	r6, [lr]
 8011f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f6c:	8a82      	ldrh	r2, [r0, #20]
 8011f6e:	2a01      	cmp	r2, #1
 8011f70:	d00b      	beq.n	8011f8a <GUI_DEVICE_LinkDevices+0x92>
 8011f72:	685a      	ldr	r2, [r3, #4]
 8011f74:	2a00      	cmp	r2, #0
 8011f76:	d1ea      	bne.n	8011f4e <GUI_DEVICE_LinkDevices+0x56>
 8011f78:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8011f7c:	e7e9      	b.n	8011f52 <GUI_DEVICE_LinkDevices+0x5a>
 8011f7e:	68d3      	ldr	r3, [r2, #12]
 8011f80:	f8d3 8000 	ldr.w	r8, [r3]
 8011f84:	4588      	cmp	r8, r1
 8011f86:	4613      	mov	r3, r2
 8011f88:	dbdf      	blt.n	8011f4a <GUI_DEVICE_LinkDevices+0x52>
 8011f8a:	681a      	ldr	r2, [r3, #0]
 8011f8c:	2a00      	cmp	r2, #0
 8011f8e:	d1f6      	bne.n	8011f7e <GUI_DEVICE_LinkDevices+0x86>
 8011f90:	e7db      	b.n	8011f4a <GUI_DEVICE_LinkDevices+0x52>
 8011f92:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8011f96:	e7ba      	b.n	8011f0e <GUI_DEVICE_LinkDevices+0x16>
 8011f98:	4770      	bx	lr
 8011f9a:	bf00      	nop
 8011f9c:	20035df8 	.word	0x20035df8
 8011fa0:	20035e00 	.word	0x20035e00

08011fa4 <CL_DispChar>:
 8011fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fa6:	4f27      	ldr	r7, [pc, #156]	; (8012044 <CL_DispChar+0xa0>)
 8011fa8:	683a      	ldr	r2, [r7, #0]
 8011faa:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8011fac:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 8011fae:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8011fb0:	6d15      	ldr	r5, [r2, #80]	; 0x50
 8011fb2:	441c      	add	r4, r3
 8011fb4:	b2a4      	uxth	r4, r4
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	186b      	adds	r3, r5, r1
 8011fba:	b221      	sxth	r1, r4
 8011fbc:	8493      	strh	r3, [r2, #36]	; 0x24
 8011fbe:	8451      	strh	r1, [r2, #34]	; 0x22
 8011fc0:	f8ad 1000 	strh.w	r1, [sp]
 8011fc4:	4605      	mov	r5, r0
 8011fc6:	f7ff fa13 	bl	80113f0 <GUI_GetCharDistX>
 8011fca:	4606      	mov	r6, r0
 8011fcc:	4628      	mov	r0, r5
 8011fce:	f00c fd8b 	bl	801eae8 <GUI__GetOverlap>
 8011fd2:	3c01      	subs	r4, #1
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	4434      	add	r4, r6
 8011fd8:	4420      	add	r0, r4
 8011fda:	f9b3 6024 	ldrsh.w	r6, [r3, #36]	; 0x24
 8011fde:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011fe2:	f8ad 0004 	strh.w	r0, [sp, #4]
 8011fe6:	f7ff fa85 	bl	80114f4 <GUI_GetFontSizeY>
 8011fea:	3e01      	subs	r6, #1
 8011fec:	4406      	add	r6, r0
 8011fee:	4668      	mov	r0, sp
 8011ff0:	f8ad 6006 	strh.w	r6, [sp, #6]
 8011ff4:	f008 fa40 	bl	801a478 <WM__InitIVRSearch>
 8011ff8:	b980      	cbnz	r0, 801201c <CL_DispChar+0x78>
 8011ffa:	2d0a      	cmp	r5, #10
 8011ffc:	d01d      	beq.n	801203a <CL_DispChar+0x96>
 8011ffe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012002:	683a      	ldr	r2, [r7, #0]
 8012004:	3301      	adds	r3, #1
 8012006:	b21b      	sxth	r3, r3
 8012008:	8453      	strh	r3, [r2, #34]	; 0x22
 801200a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 801200c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 801200e:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8012010:	1b1b      	subs	r3, r3, r4
 8012012:	1a09      	subs	r1, r1, r0
 8012014:	8453      	strh	r3, [r2, #34]	; 0x22
 8012016:	8491      	strh	r1, [r2, #36]	; 0x24
 8012018:	b003      	add	sp, #12
 801201a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801201c:	4628      	mov	r0, r5
 801201e:	f7ff f985 	bl	801132c <GL_DispChar>
 8012022:	f008 f903 	bl	801a22c <WM__GetNextIVR>
 8012026:	2800      	cmp	r0, #0
 8012028:	d0e7      	beq.n	8011ffa <CL_DispChar+0x56>
 801202a:	4628      	mov	r0, r5
 801202c:	f7ff f97e 	bl	801132c <GL_DispChar>
 8012030:	f008 f8fc 	bl	801a22c <WM__GetNextIVR>
 8012034:	2800      	cmp	r0, #0
 8012036:	d1f1      	bne.n	801201c <CL_DispChar+0x78>
 8012038:	e7df      	b.n	8011ffa <CL_DispChar+0x56>
 801203a:	683a      	ldr	r2, [r7, #0]
 801203c:	f9b2 3022 	ldrsh.w	r3, [r2, #34]	; 0x22
 8012040:	e7e3      	b.n	801200a <CL_DispChar+0x66>
 8012042:	bf00      	nop
 8012044:	20000014 	.word	0x20000014

08012048 <GUI_DispCharAt>:
 8012048:	b570      	push	{r4, r5, r6, lr}
 801204a:	460d      	mov	r5, r1
 801204c:	4614      	mov	r4, r2
 801204e:	4606      	mov	r6, r0
 8012050:	f000 fe3e 	bl	8012cd0 <GUI_Lock>
 8012054:	4b05      	ldr	r3, [pc, #20]	; (801206c <GUI_DispCharAt+0x24>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	4630      	mov	r0, r6
 801205a:	845d      	strh	r5, [r3, #34]	; 0x22
 801205c:	849c      	strh	r4, [r3, #36]	; 0x24
 801205e:	f7ff ffa1 	bl	8011fa4 <CL_DispChar>
 8012062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012066:	f000 be29 	b.w	8012cbc <GUI_Unlock>
 801206a:	bf00      	nop
 801206c:	20000014 	.word	0x20000014

08012070 <GUI_DispString.part.0>:
 8012070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012074:	4e47      	ldr	r6, [pc, #284]	; (8012194 <GUI_DispString.part.0+0x124>)
 8012076:	b083      	sub	sp, #12
 8012078:	4604      	mov	r4, r0
 801207a:	f000 fe29 	bl	8012cd0 <GUI_Lock>
 801207e:	f7ff f9a9 	bl	80113d4 <GUI_GetFontDistY>
 8012082:	6833      	ldr	r3, [r6, #0]
 8012084:	4607      	mov	r7, r0
 8012086:	f9b3 9022 	ldrsh.w	r9, [r3, #34]	; 0x22
 801208a:	f7ff f97f 	bl	801138c <GUI_GetYAdjust>
 801208e:	6832      	ldr	r2, [r6, #0]
 8012090:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8012092:	fa1f fa80 	uxth.w	sl, r0
 8012096:	ebca 0303 	rsb	r3, sl, r3
 801209a:	b21b      	sxth	r3, r3
 801209c:	8493      	strh	r3, [r2, #36]	; 0x24
 801209e:	7821      	ldrb	r1, [r4, #0]
 80120a0:	2900      	cmp	r1, #0
 80120a2:	d04d      	beq.n	8012140 <GUI_DispString.part.0+0xd0>
 80120a4:	b2bf      	uxth	r7, r7
 80120a6:	46b0      	mov	r8, r6
 80120a8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80120ac:	4620      	mov	r0, r4
 80120ae:	f00c fcf1 	bl	801ea94 <GUI__GetLineNumChars>
 80120b2:	4601      	mov	r1, r0
 80120b4:	4683      	mov	fp, r0
 80120b6:	4620      	mov	r0, r4
 80120b8:	f00c fd26 	bl	801eb08 <GUI__GetLineDistX>
 80120bc:	6831      	ldr	r1, [r6, #0]
 80120be:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
 80120c0:	f003 0303 	and.w	r3, r3, #3
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	d05a      	beq.n	801217e <GUI_DispString.part.0+0x10e>
 80120c8:	2b02      	cmp	r3, #2
 80120ca:	d05c      	beq.n	8012186 <GUI_DispString.part.0+0x116>
 80120cc:	b285      	uxth	r5, r0
 80120ce:	f04f 0e00 	mov.w	lr, #0
 80120d2:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 80120d4:	f9b1 3024 	ldrsh.w	r3, [r1, #36]	; 0x24
 80120d8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80120dc:	ebce 0202 	rsb	r2, lr, r2
 80120e0:	b292      	uxth	r2, r2
 80120e2:	b210      	sxth	r0, r2
 80120e4:	3b01      	subs	r3, #1
 80120e6:	f105 3eff 	add.w	lr, r5, #4294967295
 80120ea:	4496      	add	lr, r2
 80120ec:	8448      	strh	r0, [r1, #34]	; 0x22
 80120ee:	443b      	add	r3, r7
 80120f0:	466a      	mov	r2, sp
 80120f2:	4659      	mov	r1, fp
 80120f4:	f8ad 0000 	strh.w	r0, [sp]
 80120f8:	4620      	mov	r0, r4
 80120fa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80120fe:	f8ad e004 	strh.w	lr, [sp, #4]
 8012102:	f00c fd43 	bl	801eb8c <GUI__DispLine>
 8012106:	6833      	ldr	r3, [r6, #0]
 8012108:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801210c:	849a      	strh	r2, [r3, #36]	; 0x24
 801210e:	4659      	mov	r1, fp
 8012110:	4620      	mov	r0, r4
 8012112:	f001 f90f 	bl	8013334 <GUI_UC__NumChars2NumBytes>
 8012116:	5c22      	ldrb	r2, [r4, r0]
 8012118:	2a0a      	cmp	r2, #10
 801211a:	eb04 0300 	add.w	r3, r4, r0
 801211e:	d01b      	beq.n	8012158 <GUI_DispString.part.0+0xe8>
 8012120:	2a0d      	cmp	r2, #13
 8012122:	d019      	beq.n	8012158 <GUI_DispString.part.0+0xe8>
 8012124:	f8bd 0000 	ldrh.w	r0, [sp]
 8012128:	f8d8 2000 	ldr.w	r2, [r8]
 801212c:	4405      	add	r5, r0
 801212e:	8455      	strh	r5, [r2, #34]	; 0x22
 8012130:	7819      	ldrb	r1, [r3, #0]
 8012132:	b119      	cbz	r1, 801213c <GUI_DispString.part.0+0xcc>
 8012134:	7859      	ldrb	r1, [r3, #1]
 8012136:	1c5c      	adds	r4, r3, #1
 8012138:	2900      	cmp	r1, #0
 801213a:	d1b5      	bne.n	80120a8 <GUI_DispString.part.0+0x38>
 801213c:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
 8012140:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8012142:	449a      	add	sl, r3
 8012144:	f021 0303 	bic.w	r3, r1, #3
 8012148:	f8a2 a024 	strh.w	sl, [r2, #36]	; 0x24
 801214c:	8593      	strh	r3, [r2, #44]	; 0x2c
 801214e:	f000 fdb5 	bl	8012cbc <GUI_Unlock>
 8012152:	b003      	add	sp, #12
 8012154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012158:	6832      	ldr	r2, [r6, #0]
 801215a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 801215c:	f001 0103 	and.w	r1, r1, #3
 8012160:	3901      	subs	r1, #1
 8012162:	2901      	cmp	r1, #1
 8012164:	bf8a      	itet	hi
 8012166:	8c11      	ldrhhi	r1, [r2, #32]
 8012168:	f8a2 9022 	strhls.w	r9, [r2, #34]	; 0x22
 801216c:	8451      	strhhi	r1, [r2, #34]	; 0x22
 801216e:	7819      	ldrb	r1, [r3, #0]
 8012170:	290a      	cmp	r1, #10
 8012172:	d1de      	bne.n	8012132 <GUI_DispString.part.0+0xc2>
 8012174:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8012176:	4439      	add	r1, r7
 8012178:	8491      	strh	r1, [r2, #36]	; 0x24
 801217a:	7819      	ldrb	r1, [r3, #0]
 801217c:	e7d9      	b.n	8012132 <GUI_DispString.part.0+0xc2>
 801217e:	fa1f fe80 	uxth.w	lr, r0
 8012182:	4675      	mov	r5, lr
 8012184:	e7a5      	b.n	80120d2 <GUI_DispString.part.0+0x62>
 8012186:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 801218a:	f3c2 0e4f 	ubfx	lr, r2, #1, #16
 801218e:	b285      	uxth	r5, r0
 8012190:	e79f      	b.n	80120d2 <GUI_DispString.part.0+0x62>
 8012192:	bf00      	nop
 8012194:	20000014 	.word	0x20000014

08012198 <GUI_DispStringInRectWrap.part.1>:
 8012198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801219c:	4689      	mov	r9, r1
 801219e:	b08b      	sub	sp, #44	; 0x2c
 80121a0:	4615      	mov	r5, r2
 80121a2:	4604      	mov	r4, r0
 80121a4:	9203      	str	r2, [sp, #12]
 80121a6:	461f      	mov	r7, r3
 80121a8:	f000 fd92 	bl	8012cd0 <GUI_Lock>
 80121ac:	f9b9 3000 	ldrsh.w	r3, [r9]
 80121b0:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 80121b4:	f9b9 0006 	ldrsh.w	r0, [r9, #6]
 80121b8:	9301      	str	r3, [sp, #4]
 80121ba:	1ace      	subs	r6, r1, r3
 80121bc:	9102      	str	r1, [sp, #8]
 80121be:	f9b9 b002 	ldrsh.w	fp, [r9, #2]
 80121c2:	9005      	str	r0, [sp, #20]
 80121c4:	f7ff f906 	bl	80113d4 <GUI_GetFontDistY>
 80121c8:	f015 080c 	ands.w	r8, r5, #12
 80121cc:	f106 0601 	add.w	r6, r6, #1
 80121d0:	9004      	str	r0, [sp, #16]
 80121d2:	d176      	bne.n	80122c2 <GUI_DispStringInRectWrap.part.1+0x12a>
 80121d4:	fa1f fa80 	uxth.w	sl, r0
 80121d8:	4648      	mov	r0, r9
 80121da:	f009 fa9d 	bl	801b718 <WM_SetUserClipRect>
 80121de:	4602      	mov	r2, r0
 80121e0:	9004      	str	r0, [sp, #16]
 80121e2:	b1a8      	cbz	r0, 8012210 <GUI_DispStringInRectWrap.part.1+0x78>
 80121e4:	9801      	ldr	r0, [sp, #4]
 80121e6:	2100      	movs	r1, #0
 80121e8:	460b      	mov	r3, r1
 80121ea:	f360 010f 	bfi	r1, r0, #0, #16
 80121ee:	9802      	ldr	r0, [sp, #8]
 80121f0:	f360 030f 	bfi	r3, r0, #0, #16
 80121f4:	9805      	ldr	r0, [sp, #20]
 80121f6:	f36b 411f 	bfi	r1, fp, #16, #16
 80121fa:	f360 431f 	bfi	r3, r0, #16, #16
 80121fe:	9106      	str	r1, [sp, #24]
 8012200:	a806      	add	r0, sp, #24
 8012202:	4649      	mov	r1, r9
 8012204:	9307      	str	r3, [sp, #28]
 8012206:	f001 fd9b 	bl	8013d40 <GUI__IntersectRects>
 801220a:	a806      	add	r0, sp, #24
 801220c:	f009 fa84 	bl	801b718 <WM_SetUserClipRect>
 8012210:	9b03      	ldr	r3, [sp, #12]
 8012212:	f003 0803 	and.w	r8, r3, #3
 8012216:	f10a 33ff 	add.w	r3, sl, #4294967295
 801221a:	9303      	str	r3, [sp, #12]
 801221c:	4643      	mov	r3, r8
 801221e:	fa1f f58b 	uxth.w	r5, fp
 8012222:	46b0      	mov	r8, r6
 8012224:	461e      	mov	r6, r3
 8012226:	e015      	b.n	8012254 <GUI_DispStringInRectWrap.part.1+0xbc>
 8012228:	2e02      	cmp	r6, #2
 801222a:	d034      	beq.n	8012296 <GUI_DispStringInRectWrap.part.1+0xfe>
 801222c:	b91e      	cbnz	r6, 8012236 <GUI_DispStringInRectWrap.part.1+0x9e>
 801222e:	f8b9 3000 	ldrh.w	r3, [r9]
 8012232:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012236:	4620      	mov	r0, r4
 8012238:	4659      	mov	r1, fp
 801223a:	aa08      	add	r2, sp, #32
 801223c:	f00c fca6 	bl	801eb8c <GUI__DispLine>
 8012240:	4620      	mov	r0, r4
 8012242:	463a      	mov	r2, r7
 8012244:	4641      	mov	r1, r8
 8012246:	f001 ff7d 	bl	8014144 <GUI__WrapGetNumBytesToNextLine>
 801224a:	4404      	add	r4, r0
 801224c:	4455      	add	r5, sl
 801224e:	7823      	ldrb	r3, [r4, #0]
 8012250:	b2ad      	uxth	r5, r5
 8012252:	b373      	cbz	r3, 80122b2 <GUI_DispStringInRectWrap.part.1+0x11a>
 8012254:	463a      	mov	r2, r7
 8012256:	4641      	mov	r1, r8
 8012258:	4620      	mov	r0, r4
 801225a:	f001 ff61 	bl	8014120 <GUI__WrapGetNumCharsDisp>
 801225e:	9b03      	ldr	r3, [sp, #12]
 8012260:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012264:	f8ad 2020 	strh.w	r2, [sp, #32]
 8012268:	4601      	mov	r1, r0
 801226a:	18eb      	adds	r3, r5, r3
 801226c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8012270:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8012274:	4683      	mov	fp, r0
 8012276:	4620      	mov	r0, r4
 8012278:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801227c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012280:	f00c fc42 	bl	801eb08 <GUI__GetLineDistX>
 8012284:	2e01      	cmp	r6, #1
 8012286:	d1cf      	bne.n	8012228 <GUI_DispStringInRectWrap.part.1+0x90>
 8012288:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801228c:	3301      	adds	r3, #1
 801228e:	1a18      	subs	r0, r3, r0
 8012290:	f8ad 0020 	strh.w	r0, [sp, #32]
 8012294:	e7cf      	b.n	8012236 <GUI_DispStringInRectWrap.part.1+0x9e>
 8012296:	f9b9 1000 	ldrsh.w	r1, [r9]
 801229a:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 801229e:	1a5b      	subs	r3, r3, r1
 80122a0:	1a18      	subs	r0, r3, r0
 80122a2:	3001      	adds	r0, #1
 80122a4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80122a8:	eb01 0060 	add.w	r0, r1, r0, asr #1
 80122ac:	f8ad 0020 	strh.w	r0, [sp, #32]
 80122b0:	e7c1      	b.n	8012236 <GUI_DispStringInRectWrap.part.1+0x9e>
 80122b2:	9804      	ldr	r0, [sp, #16]
 80122b4:	f009 fa30 	bl	801b718 <WM_SetUserClipRect>
 80122b8:	f000 fd00 	bl	8012cbc <GUI_Unlock>
 80122bc:	b00b      	add	sp, #44	; 0x2c
 80122be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c2:	46a2      	mov	sl, r4
 80122c4:	f000 fd04 	bl	8012cd0 <GUI_Lock>
 80122c8:	463a      	mov	r2, r7
 80122ca:	4631      	mov	r1, r6
 80122cc:	4650      	mov	r0, sl
 80122ce:	2500      	movs	r5, #0
 80122d0:	f001 ff38 	bl	8014144 <GUI__WrapGetNumBytesToNextLine>
 80122d4:	b140      	cbz	r0, 80122e8 <GUI_DispStringInRectWrap.part.1+0x150>
 80122d6:	4482      	add	sl, r0
 80122d8:	463a      	mov	r2, r7
 80122da:	4631      	mov	r1, r6
 80122dc:	4650      	mov	r0, sl
 80122de:	3501      	adds	r5, #1
 80122e0:	f001 ff30 	bl	8014144 <GUI__WrapGetNumBytesToNextLine>
 80122e4:	2800      	cmp	r0, #0
 80122e6:	d1f6      	bne.n	80122d6 <GUI_DispStringInRectWrap.part.1+0x13e>
 80122e8:	f000 fce8 	bl	8012cbc <GUI_Unlock>
 80122ec:	f1b8 0f08 	cmp.w	r8, #8
 80122f0:	d008      	beq.n	8012304 <GUI_DispStringInRectWrap.part.1+0x16c>
 80122f2:	f1b8 0f0c 	cmp.w	r8, #12
 80122f6:	d00f      	beq.n	8012318 <GUI_DispStringInRectWrap.part.1+0x180>
 80122f8:	f1b8 0f04 	cmp.w	r8, #4
 80122fc:	d002      	beq.n	8012304 <GUI_DispStringInRectWrap.part.1+0x16c>
 80122fe:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8012302:	e769      	b.n	80121d8 <GUI_DispStringInRectWrap.part.1+0x40>
 8012304:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8012308:	9b05      	ldr	r3, [sp, #20]
 801230a:	fb15 f50a 	smulbb	r5, r5, sl
 801230e:	3301      	adds	r3, #1
 8012310:	1b5d      	subs	r5, r3, r5
 8012312:	fa0f fb85 	sxth.w	fp, r5
 8012316:	e75f      	b.n	80121d8 <GUI_DispStringInRectWrap.part.1+0x40>
 8012318:	9b05      	ldr	r3, [sp, #20]
 801231a:	9904      	ldr	r1, [sp, #16]
 801231c:	ebcb 0303 	rsb	r3, fp, r3
 8012320:	3301      	adds	r3, #1
 8012322:	fb05 3511 	mls	r5, r5, r1, r3
 8012326:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801232a:	eb0b 0565 	add.w	r5, fp, r5, asr #1
 801232e:	fa0f fb85 	sxth.w	fp, r5
 8012332:	fa1f fa81 	uxth.w	sl, r1
 8012336:	e74f      	b.n	80121d8 <GUI_DispStringInRectWrap.part.1+0x40>

08012338 <GUI_DispStringAt>:
 8012338:	b570      	push	{r4, r5, r6, lr}
 801233a:	460e      	mov	r6, r1
 801233c:	4615      	mov	r5, r2
 801233e:	4604      	mov	r4, r0
 8012340:	f000 fcc6 	bl	8012cd0 <GUI_Lock>
 8012344:	4b05      	ldr	r3, [pc, #20]	; (801235c <GUI_DispStringAt+0x24>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	845e      	strh	r6, [r3, #34]	; 0x22
 801234a:	849d      	strh	r5, [r3, #36]	; 0x24
 801234c:	b114      	cbz	r4, 8012354 <GUI_DispStringAt+0x1c>
 801234e:	4620      	mov	r0, r4
 8012350:	f7ff fe8e 	bl	8012070 <GUI_DispString.part.0>
 8012354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012358:	f000 bcb0 	b.w	8012cbc <GUI_Unlock>
 801235c:	20000014 	.word	0x20000014

08012360 <GUI__DispStringInRect>:
 8012360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012364:	b087      	sub	sp, #28
 8012366:	460c      	mov	r4, r1
 8012368:	9001      	str	r0, [sp, #4]
 801236a:	4617      	mov	r7, r2
 801236c:	461d      	mov	r5, r3
 801236e:	f7ff f831 	bl	80113d4 <GUI_GetFontDistY>
 8012372:	f8dd b004 	ldr.w	fp, [sp, #4]
 8012376:	4681      	mov	r9, r0
 8012378:	2c00      	cmp	r4, #0
 801237a:	f000 80a5 	beq.w	80124c8 <GUI__DispStringInRect+0x168>
 801237e:	6820      	ldr	r0, [r4, #0]
 8012380:	6861      	ldr	r1, [r4, #4]
 8012382:	ab04      	add	r3, sp, #16
 8012384:	c303      	stmia	r3!, {r0, r1}
 8012386:	f017 0a0c 	ands.w	sl, r7, #12
 801238a:	d160      	bne.n	801244e <GUI__DispStringInRect+0xee>
 801238c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8012390:	f8cd b004 	str.w	fp, [sp, #4]
 8012394:	2d00      	cmp	r5, #0
 8012396:	d057      	beq.n	8012448 <GUI__DispStringInRect+0xe8>
 8012398:	f10d 0804 	add.w	r8, sp, #4
 801239c:	f109 39ff 	add.w	r9, r9, #4294967295
 80123a0:	f8df a148 	ldr.w	sl, [pc, #328]	; 80124ec <GUI__DispStringInRect+0x18c>
 80123a4:	fa1f f989 	uxth.w	r9, r9
 80123a8:	f007 0703 	and.w	r7, r7, #3
 80123ac:	4658      	mov	r0, fp
 80123ae:	2400      	movs	r4, #0
 80123b0:	e02d      	b.n	801240e <GUI__DispStringInRect+0xae>
 80123b2:	2f02      	cmp	r7, #2
 80123b4:	d03d      	beq.n	8012432 <GUI__DispStringInRect+0xd2>
 80123b6:	b90f      	cbnz	r7, 80123bc <GUI__DispStringInRect+0x5c>
 80123b8:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 80123bc:	f8da 2000 	ldr.w	r2, [sl]
 80123c0:	9801      	ldr	r0, [sp, #4]
 80123c2:	fa0f fe86 	sxth.w	lr, r6
 80123c6:	b221      	sxth	r1, r4
 80123c8:	3b01      	subs	r3, #1
 80123ca:	eb09 0c06 	add.w	ip, r9, r6
 80123ce:	4423      	add	r3, r4
 80123d0:	f8a2 e024 	strh.w	lr, [r2, #36]	; 0x24
 80123d4:	8451      	strh	r1, [r2, #34]	; 0x22
 80123d6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80123da:	aa02      	add	r2, sp, #8
 80123dc:	4659      	mov	r1, fp
 80123de:	f8ad 300c 	strh.w	r3, [sp, #12]
 80123e2:	f8ad e00a 	strh.w	lr, [sp, #10]
 80123e6:	f8ad c00e 	strh.w	ip, [sp, #14]
 80123ea:	f00c fbcf 	bl	801eb8c <GUI__DispLine>
 80123ee:	4659      	mov	r1, fp
 80123f0:	9801      	ldr	r0, [sp, #4]
 80123f2:	f000 ff9f 	bl	8013334 <GUI_UC__NumChars2NumBytes>
 80123f6:	9b01      	ldr	r3, [sp, #4]
 80123f8:	4418      	add	r0, r3
 80123fa:	9001      	str	r0, [sp, #4]
 80123fc:	f7fe ffea 	bl	80113d4 <GUI_GetFontDistY>
 8012400:	4406      	add	r6, r0
 8012402:	4640      	mov	r0, r8
 8012404:	f001 fc66 	bl	8013cd4 <GUI__HandleEOLine>
 8012408:	b9f0      	cbnz	r0, 8012448 <GUI__DispStringInRect+0xe8>
 801240a:	b1ed      	cbz	r5, 8012448 <GUI__DispStringInRect+0xe8>
 801240c:	9801      	ldr	r0, [sp, #4]
 801240e:	4629      	mov	r1, r5
 8012410:	f00c fb40 	bl	801ea94 <GUI__GetLineNumChars>
 8012414:	4683      	mov	fp, r0
 8012416:	4601      	mov	r1, r0
 8012418:	9801      	ldr	r0, [sp, #4]
 801241a:	f00c fb75 	bl	801eb08 <GUI__GetLineDistX>
 801241e:	2f01      	cmp	r7, #1
 8012420:	ebcb 0505 	rsb	r5, fp, r5
 8012424:	4603      	mov	r3, r0
 8012426:	d1c4      	bne.n	80123b2 <GUI__DispStringInRect+0x52>
 8012428:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801242c:	1a24      	subs	r4, r4, r0
 801242e:	3401      	adds	r4, #1
 8012430:	e7c4      	b.n	80123bc <GUI__DispStringInRect+0x5c>
 8012432:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8012436:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801243a:	1b12      	subs	r2, r2, r4
 801243c:	1a12      	subs	r2, r2, r0
 801243e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8012442:	eb04 0462 	add.w	r4, r4, r2, asr #1
 8012446:	e7b9      	b.n	80123bc <GUI__DispStringInRect+0x5c>
 8012448:	b007      	add	sp, #28
 801244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801244e:	2d00      	cmp	r5, #0
 8012450:	d03e      	beq.n	80124d0 <GUI__DispStringInRect+0x170>
 8012452:	462c      	mov	r4, r5
 8012454:	2600      	movs	r6, #0
 8012456:	f10d 0804 	add.w	r8, sp, #4
 801245a:	e000      	b.n	801245e <GUI__DispStringInRect+0xfe>
 801245c:	b194      	cbz	r4, 8012484 <GUI__DispStringInRect+0x124>
 801245e:	4621      	mov	r1, r4
 8012460:	9801      	ldr	r0, [sp, #4]
 8012462:	f00c fb17 	bl	801ea94 <GUI__GetLineNumChars>
 8012466:	4603      	mov	r3, r0
 8012468:	4601      	mov	r1, r0
 801246a:	9801      	ldr	r0, [sp, #4]
 801246c:	1ae4      	subs	r4, r4, r3
 801246e:	f000 ff61 	bl	8013334 <GUI_UC__NumChars2NumBytes>
 8012472:	9b01      	ldr	r3, [sp, #4]
 8012474:	4403      	add	r3, r0
 8012476:	4640      	mov	r0, r8
 8012478:	3601      	adds	r6, #1
 801247a:	9301      	str	r3, [sp, #4]
 801247c:	f001 fc2a 	bl	8013cd4 <GUI__HandleEOLine>
 8012480:	2800      	cmp	r0, #0
 8012482:	d0eb      	beq.n	801245c <GUI__DispStringInRect+0xfc>
 8012484:	f1ba 0f08 	cmp.w	sl, #8
 8012488:	d009      	beq.n	801249e <GUI__DispStringInRect+0x13e>
 801248a:	f1ba 0f0c 	cmp.w	sl, #12
 801248e:	d00d      	beq.n	80124ac <GUI__DispStringInRect+0x14c>
 8012490:	f1ba 0f04 	cmp.w	sl, #4
 8012494:	d003      	beq.n	801249e <GUI__DispStringInRect+0x13e>
 8012496:	f8cd b004 	str.w	fp, [sp, #4]
 801249a:	2600      	movs	r6, #0
 801249c:	e77e      	b.n	801239c <GUI__DispStringInRect+0x3c>
 801249e:	fb06 f609 	mul.w	r6, r6, r9
 80124a2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80124a6:	1b9e      	subs	r6, r3, r6
 80124a8:	3601      	adds	r6, #1
 80124aa:	e771      	b.n	8012390 <GUI__DispStringInRect+0x30>
 80124ac:	fb06 f609 	mul.w	r6, r6, r9
 80124b0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80124b4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80124b8:	1a9b      	subs	r3, r3, r2
 80124ba:	3301      	adds	r3, #1
 80124bc:	1b9b      	subs	r3, r3, r6
 80124be:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80124c2:	eb02 0663 	add.w	r6, r2, r3, asr #1
 80124c6:	e763      	b.n	8012390 <GUI__DispStringInRect+0x30>
 80124c8:	a804      	add	r0, sp, #16
 80124ca:	f7fe ffdf 	bl	801148c <GUI_GetClientRect>
 80124ce:	e75a      	b.n	8012386 <GUI__DispStringInRect+0x26>
 80124d0:	f1ba 0f08 	cmp.w	sl, #8
 80124d4:	d005      	beq.n	80124e2 <GUI__DispStringInRect+0x182>
 80124d6:	f1ba 0f0c 	cmp.w	sl, #12
 80124da:	d004      	beq.n	80124e6 <GUI__DispStringInRect+0x186>
 80124dc:	f1ba 0f04 	cmp.w	sl, #4
 80124e0:	d1b2      	bne.n	8012448 <GUI__DispStringInRect+0xe8>
 80124e2:	2600      	movs	r6, #0
 80124e4:	e7dd      	b.n	80124a2 <GUI__DispStringInRect+0x142>
 80124e6:	462e      	mov	r6, r5
 80124e8:	e7e2      	b.n	80124b0 <GUI__DispStringInRect+0x150>
 80124ea:	bf00      	nop
 80124ec:	20000014 	.word	0x20000014

080124f0 <GUI_DispStringInRect>:
 80124f0:	b320      	cbz	r0, 801253c <GUI_DispStringInRect+0x4c>
 80124f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124f4:	460c      	mov	r4, r1
 80124f6:	b083      	sub	sp, #12
 80124f8:	4605      	mov	r5, r0
 80124fa:	4616      	mov	r6, r2
 80124fc:	f000 fbe8 	bl	8012cd0 <GUI_Lock>
 8012500:	b1d4      	cbz	r4, 8012538 <GUI_DispStringInRect+0x48>
 8012502:	4620      	mov	r0, r4
 8012504:	f009 f908 	bl	801b718 <WM_SetUserClipRect>
 8012508:	4607      	mov	r7, r0
 801250a:	b138      	cbz	r0, 801251c <GUI_DispStringInRect+0x2c>
 801250c:	4668      	mov	r0, sp
 801250e:	463a      	mov	r2, r7
 8012510:	4621      	mov	r1, r4
 8012512:	f001 fc15 	bl	8013d40 <GUI__IntersectRects>
 8012516:	4668      	mov	r0, sp
 8012518:	f009 f8fe 	bl	801b718 <WM_SetUserClipRect>
 801251c:	4632      	mov	r2, r6
 801251e:	4621      	mov	r1, r4
 8012520:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012524:	4628      	mov	r0, r5
 8012526:	f7ff ff1b 	bl	8012360 <GUI__DispStringInRect>
 801252a:	4638      	mov	r0, r7
 801252c:	f009 f8f4 	bl	801b718 <WM_SetUserClipRect>
 8012530:	f000 fbc4 	bl	8012cbc <GUI_Unlock>
 8012534:	b003      	add	sp, #12
 8012536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012538:	4627      	mov	r7, r4
 801253a:	e7ef      	b.n	801251c <GUI_DispStringInRect+0x2c>
 801253c:	4770      	bx	lr
 801253e:	bf00      	nop

08012540 <GUI_DispStringInRectWrap>:
 8012540:	b108      	cbz	r0, 8012546 <GUI_DispStringInRectWrap+0x6>
 8012542:	f7ff be29 	b.w	8012198 <GUI_DispStringInRectWrap.part.1>
 8012546:	4770      	bx	lr

08012548 <GUI_GetStringDistX>:
 8012548:	b510      	push	{r4, lr}
 801254a:	4604      	mov	r4, r0
 801254c:	f000 ff06 	bl	801335c <GUI__GetNumChars>
 8012550:	4601      	mov	r1, r0
 8012552:	4620      	mov	r0, r4
 8012554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012558:	f00c bad6 	b.w	801eb08 <GUI__GetLineDistX>

0801255c <GL_DrawBitmap>:
 801255c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012560:	4604      	mov	r4, r0
 8012562:	b086      	sub	sp, #24
 8012564:	2000      	movs	r0, #0
 8012566:	68e6      	ldr	r6, [r4, #12]
 8012568:	460f      	mov	r7, r1
 801256a:	4690      	mov	r8, r2
 801256c:	f7ff f97c 	bl	8011868 <GUI_SetDrawMode>
 8012570:	4605      	mov	r5, r0
 8012572:	b10e      	cbz	r6, 8012578 <GL_DrawBitmap+0x1c>
 8012574:	7933      	ldrb	r3, [r6, #4]
 8012576:	b9c3      	cbnz	r3, 80125aa <GL_DrawBitmap+0x4e>
 8012578:	f025 0002 	bic.w	r0, r5, #2
 801257c:	f7ff f974 	bl	8011868 <GUI_SetDrawMode>
 8012580:	6926      	ldr	r6, [r4, #16]
 8012582:	b1ce      	cbz	r6, 80125b8 <GL_DrawBitmap+0x5c>
 8012584:	2301      	movs	r3, #1
 8012586:	68e0      	ldr	r0, [r4, #12]
 8012588:	68a1      	ldr	r1, [r4, #8]
 801258a:	9303      	str	r3, [sp, #12]
 801258c:	9302      	str	r3, [sp, #8]
 801258e:	8863      	ldrh	r3, [r4, #2]
 8012590:	8822      	ldrh	r2, [r4, #0]
 8012592:	9001      	str	r0, [sp, #4]
 8012594:	9100      	str	r1, [sp, #0]
 8012596:	4638      	mov	r0, r7
 8012598:	4641      	mov	r1, r8
 801259a:	6834      	ldr	r4, [r6, #0]
 801259c:	47a0      	blx	r4
 801259e:	4628      	mov	r0, r5
 80125a0:	b006      	add	sp, #24
 80125a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125a6:	f7ff b95f 	b.w	8011868 <GUI_SetDrawMode>
 80125aa:	f040 0002 	orr.w	r0, r0, #2
 80125ae:	f7ff f95b 	bl	8011868 <GUI_SetDrawMode>
 80125b2:	6926      	ldr	r6, [r4, #16]
 80125b4:	2e00      	cmp	r6, #0
 80125b6:	d1e5      	bne.n	8012584 <GL_DrawBitmap+0x28>
 80125b8:	4e12      	ldr	r6, [pc, #72]	; (8012604 <GL_DrawBitmap+0xa8>)
 80125ba:	4b13      	ldr	r3, [pc, #76]	; (8012608 <GL_DrawBitmap+0xac>)
 80125bc:	6832      	ldr	r2, [r6, #0]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	7c52      	ldrb	r2, [r2, #17]
 80125c2:	68e0      	ldr	r0, [r4, #12]
 80125c4:	4621      	mov	r1, r4
 80125c6:	4798      	blx	r3
 80125c8:	88e1      	ldrh	r1, [r4, #6]
 80125ca:	b1b0      	cbz	r0, 80125fa <GL_DrawBitmap+0x9e>
 80125cc:	8863      	ldrh	r3, [r4, #2]
 80125ce:	8822      	ldrh	r2, [r4, #0]
 80125d0:	9005      	str	r0, [sp, #20]
 80125d2:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80125d6:	88a6      	ldrh	r6, [r4, #4]
 80125d8:	9603      	str	r6, [sp, #12]
 80125da:	2401      	movs	r4, #1
 80125dc:	9102      	str	r1, [sp, #8]
 80125de:	4638      	mov	r0, r7
 80125e0:	4641      	mov	r1, r8
 80125e2:	f8cd e010 	str.w	lr, [sp, #16]
 80125e6:	9401      	str	r4, [sp, #4]
 80125e8:	9400      	str	r4, [sp, #0]
 80125ea:	f002 f833 	bl	8014654 <LCD_DrawBitmap>
 80125ee:	4628      	mov	r0, r5
 80125f0:	b006      	add	sp, #24
 80125f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125f6:	f7ff b937 	b.w	8011868 <GUI_SetDrawMode>
 80125fa:	2901      	cmp	r1, #1
 80125fc:	bf04      	itt	eq
 80125fe:	6833      	ldreq	r3, [r6, #0]
 8012600:	6b98      	ldreq	r0, [r3, #56]	; 0x38
 8012602:	e7e3      	b.n	80125cc <GL_DrawBitmap+0x70>
 8012604:	20000014 	.word	0x20000014
 8012608:	20000008 	.word	0x20000008

0801260c <GUI_DrawBitmap>:
 801260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012610:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8012708 <GUI_DrawBitmap+0xfc>
 8012614:	b089      	sub	sp, #36	; 0x24
 8012616:	4604      	mov	r4, r0
 8012618:	4690      	mov	r8, r2
 801261a:	460f      	mov	r7, r1
 801261c:	f000 fb58 	bl	8012cd0 <GUI_Lock>
 8012620:	f8d9 3000 	ldr.w	r3, [r9]
 8012624:	8820      	ldrh	r0, [r4, #0]
 8012626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012628:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801262a:	8863      	ldrh	r3, [r4, #2]
 801262c:	4417      	add	r7, r2
 801262e:	44a8      	add	r8, r5
 8012630:	1e42      	subs	r2, r0, #1
 8012632:	3b01      	subs	r3, #1
 8012634:	443a      	add	r2, r7
 8012636:	4443      	add	r3, r8
 8012638:	a806      	add	r0, sp, #24
 801263a:	f8ad 7018 	strh.w	r7, [sp, #24]
 801263e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8012642:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012646:	f8ad 301e 	strh.w	r3, [sp, #30]
 801264a:	f007 ff15 	bl	801a478 <WM__InitIVRSearch>
 801264e:	2800      	cmp	r0, #0
 8012650:	d04e      	beq.n	80126f0 <GUI_DrawBitmap+0xe4>
 8012652:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 801270c <GUI_DrawBitmap+0x100>
 8012656:	46cb      	mov	fp, r9
 8012658:	e01a      	b.n	8012690 <GUI_DrawBitmap+0x84>
 801265a:	f040 0002 	orr.w	r0, r0, #2
 801265e:	f7ff f903 	bl	8011868 <GUI_SetDrawMode>
 8012662:	6921      	ldr	r1, [r4, #16]
 8012664:	b321      	cbz	r1, 80126b0 <GUI_DrawBitmap+0xa4>
 8012666:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 801266a:	68a6      	ldr	r6, [r4, #8]
 801266c:	8863      	ldrh	r3, [r4, #2]
 801266e:	8822      	ldrh	r2, [r4, #0]
 8012670:	e88d 4040 	stmia.w	sp, {r6, lr}
 8012674:	2001      	movs	r0, #1
 8012676:	9003      	str	r0, [sp, #12]
 8012678:	9002      	str	r0, [sp, #8]
 801267a:	680e      	ldr	r6, [r1, #0]
 801267c:	4638      	mov	r0, r7
 801267e:	4641      	mov	r1, r8
 8012680:	47b0      	blx	r6
 8012682:	4628      	mov	r0, r5
 8012684:	f7ff f8f0 	bl	8011868 <GUI_SetDrawMode>
 8012688:	f007 fdd0 	bl	801a22c <WM__GetNextIVR>
 801268c:	2800      	cmp	r0, #0
 801268e:	d02f      	beq.n	80126f0 <GUI_DrawBitmap+0xe4>
 8012690:	2000      	movs	r0, #0
 8012692:	68e6      	ldr	r6, [r4, #12]
 8012694:	f7ff f8e8 	bl	8011868 <GUI_SetDrawMode>
 8012698:	4605      	mov	r5, r0
 801269a:	b116      	cbz	r6, 80126a2 <GUI_DrawBitmap+0x96>
 801269c:	7933      	ldrb	r3, [r6, #4]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d1db      	bne.n	801265a <GUI_DrawBitmap+0x4e>
 80126a2:	f025 0002 	bic.w	r0, r5, #2
 80126a6:	f7ff f8df 	bl	8011868 <GUI_SetDrawMode>
 80126aa:	6921      	ldr	r1, [r4, #16]
 80126ac:	2900      	cmp	r1, #0
 80126ae:	d1da      	bne.n	8012666 <GUI_DrawBitmap+0x5a>
 80126b0:	f8d9 2000 	ldr.w	r2, [r9]
 80126b4:	f8da 3000 	ldr.w	r3, [sl]
 80126b8:	7c52      	ldrb	r2, [r2, #17]
 80126ba:	68e0      	ldr	r0, [r4, #12]
 80126bc:	4621      	mov	r1, r4
 80126be:	4798      	blx	r3
 80126c0:	88e1      	ldrh	r1, [r4, #6]
 80126c2:	b1d0      	cbz	r0, 80126fa <GUI_DrawBitmap+0xee>
 80126c4:	8863      	ldrh	r3, [r4, #2]
 80126c6:	8822      	ldrh	r2, [r4, #0]
 80126c8:	68a6      	ldr	r6, [r4, #8]
 80126ca:	9005      	str	r0, [sp, #20]
 80126cc:	88a0      	ldrh	r0, [r4, #4]
 80126ce:	9102      	str	r1, [sp, #8]
 80126d0:	2101      	movs	r1, #1
 80126d2:	9003      	str	r0, [sp, #12]
 80126d4:	9101      	str	r1, [sp, #4]
 80126d6:	9100      	str	r1, [sp, #0]
 80126d8:	4638      	mov	r0, r7
 80126da:	4641      	mov	r1, r8
 80126dc:	9604      	str	r6, [sp, #16]
 80126de:	f001 ffb9 	bl	8014654 <LCD_DrawBitmap>
 80126e2:	4628      	mov	r0, r5
 80126e4:	f7ff f8c0 	bl	8011868 <GUI_SetDrawMode>
 80126e8:	f007 fda0 	bl	801a22c <WM__GetNextIVR>
 80126ec:	2800      	cmp	r0, #0
 80126ee:	d1cf      	bne.n	8012690 <GUI_DrawBitmap+0x84>
 80126f0:	f000 fae4 	bl	8012cbc <GUI_Unlock>
 80126f4:	b009      	add	sp, #36	; 0x24
 80126f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126fa:	2901      	cmp	r1, #1
 80126fc:	bf04      	itt	eq
 80126fe:	f8db 3000 	ldreq.w	r3, [fp]
 8012702:	6b98      	ldreq	r0, [r3, #56]	; 0x38
 8012704:	e7de      	b.n	80126c4 <GUI_DrawBitmap+0xb8>
 8012706:	bf00      	nop
 8012708:	20000014 	.word	0x20000014
 801270c:	20000008 	.word	0x20000008

08012710 <_DrawBitmap>:
 8012710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012712:	b087      	sub	sp, #28
 8012714:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012716:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8012718:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801271a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801271c:	9500      	str	r5, [sp, #0]
 801271e:	9401      	str	r4, [sp, #4]
 8012720:	4d04      	ldr	r5, [pc, #16]	; (8012734 <_DrawBitmap+0x24>)
 8012722:	4c05      	ldr	r4, [pc, #20]	; (8012738 <_DrawBitmap+0x28>)
 8012724:	9702      	str	r7, [sp, #8]
 8012726:	9603      	str	r6, [sp, #12]
 8012728:	9505      	str	r5, [sp, #20]
 801272a:	9404      	str	r4, [sp, #16]
 801272c:	f001 f8ca 	bl	80138c4 <GUI__DrawBitmap16bpp>
 8012730:	b007      	add	sp, #28
 8012732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012734:	0802613c 	.word	0x0802613c
 8012738:	0801e825 	.word	0x0801e825

0801273c <_DrawBitmapSwapRB>:
 801273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801273e:	b087      	sub	sp, #28
 8012740:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012742:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8012744:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8012746:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8012748:	9500      	str	r5, [sp, #0]
 801274a:	9401      	str	r4, [sp, #4]
 801274c:	4d04      	ldr	r5, [pc, #16]	; (8012760 <_DrawBitmapSwapRB+0x24>)
 801274e:	4c05      	ldr	r4, [pc, #20]	; (8012764 <_DrawBitmapSwapRB+0x28>)
 8012750:	9702      	str	r7, [sp, #8]
 8012752:	9603      	str	r6, [sp, #12]
 8012754:	9505      	str	r5, [sp, #20]
 8012756:	9404      	str	r4, [sp, #16]
 8012758:	f001 f8b4 	bl	80138c4 <GUI__DrawBitmap16bpp>
 801275c:	b007      	add	sp, #28
 801275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012760:	080254fc 	.word	0x080254fc
 8012764:	08010009 	.word	0x08010009

08012768 <GUI_DrawHLine>:
 8012768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801276a:	4f14      	ldr	r7, [pc, #80]	; (80127bc <GUI_DrawHLine+0x54>)
 801276c:	b083      	sub	sp, #12
 801276e:	4606      	mov	r6, r0
 8012770:	460d      	mov	r5, r1
 8012772:	4614      	mov	r4, r2
 8012774:	f000 faac 	bl	8012cd0 <GUI_Lock>
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801277c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801277e:	440e      	add	r6, r1
 8012780:	b233      	sxth	r3, r6
 8012782:	4415      	add	r5, r2
 8012784:	4414      	add	r4, r2
 8012786:	4668      	mov	r0, sp
 8012788:	f8ad 5000 	strh.w	r5, [sp]
 801278c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8012790:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012794:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012798:	f007 fe6e 	bl	801a478 <WM__InitIVRSearch>
 801279c:	b150      	cbz	r0, 80127b4 <GUI_DrawHLine+0x4c>
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80127a2:	4622      	mov	r2, r4
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	4631      	mov	r1, r6
 80127a8:	4628      	mov	r0, r5
 80127aa:	4798      	blx	r3
 80127ac:	f007 fd3e 	bl	801a22c <WM__GetNextIVR>
 80127b0:	2800      	cmp	r0, #0
 80127b2:	d1f4      	bne.n	801279e <GUI_DrawHLine+0x36>
 80127b4:	f000 fa82 	bl	8012cbc <GUI_Unlock>
 80127b8:	b003      	add	sp, #12
 80127ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127bc:	20000014 	.word	0x20000014

080127c0 <GUI_DrawPixel>:
 80127c0:	b570      	push	{r4, r5, r6, lr}
 80127c2:	4e13      	ldr	r6, [pc, #76]	; (8012810 <GUI_DrawPixel+0x50>)
 80127c4:	b082      	sub	sp, #8
 80127c6:	4605      	mov	r5, r0
 80127c8:	460c      	mov	r4, r1
 80127ca:	f000 fa81 	bl	8012cd0 <GUI_Lock>
 80127ce:	6833      	ldr	r3, [r6, #0]
 80127d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80127d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127d4:	4415      	add	r5, r2
 80127d6:	441c      	add	r4, r3
 80127d8:	b22a      	sxth	r2, r5
 80127da:	b223      	sxth	r3, r4
 80127dc:	4668      	mov	r0, sp
 80127de:	f8ad 2004 	strh.w	r2, [sp, #4]
 80127e2:	f8ad 2000 	strh.w	r2, [sp]
 80127e6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80127ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 80127ee:	f007 fe43 	bl	801a478 <WM__InitIVRSearch>
 80127f2:	b148      	cbz	r0, 8012808 <GUI_DrawPixel+0x48>
 80127f4:	6833      	ldr	r3, [r6, #0]
 80127f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80127f8:	4621      	mov	r1, r4
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	4628      	mov	r0, r5
 80127fe:	4798      	blx	r3
 8012800:	f007 fd14 	bl	801a22c <WM__GetNextIVR>
 8012804:	2800      	cmp	r0, #0
 8012806:	d1f5      	bne.n	80127f4 <GUI_DrawPixel+0x34>
 8012808:	f000 fa58 	bl	8012cbc <GUI_Unlock>
 801280c:	b002      	add	sp, #8
 801280e:	bd70      	pop	{r4, r5, r6, pc}
 8012810:	20000014 	.word	0x20000014

08012814 <GUI_DrawVLine>:
 8012814:	b570      	push	{r4, r5, r6, lr}
 8012816:	b082      	sub	sp, #8
 8012818:	4606      	mov	r6, r0
 801281a:	4614      	mov	r4, r2
 801281c:	460d      	mov	r5, r1
 801281e:	f000 fa57 	bl	8012cd0 <GUI_Lock>
 8012822:	4b10      	ldr	r3, [pc, #64]	; (8012864 <GUI_DrawVLine+0x50>)
 8012824:	681a      	ldr	r2, [r3, #0]
 8012826:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8012828:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801282a:	441e      	add	r6, r3
 801282c:	b233      	sxth	r3, r6
 801282e:	4415      	add	r5, r2
 8012830:	4414      	add	r4, r2
 8012832:	4668      	mov	r0, sp
 8012834:	f8ad 5002 	strh.w	r5, [sp, #2]
 8012838:	f8ad 4006 	strh.w	r4, [sp, #6]
 801283c:	f8ad 3000 	strh.w	r3, [sp]
 8012840:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012844:	f007 fe18 	bl	801a478 <WM__InitIVRSearch>
 8012848:	b140      	cbz	r0, 801285c <GUI_DrawVLine+0x48>
 801284a:	4622      	mov	r2, r4
 801284c:	4629      	mov	r1, r5
 801284e:	4630      	mov	r0, r6
 8012850:	f001 fd98 	bl	8014384 <LCD_DrawVLine>
 8012854:	f007 fcea 	bl	801a22c <WM__GetNextIVR>
 8012858:	2800      	cmp	r0, #0
 801285a:	d1f6      	bne.n	801284a <GUI_DrawVLine+0x36>
 801285c:	f000 fa2e 	bl	8012cbc <GUI_Unlock>
 8012860:	b002      	add	sp, #8
 8012862:	bd70      	pop	{r4, r5, r6, pc}
 8012864:	20000014 	.word	0x20000014

08012868 <GUI_FillRect>:
 8012868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801286a:	b083      	sub	sp, #12
 801286c:	4607      	mov	r7, r0
 801286e:	4616      	mov	r6, r2
 8012870:	461c      	mov	r4, r3
 8012872:	460d      	mov	r5, r1
 8012874:	f000 fa2c 	bl	8012cd0 <GUI_Lock>
 8012878:	4b10      	ldr	r3, [pc, #64]	; (80128bc <GUI_FillRect+0x54>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801287e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012880:	4417      	add	r7, r2
 8012882:	4416      	add	r6, r2
 8012884:	441d      	add	r5, r3
 8012886:	441c      	add	r4, r3
 8012888:	4668      	mov	r0, sp
 801288a:	f8ad 7000 	strh.w	r7, [sp]
 801288e:	f8ad 6004 	strh.w	r6, [sp, #4]
 8012892:	f8ad 5002 	strh.w	r5, [sp, #2]
 8012896:	f8ad 4006 	strh.w	r4, [sp, #6]
 801289a:	f007 fded 	bl	801a478 <WM__InitIVRSearch>
 801289e:	b148      	cbz	r0, 80128b4 <GUI_FillRect+0x4c>
 80128a0:	4623      	mov	r3, r4
 80128a2:	4632      	mov	r2, r6
 80128a4:	4629      	mov	r1, r5
 80128a6:	4638      	mov	r0, r7
 80128a8:	f001 fd96 	bl	80143d8 <LCD_FillRect>
 80128ac:	f007 fcbe 	bl	801a22c <WM__GetNextIVR>
 80128b0:	2800      	cmp	r0, #0
 80128b2:	d1f5      	bne.n	80128a0 <GUI_FillRect+0x38>
 80128b4:	f000 fa02 	bl	8012cbc <GUI_Unlock>
 80128b8:	b003      	add	sp, #12
 80128ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128bc:	20000014 	.word	0x20000014

080128c0 <GUI_FillRectEx>:
 80128c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128c2:	b083      	sub	sp, #12
 80128c4:	f9b0 7000 	ldrsh.w	r7, [r0]
 80128c8:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80128cc:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 80128d0:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 80128d4:	f000 f9fc 	bl	8012cd0 <GUI_Lock>
 80128d8:	4b10      	ldr	r3, [pc, #64]	; (801291c <GUI_FillRectEx+0x5c>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80128de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128e0:	4417      	add	r7, r2
 80128e2:	4415      	add	r5, r2
 80128e4:	441e      	add	r6, r3
 80128e6:	441c      	add	r4, r3
 80128e8:	4668      	mov	r0, sp
 80128ea:	f8ad 7000 	strh.w	r7, [sp]
 80128ee:	f8ad 5004 	strh.w	r5, [sp, #4]
 80128f2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80128f6:	f8ad 4006 	strh.w	r4, [sp, #6]
 80128fa:	f007 fdbd 	bl	801a478 <WM__InitIVRSearch>
 80128fe:	b148      	cbz	r0, 8012914 <GUI_FillRectEx+0x54>
 8012900:	4623      	mov	r3, r4
 8012902:	462a      	mov	r2, r5
 8012904:	4631      	mov	r1, r6
 8012906:	4638      	mov	r0, r7
 8012908:	f001 fd66 	bl	80143d8 <LCD_FillRect>
 801290c:	f007 fc8e 	bl	801a22c <WM__GetNextIVR>
 8012910:	2800      	cmp	r0, #0
 8012912:	d1f5      	bne.n	8012900 <GUI_FillRectEx+0x40>
 8012914:	f000 f9d2 	bl	8012cbc <GUI_Unlock>
 8012918:	b003      	add	sp, #12
 801291a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801291c:	20000014 	.word	0x20000014

08012920 <_OnExit>:
 8012920:	b538      	push	{r3, r4, r5, lr}
 8012922:	4c0e      	ldr	r4, [pc, #56]	; (801295c <_OnExit+0x3c>)
 8012924:	4d0e      	ldr	r5, [pc, #56]	; (8012960 <_OnExit+0x40>)
 8012926:	2208      	movs	r2, #8
 8012928:	682b      	ldr	r3, [r5, #0]
 801292a:	2100      	movs	r1, #0
 801292c:	4620      	mov	r0, r4
 801292e:	4798      	blx	r3
 8012930:	682b      	ldr	r3, [r5, #0]
 8012932:	2208      	movs	r2, #8
 8012934:	2100      	movs	r1, #0
 8012936:	f104 0008 	add.w	r0, r4, #8
 801293a:	4798      	blx	r3
 801293c:	682b      	ldr	r3, [r5, #0]
 801293e:	2208      	movs	r2, #8
 8012940:	2100      	movs	r1, #0
 8012942:	f104 0010 	add.w	r0, r4, #16
 8012946:	4798      	blx	r3
 8012948:	682b      	ldr	r3, [r5, #0]
 801294a:	2208      	movs	r2, #8
 801294c:	f104 0018 	add.w	r0, r4, #24
 8012950:	2100      	movs	r1, #0
 8012952:	4798      	blx	r3
 8012954:	4b03      	ldr	r3, [pc, #12]	; (8012964 <_OnExit+0x44>)
 8012956:	2200      	movs	r2, #0
 8012958:	601a      	str	r2, [r3, #0]
 801295a:	bd38      	pop	{r3, r4, r5, pc}
 801295c:	200006a0 	.word	0x200006a0
 8012960:	20000040 	.word	0x20000040
 8012964:	20035e18 	.word	0x20035e18

08012968 <GUI_MULTIBUF_ConfirmEx>:
 8012968:	4b09      	ldr	r3, [pc, #36]	; (8012990 <GUI_MULTIBUF_ConfirmEx+0x28>)
 801296a:	6a1a      	ldr	r2, [r3, #32]
 801296c:	2a00      	cmp	r2, #0
 801296e:	bf18      	it	ne
 8012970:	2000      	movne	r0, #0
 8012972:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8012976:	b410      	push	{r4}
 8012978:	6994      	ldr	r4, [r2, #24]
 801297a:	2c00      	cmp	r4, #0
 801297c:	db04      	blt.n	8012988 <GUI_MULTIBUF_ConfirmEx+0x20>
 801297e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8012982:	f04f 33ff 	mov.w	r3, #4294967295
 8012986:	6193      	str	r3, [r2, #24]
 8012988:	f85d 4b04 	ldr.w	r4, [sp], #4
 801298c:	4770      	bx	lr
 801298e:	bf00      	nop
 8012990:	200006a0 	.word	0x200006a0

08012994 <GUI_MULTIBUF_ConfigEx>:
 8012994:	b530      	push	{r4, r5, lr}
 8012996:	4d0c      	ldr	r5, [pc, #48]	; (80129c8 <GUI_MULTIBUF_ConfigEx+0x34>)
 8012998:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801299a:	b083      	sub	sp, #12
 801299c:	4604      	mov	r4, r0
 801299e:	b153      	cbz	r3, 80129b6 <GUI_MULTIBUF_ConfigEx+0x22>
 80129a0:	6a2a      	ldr	r2, [r5, #32]
 80129a2:	4b0a      	ldr	r3, [pc, #40]	; (80129cc <GUI_MULTIBUF_ConfigEx+0x38>)
 80129a4:	2a00      	cmp	r2, #0
 80129a6:	bf18      	it	ne
 80129a8:	2400      	movne	r4, #0
 80129aa:	2901      	cmp	r1, #1
 80129ac:	bfb8      	it	lt
 80129ae:	2101      	movlt	r1, #1
 80129b0:	5519      	strb	r1, [r3, r4]
 80129b2:	b003      	add	sp, #12
 80129b4:	bd30      	pop	{r4, r5, pc}
 80129b6:	4628      	mov	r0, r5
 80129b8:	4b05      	ldr	r3, [pc, #20]	; (80129d0 <GUI_MULTIBUF_ConfigEx+0x3c>)
 80129ba:	f840 3f24 	str.w	r3, [r0, #36]!
 80129be:	9101      	str	r1, [sp, #4]
 80129c0:	f7ff f93e 	bl	8011c40 <GUI__RegisterExit>
 80129c4:	9901      	ldr	r1, [sp, #4]
 80129c6:	e7eb      	b.n	80129a0 <GUI_MULTIBUF_ConfigEx+0xc>
 80129c8:	200006a0 	.word	0x200006a0
 80129cc:	20035e14 	.word	0x20035e14
 80129d0:	08012921 	.word	0x08012921

080129d4 <GUI_StoreKey>:
 80129d4:	4b02      	ldr	r3, [pc, #8]	; (80129e0 <GUI_StoreKey+0xc>)
 80129d6:	681a      	ldr	r2, [r3, #0]
 80129d8:	b902      	cbnz	r2, 80129dc <GUI_StoreKey+0x8>
 80129da:	6018      	str	r0, [r3, #0]
 80129dc:	f000 bce2 	b.w	80133a4 <GUI_SignalEvent>
 80129e0:	200006cc 	.word	0x200006cc

080129e4 <GUI_PollKeyMsg>:
 80129e4:	b510      	push	{r4, lr}
 80129e6:	f000 f973 	bl	8012cd0 <GUI_Lock>
 80129ea:	4a0d      	ldr	r2, [pc, #52]	; (8012a20 <GUI_PollKeyMsg+0x3c>)
 80129ec:	6813      	ldr	r3, [r2, #0]
 80129ee:	6851      	ldr	r1, [r2, #4]
 80129f0:	428b      	cmp	r3, r1
 80129f2:	d00f      	beq.n	8012a14 <GUI_PollKeyMsg+0x30>
 80129f4:	4c0b      	ldr	r4, [pc, #44]	; (8012a24 <GUI_PollKeyMsg+0x40>)
 80129f6:	42a3      	cmp	r3, r4
 80129f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80129fc:	f04f 0401 	mov.w	r4, #1
 8012a00:	bf14      	ite	ne
 8012a02:	3308      	addne	r3, #8
 8012a04:	3b50      	subeq	r3, #80	; 0x50
 8012a06:	6013      	str	r3, [r2, #0]
 8012a08:	f008 fd50 	bl	801b4ac <WM_OnKey>
 8012a0c:	f000 f956 	bl	8012cbc <GUI_Unlock>
 8012a10:	4620      	mov	r0, r4
 8012a12:	bd10      	pop	{r4, pc}
 8012a14:	2400      	movs	r4, #0
 8012a16:	f000 f951 	bl	8012cbc <GUI_Unlock>
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	bd10      	pop	{r4, pc}
 8012a1e:	bf00      	nop
 8012a20:	20000018 	.word	0x20000018
 8012a24:	20000720 	.word	0x20000720

08012a28 <_OnExit>:
 8012a28:	4b03      	ldr	r3, [pc, #12]	; (8012a38 <_OnExit+0x10>)
 8012a2a:	4904      	ldr	r1, [pc, #16]	; (8012a3c <_OnExit+0x14>)
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	600b      	str	r3, [r1, #0]
 8012a30:	604b      	str	r3, [r1, #4]
 8012a32:	649a      	str	r2, [r3, #72]	; 0x48
 8012a34:	64da      	str	r2, [r3, #76]	; 0x4c
 8012a36:	4770      	bx	lr
 8012a38:	2000072c 	.word	0x2000072c
 8012a3c:	20000020 	.word	0x20000020

08012a40 <GUI_PID_GetState>:
 8012a40:	b470      	push	{r4, r5, r6}
 8012a42:	4d10      	ldr	r5, [pc, #64]	; (8012a84 <GUI_PID_GetState+0x44>)
 8012a44:	682b      	ldr	r3, [r5, #0]
 8012a46:	686a      	ldr	r2, [r5, #4]
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	d00f      	beq.n	8012a6e <GUI_PID_GetState+0x2e>
 8012a4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012a52:	4e0d      	ldr	r6, [pc, #52]	; (8012a88 <GUI_PID_GetState+0x48>)
 8012a54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012a58:	42b3      	cmp	r3, r6
 8012a5a:	bf14      	ite	ne
 8012a5c:	330c      	addne	r3, #12
 8012a5e:	3b3c      	subeq	r3, #60	; 0x3c
 8012a60:	602b      	str	r3, [r5, #0]
 8012a62:	7a20      	ldrb	r0, [r4, #8]
 8012a64:	3000      	adds	r0, #0
 8012a66:	bf18      	it	ne
 8012a68:	2001      	movne	r0, #1
 8012a6a:	bc70      	pop	{r4, r5, r6}
 8012a6c:	4770      	bx	lr
 8012a6e:	4a07      	ldr	r2, [pc, #28]	; (8012a8c <GUI_PID_GetState+0x4c>)
 8012a70:	4293      	cmp	r3, r2
 8012a72:	bf06      	itte	eq
 8012a74:	333c      	addeq	r3, #60	; 0x3c
 8012a76:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 8012a7a:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 8012a7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012a82:	e7ee      	b.n	8012a62 <GUI_PID_GetState+0x22>
 8012a84:	20000020 	.word	0x20000020
 8012a88:	20000768 	.word	0x20000768
 8012a8c:	2000072c 	.word	0x2000072c

08012a90 <GUI_PID_StoreState>:
 8012a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a92:	4e37      	ldr	r6, [pc, #220]	; (8012b70 <GUI_PID_StoreState+0xe0>)
 8012a94:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012a96:	b085      	sub	sp, #20
 8012a98:	4604      	mov	r4, r0
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d055      	beq.n	8012b4a <GUI_PID_StoreState+0xba>
 8012a9e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8012aa2:	4c34      	ldr	r4, [pc, #208]	; (8012b74 <GUI_PID_StoreState+0xe4>)
 8012aa4:	4d34      	ldr	r5, [pc, #208]	; (8012b78 <GUI_PID_StoreState+0xe8>)
 8012aa6:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8012aa8:	6025      	str	r5, [r4, #0]
 8012aaa:	ad01      	add	r5, sp, #4
 8012aac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012ab0:	b10b      	cbz	r3, 8012ab6 <GUI_PID_StoreState+0x26>
 8012ab2:	4628      	mov	r0, r5
 8012ab4:	4798      	blx	r3
 8012ab6:	4f31      	ldr	r7, [pc, #196]	; (8012b7c <GUI_PID_StoreState+0xec>)
 8012ab8:	f8d7 e000 	ldr.w	lr, [r7]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	459e      	cmp	lr, r3
 8012ac0:	d038      	beq.n	8012b34 <GUI_PID_StoreState+0xa4>
 8012ac2:	42b3      	cmp	r3, r6
 8012ac4:	4c2a      	ldr	r4, [pc, #168]	; (8012b70 <GUI_PID_StoreState+0xe0>)
 8012ac6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012aca:	d035      	beq.n	8012b38 <GUI_PID_StoreState+0xa8>
 8012acc:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8012ad0:	4291      	cmp	r1, r2
 8012ad2:	d012      	beq.n	8012afa <GUI_PID_StoreState+0x6a>
 8012ad4:	343c      	adds	r4, #60	; 0x3c
 8012ad6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012ada:	42a3      	cmp	r3, r4
 8012adc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012ae0:	d01b      	beq.n	8012b1a <GUI_PID_StoreState+0x8a>
 8012ae2:	330c      	adds	r3, #12
 8012ae4:	459e      	cmp	lr, r3
 8012ae6:	607b      	str	r3, [r7, #4]
 8012ae8:	d01b      	beq.n	8012b22 <GUI_PID_StoreState+0x92>
 8012aea:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8012aec:	b10b      	cbz	r3, 8012af2 <GUI_PID_StoreState+0x62>
 8012aee:	4628      	mov	r0, r5
 8012af0:	4798      	blx	r3
 8012af2:	f000 fc57 	bl	80133a4 <GUI_SignalEvent>
 8012af6:	b005      	add	sp, #20
 8012af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012afa:	f1a3 010c 	sub.w	r1, r3, #12
 8012afe:	458e      	cmp	lr, r1
 8012b00:	d0e8      	beq.n	8012ad4 <GUI_PID_StoreState+0x44>
 8012b02:	42a1      	cmp	r1, r4
 8012b04:	d02e      	beq.n	8012b64 <GUI_PID_StoreState+0xd4>
 8012b06:	343c      	adds	r4, #60	; 0x3c
 8012b08:	390c      	subs	r1, #12
 8012b0a:	7a09      	ldrb	r1, [r1, #8]
 8012b0c:	4291      	cmp	r1, r2
 8012b0e:	d1e2      	bne.n	8012ad6 <GUI_PID_StoreState+0x46>
 8012b10:	42b3      	cmp	r3, r6
 8012b12:	bf14      	ite	ne
 8012b14:	3b0c      	subne	r3, #12
 8012b16:	4623      	moveq	r3, r4
 8012b18:	e7dd      	b.n	8012ad6 <GUI_PID_StoreState+0x46>
 8012b1a:	4b15      	ldr	r3, [pc, #84]	; (8012b70 <GUI_PID_StoreState+0xe0>)
 8012b1c:	607b      	str	r3, [r7, #4]
 8012b1e:	459e      	cmp	lr, r3
 8012b20:	d1e3      	bne.n	8012aea <GUI_PID_StoreState+0x5a>
 8012b22:	4b17      	ldr	r3, [pc, #92]	; (8012b80 <GUI_PID_StoreState+0xf0>)
 8012b24:	459e      	cmp	lr, r3
 8012b26:	bf14      	ite	ne
 8012b28:	f10e 030c 	addne.w	r3, lr, #12
 8012b2c:	f1ae 033c 	subeq.w	r3, lr, #60	; 0x3c
 8012b30:	603b      	str	r3, [r7, #0]
 8012b32:	e7da      	b.n	8012aea <GUI_PID_StoreState+0x5a>
 8012b34:	4c12      	ldr	r4, [pc, #72]	; (8012b80 <GUI_PID_StoreState+0xf0>)
 8012b36:	e7ce      	b.n	8012ad6 <GUI_PID_StoreState+0x46>
 8012b38:	f896 1044 	ldrb.w	r1, [r6, #68]	; 0x44
 8012b3c:	4291      	cmp	r1, r2
 8012b3e:	d00b      	beq.n	8012b58 <GUI_PID_StoreState+0xc8>
 8012b40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012b44:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8012b48:	e7cb      	b.n	8012ae2 <GUI_PID_StoreState+0x52>
 8012b4a:	4630      	mov	r0, r6
 8012b4c:	4b0d      	ldr	r3, [pc, #52]	; (8012b84 <GUI_PID_StoreState+0xf4>)
 8012b4e:	f840 3f50 	str.w	r3, [r0, #80]!
 8012b52:	f7ff f875 	bl	8011c40 <GUI__RegisterExit>
 8012b56:	e7a2      	b.n	8012a9e <GUI_PID_StoreState+0xe>
 8012b58:	f106 043c 	add.w	r4, r6, #60	; 0x3c
 8012b5c:	45a6      	cmp	lr, r4
 8012b5e:	d0ef      	beq.n	8012b40 <GUI_PID_StoreState+0xb0>
 8012b60:	4621      	mov	r1, r4
 8012b62:	e7d1      	b.n	8012b08 <GUI_PID_StoreState+0x78>
 8012b64:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 8012b68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b6c:	e7cd      	b.n	8012b0a <GUI_PID_StoreState+0x7a>
 8012b6e:	bf00      	nop
 8012b70:	2000072c 	.word	0x2000072c
 8012b74:	20035de0 	.word	0x20035de0
 8012b78:	0801c045 	.word	0x0801c045
 8012b7c:	20000020 	.word	0x20000020
 8012b80:	20000768 	.word	0x20000768
 8012b84:	08012a29 	.word	0x08012a29

08012b88 <GUI_PID_IsEmpty>:
 8012b88:	4b03      	ldr	r3, [pc, #12]	; (8012b98 <GUI_PID_IsEmpty+0x10>)
 8012b8a:	cb09      	ldmia	r3, {r0, r3}
 8012b8c:	1ac0      	subs	r0, r0, r3
 8012b8e:	fab0 f080 	clz	r0, r0
 8012b92:	0940      	lsrs	r0, r0, #5
 8012b94:	4770      	bx	lr
 8012b96:	bf00      	nop
 8012b98:	20000020 	.word	0x20000020

08012b9c <GUI_GetCursorLayer>:
 8012b9c:	2801      	cmp	r0, #1
 8012b9e:	bf9a      	itte	ls
 8012ba0:	4b02      	ldrls	r3, [pc, #8]	; (8012bac <GUI_GetCursorLayer+0x10>)
 8012ba2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012ba6:	2000      	movhi	r0, #0
 8012ba8:	4770      	bx	lr
 8012baa:	bf00      	nop
 8012bac:	20000784 	.word	0x20000784

08012bb0 <GUI_GetLayerPosEx>:
 8012bb0:	b570      	push	{r4, r5, r6, lr}
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	460e      	mov	r6, r1
 8012bb6:	4615      	mov	r5, r2
 8012bb8:	f000 f88a 	bl	8012cd0 <GUI_Lock>
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	462a      	mov	r2, r5
 8012bc0:	4631      	mov	r1, r6
 8012bc2:	f003 f849 	bl	8015c58 <LCD_GetPosEx>
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	b110      	cbz	r0, 8012bd0 <GUI_GetLayerPosEx+0x20>
 8012bca:	2300      	movs	r3, #0
 8012bcc:	6033      	str	r3, [r6, #0]
 8012bce:	602b      	str	r3, [r5, #0]
 8012bd0:	f000 f874 	bl	8012cbc <GUI_Unlock>
 8012bd4:	4620      	mov	r0, r4
 8012bd6:	bd70      	pop	{r4, r5, r6, pc}

08012bd8 <GUI_SelectLayer>:
 8012bd8:	b570      	push	{r4, r5, r6, lr}
 8012bda:	4d0d      	ldr	r5, [pc, #52]	; (8012c10 <GUI_SelectLayer+0x38>)
 8012bdc:	682b      	ldr	r3, [r5, #0]
 8012bde:	4604      	mov	r4, r0
 8012be0:	7c5e      	ldrb	r6, [r3, #17]
 8012be2:	f000 f875 	bl	8012cd0 <GUI_Lock>
 8012be6:	2c01      	cmp	r4, #1
 8012be8:	d903      	bls.n	8012bf2 <GUI_SelectLayer+0x1a>
 8012bea:	f000 f867 	bl	8012cbc <GUI_Unlock>
 8012bee:	4630      	mov	r0, r6
 8012bf0:	bd70      	pop	{r4, r5, r6, pc}
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	f7ff f838 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d0f6      	beq.n	8012bea <GUI_SelectLayer+0x12>
 8012bfc:	682b      	ldr	r3, [r5, #0]
 8012bfe:	745c      	strb	r4, [r3, #17]
 8012c00:	f7fe fdc2 	bl	8011788 <GUI_SelectLCD>
 8012c04:	4b03      	ldr	r3, [pc, #12]	; (8012c14 <GUI_SelectLayer+0x3c>)
 8012c06:	601c      	str	r4, [r3, #0]
 8012c08:	f000 f858 	bl	8012cbc <GUI_Unlock>
 8012c0c:	4630      	mov	r0, r6
 8012c0e:	bd70      	pop	{r4, r5, r6, pc}
 8012c10:	20000014 	.word	0x20000014
 8012c14:	20035e4c 	.word	0x20035e4c

08012c18 <GUI_SetLayerPosEx>:
 8012c18:	b570      	push	{r4, r5, r6, lr}
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	460d      	mov	r5, r1
 8012c1e:	4616      	mov	r6, r2
 8012c20:	f000 f856 	bl	8012cd0 <GUI_Lock>
 8012c24:	4632      	mov	r2, r6
 8012c26:	4629      	mov	r1, r5
 8012c28:	4620      	mov	r0, r4
 8012c2a:	f003 f863 	bl	8015cf4 <LCD_SetPosEx>
 8012c2e:	4604      	mov	r4, r0
 8012c30:	f000 f844 	bl	8012cbc <GUI_Unlock>
 8012c34:	4620      	mov	r0, r4
 8012c36:	bd70      	pop	{r4, r5, r6, pc}

08012c38 <GUI_SetLayerVisEx>:
 8012c38:	b538      	push	{r3, r4, r5, lr}
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	460d      	mov	r5, r1
 8012c3e:	f000 f847 	bl	8012cd0 <GUI_Lock>
 8012c42:	4629      	mov	r1, r5
 8012c44:	4620      	mov	r0, r4
 8012c46:	f003 f889 	bl	8015d5c <LCD_SetVisEx>
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	f000 f836 	bl	8012cbc <GUI_Unlock>
 8012c50:	4620      	mov	r0, r4
 8012c52:	bd38      	pop	{r3, r4, r5, pc}

08012c54 <GUI_TOUCH_StoreStateEx>:
 8012c54:	b530      	push	{r4, r5, lr}
 8012c56:	4c13      	ldr	r4, [pc, #76]	; (8012ca4 <GUI_TOUCH_StoreStateEx+0x50>)
 8012c58:	b085      	sub	sp, #20
 8012c5a:	220c      	movs	r2, #12
 8012c5c:	4621      	mov	r1, r4
 8012c5e:	4605      	mov	r5, r0
 8012c60:	f012 fb2e 	bl	80252c0 <memcmp>
 8012c64:	b178      	cbz	r0, 8012c86 <GUI_TOUCH_StoreStateEx+0x32>
 8012c66:	68e3      	ldr	r3, [r4, #12]
 8012c68:	b1a3      	cbz	r3, 8012c94 <GUI_TOUCH_StoreStateEx+0x40>
 8012c6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012c6e:	ad01      	add	r5, sp, #4
 8012c70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012c74:	a902      	add	r1, sp, #8
 8012c76:	4628      	mov	r0, r5
 8012c78:	4798      	blx	r3
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012c80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012c84:	b10b      	cbz	r3, 8012c8a <GUI_TOUCH_StoreStateEx+0x36>
 8012c86:	b005      	add	sp, #20
 8012c88:	bd30      	pop	{r4, r5, pc}
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	f7ff ff00 	bl	8012a90 <GUI_PID_StoreState>
 8012c90:	b005      	add	sp, #20
 8012c92:	bd30      	pop	{r4, r5, pc}
 8012c94:	4628      	mov	r0, r5
 8012c96:	f7ff fefb 	bl	8012a90 <GUI_PID_StoreState>
 8012c9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012ca2:	e7f0      	b.n	8012c86 <GUI_TOUCH_StoreStateEx+0x32>
 8012ca4:	2000078c 	.word	0x2000078c

08012ca8 <_OnExit>:
 8012ca8:	b510      	push	{r4, lr}
 8012caa:	4c03      	ldr	r4, [pc, #12]	; (8012cb8 <_OnExit+0x10>)
 8012cac:	6820      	ldr	r0, [r4, #0]
 8012cae:	f7fd feed 	bl	8010a8c <GUI_ALLOC_FreeFixedBlock>
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	6023      	str	r3, [r4, #0]
 8012cb6:	bd10      	pop	{r4, pc}
 8012cb8:	2000079c 	.word	0x2000079c

08012cbc <GUI_Unlock>:
 8012cbc:	4a03      	ldr	r2, [pc, #12]	; (8012ccc <GUI_Unlock+0x10>)
 8012cbe:	6853      	ldr	r3, [r2, #4]
 8012cc0:	3b01      	subs	r3, #1
 8012cc2:	6053      	str	r3, [r2, #4]
 8012cc4:	b103      	cbz	r3, 8012cc8 <GUI_Unlock+0xc>
 8012cc6:	4770      	bx	lr
 8012cc8:	f7fc bcdc 	b.w	800f684 <GUI_X_Unlock>
 8012ccc:	2000079c 	.word	0x2000079c

08012cd0 <GUI_Lock>:
 8012cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cd4:	4d23      	ldr	r5, [pc, #140]	; (8012d64 <GUI_Lock+0x94>)
 8012cd6:	686b      	ldr	r3, [r5, #4]
 8012cd8:	b123      	cbz	r3, 8012ce4 <GUI_Lock+0x14>
 8012cda:	f7fc fced 	bl	800f6b8 <GUI_X_GetTaskId>
 8012cde:	68ab      	ldr	r3, [r5, #8]
 8012ce0:	4298      	cmp	r0, r3
 8012ce2:	d004      	beq.n	8012cee <GUI_Lock+0x1e>
 8012ce4:	f7fc fcda 	bl	800f69c <GUI_X_Lock>
 8012ce8:	f7fc fce6 	bl	800f6b8 <GUI_X_GetTaskId>
 8012cec:	60a8      	str	r0, [r5, #8]
 8012cee:	686b      	ldr	r3, [r5, #4]
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	2b01      	cmp	r3, #1
 8012cf4:	606b      	str	r3, [r5, #4]
 8012cf6:	d001      	beq.n	8012cfc <GUI_Lock+0x2c>
 8012cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cfc:	4f1a      	ldr	r7, [pc, #104]	; (8012d68 <GUI_Lock+0x98>)
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	dd29      	ble.n	8012d58 <GUI_Lock+0x88>
 8012d04:	2400      	movs	r4, #0
 8012d06:	4626      	mov	r6, r4
 8012d08:	e006      	b.n	8012d18 <GUI_Lock+0x48>
 8012d0a:	b342      	cbz	r2, 8012d5e <GUI_Lock+0x8e>
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	3601      	adds	r6, #1
 8012d10:	429e      	cmp	r6, r3
 8012d12:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 8012d16:	da1f      	bge.n	8012d58 <GUI_Lock+0x88>
 8012d18:	f7fc fcce 	bl	800f6b8 <GUI_X_GetTaskId>
 8012d1c:	682b      	ldr	r3, [r5, #0]
 8012d1e:	591a      	ldr	r2, [r3, r4]
 8012d20:	4290      	cmp	r0, r2
 8012d22:	4423      	add	r3, r4
 8012d24:	d1f1      	bne.n	8012d0a <GUI_Lock+0x3a>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	42b3      	cmp	r3, r6
 8012d2a:	d0e5      	beq.n	8012cf8 <GUI_Lock+0x28>
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	db10      	blt.n	8012d52 <GUI_Lock+0x82>
 8012d30:	682a      	ldr	r2, [r5, #0]
 8012d32:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8012d36:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 8012d3a:	f7ff f8db 	bl	8011ef4 <GUI_DEVICE_UnlinkTaskDevices>
 8012d3e:	682b      	ldr	r3, [r5, #0]
 8012d40:	f8c8 0078 	str.w	r0, [r8, #120]	; 0x78
 8012d44:	441c      	add	r4, r3
 8012d46:	4b09      	ldr	r3, [pc, #36]	; (8012d6c <GUI_Lock+0x9c>)
 8012d48:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8012d4a:	3404      	adds	r4, #4
 8012d4c:	601c      	str	r4, [r3, #0]
 8012d4e:	f7ff f8d3 	bl	8011ef8 <GUI_DEVICE_LinkDevices>
 8012d52:	607e      	str	r6, [r7, #4]
 8012d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d58:	2400      	movs	r4, #0
 8012d5a:	4626      	mov	r6, r4
 8012d5c:	e7e3      	b.n	8012d26 <GUI_Lock+0x56>
 8012d5e:	6018      	str	r0, [r3, #0]
 8012d60:	e7e1      	b.n	8012d26 <GUI_Lock+0x56>
 8012d62:	bf00      	nop
 8012d64:	2000079c 	.word	0x2000079c
 8012d68:	20000028 	.word	0x20000028
 8012d6c:	20000014 	.word	0x20000014

08012d70 <GUITASK_Init>:
 8012d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d72:	4f19      	ldr	r7, [pc, #100]	; (8012dd8 <GUITASK_Init+0x68>)
 8012d74:	4b19      	ldr	r3, [pc, #100]	; (8012ddc <GUITASK_Init+0x6c>)
 8012d76:	4e1a      	ldr	r6, [pc, #104]	; (8012de0 <GUITASK_Init+0x70>)
 8012d78:	4638      	mov	r0, r7
 8012d7a:	f840 3f0c 	str.w	r3, [r0, #12]!
 8012d7e:	f7fe ff5f 	bl	8011c40 <GUI__RegisterExit>
 8012d82:	6834      	ldr	r4, [r6, #0]
 8012d84:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 8012d88:	00a4      	lsls	r4, r4, #2
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f7fd fe88 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8012d90:	4b14      	ldr	r3, [pc, #80]	; (8012de4 <GUITASK_Init+0x74>)
 8012d92:	6038      	str	r0, [r7, #0]
 8012d94:	4622      	mov	r2, r4
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	2100      	movs	r1, #0
 8012d9a:	4798      	blx	r3
 8012d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8012da0:	6073      	str	r3, [r6, #4]
 8012da2:	f7fc fc51 	bl	800f648 <GUI_X_InitOS>
 8012da6:	6833      	ldr	r3, [r6, #0]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	dd11      	ble.n	8012dd0 <GUITASK_Init+0x60>
 8012dac:	2400      	movs	r4, #0
 8012dae:	4625      	mov	r5, r4
 8012db0:	e003      	b.n	8012dba <GUITASK_Init+0x4a>
 8012db2:	b172      	cbz	r2, 8012dd2 <GUITASK_Init+0x62>
 8012db4:	6833      	ldr	r3, [r6, #0]
 8012db6:	429d      	cmp	r5, r3
 8012db8:	da0a      	bge.n	8012dd0 <GUITASK_Init+0x60>
 8012dba:	f7fc fc7d 	bl	800f6b8 <GUI_X_GetTaskId>
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	591a      	ldr	r2, [r3, r4]
 8012dc2:	4290      	cmp	r0, r2
 8012dc4:	4423      	add	r3, r4
 8012dc6:	f105 0501 	add.w	r5, r5, #1
 8012dca:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 8012dce:	d1f0      	bne.n	8012db2 <GUITASK_Init+0x42>
 8012dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dd2:	6018      	str	r0, [r3, #0]
 8012dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dd6:	bf00      	nop
 8012dd8:	2000079c 	.word	0x2000079c
 8012ddc:	08012ca9 	.word	0x08012ca9
 8012de0:	20000028 	.word	0x20000028
 8012de4:	20000040 	.word	0x20000040

08012de8 <GUITASK_CopyContext>:
 8012de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dec:	4e23      	ldr	r6, [pc, #140]	; (8012e7c <GUITASK_CopyContext+0x94>)
 8012dee:	6833      	ldr	r3, [r6, #0]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	dd3f      	ble.n	8012e74 <GUITASK_CopyContext+0x8c>
 8012df4:	4d22      	ldr	r5, [pc, #136]	; (8012e80 <GUITASK_CopyContext+0x98>)
 8012df6:	4f23      	ldr	r7, [pc, #140]	; (8012e84 <GUITASK_CopyContext+0x9c>)
 8012df8:	682c      	ldr	r4, [r5, #0]
 8012dfa:	f8d7 9000 	ldr.w	r9, [r7]
 8012dfe:	ebc3 1843 	rsb	r8, r3, r3, lsl #5
 8012e02:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8012e06:	f108 080c 	add.w	r8, r8, #12
 8012e0a:	340c      	adds	r4, #12
 8012e0c:	f04f 0a00 	mov.w	sl, #0
 8012e10:	f1a4 0308 	sub.w	r3, r4, #8
 8012e14:	2274      	movs	r2, #116	; 0x74
 8012e16:	4618      	mov	r0, r3
 8012e18:	4649      	mov	r1, r9
 8012e1a:	f012 faaf 	bl	802537c <memcpy>
 8012e1e:	1f22      	subs	r2, r4, #4
 8012e20:	6320      	str	r0, [r4, #48]	; 0x30
 8012e22:	63a0      	str	r0, [r4, #56]	; 0x38
 8012e24:	f844 ac0c 	str.w	sl, [r4, #-12]
 8012e28:	6362      	str	r2, [r4, #52]	; 0x34
 8012e2a:	60e4      	str	r4, [r4, #12]
 8012e2c:	347c      	adds	r4, #124	; 0x7c
 8012e2e:	45a0      	cmp	r8, r4
 8012e30:	d1ee      	bne.n	8012e10 <GUITASK_CopyContext+0x28>
 8012e32:	2400      	movs	r4, #0
 8012e34:	46a0      	mov	r8, r4
 8012e36:	e003      	b.n	8012e40 <GUITASK_CopyContext+0x58>
 8012e38:	b192      	cbz	r2, 8012e60 <GUITASK_CopyContext+0x78>
 8012e3a:	6832      	ldr	r2, [r6, #0]
 8012e3c:	4590      	cmp	r8, r2
 8012e3e:	da14      	bge.n	8012e6a <GUITASK_CopyContext+0x82>
 8012e40:	f7fc fc3a 	bl	800f6b8 <GUI_X_GetTaskId>
 8012e44:	682b      	ldr	r3, [r5, #0]
 8012e46:	591a      	ldr	r2, [r3, r4]
 8012e48:	4290      	cmp	r0, r2
 8012e4a:	eb03 0104 	add.w	r1, r3, r4
 8012e4e:	f108 0801 	add.w	r8, r8, #1
 8012e52:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 8012e56:	d1ef      	bne.n	8012e38 <GUITASK_CopyContext+0x50>
 8012e58:	3104      	adds	r1, #4
 8012e5a:	6039      	str	r1, [r7, #0]
 8012e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e60:	6008      	str	r0, [r1, #0]
 8012e62:	3104      	adds	r1, #4
 8012e64:	6039      	str	r1, [r7, #0]
 8012e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	3104      	adds	r1, #4
 8012e6e:	6039      	str	r1, [r7, #0]
 8012e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e74:	4b02      	ldr	r3, [pc, #8]	; (8012e80 <GUITASK_CopyContext+0x98>)
 8012e76:	4f03      	ldr	r7, [pc, #12]	; (8012e84 <GUITASK_CopyContext+0x9c>)
 8012e78:	6819      	ldr	r1, [r3, #0]
 8012e7a:	e7ed      	b.n	8012e58 <GUITASK_CopyContext+0x70>
 8012e7c:	20000028 	.word	0x20000028
 8012e80:	2000079c 	.word	0x2000079c
 8012e84:	20000014 	.word	0x20000014

08012e88 <GUI_GetTime>:
 8012e88:	f7fc bbc4 	b.w	800f614 <GUI_X_GetTime>

08012e8c <GUI_Delay>:
 8012e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e90:	4607      	mov	r7, r0
 8012e92:	f7fc fbbf 	bl	800f614 <GUI_X_GetTime>
 8012e96:	4407      	add	r7, r0
 8012e98:	f7fc fbbc 	bl	800f614 <GUI_X_GetTime>
 8012e9c:	1a3e      	subs	r6, r7, r0
 8012e9e:	2e00      	cmp	r6, #0
 8012ea0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8012f04 <GUI_Delay+0x78>
 8012ea4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8012f08 <GUI_Delay+0x7c>
 8012ea8:	dd22      	ble.n	8012ef0 <GUI_Delay+0x64>
 8012eaa:	f7fe fb9b 	bl	80115e4 <GUI_Exec>
 8012eae:	f8d9 3000 	ldr.w	r3, [r9]
 8012eb2:	429e      	cmp	r6, r3
 8012eb4:	bfa8      	it	ge
 8012eb6:	461e      	movge	r6, r3
 8012eb8:	f7ff ff0a 	bl	8012cd0 <GUI_Lock>
 8012ebc:	f8d8 4000 	ldr.w	r4, [r8]
 8012ec0:	f7fe f89c 	bl	8010ffc <GUI_ALLOC_Lock>
 8012ec4:	b1b4      	cbz	r4, 8012ef4 <GUI_Delay+0x68>
 8012ec6:	4625      	mov	r5, r4
 8012ec8:	f7ff fef8 	bl	8012cbc <GUI_Unlock>
 8012ecc:	3d01      	subs	r5, #1
 8012ece:	d1fb      	bne.n	8012ec8 <GUI_Delay+0x3c>
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	f7fc fba6 	bl	800f622 <GUI_X_Delay>
 8012ed6:	f7ff fefb 	bl	8012cd0 <GUI_Lock>
 8012eda:	3c01      	subs	r4, #1
 8012edc:	d1fb      	bne.n	8012ed6 <GUI_Delay+0x4a>
 8012ede:	f7fe f895 	bl	801100c <GUI_ALLOC_Unlock>
 8012ee2:	f7ff feeb 	bl	8012cbc <GUI_Unlock>
 8012ee6:	f7fc fb95 	bl	800f614 <GUI_X_GetTime>
 8012eea:	1a3e      	subs	r6, r7, r0
 8012eec:	2e00      	cmp	r6, #0
 8012eee:	dcdc      	bgt.n	8012eaa <GUI_Delay+0x1e>
 8012ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ef4:	4630      	mov	r0, r6
 8012ef6:	f7fc fb94 	bl	800f622 <GUI_X_Delay>
 8012efa:	f7fe f887 	bl	801100c <GUI_ALLOC_Unlock>
 8012efe:	f7ff fedd 	bl	8012cbc <GUI_Unlock>
 8012f02:	e7f0      	b.n	8012ee6 <GUI_Delay+0x5a>
 8012f04:	20000030 	.word	0x20000030
 8012f08:	200007a0 	.word	0x200007a0

08012f0c <_OnExit>:
 8012f0c:	4b02      	ldr	r3, [pc, #8]	; (8012f18 <_OnExit+0xc>)
 8012f0e:	2200      	movs	r2, #0
 8012f10:	601a      	str	r2, [r3, #0]
 8012f12:	605a      	str	r2, [r3, #4]
 8012f14:	609a      	str	r2, [r3, #8]
 8012f16:	4770      	bx	lr
 8012f18:	200007b0 	.word	0x200007b0

08012f1c <GUI_TIMER_Exec>:
 8012f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f20:	4d1f      	ldr	r5, [pc, #124]	; (8012fa0 <GUI_TIMER_Exec+0x84>)
 8012f22:	b085      	sub	sp, #20
 8012f24:	f7ff fed4 	bl	8012cd0 <GUI_Lock>
 8012f28:	686f      	ldr	r7, [r5, #4]
 8012f2a:	462c      	mov	r4, r5
 8012f2c:	463b      	mov	r3, r7
 8012f2e:	2600      	movs	r6, #0
 8012f30:	b333      	cbz	r3, 8012f80 <GUI_TIMER_Exec+0x64>
 8012f32:	f7ff ffa9 	bl	8012e88 <GUI_GetTime>
 8012f36:	4680      	mov	r8, r0
 8012f38:	6868      	ldr	r0, [r5, #4]
 8012f3a:	f7fd fee1 	bl	8010d00 <GUI_ALLOC_LockH>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	9300      	str	r3, [sp, #0]
 8012f42:	695a      	ldr	r2, [r3, #20]
 8012f44:	ebc8 0202 	rsb	r2, r8, r2
 8012f48:	2a00      	cmp	r2, #0
 8012f4a:	4668      	mov	r0, sp
 8012f4c:	dc1e      	bgt.n	8012f8c <GUI_TIMER_Exec+0x70>
 8012f4e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8012f52:	6861      	ldr	r1, [r4, #4]
 8012f54:	691a      	ldr	r2, [r3, #16]
 8012f56:	f8cd 8004 	str.w	r8, [sp, #4]
 8012f5a:	9103      	str	r1, [sp, #12]
 8012f5c:	9202      	str	r2, [sp, #8]
 8012f5e:	f8c4 9004 	str.w	r9, [r4, #4]
 8012f62:	f8d3 8000 	ldr.w	r8, [r3]
 8012f66:	f7fd fedd 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8012f6a:	a801      	add	r0, sp, #4
 8012f6c:	47c0      	blx	r8
 8012f6e:	f1b9 0f00 	cmp.w	r9, #0
 8012f72:	d005      	beq.n	8012f80 <GUI_TIMER_Exec+0x64>
 8012f74:	6863      	ldr	r3, [r4, #4]
 8012f76:	429f      	cmp	r7, r3
 8012f78:	f04f 0601 	mov.w	r6, #1
 8012f7c:	d1d8      	bne.n	8012f30 <GUI_TIMER_Exec+0x14>
 8012f7e:	2600      	movs	r6, #0
 8012f80:	f7ff fe9c 	bl	8012cbc <GUI_Unlock>
 8012f84:	4630      	mov	r0, r6
 8012f86:	b005      	add	sp, #20
 8012f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f8c:	4668      	mov	r0, sp
 8012f8e:	f7fd fec9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8012f92:	f7ff fe93 	bl	8012cbc <GUI_Unlock>
 8012f96:	4630      	mov	r0, r6
 8012f98:	b005      	add	sp, #20
 8012f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f9e:	bf00      	nop
 8012fa0:	200007b0 	.word	0x200007b0

08012fa4 <_Link>:
 8012fa4:	b570      	push	{r4, r5, r6, lr}
 8012fa6:	4c25      	ldr	r4, [pc, #148]	; (801303c <_Link+0x98>)
 8012fa8:	b084      	sub	sp, #16
 8012faa:	4605      	mov	r5, r0
 8012fac:	f7fd fea8 	bl	8010d00 <GUI_ALLOC_LockH>
 8012fb0:	6863      	ldr	r3, [r4, #4]
 8012fb2:	9001      	str	r0, [sp, #4]
 8012fb4:	b933      	cbnz	r3, 8012fc4 <_Link+0x20>
 8012fb6:	6065      	str	r5, [r4, #4]
 8012fb8:	6043      	str	r3, [r0, #4]
 8012fba:	a801      	add	r0, sp, #4
 8012fbc:	f7fd feb2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8012fc0:	b004      	add	sp, #16
 8012fc2:	bd70      	pop	{r4, r5, r6, pc}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7fd fe9b 	bl	8010d00 <GUI_ALLOC_LockH>
 8012fca:	aa04      	add	r2, sp, #16
 8012fcc:	6946      	ldr	r6, [r0, #20]
 8012fce:	f842 0d10 	str.w	r0, [r2, #-16]!
 8012fd2:	4610      	mov	r0, r2
 8012fd4:	f7fd fea6 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8012fd8:	9a01      	ldr	r2, [sp, #4]
 8012fda:	6953      	ldr	r3, [r2, #20]
 8012fdc:	1b9b      	subs	r3, r3, r6
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	dd27      	ble.n	8013032 <_Link+0x8e>
 8012fe2:	6864      	ldr	r4, [r4, #4]
 8012fe4:	e011      	b.n	801300a <_Link+0x66>
 8012fe6:	f7fd fe8b 	bl	8010d00 <GUI_ALLOC_LockH>
 8012fea:	4603      	mov	r3, r0
 8012fec:	a803      	add	r0, sp, #12
 8012fee:	695e      	ldr	r6, [r3, #20]
 8012ff0:	9303      	str	r3, [sp, #12]
 8012ff2:	f7fd fe97 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8012ff6:	9a01      	ldr	r2, [sp, #4]
 8012ff8:	6953      	ldr	r3, [r2, #20]
 8012ffa:	1b9b      	subs	r3, r3, r6
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	a802      	add	r0, sp, #8
 8013000:	9b02      	ldr	r3, [sp, #8]
 8013002:	dd0d      	ble.n	8013020 <_Link+0x7c>
 8013004:	685c      	ldr	r4, [r3, #4]
 8013006:	f7fd fe8d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801300a:	4620      	mov	r0, r4
 801300c:	f7fd fe78 	bl	8010d00 <GUI_ALLOC_LockH>
 8013010:	6844      	ldr	r4, [r0, #4]
 8013012:	9002      	str	r0, [sp, #8]
 8013014:	4603      	mov	r3, r0
 8013016:	4620      	mov	r0, r4
 8013018:	2c00      	cmp	r4, #0
 801301a:	d1e4      	bne.n	8012fe6 <_Link+0x42>
 801301c:	9a01      	ldr	r2, [sp, #4]
 801301e:	a802      	add	r0, sp, #8
 8013020:	6054      	str	r4, [r2, #4]
 8013022:	605d      	str	r5, [r3, #4]
 8013024:	f7fd fe7e 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8013028:	a801      	add	r0, sp, #4
 801302a:	f7fd fe7b 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801302e:	b004      	add	sp, #16
 8013030:	bd70      	pop	{r4, r5, r6, pc}
 8013032:	6863      	ldr	r3, [r4, #4]
 8013034:	6053      	str	r3, [r2, #4]
 8013036:	6065      	str	r5, [r4, #4]
 8013038:	e7bf      	b.n	8012fba <_Link+0x16>
 801303a:	bf00      	nop
 801303c:	200007b0 	.word	0x200007b0

08013040 <GUI_TIMER__GetFirstTimer>:
 8013040:	b530      	push	{r4, r5, lr}
 8013042:	4b0a      	ldr	r3, [pc, #40]	; (801306c <GUI_TIMER__GetFirstTimer+0x2c>)
 8013044:	681c      	ldr	r4, [r3, #0]
 8013046:	2300      	movs	r3, #0
 8013048:	b083      	sub	sp, #12
 801304a:	6003      	str	r3, [r0, #0]
 801304c:	b15c      	cbz	r4, 8013066 <GUI_TIMER__GetFirstTimer+0x26>
 801304e:	4605      	mov	r5, r0
 8013050:	4620      	mov	r0, r4
 8013052:	f7fd fe55 	bl	8010d00 <GUI_ALLOC_LockH>
 8013056:	ab02      	add	r3, sp, #8
 8013058:	6902      	ldr	r2, [r0, #16]
 801305a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801305e:	602a      	str	r2, [r5, #0]
 8013060:	4618      	mov	r0, r3
 8013062:	f7fd fe5f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8013066:	4620      	mov	r0, r4
 8013068:	b003      	add	sp, #12
 801306a:	bd30      	pop	{r4, r5, pc}
 801306c:	200007b0 	.word	0x200007b0

08013070 <GUI_TIMER__GetNextTimerLin>:
 8013070:	b570      	push	{r4, r5, r6, lr}
 8013072:	2300      	movs	r3, #0
 8013074:	b082      	sub	sp, #8
 8013076:	600b      	str	r3, [r1, #0]
 8013078:	b918      	cbnz	r0, 8013082 <GUI_TIMER__GetNextTimerLin+0x12>
 801307a:	4604      	mov	r4, r0
 801307c:	4620      	mov	r0, r4
 801307e:	b002      	add	sp, #8
 8013080:	bd70      	pop	{r4, r5, r6, pc}
 8013082:	460d      	mov	r5, r1
 8013084:	f7fd fe3c 	bl	8010d00 <GUI_ALLOC_LockH>
 8013088:	6884      	ldr	r4, [r0, #8]
 801308a:	9001      	str	r0, [sp, #4]
 801308c:	ae01      	add	r6, sp, #4
 801308e:	b92c      	cbnz	r4, 801309c <GUI_TIMER__GetNextTimerLin+0x2c>
 8013090:	4630      	mov	r0, r6
 8013092:	f7fd fe47 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8013096:	4620      	mov	r0, r4
 8013098:	b002      	add	sp, #8
 801309a:	bd70      	pop	{r4, r5, r6, pc}
 801309c:	4630      	mov	r0, r6
 801309e:	f7fd fe41 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80130a2:	4620      	mov	r0, r4
 80130a4:	f7fd fe2c 	bl	8010d00 <GUI_ALLOC_LockH>
 80130a8:	6903      	ldr	r3, [r0, #16]
 80130aa:	9001      	str	r0, [sp, #4]
 80130ac:	602b      	str	r3, [r5, #0]
 80130ae:	e7ef      	b.n	8013090 <GUI_TIMER__GetNextTimerLin+0x20>

080130b0 <GUI_TIMER_Create>:
 80130b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130b4:	b082      	sub	sp, #8
 80130b6:	4680      	mov	r8, r0
 80130b8:	460d      	mov	r5, r1
 80130ba:	4617      	mov	r7, r2
 80130bc:	461e      	mov	r6, r3
 80130be:	f7ff fe07 	bl	8012cd0 <GUI_Lock>
 80130c2:	201c      	movs	r0, #28
 80130c4:	f7fe f872 	bl	80111ac <GUI_ALLOC_AllocZero>
 80130c8:	4604      	mov	r4, r0
 80130ca:	b928      	cbnz	r0, 80130d8 <GUI_TIMER_Create+0x28>
 80130cc:	f7ff fdf6 	bl	8012cbc <GUI_Unlock>
 80130d0:	4620      	mov	r0, r4
 80130d2:	b002      	add	sp, #8
 80130d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130d8:	4b19      	ldr	r3, [pc, #100]	; (8013140 <GUI_TIMER_Create+0x90>)
 80130da:	4a1a      	ldr	r2, [pc, #104]	; (8013144 <GUI_TIMER_Create+0x94>)
 80130dc:	601a      	str	r2, [r3, #0]
 80130de:	f7fd fe0f 	bl	8010d00 <GUI_ALLOC_LockH>
 80130e2:	9000      	str	r0, [sp, #0]
 80130e4:	b33d      	cbz	r5, 8013136 <GUI_TIMER_Create+0x86>
 80130e6:	6145      	str	r5, [r0, #20]
 80130e8:	f8c0 8000 	str.w	r8, [r0]
 80130ec:	6107      	str	r7, [r0, #16]
 80130ee:	8186      	strh	r6, [r0, #12]
 80130f0:	4d15      	ldr	r5, [pc, #84]	; (8013148 <GUI_TIMER_Create+0x98>)
 80130f2:	4668      	mov	r0, sp
 80130f4:	f7fd fe16 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80130f8:	4620      	mov	r0, r4
 80130fa:	f7ff ff53 	bl	8012fa4 <_Link>
 80130fe:	68ab      	ldr	r3, [r5, #8]
 8013100:	b93b      	cbnz	r3, 8013112 <GUI_TIMER_Create+0x62>
 8013102:	4628      	mov	r0, r5
 8013104:	4b11      	ldr	r3, [pc, #68]	; (801314c <GUI_TIMER_Create+0x9c>)
 8013106:	f840 3f0c 	str.w	r3, [r0, #12]!
 801310a:	2301      	movs	r3, #1
 801310c:	60ab      	str	r3, [r5, #8]
 801310e:	f7fe fd97 	bl	8011c40 <GUI__RegisterExit>
 8013112:	4620      	mov	r0, r4
 8013114:	f7fd fdf4 	bl	8010d00 <GUI_ALLOC_LockH>
 8013118:	ab02      	add	r3, sp, #8
 801311a:	682a      	ldr	r2, [r5, #0]
 801311c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8013120:	6082      	str	r2, [r0, #8]
 8013122:	4618      	mov	r0, r3
 8013124:	602c      	str	r4, [r5, #0]
 8013126:	f7fd fdfd 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801312a:	f7ff fdc7 	bl	8012cbc <GUI_Unlock>
 801312e:	4620      	mov	r0, r4
 8013130:	b002      	add	sp, #8
 8013132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013136:	f7ff fea7 	bl	8012e88 <GUI_GetTime>
 801313a:	4605      	mov	r5, r0
 801313c:	9800      	ldr	r0, [sp, #0]
 801313e:	e7d2      	b.n	80130e6 <GUI_TIMER_Create+0x36>
 8013140:	20035e08 	.word	0x20035e08
 8013144:	08012f1d 	.word	0x08012f1d
 8013148:	200007b0 	.word	0x200007b0
 801314c:	08012f0d 	.word	0x08012f0d

08013150 <GUI_TIMER_Delete>:
 8013150:	b900      	cbnz	r0, 8013154 <GUI_TIMER_Delete+0x4>
 8013152:	4770      	bx	lr
 8013154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013158:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801321c <GUI_TIMER_Delete+0xcc>
 801315c:	b082      	sub	sp, #8
 801315e:	4605      	mov	r5, r0
 8013160:	f7ff fdb6 	bl	8012cd0 <GUI_Lock>
 8013164:	f8d8 4000 	ldr.w	r4, [r8]
 8013168:	42a5      	cmp	r5, r4
 801316a:	d042      	beq.n	80131f2 <GUI_TIMER_Delete+0xa2>
 801316c:	466e      	mov	r6, sp
 801316e:	b91c      	cbnz	r4, 8013178 <GUI_TIMER_Delete+0x28>
 8013170:	e017      	b.n	80131a2 <GUI_TIMER_Delete+0x52>
 8013172:	f7fd fdd7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8013176:	b1a4      	cbz	r4, 80131a2 <GUI_TIMER_Delete+0x52>
 8013178:	4620      	mov	r0, r4
 801317a:	f7fd fdc1 	bl	8010d00 <GUI_ALLOC_LockH>
 801317e:	6884      	ldr	r4, [r0, #8]
 8013180:	9000      	str	r0, [sp, #0]
 8013182:	42a5      	cmp	r5, r4
 8013184:	4630      	mov	r0, r6
 8013186:	d1f4      	bne.n	8013172 <GUI_TIMER_Delete+0x22>
 8013188:	4628      	mov	r0, r5
 801318a:	f7fd fdb9 	bl	8010d00 <GUI_ALLOC_LockH>
 801318e:	9b00      	ldr	r3, [sp, #0]
 8013190:	6882      	ldr	r2, [r0, #8]
 8013192:	9001      	str	r0, [sp, #4]
 8013194:	a801      	add	r0, sp, #4
 8013196:	609a      	str	r2, [r3, #8]
 8013198:	f7fd fdc4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801319c:	4630      	mov	r0, r6
 801319e:	f7fd fdc1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80131a2:	4628      	mov	r0, r5
 80131a4:	f7fd fdac 	bl	8010d00 <GUI_ALLOC_LockH>
 80131a8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80131ac:	9000      	str	r0, [sp, #0]
 80131ae:	42a5      	cmp	r5, r4
 80131b0:	4b1a      	ldr	r3, [pc, #104]	; (801321c <GUI_TIMER_Delete+0xcc>)
 80131b2:	d02c      	beq.n	801320e <GUI_TIMER_Delete+0xbe>
 80131b4:	af01      	add	r7, sp, #4
 80131b6:	b91c      	cbnz	r4, 80131c0 <GUI_TIMER_Delete+0x70>
 80131b8:	e010      	b.n	80131dc <GUI_TIMER_Delete+0x8c>
 80131ba:	f7fd fdb3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80131be:	b16c      	cbz	r4, 80131dc <GUI_TIMER_Delete+0x8c>
 80131c0:	4620      	mov	r0, r4
 80131c2:	f7fd fd9d 	bl	8010d00 <GUI_ALLOC_LockH>
 80131c6:	6844      	ldr	r4, [r0, #4]
 80131c8:	9001      	str	r0, [sp, #4]
 80131ca:	42a5      	cmp	r5, r4
 80131cc:	4603      	mov	r3, r0
 80131ce:	4638      	mov	r0, r7
 80131d0:	d1f3      	bne.n	80131ba <GUI_TIMER_Delete+0x6a>
 80131d2:	9a00      	ldr	r2, [sp, #0]
 80131d4:	6852      	ldr	r2, [r2, #4]
 80131d6:	605a      	str	r2, [r3, #4]
 80131d8:	f7fd fda4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80131dc:	4630      	mov	r0, r6
 80131de:	f7fd fda1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80131e2:	4628      	mov	r0, r5
 80131e4:	f7fd ff22 	bl	801102c <GUI_ALLOC_Free>
 80131e8:	f7ff fd68 	bl	8012cbc <GUI_Unlock>
 80131ec:	b002      	add	sp, #8
 80131ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131f2:	4628      	mov	r0, r5
 80131f4:	f7fd fd84 	bl	8010d00 <GUI_ALLOC_LockH>
 80131f8:	af02      	add	r7, sp, #8
 80131fa:	6883      	ldr	r3, [r0, #8]
 80131fc:	f847 0d04 	str.w	r0, [r7, #-4]!
 8013200:	4638      	mov	r0, r7
 8013202:	f8c8 3000 	str.w	r3, [r8]
 8013206:	466e      	mov	r6, sp
 8013208:	f7fd fd8c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801320c:	e7c9      	b.n	80131a2 <GUI_TIMER_Delete+0x52>
 801320e:	6842      	ldr	r2, [r0, #4]
 8013210:	605a      	str	r2, [r3, #4]
 8013212:	4630      	mov	r0, r6
 8013214:	f7fd fd86 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8013218:	e7e3      	b.n	80131e2 <GUI_TIMER_Delete+0x92>
 801321a:	bf00      	nop
 801321c:	200007b0 	.word	0x200007b0

08013220 <GUI_TIMER_SetPeriod>:
 8013220:	b900      	cbnz	r0, 8013224 <GUI_TIMER_SetPeriod+0x4>
 8013222:	4770      	bx	lr
 8013224:	b530      	push	{r4, r5, lr}
 8013226:	4604      	mov	r4, r0
 8013228:	b083      	sub	sp, #12
 801322a:	460d      	mov	r5, r1
 801322c:	f7ff fd50 	bl	8012cd0 <GUI_Lock>
 8013230:	4620      	mov	r0, r4
 8013232:	f7fd fd65 	bl	8010d00 <GUI_ALLOC_LockH>
 8013236:	ab02      	add	r3, sp, #8
 8013238:	6185      	str	r5, [r0, #24]
 801323a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801323e:	4618      	mov	r0, r3
 8013240:	f7fd fd70 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8013244:	f7ff fd3a 	bl	8012cbc <GUI_Unlock>
 8013248:	b003      	add	sp, #12
 801324a:	bd30      	pop	{r4, r5, pc}

0801324c <GUI_TIMER_Restart>:
 801324c:	b900      	cbnz	r0, 8013250 <GUI_TIMER_Restart+0x4>
 801324e:	4770      	bx	lr
 8013250:	b530      	push	{r4, r5, lr}
 8013252:	4605      	mov	r5, r0
 8013254:	b085      	sub	sp, #20
 8013256:	f7ff fd3b 	bl	8012cd0 <GUI_Lock>
 801325a:	4628      	mov	r0, r5
 801325c:	f7fd fd50 	bl	8010d00 <GUI_ALLOC_LockH>
 8013260:	9001      	str	r0, [sp, #4]
 8013262:	f7ff fe11 	bl	8012e88 <GUI_GetTime>
 8013266:	ab04      	add	r3, sp, #16
 8013268:	f853 1d0c 	ldr.w	r1, [r3, #-12]!
 801326c:	698a      	ldr	r2, [r1, #24]
 801326e:	4410      	add	r0, r2
 8013270:	6148      	str	r0, [r1, #20]
 8013272:	4618      	mov	r0, r3
 8013274:	f7fd fd56 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8013278:	4628      	mov	r0, r5
 801327a:	f7fd fd41 	bl	8010d00 <GUI_ALLOC_LockH>
 801327e:	4b13      	ldr	r3, [pc, #76]	; (80132cc <GUI_TIMER_Restart+0x80>)
 8013280:	9002      	str	r0, [sp, #8]
 8013282:	685c      	ldr	r4, [r3, #4]
 8013284:	42a5      	cmp	r5, r4
 8013286:	d01b      	beq.n	80132c0 <GUI_TIMER_Restart+0x74>
 8013288:	b184      	cbz	r4, 80132ac <GUI_TIMER_Restart+0x60>
 801328a:	4620      	mov	r0, r4
 801328c:	f7fd fd38 	bl	8010d00 <GUI_ALLOC_LockH>
 8013290:	6844      	ldr	r4, [r0, #4]
 8013292:	9003      	str	r0, [sp, #12]
 8013294:	42a5      	cmp	r5, r4
 8013296:	4603      	mov	r3, r0
 8013298:	a803      	add	r0, sp, #12
 801329a:	d002      	beq.n	80132a2 <GUI_TIMER_Restart+0x56>
 801329c:	f7fd fd42 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80132a0:	e7f2      	b.n	8013288 <GUI_TIMER_Restart+0x3c>
 80132a2:	9a02      	ldr	r2, [sp, #8]
 80132a4:	6852      	ldr	r2, [r2, #4]
 80132a6:	605a      	str	r2, [r3, #4]
 80132a8:	f7fd fd3c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80132ac:	a802      	add	r0, sp, #8
 80132ae:	f7fd fd39 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80132b2:	4628      	mov	r0, r5
 80132b4:	f7ff fe76 	bl	8012fa4 <_Link>
 80132b8:	f7ff fd00 	bl	8012cbc <GUI_Unlock>
 80132bc:	b005      	add	sp, #20
 80132be:	bd30      	pop	{r4, r5, pc}
 80132c0:	6842      	ldr	r2, [r0, #4]
 80132c2:	605a      	str	r2, [r3, #4]
 80132c4:	a802      	add	r0, sp, #8
 80132c6:	f7fd fd2d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80132ca:	e7f2      	b.n	80132b2 <GUI_TIMER_Restart+0x66>
 80132cc:	200007b0 	.word	0x200007b0

080132d0 <GUI_TIMER_GetFlag>:
 80132d0:	b530      	push	{r4, r5, lr}
 80132d2:	b083      	sub	sp, #12
 80132d4:	b918      	cbnz	r0, 80132de <GUI_TIMER_GetFlag+0xe>
 80132d6:	2401      	movs	r4, #1
 80132d8:	4620      	mov	r0, r4
 80132da:	b003      	add	sp, #12
 80132dc:	bd30      	pop	{r4, r5, pc}
 80132de:	4604      	mov	r4, r0
 80132e0:	460d      	mov	r5, r1
 80132e2:	f7ff fcf5 	bl	8012cd0 <GUI_Lock>
 80132e6:	4620      	mov	r0, r4
 80132e8:	f7fd fd0a 	bl	8010d00 <GUI_ALLOC_LockH>
 80132ec:	ab02      	add	r3, sp, #8
 80132ee:	8982      	ldrh	r2, [r0, #12]
 80132f0:	f843 0d04 	str.w	r0, [r3, #-4]!
 80132f4:	422a      	tst	r2, r5
 80132f6:	4618      	mov	r0, r3
 80132f8:	bf14      	ite	ne
 80132fa:	2401      	movne	r4, #1
 80132fc:	2400      	moveq	r4, #0
 80132fe:	f7fd fd11 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8013302:	f7ff fcdb 	bl	8012cbc <GUI_Unlock>
 8013306:	4620      	mov	r0, r4
 8013308:	b003      	add	sp, #12
 801330a:	bd30      	pop	{r4, r5, pc}

0801330c <GUI_UC__GetCharCodeInc>:
 801330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801330e:	4e08      	ldr	r6, [pc, #32]	; (8013330 <GUI_UC__GetCharCodeInc+0x24>)
 8013310:	6804      	ldr	r4, [r0, #0]
 8013312:	6833      	ldr	r3, [r6, #0]
 8013314:	4605      	mov	r5, r0
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	4620      	mov	r0, r4
 801331a:	4798      	blx	r3
 801331c:	6833      	ldr	r3, [r6, #0]
 801331e:	4607      	mov	r7, r0
 8013320:	685b      	ldr	r3, [r3, #4]
 8013322:	4620      	mov	r0, r4
 8013324:	4798      	blx	r3
 8013326:	4420      	add	r0, r4
 8013328:	6028      	str	r0, [r5, #0]
 801332a:	4638      	mov	r0, r7
 801332c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801332e:	bf00      	nop
 8013330:	20035e1c 	.word	0x20035e1c

08013334 <GUI_UC__NumChars2NumBytes>:
 8013334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013336:	b169      	cbz	r1, 8013354 <GUI_UC__NumChars2NumBytes+0x20>
 8013338:	4f07      	ldr	r7, [pc, #28]	; (8013358 <GUI_UC__NumChars2NumBytes+0x24>)
 801333a:	4605      	mov	r5, r0
 801333c:	460c      	mov	r4, r1
 801333e:	2600      	movs	r6, #0
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	4628      	mov	r0, r5
 8013344:	685b      	ldr	r3, [r3, #4]
 8013346:	4798      	blx	r3
 8013348:	3c01      	subs	r4, #1
 801334a:	4405      	add	r5, r0
 801334c:	4406      	add	r6, r0
 801334e:	d1f7      	bne.n	8013340 <GUI_UC__NumChars2NumBytes+0xc>
 8013350:	4630      	mov	r0, r6
 8013352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013354:	460e      	mov	r6, r1
 8013356:	e7fb      	b.n	8013350 <GUI_UC__NumChars2NumBytes+0x1c>
 8013358:	20035e1c 	.word	0x20035e1c

0801335c <GUI__GetNumChars>:
 801335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801335e:	4604      	mov	r4, r0
 8013360:	b188      	cbz	r0, 8013386 <GUI__GetNumChars+0x2a>
 8013362:	2600      	movs	r6, #0
 8013364:	4d09      	ldr	r5, [pc, #36]	; (801338c <GUI__GetNumChars+0x30>)
 8013366:	e000      	b.n	801336a <GUI__GetNumChars+0xe>
 8013368:	3601      	adds	r6, #1
 801336a:	682b      	ldr	r3, [r5, #0]
 801336c:	4620      	mov	r0, r4
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	4798      	blx	r3
 8013372:	682b      	ldr	r3, [r5, #0]
 8013374:	4607      	mov	r7, r0
 8013376:	685b      	ldr	r3, [r3, #4]
 8013378:	4620      	mov	r0, r4
 801337a:	4798      	blx	r3
 801337c:	4404      	add	r4, r0
 801337e:	2f00      	cmp	r7, #0
 8013380:	d1f2      	bne.n	8013368 <GUI__GetNumChars+0xc>
 8013382:	4630      	mov	r0, r6
 8013384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013386:	4606      	mov	r6, r0
 8013388:	4630      	mov	r0, r6
 801338a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801338c:	20035e1c 	.word	0x20035e1c

08013390 <_GetCharCode>:
 8013390:	7800      	ldrb	r0, [r0, #0]
 8013392:	4770      	bx	lr

08013394 <_GetCharSize>:
 8013394:	2001      	movs	r0, #1
 8013396:	4770      	bx	lr

08013398 <_CalcSizeOfChar>:
 8013398:	2001      	movs	r0, #1
 801339a:	4770      	bx	lr

0801339c <_Encode>:
 801339c:	7001      	strb	r1, [r0, #0]
 801339e:	2001      	movs	r0, #1
 80133a0:	4770      	bx	lr
 80133a2:	bf00      	nop

080133a4 <GUI_SignalEvent>:
 80133a4:	4b02      	ldr	r3, [pc, #8]	; (80133b0 <GUI_SignalEvent+0xc>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	b103      	cbz	r3, 80133ac <GUI_SignalEvent+0x8>
 80133aa:	4718      	bx	r3
 80133ac:	4770      	bx	lr
 80133ae:	bf00      	nop
 80133b0:	200007c4 	.word	0x200007c4

080133b4 <GUI__MixColorsBulk>:
 80133b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b8:	b087      	sub	sp, #28
 80133ba:	4692      	mov	sl, r2
 80133bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80133be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133c0:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
 80133c4:	9001      	str	r0, [sp, #4]
 80133c6:	9102      	str	r1, [sp, #8]
 80133c8:	2a00      	cmp	r2, #0
 80133ca:	d037      	beq.n	801343c <GUI__MixColorsBulk+0x88>
 80133cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80133ce:	f8df b074 	ldr.w	fp, [pc, #116]	; 8013444 <GUI__MixColorsBulk+0x90>
 80133d2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8013448 <GUI__MixColorsBulk+0x94>
 80133d6:	0092      	lsls	r2, r2, #2
 80133d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80133dc:	9304      	str	r3, [sp, #16]
 80133de:	2300      	movs	r3, #0
 80133e0:	9205      	str	r2, [sp, #20]
 80133e2:	9303      	str	r3, [sp, #12]
 80133e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80133e6:	9e02      	ldr	r6, [sp, #8]
 80133e8:	9d01      	ldr	r5, [sp, #4]
 80133ea:	4657      	mov	r7, sl
 80133ec:	f855 0b04 	ldr.w	r0, [r5], #4
 80133f0:	f8db 3000 	ldr.w	r3, [fp]
 80133f4:	f856 1b04 	ldr.w	r1, [r6], #4
 80133f8:	0e02      	lsrs	r2, r0, #24
 80133fa:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80133fe:	fb09 f202 	mul.w	r2, r9, r2
 8013402:	fba8 e202 	umull	lr, r2, r8, r2
 8013406:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 801340a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801340e:	4798      	blx	r3
 8013410:	3c01      	subs	r4, #1
 8013412:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8013416:	f847 0b04 	str.w	r0, [r7], #4
 801341a:	d1e7      	bne.n	80133ec <GUI__MixColorsBulk+0x38>
 801341c:	9a01      	ldr	r2, [sp, #4]
 801341e:	9905      	ldr	r1, [sp, #20]
 8013420:	9b03      	ldr	r3, [sp, #12]
 8013422:	4610      	mov	r0, r2
 8013424:	4408      	add	r0, r1
 8013426:	9a02      	ldr	r2, [sp, #8]
 8013428:	9001      	str	r0, [sp, #4]
 801342a:	448a      	add	sl, r1
 801342c:	9904      	ldr	r1, [sp, #16]
 801342e:	440a      	add	r2, r1
 8013430:	9202      	str	r2, [sp, #8]
 8013432:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013434:	3301      	adds	r3, #1
 8013436:	429a      	cmp	r2, r3
 8013438:	9303      	str	r3, [sp, #12]
 801343a:	d1d3      	bne.n	80133e4 <GUI__MixColorsBulk+0x30>
 801343c:	b007      	add	sp, #28
 801343e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013442:	bf00      	nop
 8013444:	20000034 	.word	0x20000034
 8013448:	80808081 	.word	0x80808081

0801344c <GUI__MixColors>:
 801344c:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 8013450:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8013454:	b4f0      	push	{r4, r5, r6, r7}
 8013456:	0e0b      	lsrs	r3, r1, #24
 8013458:	ea4f 6410 	mov.w	r4, r0, lsr #24
 801345c:	4b13      	ldr	r3, [pc, #76]	; (80134ac <GUI__MixColors+0x60>)
 801345e:	fb02 f204 	mul.w	r2, r2, r4
 8013462:	bf08      	it	eq
 8013464:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 8013468:	fba3 3202 	umull	r3, r2, r3, r2
 801346c:	09d2      	lsrs	r2, r2, #7
 801346e:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8013472:	0a0d      	lsrs	r5, r1, #8
 8013474:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
 8013478:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801347c:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8013480:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8013484:	fb02 f106 	mul.w	r1, r2, r6
 8013488:	fb07 f005 	mul.w	r0, r7, r5
 801348c:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8013490:	fb07 1103 	mla	r1, r7, r3, r1
 8013494:	fb02 0004 	mla	r0, r2, r4, r0
 8013498:	0a09      	lsrs	r1, r1, #8
 801349a:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 801349e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80134a2:	4308      	orrs	r0, r1
 80134a4:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 80134a8:	bcf0      	pop	{r4, r5, r6, r7}
 80134aa:	4770      	bx	lr
 80134ac:	80808081 	.word	0x80808081

080134b0 <_OnExit>:
 80134b0:	b510      	push	{r4, lr}
 80134b2:	4c08      	ldr	r4, [pc, #32]	; (80134d4 <_OnExit+0x24>)
 80134b4:	6820      	ldr	r0, [r4, #0]
 80134b6:	f7fd fae9 	bl	8010a8c <GUI_ALLOC_FreeFixedBlock>
 80134ba:	6860      	ldr	r0, [r4, #4]
 80134bc:	f7fd fae6 	bl	8010a8c <GUI_ALLOC_FreeFixedBlock>
 80134c0:	68a0      	ldr	r0, [r4, #8]
 80134c2:	f7fd fae3 	bl	8010a8c <GUI_ALLOC_FreeFixedBlock>
 80134c6:	2300      	movs	r3, #0
 80134c8:	60a3      	str	r3, [r4, #8]
 80134ca:	6063      	str	r3, [r4, #4]
 80134cc:	6023      	str	r3, [r4, #0]
 80134ce:	60e3      	str	r3, [r4, #12]
 80134d0:	6123      	str	r3, [r4, #16]
 80134d2:	bd10      	pop	{r4, pc}
 80134d4:	200007cc 	.word	0x200007cc

080134d8 <GUI__DoAlphaBlending>:
 80134d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134dc:	4c98      	ldr	r4, [pc, #608]	; (8013740 <GUI__DoAlphaBlending+0x268>)
 80134de:	b08f      	sub	sp, #60	; 0x3c
 80134e0:	461d      	mov	r5, r3
 80134e2:	6924      	ldr	r4, [r4, #16]
 80134e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80134e6:	9004      	str	r0, [sp, #16]
 80134e8:	2600      	movs	r6, #0
 80134ea:	9106      	str	r1, [sp, #24]
 80134ec:	4693      	mov	fp, r2
 80134ee:	601e      	str	r6, [r3, #0]
 80134f0:	2c00      	cmp	r4, #0
 80134f2:	f000 80f5 	beq.w	80136e0 <GUI__DoAlphaBlending+0x208>
 80134f6:	4b92      	ldr	r3, [pc, #584]	; (8013740 <GUI__DoAlphaBlending+0x268>)
 80134f8:	68de      	ldr	r6, [r3, #12]
 80134fa:	461c      	mov	r4, r3
 80134fc:	b92e      	cbnz	r6, 801350a <GUI__DoAlphaBlending+0x32>
 80134fe:	4b91      	ldr	r3, [pc, #580]	; (8013744 <GUI__DoAlphaBlending+0x26c>)
 8013500:	681e      	ldr	r6, [r3, #0]
 8013502:	60e6      	str	r6, [r4, #12]
 8013504:	2e00      	cmp	r6, #0
 8013506:	f000 80f5 	beq.w	80136f4 <GUI__DoAlphaBlending+0x21c>
 801350a:	4b8d      	ldr	r3, [pc, #564]	; (8013740 <GUI__DoAlphaBlending+0x268>)
 801350c:	4f8c      	ldr	r7, [pc, #560]	; (8013740 <GUI__DoAlphaBlending+0x268>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	9303      	str	r3, [sp, #12]
 8013512:	2b00      	cmp	r3, #0
 8013514:	f000 8104 	beq.w	8013720 <GUI__DoAlphaBlending+0x248>
 8013518:	4b89      	ldr	r3, [pc, #548]	; (8013740 <GUI__DoAlphaBlending+0x268>)
 801351a:	4c89      	ldr	r4, [pc, #548]	; (8013740 <GUI__DoAlphaBlending+0x268>)
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	9302      	str	r3, [sp, #8]
 8013520:	2b00      	cmp	r3, #0
 8013522:	f000 80ef 	beq.w	8013704 <GUI__DoAlphaBlending+0x22c>
 8013526:	4a88      	ldr	r2, [pc, #544]	; (8013748 <GUI__DoAlphaBlending+0x270>)
 8013528:	4b88      	ldr	r3, [pc, #544]	; (801374c <GUI__DoAlphaBlending+0x274>)
 801352a:	6812      	ldr	r2, [r2, #0]
 801352c:	7c50      	ldrb	r0, [r2, #17]
 801352e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013532:	9308      	str	r3, [sp, #32]
 8013534:	691b      	ldr	r3, [r3, #16]
 8013536:	930d      	str	r3, [sp, #52]	; 0x34
 8013538:	f001 fd2e 	bl	8014f98 <GUI_GetBitsPerPixelEx>
 801353c:	4b82      	ldr	r3, [pc, #520]	; (8013748 <GUI__DoAlphaBlending+0x270>)
 801353e:	9005      	str	r0, [sp, #20]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	7c58      	ldrb	r0, [r3, #17]
 8013544:	f001 fd42 	bl	8014fcc <GUI_GetpfIndex2ColorEx>
 8013548:	4b81      	ldr	r3, [pc, #516]	; (8013750 <GUI__DoAlphaBlending+0x278>)
 801354a:	900b      	str	r0, [sp, #44]	; 0x2c
 801354c:	42ae      	cmp	r6, r5
 801354e:	bfa8      	it	ge
 8013550:	462e      	movge	r6, r5
 8013552:	4298      	cmp	r0, r3
 8013554:	f000 80d3 	beq.w	80136fe <GUI__DoAlphaBlending+0x226>
 8013558:	4b7e      	ldr	r3, [pc, #504]	; (8013754 <GUI__DoAlphaBlending+0x27c>)
 801355a:	1ac3      	subs	r3, r0, r3
 801355c:	bf18      	it	ne
 801355e:	2301      	movne	r3, #1
 8013560:	930a      	str	r3, [sp, #40]	; 0x28
 8013562:	9b04      	ldr	r3, [sp, #16]
 8013564:	4433      	add	r3, r6
 8013566:	930c      	str	r3, [sp, #48]	; 0x30
 8013568:	2500      	movs	r5, #0
 801356a:	3b01      	subs	r3, #1
 801356c:	9309      	str	r3, [sp, #36]	; 0x24
 801356e:	462c      	mov	r4, r5
 8013570:	46b2      	mov	sl, r6
 8013572:	46d8      	mov	r8, fp
 8013574:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013576:	f858 0b04 	ldr.w	r0, [r8], #4
 801357a:	4798      	blx	r3
 801357c:	ea5f 6910 	movs.w	r9, r0, lsr #24
 8013580:	4607      	mov	r7, r0
 8013582:	d048      	beq.n	8013616 <GUI__DoAlphaBlending+0x13e>
 8013584:	2c00      	cmp	r4, #0
 8013586:	d12c      	bne.n	80135e2 <GUI__DoAlphaBlending+0x10a>
 8013588:	4b6f      	ldr	r3, [pc, #444]	; (8013748 <GUI__DoAlphaBlending+0x270>)
 801358a:	9a04      	ldr	r2, [sp, #16]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013592:	1956      	adds	r6, r2, r5
 8013594:	42b3      	cmp	r3, r6
 8013596:	dd5c      	ble.n	8013652 <GUI__DoAlphaBlending+0x17a>
 8013598:	1b9a      	subs	r2, r3, r6
 801359a:	9207      	str	r2, [sp, #28]
 801359c:	4614      	mov	r4, r2
 801359e:	461e      	mov	r6, r3
 80135a0:	9b03      	ldr	r3, [sp, #12]
 80135a2:	9906      	ldr	r1, [sp, #24]
 80135a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135a6:	442c      	add	r4, r5
 80135a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80135ac:	9b08      	ldr	r3, [sp, #32]
 80135ae:	9301      	str	r3, [sp, #4]
 80135b0:	9400      	str	r4, [sp, #0]
 80135b2:	460b      	mov	r3, r1
 80135b4:	4630      	mov	r0, r6
 80135b6:	f002 fafd 	bl	8015bb4 <GUI_ReadRectEx>
 80135ba:	9b05      	ldr	r3, [sp, #20]
 80135bc:	2b17      	cmp	r3, #23
 80135be:	f340 8085 	ble.w	80136cc <GUI__DoAlphaBlending+0x1f4>
 80135c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d046      	beq.n	8013656 <GUI__DoAlphaBlending+0x17e>
 80135c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135ca:	9507      	str	r5, [sp, #28]
 80135cc:	1b9e      	subs	r6, r3, r6
 80135ce:	4635      	mov	r5, r6
 80135d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80135d2:	6820      	ldr	r0, [r4, #0]
 80135d4:	47b0      	blx	r6
 80135d6:	3d01      	subs	r5, #1
 80135d8:	f844 0b04 	str.w	r0, [r4], #4
 80135dc:	d1f9      	bne.n	80135d2 <GUI__DoAlphaBlending+0xfa>
 80135de:	9d07      	ldr	r5, [sp, #28]
 80135e0:	2401      	movs	r4, #1
 80135e2:	4b57      	ldr	r3, [pc, #348]	; (8013740 <GUI__DoAlphaBlending+0x268>)
 80135e4:	69db      	ldr	r3, [r3, #28]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d13a      	bne.n	8013660 <GUI__DoAlphaBlending+0x188>
 80135ea:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80135ee:	fa5f f289 	uxtb.w	r2, r9
 80135f2:	d11a      	bne.n	801362a <GUI__DoAlphaBlending+0x152>
 80135f4:	9b03      	ldr	r3, [sp, #12]
 80135f6:	9a02      	ldr	r2, [sp, #8]
 80135f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80135fc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8013600:	f1ba 0a01 	subs.w	sl, sl, #1
 8013604:	f105 0501 	add.w	r5, r5, #1
 8013608:	46c3      	mov	fp, r8
 801360a:	d1b2      	bne.n	8013572 <GUI__DoAlphaBlending+0x9a>
 801360c:	9c02      	ldr	r4, [sp, #8]
 801360e:	4620      	mov	r0, r4
 8013610:	b00f      	add	sp, #60	; 0x3c
 8013612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013616:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013618:	9a02      	ldr	r2, [sp, #8]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
 8013620:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013622:	f043 0301 	orr.w	r3, r3, #1
 8013626:	6013      	str	r3, [r2, #0]
 8013628:	e7ea      	b.n	8013600 <GUI__DoAlphaBlending+0x128>
 801362a:	9903      	ldr	r1, [sp, #12]
 801362c:	4b4a      	ldr	r3, [pc, #296]	; (8013758 <GUI__DoAlphaBlending+0x280>)
 801362e:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	43d2      	mvns	r2, r2
 8013636:	b2d2      	uxtb	r2, r2
 8013638:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 801363c:	4798      	blx	r3
 801363e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013640:	9a02      	ldr	r2, [sp, #8]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
 8013648:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801364a:	f043 0301 	orr.w	r3, r3, #1
 801364e:	6013      	str	r3, [r2, #0]
 8013650:	e7d6      	b.n	8013600 <GUI__DoAlphaBlending+0x128>
 8013652:	9407      	str	r4, [sp, #28]
 8013654:	e7a4      	b.n	80135a0 <GUI__DoAlphaBlending+0xc8>
 8013656:	4b3a      	ldr	r3, [pc, #232]	; (8013740 <GUI__DoAlphaBlending+0x268>)
 8013658:	69db      	ldr	r3, [r3, #28]
 801365a:	2401      	movs	r4, #1
 801365c:	2b00      	cmp	r3, #0
 801365e:	d0c4      	beq.n	80135ea <GUI__DoAlphaBlending+0x112>
 8013660:	461f      	mov	r7, r3
 8013662:	9b03      	ldr	r3, [sp, #12]
 8013664:	00ad      	lsls	r5, r5, #2
 8013666:	442b      	add	r3, r5
 8013668:	461c      	mov	r4, r3
 801366a:	9b02      	ldr	r3, [sp, #8]
 801366c:	441d      	add	r5, r3
 801366e:	4621      	mov	r1, r4
 8013670:	462a      	mov	r2, r5
 8013672:	4653      	mov	r3, sl
 8013674:	4658      	mov	r0, fp
 8013676:	47b8      	blx	r7
 8013678:	4656      	mov	r6, sl
 801367a:	f1ab 0104 	sub.w	r1, fp, #4
 801367e:	e00b      	b.n	8013698 <GUI__DoAlphaBlending+0x1c0>
 8013680:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013684:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8013688:	bf08      	it	eq
 801368a:	602a      	streq	r2, [r5, #0]
 801368c:	3e01      	subs	r6, #1
 801368e:	f104 0404 	add.w	r4, r4, #4
 8013692:	f105 0504 	add.w	r5, r5, #4
 8013696:	d00e      	beq.n	80136b6 <GUI__DoAlphaBlending+0x1de>
 8013698:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801369c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80136a0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80136a4:	6823      	ldr	r3, [r4, #0]
 80136a6:	d1eb      	bne.n	8013680 <GUI__DoAlphaBlending+0x1a8>
 80136a8:	3e01      	subs	r6, #1
 80136aa:	602b      	str	r3, [r5, #0]
 80136ac:	f104 0404 	add.w	r4, r4, #4
 80136b0:	f105 0504 	add.w	r5, r5, #4
 80136b4:	d1f0      	bne.n	8013698 <GUI__DoAlphaBlending+0x1c0>
 80136b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80136b8:	9c02      	ldr	r4, [sp, #8]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80136be:	f043 0301 	orr.w	r3, r3, #1
 80136c2:	4620      	mov	r0, r4
 80136c4:	6013      	str	r3, [r2, #0]
 80136c6:	b00f      	add	sp, #60	; 0x3c
 80136c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136cc:	461a      	mov	r2, r3
 80136ce:	9b07      	ldr	r3, [sp, #28]
 80136d0:	4620      	mov	r0, r4
 80136d2:	ebc3 010a 	rsb	r1, r3, sl
 80136d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136d8:	f000 fa24 	bl	8013b24 <GUI__ExpandPixelIndicesEx>
 80136dc:	2401      	movs	r4, #1
 80136de:	e780      	b.n	80135e2 <GUI__DoAlphaBlending+0x10a>
 80136e0:	4817      	ldr	r0, [pc, #92]	; (8013740 <GUI__DoAlphaBlending+0x268>)
 80136e2:	4b1e      	ldr	r3, [pc, #120]	; (801375c <GUI__DoAlphaBlending+0x284>)
 80136e4:	4a16      	ldr	r2, [pc, #88]	; (8013740 <GUI__DoAlphaBlending+0x268>)
 80136e6:	f840 3f14 	str.w	r3, [r0, #20]!
 80136ea:	2301      	movs	r3, #1
 80136ec:	6113      	str	r3, [r2, #16]
 80136ee:	f7fe faa7 	bl	8011c40 <GUI__RegisterExit>
 80136f2:	e700      	b.n	80134f6 <GUI__DoAlphaBlending+0x1e>
 80136f4:	f001 fcae 	bl	8015054 <LCD_GetVXSizeMax>
 80136f8:	4606      	mov	r6, r0
 80136fa:	60e0      	str	r0, [r4, #12]
 80136fc:	e705      	b.n	801350a <GUI__DoAlphaBlending+0x32>
 80136fe:	2300      	movs	r3, #0
 8013700:	930a      	str	r3, [sp, #40]	; 0x28
 8013702:	e72e      	b.n	8013562 <GUI__DoAlphaBlending+0x8a>
 8013704:	68e0      	ldr	r0, [r4, #12]
 8013706:	0080      	lsls	r0, r0, #2
 8013708:	f7fd f9ca 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 801370c:	9002      	str	r0, [sp, #8]
 801370e:	6060      	str	r0, [r4, #4]
 8013710:	2800      	cmp	r0, #0
 8013712:	f47f af08 	bne.w	8013526 <GUI__DoAlphaBlending+0x4e>
 8013716:	2400      	movs	r4, #0
 8013718:	4620      	mov	r0, r4
 801371a:	b00f      	add	sp, #60	; 0x3c
 801371c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013720:	00b0      	lsls	r0, r6, #2
 8013722:	f7fd f9bd 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8013726:	6038      	str	r0, [r7, #0]
 8013728:	b108      	cbz	r0, 801372e <GUI__DoAlphaBlending+0x256>
 801372a:	9003      	str	r0, [sp, #12]
 801372c:	e6f4      	b.n	8013518 <GUI__DoAlphaBlending+0x40>
 801372e:	687c      	ldr	r4, [r7, #4]
 8013730:	2c00      	cmp	r4, #0
 8013732:	d1f0      	bne.n	8013716 <GUI__DoAlphaBlending+0x23e>
 8013734:	68f8      	ldr	r0, [r7, #12]
 8013736:	0080      	lsls	r0, r0, #2
 8013738:	f7fd f9b2 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 801373c:	6078      	str	r0, [r7, #4]
 801373e:	e766      	b.n	801360e <GUI__DoAlphaBlending+0x136>
 8013740:	200007cc 	.word	0x200007cc
 8013744:	20035df0 	.word	0x20035df0
 8013748:	20000014 	.word	0x20000014
 801374c:	20035df8 	.word	0x20035df8
 8013750:	0801e949 	.word	0x0801e949
 8013754:	0801e94d 	.word	0x0801e94d
 8013758:	20000034 	.word	0x20000034
 801375c:	080134b1 	.word	0x080134b1

08013760 <GUI__GetAlphaBuffer>:
 8013760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013764:	4c2d      	ldr	r4, [pc, #180]	; (801381c <GUI__GetAlphaBuffer+0xbc>)
 8013766:	6927      	ldr	r7, [r4, #16]
 8013768:	b083      	sub	sp, #12
 801376a:	4605      	mov	r5, r0
 801376c:	4688      	mov	r8, r1
 801376e:	4616      	mov	r6, r2
 8013770:	4699      	mov	r9, r3
 8013772:	b31f      	cbz	r7, 80137bc <GUI__GetAlphaBuffer+0x5c>
 8013774:	68e0      	ldr	r0, [r4, #12]
 8013776:	4f29      	ldr	r7, [pc, #164]	; (801381c <GUI__GetAlphaBuffer+0xbc>)
 8013778:	b918      	cbnz	r0, 8013782 <GUI__GetAlphaBuffer+0x22>
 801377a:	4b29      	ldr	r3, [pc, #164]	; (8013820 <GUI__GetAlphaBuffer+0xc0>)
 801377c:	6818      	ldr	r0, [r3, #0]
 801377e:	60f8      	str	r0, [r7, #12]
 8013780:	b328      	cbz	r0, 80137ce <GUI__GetAlphaBuffer+0x6e>
 8013782:	f1b9 0f00 	cmp.w	r9, #0
 8013786:	d001      	beq.n	801378c <GUI__GetAlphaBuffer+0x2c>
 8013788:	f8c9 0000 	str.w	r0, [r9]
 801378c:	b31d      	cbz	r5, 80137d6 <GUI__GetAlphaBuffer+0x76>
 801378e:	6823      	ldr	r3, [r4, #0]
 8013790:	4a22      	ldr	r2, [pc, #136]	; (801381c <GUI__GetAlphaBuffer+0xbc>)
 8013792:	2700      	movs	r7, #0
 8013794:	2b00      	cmp	r3, #0
 8013796:	d036      	beq.n	8013806 <GUI__GetAlphaBuffer+0xa6>
 8013798:	602b      	str	r3, [r5, #0]
 801379a:	f1b8 0f00 	cmp.w	r8, #0
 801379e:	d004      	beq.n	80137aa <GUI__GetAlphaBuffer+0x4a>
 80137a0:	6865      	ldr	r5, [r4, #4]
 80137a2:	4b1e      	ldr	r3, [pc, #120]	; (801381c <GUI__GetAlphaBuffer+0xbc>)
 80137a4:	b31d      	cbz	r5, 80137ee <GUI__GetAlphaBuffer+0x8e>
 80137a6:	f8c8 5000 	str.w	r5, [r8]
 80137aa:	b11e      	cbz	r6, 80137b4 <GUI__GetAlphaBuffer+0x54>
 80137ac:	68a4      	ldr	r4, [r4, #8]
 80137ae:	4d1b      	ldr	r5, [pc, #108]	; (801381c <GUI__GetAlphaBuffer+0xbc>)
 80137b0:	b19c      	cbz	r4, 80137da <GUI__GetAlphaBuffer+0x7a>
 80137b2:	6034      	str	r4, [r6, #0]
 80137b4:	4638      	mov	r0, r7
 80137b6:	b003      	add	sp, #12
 80137b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137bc:	4620      	mov	r0, r4
 80137be:	4b19      	ldr	r3, [pc, #100]	; (8013824 <GUI__GetAlphaBuffer+0xc4>)
 80137c0:	f840 3f14 	str.w	r3, [r0, #20]!
 80137c4:	2301      	movs	r3, #1
 80137c6:	6123      	str	r3, [r4, #16]
 80137c8:	f7fe fa3a 	bl	8011c40 <GUI__RegisterExit>
 80137cc:	e7d2      	b.n	8013774 <GUI__GetAlphaBuffer+0x14>
 80137ce:	f001 fc41 	bl	8015054 <LCD_GetVXSizeMax>
 80137d2:	60f8      	str	r0, [r7, #12]
 80137d4:	e7d5      	b.n	8013782 <GUI__GetAlphaBuffer+0x22>
 80137d6:	462f      	mov	r7, r5
 80137d8:	e7df      	b.n	801379a <GUI__GetAlphaBuffer+0x3a>
 80137da:	68e8      	ldr	r0, [r5, #12]
 80137dc:	0080      	lsls	r0, r0, #2
 80137de:	f7fd f95f 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 80137e2:	2800      	cmp	r0, #0
 80137e4:	bf0c      	ite	eq
 80137e6:	2701      	moveq	r7, #1
 80137e8:	4604      	movne	r4, r0
 80137ea:	60a8      	str	r0, [r5, #8]
 80137ec:	e7e1      	b.n	80137b2 <GUI__GetAlphaBuffer+0x52>
 80137ee:	68d8      	ldr	r0, [r3, #12]
 80137f0:	9301      	str	r3, [sp, #4]
 80137f2:	0080      	lsls	r0, r0, #2
 80137f4:	f7fd f954 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 80137f8:	9b01      	ldr	r3, [sp, #4]
 80137fa:	2800      	cmp	r0, #0
 80137fc:	bf0c      	ite	eq
 80137fe:	2701      	moveq	r7, #1
 8013800:	4605      	movne	r5, r0
 8013802:	6058      	str	r0, [r3, #4]
 8013804:	e7cf      	b.n	80137a6 <GUI__GetAlphaBuffer+0x46>
 8013806:	0080      	lsls	r0, r0, #2
 8013808:	9201      	str	r2, [sp, #4]
 801380a:	f7fd f949 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 801380e:	9a01      	ldr	r2, [sp, #4]
 8013810:	fab0 f780 	clz	r7, r0
 8013814:	6010      	str	r0, [r2, #0]
 8013816:	097f      	lsrs	r7, r7, #5
 8013818:	4603      	mov	r3, r0
 801381a:	e7bd      	b.n	8013798 <GUI__GetAlphaBuffer+0x38>
 801381c:	200007cc 	.word	0x200007cc
 8013820:	20035df0 	.word	0x20035df0
 8013824:	080134b1 	.word	0x080134b1

08013828 <GUI__AllocAlphaBuffer>:
 8013828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801382a:	b083      	sub	sp, #12
 801382c:	b9c0      	cbnz	r0, 8013860 <GUI__AllocAlphaBuffer+0x38>
 801382e:	4c22      	ldr	r4, [pc, #136]	; (80138b8 <GUI__AllocAlphaBuffer+0x90>)
 8013830:	6923      	ldr	r3, [r4, #16]
 8013832:	4605      	mov	r5, r0
 8013834:	b1cb      	cbz	r3, 801386a <GUI__AllocAlphaBuffer+0x42>
 8013836:	68e0      	ldr	r0, [r4, #12]
 8013838:	4e1f      	ldr	r6, [pc, #124]	; (80138b8 <GUI__AllocAlphaBuffer+0x90>)
 801383a:	b918      	cbnz	r0, 8013844 <GUI__AllocAlphaBuffer+0x1c>
 801383c:	4b1f      	ldr	r3, [pc, #124]	; (80138bc <GUI__AllocAlphaBuffer+0x94>)
 801383e:	6818      	ldr	r0, [r3, #0]
 8013840:	60f0      	str	r0, [r6, #12]
 8013842:	b1d8      	cbz	r0, 801387c <GUI__AllocAlphaBuffer+0x54>
 8013844:	6823      	ldr	r3, [r4, #0]
 8013846:	4f1c      	ldr	r7, [pc, #112]	; (80138b8 <GUI__AllocAlphaBuffer+0x90>)
 8013848:	2600      	movs	r6, #0
 801384a:	b323      	cbz	r3, 8013896 <GUI__AllocAlphaBuffer+0x6e>
 801384c:	6863      	ldr	r3, [r4, #4]
 801384e:	4f1a      	ldr	r7, [pc, #104]	; (80138b8 <GUI__AllocAlphaBuffer+0x90>)
 8013850:	b1c3      	cbz	r3, 8013884 <GUI__AllocAlphaBuffer+0x5c>
 8013852:	b115      	cbz	r5, 801385a <GUI__AllocAlphaBuffer+0x32>
 8013854:	68a3      	ldr	r3, [r4, #8]
 8013856:	4c18      	ldr	r4, [pc, #96]	; (80138b8 <GUI__AllocAlphaBuffer+0x90>)
 8013858:	b32b      	cbz	r3, 80138a6 <GUI__AllocAlphaBuffer+0x7e>
 801385a:	4630      	mov	r0, r6
 801385c:	b003      	add	sp, #12
 801385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013860:	4c15      	ldr	r4, [pc, #84]	; (80138b8 <GUI__AllocAlphaBuffer+0x90>)
 8013862:	6923      	ldr	r3, [r4, #16]
 8013864:	ad01      	add	r5, sp, #4
 8013866:	2b00      	cmp	r3, #0
 8013868:	d1e5      	bne.n	8013836 <GUI__AllocAlphaBuffer+0xe>
 801386a:	4620      	mov	r0, r4
 801386c:	4b14      	ldr	r3, [pc, #80]	; (80138c0 <GUI__AllocAlphaBuffer+0x98>)
 801386e:	f840 3f14 	str.w	r3, [r0, #20]!
 8013872:	2301      	movs	r3, #1
 8013874:	6123      	str	r3, [r4, #16]
 8013876:	f7fe f9e3 	bl	8011c40 <GUI__RegisterExit>
 801387a:	e7dc      	b.n	8013836 <GUI__AllocAlphaBuffer+0xe>
 801387c:	f001 fbea 	bl	8015054 <LCD_GetVXSizeMax>
 8013880:	60f0      	str	r0, [r6, #12]
 8013882:	e7df      	b.n	8013844 <GUI__AllocAlphaBuffer+0x1c>
 8013884:	68f8      	ldr	r0, [r7, #12]
 8013886:	0080      	lsls	r0, r0, #2
 8013888:	f7fd f90a 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 801388c:	2800      	cmp	r0, #0
 801388e:	bf08      	it	eq
 8013890:	2601      	moveq	r6, #1
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	e7dd      	b.n	8013852 <GUI__AllocAlphaBuffer+0x2a>
 8013896:	0080      	lsls	r0, r0, #2
 8013898:	f7fd f902 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 801389c:	fab0 f680 	clz	r6, r0
 80138a0:	6038      	str	r0, [r7, #0]
 80138a2:	0976      	lsrs	r6, r6, #5
 80138a4:	e7d2      	b.n	801384c <GUI__AllocAlphaBuffer+0x24>
 80138a6:	68e0      	ldr	r0, [r4, #12]
 80138a8:	0080      	lsls	r0, r0, #2
 80138aa:	f7fd f8f9 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 80138ae:	2800      	cmp	r0, #0
 80138b0:	bf08      	it	eq
 80138b2:	2601      	moveq	r6, #1
 80138b4:	60a0      	str	r0, [r4, #8]
 80138b6:	e7d0      	b.n	801385a <GUI__AllocAlphaBuffer+0x32>
 80138b8:	200007cc 	.word	0x200007cc
 80138bc:	20035df0 	.word	0x20035df0
 80138c0:	080134b1 	.word	0x080134b1

080138c4 <GUI__DrawBitmap16bpp>:
 80138c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c8:	b091      	sub	sp, #68	; 0x44
 80138ca:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80138cc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80138ce:	9209      	str	r2, [sp, #36]	; 0x24
 80138d0:	4335      	orrs	r5, r6
 80138d2:	9306      	str	r3, [sp, #24]
 80138d4:	460e      	mov	r6, r1
 80138d6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80138d8:	900a      	str	r0, [sp, #40]	; 0x28
 80138da:	f7fd fde7 	bl	80114ac <GUI_GetColor>
 80138de:	900d      	str	r0, [sp, #52]	; 0x34
 80138e0:	f001 fa80 	bl	8014de4 <LCD_GetColorIndex>
 80138e4:	2d01      	cmp	r5, #1
 80138e6:	d051      	beq.n	801398c <GUI__DrawBitmap16bpp+0xc8>
 80138e8:	9b06      	ldr	r3, [sp, #24]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	dd44      	ble.n	8013978 <GUI__DrawBitmap16bpp+0xb4>
 80138ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138f0:	005b      	lsls	r3, r3, #1
 80138f2:	9308      	str	r3, [sp, #32]
 80138f4:	4b8a      	ldr	r3, [pc, #552]	; (8013b20 <GUI__DrawBitmap16bpp+0x25c>)
 80138f6:	9307      	str	r3, [sp, #28]
 80138f8:	4681      	mov	r9, r0
 80138fa:	f04f 0a00 	mov.w	sl, #0
 80138fe:	9b07      	ldr	r3, [sp, #28]
 8013900:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	eb02 0b06 	add.w	fp, r2, r6
 8013908:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801390c:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013910:	4297      	cmp	r7, r2
 8013912:	db37      	blt.n	8013984 <GUI__DrawBitmap16bpp+0xc0>
 8013914:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013918:	429e      	cmp	r6, r3
 801391a:	dc33      	bgt.n	8013984 <GUI__DrawBitmap16bpp+0xc0>
 801391c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801391e:	2b00      	cmp	r3, #0
 8013920:	9b08      	ldr	r3, [sp, #32]
 8013922:	eb04 0803 	add.w	r8, r4, r3
 8013926:	dd20      	ble.n	801396a <GUI__DrawBitmap16bpp+0xa6>
 8013928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801392a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 801392e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8013932:	4693      	mov	fp, r2
 8013934:	e000      	b.n	8013938 <GUI__DrawBitmap16bpp+0x74>
 8013936:	46ab      	mov	fp, r5
 8013938:	f834 ab02 	ldrh.w	sl, [r4], #2
 801393c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801393e:	45ca      	cmp	sl, r9
 8013940:	eb03 050b 	add.w	r5, r3, fp
 8013944:	4650      	mov	r0, sl
 8013946:	d004      	beq.n	8013952 <GUI__DrawBitmap16bpp+0x8e>
 8013948:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801394a:	4798      	blx	r3
 801394c:	f001 f8d8 	bl	8014b00 <LCD_SetColor>
 8013950:	46d1      	mov	r9, sl
 8013952:	4658      	mov	r0, fp
 8013954:	463b      	mov	r3, r7
 8013956:	1e6a      	subs	r2, r5, #1
 8013958:	4631      	mov	r1, r6
 801395a:	f000 fd3d 	bl	80143d8 <LCD_FillRect>
 801395e:	45a0      	cmp	r8, r4
 8013960:	d1e9      	bne.n	8013936 <GUI__DrawBitmap16bpp+0x72>
 8013962:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8013966:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 801396a:	9b06      	ldr	r3, [sp, #24]
 801396c:	f10a 0a01 	add.w	sl, sl, #1
 8013970:	4553      	cmp	r3, sl
 8013972:	4644      	mov	r4, r8
 8013974:	465e      	mov	r6, fp
 8013976:	d1c2      	bne.n	80138fe <GUI__DrawBitmap16bpp+0x3a>
 8013978:	980d      	ldr	r0, [sp, #52]	; 0x34
 801397a:	f7fd ff1f 	bl	80117bc <GUI_SetColor>
 801397e:	b011      	add	sp, #68	; 0x44
 8013980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013984:	9b08      	ldr	r3, [sp, #32]
 8013986:	eb04 0803 	add.w	r8, r4, r3
 801398a:	e7ee      	b.n	801396a <GUI__DrawBitmap16bpp+0xa6>
 801398c:	4b64      	ldr	r3, [pc, #400]	; (8013b20 <GUI__DrawBitmap16bpp+0x25c>)
 801398e:	9307      	str	r3, [sp, #28]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	7c58      	ldrb	r0, [r3, #17]
 8013994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013996:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 801399a:	f001 fb17 	bl	8014fcc <GUI_GetpfIndex2ColorEx>
 801399e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80139a0:	4283      	cmp	r3, r0
 80139a2:	f000 8088 	beq.w	8013ab6 <GUI__DrawBitmap16bpp+0x1f2>
 80139a6:	9b07      	ldr	r3, [sp, #28]
 80139a8:	9906      	ldr	r1, [sp, #24]
 80139aa:	681a      	ldr	r2, [r3, #0]
 80139ac:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 80139b0:	1875      	adds	r5, r6, r1
 80139b2:	429e      	cmp	r6, r3
 80139b4:	f105 35ff 	add.w	r5, r5, #4294967295
 80139b8:	da05      	bge.n	80139c6 <GUI__DrawBitmap16bpp+0x102>
 80139ba:	1b9e      	subs	r6, r3, r6
 80139bc:	1b89      	subs	r1, r1, r6
 80139be:	fb0a 4406 	mla	r4, sl, r6, r4
 80139c2:	9106      	str	r1, [sp, #24]
 80139c4:	461e      	mov	r6, r3
 80139c6:	f9b2 300e 	ldrsh.w	r3, [r2, #14]
 80139ca:	1aeb      	subs	r3, r5, r3
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	dd02      	ble.n	80139d6 <GUI__DrawBitmap16bpp+0x112>
 80139d0:	9906      	ldr	r1, [sp, #24]
 80139d2:	1acb      	subs	r3, r1, r3
 80139d4:	9306      	str	r3, [sp, #24]
 80139d6:	9b06      	ldr	r3, [sp, #24]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	ddd0      	ble.n	801397e <GUI__DrawBitmap16bpp+0xba>
 80139dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80139de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80139e0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80139e4:	eb01 0b00 	add.w	fp, r1, r0
 80139e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80139ec:	ebc3 030b 	rsb	r3, r3, fp
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	bfc4      	itt	gt
 80139f4:	1acb      	subgt	r3, r1, r3
 80139f6:	9309      	strgt	r3, [sp, #36]	; 0x24
 80139f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139fa:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80139fe:	4299      	cmp	r1, r3
 8013a00:	da06      	bge.n	8013a10 <GUI__DrawBitmap16bpp+0x14c>
 8013a02:	1a5a      	subs	r2, r3, r1
 8013a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a06:	930a      	str	r3, [sp, #40]	; 0x28
 8013a08:	1a89      	subs	r1, r1, r2
 8013a0a:	9109      	str	r1, [sp, #36]	; 0x24
 8013a0c:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8013a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	ddb3      	ble.n	801397e <GUI__DrawBitmap16bpp+0xba>
 8013a16:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013a18:	2300      	movs	r3, #0
 8013a1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a1c:	2a00      	cmp	r2, #0
 8013a1e:	d07d      	beq.n	8013b1c <GUI__DrawBitmap16bpp+0x258>
 8013a20:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8013a24:	f1b9 0f00 	cmp.w	r9, #0
 8013a28:	d004      	beq.n	8013a34 <GUI__DrawBitmap16bpp+0x170>
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	4619      	mov	r1, r3
 8013a2e:	a80f      	add	r0, sp, #60	; 0x3c
 8013a30:	f7ff fe96 	bl	8013760 <GUI__GetAlphaBuffer>
 8013a34:	f001 fd20 	bl	8015478 <LCD_GetNextPixelAPI>
 8013a38:	9b07      	ldr	r3, [sp, #28]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	4607      	mov	r7, r0
 8013a3e:	7c58      	ldrb	r0, [r3, #17]
 8013a40:	f001 facc 	bl	8014fdc <GUI_GetpfColor2IndexEx>
 8013a44:	462b      	mov	r3, r5
 8013a46:	4680      	mov	r8, r0
 8013a48:	465a      	mov	r2, fp
 8013a4a:	4631      	mov	r1, r6
 8013a4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a4e:	683d      	ldr	r5, [r7, #0]
 8013a50:	47a8      	blx	r5
 8013a52:	2800      	cmp	r0, #0
 8013a54:	d190      	bne.n	8013978 <GUI__DrawBitmap16bpp+0xb4>
 8013a56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013a58:	9b06      	ldr	r3, [sp, #24]
 8013a5a:	2900      	cmp	r1, #0
 8013a5c:	d03d      	beq.n	8013ada <GUI__DrawBitmap16bpp+0x216>
 8013a5e:	941a      	str	r4, [sp, #104]	; 0x68
 8013a60:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8013a64:	f8cd 9018 	str.w	r9, [sp, #24]
 8013a68:	4644      	mov	r4, r8
 8013a6a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8013a6e:	1e5d      	subs	r5, r3, #1
 8013a70:	464e      	mov	r6, r9
 8013a72:	2302      	movs	r3, #2
 8013a74:	465a      	mov	r2, fp
 8013a76:	4640      	mov	r0, r8
 8013a78:	47b0      	blx	r6
 8013a7a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8013a7e:	2600      	movs	r6, #0
 8013a80:	f859 0b04 	ldr.w	r0, [r9], #4
 8013a84:	47a0      	blx	r4
 8013a86:	3601      	adds	r6, #1
 8013a88:	45b3      	cmp	fp, r6
 8013a8a:	f849 0c04 	str.w	r0, [r9, #-4]
 8013a8e:	d1f7      	bne.n	8013a80 <GUI__DrawBitmap16bpp+0x1bc>
 8013a90:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8013a94:	2600      	movs	r6, #0
 8013a96:	3601      	adds	r6, #1
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	f859 0b04 	ldr.w	r0, [r9], #4
 8013a9e:	4790      	blx	r2
 8013aa0:	45b3      	cmp	fp, r6
 8013aa2:	d1f8      	bne.n	8013a96 <GUI__DrawBitmap16bpp+0x1d2>
 8013aa4:	3d01      	subs	r5, #1
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	4798      	blx	r3
 8013aaa:	1c6a      	adds	r2, r5, #1
 8013aac:	44d0      	add	r8, sl
 8013aae:	d032      	beq.n	8013b16 <GUI__DrawBitmap16bpp+0x252>
 8013ab0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013ab2:	9e06      	ldr	r6, [sp, #24]
 8013ab4:	e7dd      	b.n	8013a72 <GUI__DrawBitmap16bpp+0x1ae>
 8013ab6:	9404      	str	r4, [sp, #16]
 8013ab8:	2700      	movs	r7, #0
 8013aba:	2410      	movs	r4, #16
 8013abc:	f8cd a00c 	str.w	sl, [sp, #12]
 8013ac0:	9501      	str	r5, [sp, #4]
 8013ac2:	9500      	str	r5, [sp, #0]
 8013ac4:	9b06      	ldr	r3, [sp, #24]
 8013ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ac8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013aca:	9705      	str	r7, [sp, #20]
 8013acc:	4631      	mov	r1, r6
 8013ace:	9402      	str	r4, [sp, #8]
 8013ad0:	f000 fdc0 	bl	8014654 <LCD_DrawBitmap>
 8013ad4:	b011      	add	sp, #68	; 0x44
 8013ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ada:	1e5e      	subs	r6, r3, #1
 8013adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ade:	941a      	str	r4, [sp, #104]	; 0x68
 8013ae0:	005d      	lsls	r5, r3, #1
 8013ae2:	46ab      	mov	fp, r5
 8013ae4:	4644      	mov	r4, r8
 8013ae6:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8013ae8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8013aec:	f8cd a018 	str.w	sl, [sp, #24]
 8013af0:	eb08 090b 	add.w	r9, r8, fp
 8013af4:	46c2      	mov	sl, r8
 8013af6:	f83a 0b02 	ldrh.w	r0, [sl], #2
 8013afa:	47a8      	blx	r5
 8013afc:	47a0      	blx	r4
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	4790      	blx	r2
 8013b02:	45ca      	cmp	sl, r9
 8013b04:	d1f7      	bne.n	8013af6 <GUI__DrawBitmap16bpp+0x232>
 8013b06:	b136      	cbz	r6, 8013b16 <GUI__DrawBitmap16bpp+0x252>
 8013b08:	9a06      	ldr	r2, [sp, #24]
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	3e01      	subs	r6, #1
 8013b0e:	4490      	add	r8, r2
 8013b10:	4798      	blx	r3
 8013b12:	1c73      	adds	r3, r6, #1
 8013b14:	d1ec      	bne.n	8013af0 <GUI__DrawBitmap16bpp+0x22c>
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	4798      	blx	r3
 8013b1a:	e72d      	b.n	8013978 <GUI__DrawBitmap16bpp+0xb4>
 8013b1c:	4691      	mov	r9, r2
 8013b1e:	e789      	b.n	8013a34 <GUI__DrawBitmap16bpp+0x170>
 8013b20:	20000014 	.word	0x20000014

08013b24 <GUI__ExpandPixelIndicesEx>:
 8013b24:	2900      	cmp	r1, #0
 8013b26:	dd2a      	ble.n	8013b7e <GUI__ExpandPixelIndicesEx+0x5a>
 8013b28:	2a08      	cmp	r2, #8
 8013b2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b2e:	4604      	mov	r4, r0
 8013b30:	685e      	ldr	r6, [r3, #4]
 8013b32:	dd03      	ble.n	8013b3c <GUI__ExpandPixelIndicesEx+0x18>
 8013b34:	2a10      	cmp	r2, #16
 8013b36:	dd0c      	ble.n	8013b52 <GUI__ExpandPixelIndicesEx+0x2e>
 8013b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b3c:	1e53      	subs	r3, r2, #1
 8013b3e:	2b07      	cmp	r3, #7
 8013b40:	d805      	bhi.n	8013b4e <GUI__ExpandPixelIndicesEx+0x2a>
 8013b42:	e8df f003 	tbb	[pc, r3]
 8013b46:	532a      	.short	0x532a
 8013b48:	04047c04 	.word	0x04047c04
 8013b4c:	1d04      	.short	0x1d04
 8013b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b52:	695d      	ldr	r5, [r3, #20]
 8013b54:	b135      	cbz	r5, 8013b64 <GUI__ExpandPixelIndicesEx+0x40>
 8013b56:	460a      	mov	r2, r1
 8013b58:	46ac      	mov	ip, r5
 8013b5a:	4621      	mov	r1, r4
 8013b5c:	2302      	movs	r3, #2
 8013b5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b62:	4760      	bx	ip
 8013b64:	0049      	lsls	r1, r1, #1
 8013b66:	440c      	add	r4, r1
 8013b68:	1865      	adds	r5, r4, r1
 8013b6a:	1a67      	subs	r7, r4, r1
 8013b6c:	f834 0d02 	ldrh.w	r0, [r4, #-2]!
 8013b70:	47b0      	blx	r6
 8013b72:	42bc      	cmp	r4, r7
 8013b74:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013b78:	d1f8      	bne.n	8013b6c <GUI__ExpandPixelIndicesEx+0x48>
 8013b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b7e:	4770      	bx	lr
 8013b80:	1865      	adds	r5, r4, r1
 8013b82:	1a6f      	subs	r7, r5, r1
 8013b84:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8013b88:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 8013b8c:	47b0      	blx	r6
 8013b8e:	42bd      	cmp	r5, r7
 8013b90:	f844 0d04 	str.w	r0, [r4, #-4]!
 8013b94:	d1f8      	bne.n	8013b88 <GUI__ExpandPixelIndicesEx+0x64>
 8013b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b9a:	1e4f      	subs	r7, r1, #1
 8013b9c:	10fb      	asrs	r3, r7, #3
 8013b9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8013ba2:	f007 0a07 	and.w	sl, r7, #7
 8013ba6:	f04f 0880 	mov.w	r8, #128	; 0x80
 8013baa:	3901      	subs	r1, #1
 8013bac:	1e5a      	subs	r2, r3, #1
 8013bae:	fa48 f80a 	asr.w	r8, r8, sl
 8013bb2:	f814 9003 	ldrb.w	r9, [r4, r3]
 8013bb6:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 8013bba:	fa5f f888 	uxtb.w	r8, r8
 8013bbe:	4414      	add	r4, r2
 8013bc0:	f1ca 0307 	rsb	r3, sl, #7
 8013bc4:	ea08 0009 	and.w	r0, r8, r9
 8013bc8:	4118      	asrs	r0, r3
 8013bca:	47b0      	blx	r6
 8013bcc:	f845 0904 	str.w	r0, [r5], #-4
 8013bd0:	f1ba 0f00 	cmp.w	sl, #0
 8013bd4:	d15f      	bne.n	8013c96 <GUI__ExpandPixelIndicesEx+0x172>
 8013bd6:	f894 9000 	ldrb.w	r9, [r4]
 8013bda:	f04f 0801 	mov.w	r8, #1
 8013bde:	3c01      	subs	r4, #1
 8013be0:	f04f 0a07 	mov.w	sl, #7
 8013be4:	2f00      	cmp	r7, #0
 8013be6:	d0b2      	beq.n	8013b4e <GUI__ExpandPixelIndicesEx+0x2a>
 8013be8:	3f01      	subs	r7, #1
 8013bea:	e7e9      	b.n	8013bc0 <GUI__ExpandPixelIndicesEx+0x9c>
 8013bec:	1e4f      	subs	r7, r1, #1
 8013bee:	f007 0903 	and.w	r9, r7, #3
 8013bf2:	10bb      	asrs	r3, r7, #2
 8013bf4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8013bf8:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8013bfc:	25c0      	movs	r5, #192	; 0xc0
 8013bfe:	3901      	subs	r1, #1
 8013c00:	4105      	asrs	r5, r0
 8013c02:	1e5a      	subs	r2, r3, #1
 8013c04:	f814 8003 	ldrb.w	r8, [r4, r3]
 8013c08:	eb04 0a81 	add.w	sl, r4, r1, lsl #2
 8013c0c:	b2ed      	uxtb	r5, r5
 8013c0e:	4414      	add	r4, r2
 8013c10:	ea05 0308 	and.w	r3, r5, r8
 8013c14:	f1c0 0006 	rsb	r0, r0, #6
 8013c18:	fa43 f000 	asr.w	r0, r3, r0
 8013c1c:	47b0      	blx	r6
 8013c1e:	f84a 0904 	str.w	r0, [sl], #-4
 8013c22:	f1b9 0f00 	cmp.w	r9, #0
 8013c26:	d144      	bne.n	8013cb2 <GUI__ExpandPixelIndicesEx+0x18e>
 8013c28:	2503      	movs	r5, #3
 8013c2a:	f894 8000 	ldrb.w	r8, [r4]
 8013c2e:	46a9      	mov	r9, r5
 8013c30:	3c01      	subs	r4, #1
 8013c32:	2f00      	cmp	r7, #0
 8013c34:	d08b      	beq.n	8013b4e <GUI__ExpandPixelIndicesEx+0x2a>
 8013c36:	3f01      	subs	r7, #1
 8013c38:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8013c3c:	e7e8      	b.n	8013c10 <GUI__ExpandPixelIndicesEx+0xec>
 8013c3e:	1e4f      	subs	r7, r1, #1
 8013c40:	f007 0801 	and.w	r8, r7, #1
 8013c44:	107a      	asrs	r2, r7, #1
 8013c46:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8013c4a:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8013c4e:	23f0      	movs	r3, #240	; 0xf0
 8013c50:	3901      	subs	r1, #1
 8013c52:	4103      	asrs	r3, r0
 8013c54:	f102 3eff 	add.w	lr, r2, #4294967295
 8013c58:	5ca5      	ldrb	r5, [r4, r2]
 8013c5a:	eb04 0981 	add.w	r9, r4, r1, lsl #2
 8013c5e:	fa5f fa83 	uxtb.w	sl, r3
 8013c62:	4474      	add	r4, lr
 8013c64:	ea0a 0305 	and.w	r3, sl, r5
 8013c68:	f1c0 0004 	rsb	r0, r0, #4
 8013c6c:	fa43 f000 	asr.w	r0, r3, r0
 8013c70:	47b0      	blx	r6
 8013c72:	f849 0904 	str.w	r0, [r9], #-4
 8013c76:	f1b8 0f00 	cmp.w	r8, #0
 8013c7a:	d113      	bne.n	8013ca4 <GUI__ExpandPixelIndicesEx+0x180>
 8013c7c:	7825      	ldrb	r5, [r4, #0]
 8013c7e:	f04f 0a0f 	mov.w	sl, #15
 8013c82:	3c01      	subs	r4, #1
 8013c84:	f04f 0801 	mov.w	r8, #1
 8013c88:	2f00      	cmp	r7, #0
 8013c8a:	f43f af60 	beq.w	8013b4e <GUI__ExpandPixelIndicesEx+0x2a>
 8013c8e:	3f01      	subs	r7, #1
 8013c90:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8013c94:	e7e6      	b.n	8013c64 <GUI__ExpandPixelIndicesEx+0x140>
 8013c96:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8013c9a:	fa5f f888 	uxtb.w	r8, r8
 8013c9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ca2:	e79f      	b.n	8013be4 <GUI__ExpandPixelIndicesEx+0xc0>
 8013ca4:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8013ca8:	fa5f fa83 	uxtb.w	sl, r3
 8013cac:	f04f 0800 	mov.w	r8, #0
 8013cb0:	e7ea      	b.n	8013c88 <GUI__ExpandPixelIndicesEx+0x164>
 8013cb2:	00ad      	lsls	r5, r5, #2
 8013cb4:	b2ed      	uxtb	r5, r5
 8013cb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8013cba:	e7ba      	b.n	8013c32 <GUI__ExpandPixelIndicesEx+0x10e>

08013cbc <GUI__DivideRound32>:
 8013cbc:	b141      	cbz	r1, 8013cd0 <GUI__DivideRound32+0x14>
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	bfb4      	ite	lt
 8013cc2:	eba0 0061 	sublt.w	r0, r0, r1, asr #1
 8013cc6:	eb00 0061 	addge.w	r0, r0, r1, asr #1
 8013cca:	fb90 f0f1 	sdiv	r0, r0, r1
 8013cce:	4770      	bx	lr
 8013cd0:	4608      	mov	r0, r1
 8013cd2:	4770      	bx	lr

08013cd4 <GUI__HandleEOLine>:
 8013cd4:	b510      	push	{r4, lr}
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	b082      	sub	sp, #8
 8013cda:	a802      	add	r0, sp, #8
 8013cdc:	6823      	ldr	r3, [r4, #0]
 8013cde:	f840 3d04 	str.w	r3, [r0, #-4]!
 8013ce2:	f7ff fb13 	bl	801330c <GUI_UC__GetCharCodeInc>
 8013ce6:	b148      	cbz	r0, 8013cfc <GUI__HandleEOLine+0x28>
 8013ce8:	280a      	cmp	r0, #10
 8013cea:	d002      	beq.n	8013cf2 <GUI__HandleEOLine+0x1e>
 8013cec:	2000      	movs	r0, #0
 8013cee:	b002      	add	sp, #8
 8013cf0:	bd10      	pop	{r4, pc}
 8013cf2:	9b01      	ldr	r3, [sp, #4]
 8013cf4:	6023      	str	r3, [r4, #0]
 8013cf6:	2000      	movs	r0, #0
 8013cf8:	b002      	add	sp, #8
 8013cfa:	bd10      	pop	{r4, pc}
 8013cfc:	2001      	movs	r0, #1
 8013cfe:	b002      	add	sp, #8
 8013d00:	bd10      	pop	{r4, pc}
 8013d02:	bf00      	nop

08013d04 <GUI__IntersectRect>:
 8013d04:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013d08:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	bfb8      	it	lt
 8013d10:	8003      	strhlt	r3, [r0, #0]
 8013d12:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013d16:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	bfb8      	it	lt
 8013d1e:	8043      	strhlt	r3, [r0, #2]
 8013d20:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013d24:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	bfc8      	it	gt
 8013d2c:	8083      	strhgt	r3, [r0, #4]
 8013d2e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8013d32:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013d36:	429a      	cmp	r2, r3
 8013d38:	bfc8      	it	gt
 8013d3a:	80c3      	strhgt	r3, [r0, #6]
 8013d3c:	4770      	bx	lr
 8013d3e:	bf00      	nop

08013d40 <GUI__IntersectRects>:
 8013d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d42:	f9b2 c000 	ldrsh.w	ip, [r2]
 8013d46:	f9b1 5000 	ldrsh.w	r5, [r1]
 8013d4a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8013d4e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013d52:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8013d56:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8013d5a:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8013d5e:	f9b1 6006 	ldrsh.w	r6, [r1, #6]
 8013d62:	45ac      	cmp	ip, r5
 8013d64:	4661      	mov	r1, ip
 8013d66:	bfb8      	it	lt
 8013d68:	4629      	movlt	r1, r5
 8013d6a:	42a3      	cmp	r3, r4
 8013d6c:	bfb8      	it	lt
 8013d6e:	4623      	movlt	r3, r4
 8013d70:	4572      	cmp	r2, lr
 8013d72:	bfa8      	it	ge
 8013d74:	4672      	movge	r2, lr
 8013d76:	42b7      	cmp	r7, r6
 8013d78:	463c      	mov	r4, r7
 8013d7a:	bfa8      	it	ge
 8013d7c:	4634      	movge	r4, r6
 8013d7e:	4291      	cmp	r1, r2
 8013d80:	8001      	strh	r1, [r0, #0]
 8013d82:	8043      	strh	r3, [r0, #2]
 8013d84:	8082      	strh	r2, [r0, #4]
 8013d86:	80c4      	strh	r4, [r0, #6]
 8013d88:	dc04      	bgt.n	8013d94 <GUI__IntersectRects+0x54>
 8013d8a:	42a3      	cmp	r3, r4
 8013d8c:	bfcc      	ite	gt
 8013d8e:	2000      	movgt	r0, #0
 8013d90:	2001      	movle	r0, #1
 8013d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d94:	2000      	movs	r0, #0
 8013d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d98 <GUI__memset>:
 8013d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d9a:	4606      	mov	r6, r0
 8013d9c:	b14a      	cbz	r2, 8013db2 <GUI__memset+0x1a>
 8013d9e:	0784      	lsls	r4, r0, #30
 8013da0:	b2c9      	uxtb	r1, r1
 8013da2:	d008      	beq.n	8013db6 <GUI__memset+0x1e>
 8013da4:	e001      	b.n	8013daa <GUI__memset+0x12>
 8013da6:	0783      	lsls	r3, r0, #30
 8013da8:	d005      	beq.n	8013db6 <GUI__memset+0x1e>
 8013daa:	3a01      	subs	r2, #1
 8013dac:	f800 1b01 	strb.w	r1, [r0], #1
 8013db0:	d1f9      	bne.n	8013da6 <GUI__memset+0xe>
 8013db2:	4630      	mov	r0, r6
 8013db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013db6:	0897      	lsrs	r7, r2, #2
 8013db8:	463b      	mov	r3, r7
 8013dba:	b357      	cbz	r7, 8013e12 <GUI__memset+0x7a>
 8013dbc:	eb01 2401 	add.w	r4, r1, r1, lsl #8
 8013dc0:	2f03      	cmp	r7, #3
 8013dc2:	f002 0203 	and.w	r2, r2, #3
 8013dc6:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 8013dca:	d916      	bls.n	8013dfa <GUI__memset+0x62>
 8013dcc:	f100 0310 	add.w	r3, r0, #16
 8013dd0:	463d      	mov	r5, r7
 8013dd2:	3d04      	subs	r5, #4
 8013dd4:	2d03      	cmp	r5, #3
 8013dd6:	f843 4c10 	str.w	r4, [r3, #-16]
 8013dda:	f843 4c0c 	str.w	r4, [r3, #-12]
 8013dde:	f843 4c08 	str.w	r4, [r3, #-8]
 8013de2:	f843 4c04 	str.w	r4, [r3, #-4]
 8013de6:	f103 0310 	add.w	r3, r3, #16
 8013dea:	dcf2      	bgt.n	8013dd2 <GUI__memset+0x3a>
 8013dec:	3f04      	subs	r7, #4
 8013dee:	08bb      	lsrs	r3, r7, #2
 8013df0:	1c5d      	adds	r5, r3, #1
 8013df2:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8013df6:	eba7 0383 	sub.w	r3, r7, r3, lsl #2
 8013dfa:	b143      	cbz	r3, 8013e0e <GUI__memset+0x76>
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	6004      	str	r4, [r0, #0]
 8013e00:	d003      	beq.n	8013e0a <GUI__memset+0x72>
 8013e02:	2b02      	cmp	r3, #2
 8013e04:	6044      	str	r4, [r0, #4]
 8013e06:	bf18      	it	ne
 8013e08:	6084      	strne	r4, [r0, #8]
 8013e0a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013e0e:	2a00      	cmp	r2, #0
 8013e10:	d0cf      	beq.n	8013db2 <GUI__memset+0x1a>
 8013e12:	f011 fa7f 	bl	8025314 <memset>
 8013e16:	4630      	mov	r0, r6
 8013e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e1a:	bf00      	nop

08013e1c <GUI__memset16>:
 8013e1c:	b470      	push	{r4, r5, r6}
 8013e1e:	0784      	lsls	r4, r0, #30
 8013e20:	d502      	bpl.n	8013e28 <GUI__memset16+0xc>
 8013e22:	8001      	strh	r1, [r0, #0]
 8013e24:	3a01      	subs	r2, #1
 8013e26:	3002      	adds	r0, #2
 8013e28:	0856      	lsrs	r6, r2, #1
 8013e2a:	d00d      	beq.n	8013e48 <GUI__memset16+0x2c>
 8013e2c:	2e03      	cmp	r6, #3
 8013e2e:	4633      	mov	r3, r6
 8013e30:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 8013e34:	d80d      	bhi.n	8013e52 <GUI__memset16+0x36>
 8013e36:	2b01      	cmp	r3, #1
 8013e38:	6004      	str	r4, [r0, #0]
 8013e3a:	d003      	beq.n	8013e44 <GUI__memset16+0x28>
 8013e3c:	2b02      	cmp	r3, #2
 8013e3e:	6044      	str	r4, [r0, #4]
 8013e40:	bf18      	it	ne
 8013e42:	6084      	strne	r4, [r0, #8]
 8013e44:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013e48:	07d3      	lsls	r3, r2, #31
 8013e4a:	bf48      	it	mi
 8013e4c:	8001      	strhmi	r1, [r0, #0]
 8013e4e:	bc70      	pop	{r4, r5, r6}
 8013e50:	4770      	bx	lr
 8013e52:	f100 0310 	add.w	r3, r0, #16
 8013e56:	4635      	mov	r5, r6
 8013e58:	3d04      	subs	r5, #4
 8013e5a:	2d03      	cmp	r5, #3
 8013e5c:	f843 4c10 	str.w	r4, [r3, #-16]
 8013e60:	f843 4c0c 	str.w	r4, [r3, #-12]
 8013e64:	f843 4c08 	str.w	r4, [r3, #-8]
 8013e68:	f843 4c04 	str.w	r4, [r3, #-4]
 8013e6c:	f103 0310 	add.w	r3, r3, #16
 8013e70:	dcf2      	bgt.n	8013e58 <GUI__memset16+0x3c>
 8013e72:	3e04      	subs	r6, #4
 8013e74:	08b3      	lsrs	r3, r6, #2
 8013e76:	1c5d      	adds	r5, r3, #1
 8013e78:	ebb6 0383 	subs.w	r3, r6, r3, lsl #2
 8013e7c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8013e80:	d1d9      	bne.n	8013e36 <GUI__memset16+0x1a>
 8013e82:	e7e1      	b.n	8013e48 <GUI__memset16+0x2c>

08013e84 <GUI__ReduceRect>:
 8013e84:	b470      	push	{r4, r5, r6}
 8013e86:	88cb      	ldrh	r3, [r1, #6]
 8013e88:	880e      	ldrh	r6, [r1, #0]
 8013e8a:	888d      	ldrh	r5, [r1, #4]
 8013e8c:	884c      	ldrh	r4, [r1, #2]
 8013e8e:	b292      	uxth	r2, r2
 8013e90:	4416      	add	r6, r2
 8013e92:	1aad      	subs	r5, r5, r2
 8013e94:	4414      	add	r4, r2
 8013e96:	1a9a      	subs	r2, r3, r2
 8013e98:	8006      	strh	r6, [r0, #0]
 8013e9a:	8085      	strh	r5, [r0, #4]
 8013e9c:	8044      	strh	r4, [r0, #2]
 8013e9e:	80c2      	strh	r2, [r0, #6]
 8013ea0:	bc70      	pop	{r4, r5, r6}
 8013ea2:	4770      	bx	lr

08013ea4 <GUI__sqrt32>:
 8013ea4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8013ea8:	bf2b      	itete	cs
 8013eaa:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
 8013eae:	2300      	movcc	r3, #0
 8013eb0:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8013eb4:	2200      	movcc	r2, #0
 8013eb6:	085b      	lsrs	r3, r3, #1
 8013eb8:	1a80      	subs	r0, r0, r2
 8013eba:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8013ebe:	4290      	cmp	r0, r2
 8013ec0:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
 8013ec4:	bf28      	it	cs
 8013ec6:	460b      	movcs	r3, r1
 8013ec8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8013ecc:	bf38      	it	cc
 8013ece:	2200      	movcc	r2, #0
 8013ed0:	f103 6180 	add.w	r1, r3, #67108864	; 0x4000000
 8013ed4:	1a82      	subs	r2, r0, r2
 8013ed6:	428a      	cmp	r2, r1
 8013ed8:	f103 6000 	add.w	r0, r3, #134217728	; 0x8000000
 8013edc:	bf2c      	ite	cs
 8013ede:	4603      	movcs	r3, r0
 8013ee0:	2100      	movcc	r1, #0
 8013ee2:	085b      	lsrs	r3, r3, #1
 8013ee4:	1a50      	subs	r0, r2, r1
 8013ee6:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 8013eea:	4290      	cmp	r0, r2
 8013eec:	f103 7100 	add.w	r1, r3, #33554432	; 0x2000000
 8013ef0:	bf2c      	ite	cs
 8013ef2:	460b      	movcs	r3, r1
 8013ef4:	2200      	movcc	r2, #0
 8013ef6:	085b      	lsrs	r3, r3, #1
 8013ef8:	1a81      	subs	r1, r0, r2
 8013efa:	f503 0280 	add.w	r2, r3, #4194304	; 0x400000
 8013efe:	4291      	cmp	r1, r2
 8013f00:	f503 0000 	add.w	r0, r3, #8388608	; 0x800000
 8013f04:	bf28      	it	cs
 8013f06:	4603      	movcs	r3, r0
 8013f08:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8013f0c:	bf38      	it	cc
 8013f0e:	2200      	movcc	r2, #0
 8013f10:	1a8a      	subs	r2, r1, r2
 8013f12:	f503 1180 	add.w	r1, r3, #1048576	; 0x100000
 8013f16:	428a      	cmp	r2, r1
 8013f18:	f503 1000 	add.w	r0, r3, #2097152	; 0x200000
 8013f1c:	bf2c      	ite	cs
 8013f1e:	4603      	movcs	r3, r0
 8013f20:	2100      	movcc	r1, #0
 8013f22:	085b      	lsrs	r3, r3, #1
 8013f24:	1a50      	subs	r0, r2, r1
 8013f26:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
 8013f2a:	4290      	cmp	r0, r2
 8013f2c:	f503 2100 	add.w	r1, r3, #524288	; 0x80000
 8013f30:	bf2c      	ite	cs
 8013f32:	460b      	movcs	r3, r1
 8013f34:	2200      	movcc	r2, #0
 8013f36:	085b      	lsrs	r3, r3, #1
 8013f38:	1a81      	subs	r1, r0, r2
 8013f3a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8013f3e:	4291      	cmp	r1, r2
 8013f40:	f503 3000 	add.w	r0, r3, #131072	; 0x20000
 8013f44:	bf28      	it	cs
 8013f46:	4603      	movcs	r3, r0
 8013f48:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8013f4c:	bf38      	it	cc
 8013f4e:	2200      	movcc	r2, #0
 8013f50:	1a8a      	subs	r2, r1, r2
 8013f52:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
 8013f56:	428a      	cmp	r2, r1
 8013f58:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
 8013f5c:	bf2c      	ite	cs
 8013f5e:	4603      	movcs	r3, r0
 8013f60:	2100      	movcc	r1, #0
 8013f62:	085b      	lsrs	r3, r3, #1
 8013f64:	1a50      	subs	r0, r2, r1
 8013f66:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8013f6a:	4290      	cmp	r0, r2
 8013f6c:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 8013f70:	bf2c      	ite	cs
 8013f72:	460b      	movcs	r3, r1
 8013f74:	2200      	movcc	r2, #0
 8013f76:	085b      	lsrs	r3, r3, #1
 8013f78:	1a81      	subs	r1, r0, r2
 8013f7a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8013f7e:	4291      	cmp	r1, r2
 8013f80:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 8013f84:	bf28      	it	cs
 8013f86:	4603      	movcs	r3, r0
 8013f88:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8013f8c:	bf38      	it	cc
 8013f8e:	2200      	movcc	r2, #0
 8013f90:	1a8a      	subs	r2, r1, r2
 8013f92:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8013f96:	428a      	cmp	r2, r1
 8013f98:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8013f9c:	bf2c      	ite	cs
 8013f9e:	4603      	movcs	r3, r0
 8013fa0:	2100      	movcc	r1, #0
 8013fa2:	085b      	lsrs	r3, r3, #1
 8013fa4:	1a50      	subs	r0, r2, r1
 8013fa6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8013faa:	4290      	cmp	r0, r2
 8013fac:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8013fb0:	bf2c      	ite	cs
 8013fb2:	460b      	movcs	r3, r1
 8013fb4:	2200      	movcc	r2, #0
 8013fb6:	085b      	lsrs	r3, r3, #1
 8013fb8:	1a81      	subs	r1, r0, r2
 8013fba:	f103 0210 	add.w	r2, r3, #16
 8013fbe:	4291      	cmp	r1, r2
 8013fc0:	f103 0020 	add.w	r0, r3, #32
 8013fc4:	bf28      	it	cs
 8013fc6:	4603      	movcs	r3, r0
 8013fc8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8013fcc:	bf38      	it	cc
 8013fce:	2200      	movcc	r2, #0
 8013fd0:	1a8a      	subs	r2, r1, r2
 8013fd2:	1d19      	adds	r1, r3, #4
 8013fd4:	428a      	cmp	r2, r1
 8013fd6:	f103 0008 	add.w	r0, r3, #8
 8013fda:	bf2c      	ite	cs
 8013fdc:	4603      	movcs	r3, r0
 8013fde:	2100      	movcc	r1, #0
 8013fe0:	085b      	lsrs	r3, r3, #1
 8013fe2:	1a52      	subs	r2, r2, r1
 8013fe4:	1c58      	adds	r0, r3, #1
 8013fe6:	1c99      	adds	r1, r3, #2
 8013fe8:	4290      	cmp	r0, r2
 8013fea:	bf94      	ite	ls
 8013fec:	4608      	movls	r0, r1
 8013fee:	4618      	movhi	r0, r3
 8013ff0:	0840      	lsrs	r0, r0, #1
 8013ff2:	4770      	bx	lr

08013ff4 <_GetWordWrap>:
 8013ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ff8:	b083      	sub	sp, #12
 8013ffa:	ad02      	add	r5, sp, #8
 8013ffc:	460f      	mov	r7, r1
 8013ffe:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014002:	4628      	mov	r0, r5
 8014004:	9200      	str	r2, [sp, #0]
 8014006:	f7ff f981 	bl	801330c <GUI_UC__GetCharCodeInc>
 801400a:	f04f 0800 	mov.w	r8, #0
 801400e:	4e34      	ldr	r6, [pc, #208]	; (80140e0 <_GetWordWrap+0xec>)
 8014010:	4682      	mov	sl, r0
 8014012:	4644      	mov	r4, r8
 8014014:	46c3      	mov	fp, r8
 8014016:	46c1      	mov	r9, r8
 8014018:	2800      	cmp	r0, #0
 801401a:	d03a      	beq.n	8014092 <_GetWordWrap+0x9e>
 801401c:	280a      	cmp	r0, #10
 801401e:	d038      	beq.n	8014092 <_GetWordWrap+0x9e>
 8014020:	2820      	cmp	r0, #32
 8014022:	d041      	beq.n	80140a8 <_GetWordWrap+0xb4>
 8014024:	f1ba 0f20 	cmp.w	sl, #32
 8014028:	d046      	beq.n	80140b8 <_GetWordWrap+0xc4>
 801402a:	6871      	ldr	r1, [r6, #4]
 801402c:	6832      	ldr	r2, [r6, #0]
 801402e:	2900      	cmp	r1, #0
 8014030:	dd0f      	ble.n	8014052 <_GetWordWrap+0x5e>
 8014032:	f8b2 e000 	ldrh.w	lr, [r2]
 8014036:	4586      	cmp	lr, r0
 8014038:	f102 0302 	add.w	r3, r2, #2
 801403c:	bf18      	it	ne
 801403e:	eb02 0141 	addne.w	r1, r2, r1, lsl #1
 8014042:	d104      	bne.n	801404e <_GetWordWrap+0x5a>
 8014044:	e027      	b.n	8014096 <_GetWordWrap+0xa2>
 8014046:	f833 2b02 	ldrh.w	r2, [r3], #2
 801404a:	4282      	cmp	r2, r0
 801404c:	d023      	beq.n	8014096 <_GetWordWrap+0xa2>
 801404e:	428b      	cmp	r3, r1
 8014050:	d1f9      	bne.n	8014046 <_GetWordWrap+0x52>
 8014052:	f7fd f9cd 	bl	80113f0 <GUI_GetCharDistX>
 8014056:	4481      	add	r9, r0
 8014058:	45b9      	cmp	r9, r7
 801405a:	4680      	mov	r8, r0
 801405c:	dd0e      	ble.n	801407c <_GetWordWrap+0x88>
 801405e:	f1bb 0f00 	cmp.w	fp, #0
 8014062:	d00b      	beq.n	801407c <_GetWordWrap+0x88>
 8014064:	9b00      	ldr	r3, [sp, #0]
 8014066:	2c00      	cmp	r4, #0
 8014068:	bf08      	it	eq
 801406a:	465c      	moveq	r4, fp
 801406c:	b113      	cbz	r3, 8014074 <_GetWordWrap+0x80>
 801406e:	ebc8 0009 	rsb	r0, r8, r9
 8014072:	6018      	str	r0, [r3, #0]
 8014074:	4620      	mov	r0, r4
 8014076:	b003      	add	sp, #12
 8014078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801407c:	4628      	mov	r0, r5
 801407e:	f7ff f945 	bl	801330c <GUI_UC__GetCharCodeInc>
 8014082:	f10b 0b01 	add.w	fp, fp, #1
 8014086:	f1ba 0f00 	cmp.w	sl, #0
 801408a:	bf08      	it	eq
 801408c:	4682      	moveq	sl, r0
 801408e:	2800      	cmp	r0, #0
 8014090:	d1c4      	bne.n	801401c <_GetWordWrap+0x28>
 8014092:	465c      	mov	r4, fp
 8014094:	e7e6      	b.n	8014064 <_GetWordWrap+0x70>
 8014096:	f7fd f9ab 	bl	80113f0 <GUI_GetCharDistX>
 801409a:	4481      	add	r9, r0
 801409c:	45b9      	cmp	r9, r7
 801409e:	f10b 0401 	add.w	r4, fp, #1
 80140a2:	4680      	mov	r8, r0
 80140a4:	ddea      	ble.n	801407c <_GetWordWrap+0x88>
 80140a6:	e7da      	b.n	801405e <_GetWordWrap+0x6a>
 80140a8:	f7fd f9a2 	bl	80113f0 <GUI_GetCharDistX>
 80140ac:	4481      	add	r9, r0
 80140ae:	45b9      	cmp	r9, r7
 80140b0:	465c      	mov	r4, fp
 80140b2:	4680      	mov	r8, r0
 80140b4:	dde2      	ble.n	801407c <_GetWordWrap+0x88>
 80140b6:	e7d2      	b.n	801405e <_GetWordWrap+0x6a>
 80140b8:	f7fd f99a 	bl	80113f0 <GUI_GetCharDistX>
 80140bc:	4481      	add	r9, r0
 80140be:	454f      	cmp	r7, r9
 80140c0:	4680      	mov	r8, r0
 80140c2:	db08      	blt.n	80140d6 <_GetWordWrap+0xe2>
 80140c4:	4628      	mov	r0, r5
 80140c6:	f7ff f921 	bl	801330c <GUI_UC__GetCharCodeInc>
 80140ca:	f10b 0201 	add.w	r2, fp, #1
 80140ce:	465c      	mov	r4, fp
 80140d0:	4682      	mov	sl, r0
 80140d2:	4693      	mov	fp, r2
 80140d4:	e7a0      	b.n	8014018 <_GetWordWrap+0x24>
 80140d6:	465c      	mov	r4, fp
 80140d8:	f04f 0a00 	mov.w	sl, #0
 80140dc:	e7bf      	b.n	801405e <_GetWordWrap+0x6a>
 80140de:	bf00      	nop
 80140e0:	200007ec 	.word	0x200007ec

080140e4 <_GetCharWrap>:
 80140e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140e8:	b082      	sub	sp, #8
 80140ea:	af02      	add	r7, sp, #8
 80140ec:	2400      	movs	r4, #0
 80140ee:	4688      	mov	r8, r1
 80140f0:	f847 0d04 	str.w	r0, [r7, #-4]!
 80140f4:	4625      	mov	r5, r4
 80140f6:	e008      	b.n	801410a <_GetCharWrap+0x26>
 80140f8:	f7fd f97a 	bl	80113f0 <GUI_GetCharDistX>
 80140fc:	4405      	add	r5, r0
 80140fe:	b10c      	cbz	r4, 8014104 <_GetCharWrap+0x20>
 8014100:	4545      	cmp	r5, r8
 8014102:	dc08      	bgt.n	8014116 <_GetCharWrap+0x32>
 8014104:	2e0a      	cmp	r6, #10
 8014106:	d006      	beq.n	8014116 <_GetCharWrap+0x32>
 8014108:	3401      	adds	r4, #1
 801410a:	4638      	mov	r0, r7
 801410c:	f7ff f8fe 	bl	801330c <GUI_UC__GetCharCodeInc>
 8014110:	4606      	mov	r6, r0
 8014112:	2800      	cmp	r0, #0
 8014114:	d1f0      	bne.n	80140f8 <_GetCharWrap+0x14>
 8014116:	4620      	mov	r0, r4
 8014118:	b002      	add	sp, #8
 801411a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801411e:	bf00      	nop

08014120 <GUI__WrapGetNumCharsDisp>:
 8014120:	2a01      	cmp	r2, #1
 8014122:	d008      	beq.n	8014136 <GUI__WrapGetNumCharsDisp+0x16>
 8014124:	2a02      	cmp	r2, #2
 8014126:	d102      	bne.n	801412e <GUI__WrapGetNumCharsDisp+0xe>
 8014128:	4b05      	ldr	r3, [pc, #20]	; (8014140 <GUI__WrapGetNumCharsDisp+0x20>)
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	4718      	bx	r3
 801412e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014132:	f00a bcaf 	b.w	801ea94 <GUI__GetLineNumChars>
 8014136:	4b02      	ldr	r3, [pc, #8]	; (8014140 <GUI__WrapGetNumCharsDisp+0x20>)
 8014138:	2200      	movs	r2, #0
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	4718      	bx	r3
 801413e:	bf00      	nop
 8014140:	20000044 	.word	0x20000044

08014144 <GUI__WrapGetNumBytesToNextLine>:
 8014144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014148:	b082      	sub	sp, #8
 801414a:	2a01      	cmp	r2, #1
 801414c:	4606      	mov	r6, r0
 801414e:	9000      	str	r0, [sp, #0]
 8014150:	4688      	mov	r8, r1
 8014152:	d038      	beq.n	80141c6 <GUI__WrapGetNumBytesToNextLine+0x82>
 8014154:	2a02      	cmp	r2, #2
 8014156:	4617      	mov	r7, r2
 8014158:	d01b      	beq.n	8014192 <GUI__WrapGetNumBytesToNextLine+0x4e>
 801415a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801415e:	f00a fc99 	bl	801ea94 <GUI__GetLineNumChars>
 8014162:	4601      	mov	r1, r0
 8014164:	4604      	mov	r4, r0
 8014166:	9800      	ldr	r0, [sp, #0]
 8014168:	f7ff f8e4 	bl	8013334 <GUI_UC__NumChars2NumBytes>
 801416c:	9b00      	ldr	r3, [sp, #0]
 801416e:	ad02      	add	r5, sp, #8
 8014170:	4418      	add	r0, r3
 8014172:	f845 0d08 	str.w	r0, [r5, #-8]!
 8014176:	4628      	mov	r0, r5
 8014178:	f7ff f8c8 	bl	801330c <GUI_UC__GetCharCodeInc>
 801417c:	280a      	cmp	r0, #10
 801417e:	d01a      	beq.n	80141b6 <GUI__WrapGetNumBytesToNextLine+0x72>
 8014180:	2f01      	cmp	r7, #1
 8014182:	d033      	beq.n	80141ec <GUI__WrapGetNumBytesToNextLine+0xa8>
 8014184:	4621      	mov	r1, r4
 8014186:	4630      	mov	r0, r6
 8014188:	f7ff f8d4 	bl	8013334 <GUI_UC__NumChars2NumBytes>
 801418c:	b002      	add	sp, #8
 801418e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014192:	4b20      	ldr	r3, [pc, #128]	; (8014214 <GUI__WrapGetNumBytesToNextLine+0xd0>)
 8014194:	685b      	ldr	r3, [r3, #4]
 8014196:	4798      	blx	r3
 8014198:	4601      	mov	r1, r0
 801419a:	4604      	mov	r4, r0
 801419c:	9800      	ldr	r0, [sp, #0]
 801419e:	f7ff f8c9 	bl	8013334 <GUI_UC__NumChars2NumBytes>
 80141a2:	9a00      	ldr	r2, [sp, #0]
 80141a4:	ab02      	add	r3, sp, #8
 80141a6:	4410      	add	r0, r2
 80141a8:	f843 0d08 	str.w	r0, [r3, #-8]!
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7ff f8ad 	bl	801330c <GUI_UC__GetCharCodeInc>
 80141b2:	280a      	cmp	r0, #10
 80141b4:	d1e6      	bne.n	8014184 <GUI__WrapGetNumBytesToNextLine+0x40>
 80141b6:	3401      	adds	r4, #1
 80141b8:	4621      	mov	r1, r4
 80141ba:	4630      	mov	r0, r6
 80141bc:	f7ff f8ba 	bl	8013334 <GUI_UC__NumChars2NumBytes>
 80141c0:	b002      	add	sp, #8
 80141c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c6:	4b13      	ldr	r3, [pc, #76]	; (8014214 <GUI__WrapGetNumBytesToNextLine+0xd0>)
 80141c8:	aa01      	add	r2, sp, #4
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	4798      	blx	r3
 80141ce:	4601      	mov	r1, r0
 80141d0:	4604      	mov	r4, r0
 80141d2:	9800      	ldr	r0, [sp, #0]
 80141d4:	f7ff f8ae 	bl	8013334 <GUI_UC__NumChars2NumBytes>
 80141d8:	9b00      	ldr	r3, [sp, #0]
 80141da:	ad02      	add	r5, sp, #8
 80141dc:	4418      	add	r0, r3
 80141de:	f845 0d08 	str.w	r0, [r5, #-8]!
 80141e2:	4628      	mov	r0, r5
 80141e4:	f7ff f892 	bl	801330c <GUI_UC__GetCharCodeInc>
 80141e8:	280a      	cmp	r0, #10
 80141ea:	d0e4      	beq.n	80141b6 <GUI__WrapGetNumBytesToNextLine+0x72>
 80141ec:	2820      	cmp	r0, #32
 80141ee:	d1c9      	bne.n	8014184 <GUI__WrapGetNumBytesToNextLine+0x40>
 80141f0:	f7fd f8fe 	bl	80113f0 <GUI_GetCharDistX>
 80141f4:	4607      	mov	r7, r0
 80141f6:	9b01      	ldr	r3, [sp, #4]
 80141f8:	4598      	cmp	r8, r3
 80141fa:	4628      	mov	r0, r5
 80141fc:	eb07 0203 	add.w	r2, r7, r3
 8014200:	dbc0      	blt.n	8014184 <GUI__WrapGetNumBytesToNextLine+0x40>
 8014202:	9201      	str	r2, [sp, #4]
 8014204:	f7ff f882 	bl	801330c <GUI_UC__GetCharCodeInc>
 8014208:	2820      	cmp	r0, #32
 801420a:	f104 0401 	add.w	r4, r4, #1
 801420e:	d0f2      	beq.n	80141f6 <GUI__WrapGetNumBytesToNextLine+0xb2>
 8014210:	e7b8      	b.n	8014184 <GUI__WrapGetNumBytesToNextLine+0x40>
 8014212:	bf00      	nop
 8014214:	20000044 	.word	0x20000044

08014218 <_SetBkColor>:
 8014218:	b538      	push	{r3, r4, r5, lr}
 801421a:	4c0b      	ldr	r4, [pc, #44]	; (8014248 <_SetBkColor+0x30>)
 801421c:	6822      	ldr	r2, [r4, #0]
 801421e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8014220:	4281      	cmp	r1, r0
 8014222:	d00d      	beq.n	8014240 <_SetBkColor+0x28>
 8014224:	7c55      	ldrb	r5, [r2, #17]
 8014226:	4909      	ldr	r1, [pc, #36]	; (801424c <_SetBkColor+0x34>)
 8014228:	6350      	str	r0, [r2, #52]	; 0x34
 801422a:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 801422e:	691b      	ldr	r3, [r3, #16]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	4798      	blx	r3
 8014234:	6823      	ldr	r3, [r4, #0]
 8014236:	7c1a      	ldrb	r2, [r3, #16]
 8014238:	0752      	lsls	r2, r2, #29
 801423a:	d402      	bmi.n	8014242 <_SetBkColor+0x2a>
 801423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801423e:	6018      	str	r0, [r3, #0]
 8014240:	bd38      	pop	{r3, r4, r5, pc}
 8014242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014244:	6018      	str	r0, [r3, #0]
 8014246:	bd38      	pop	{r3, r4, r5, pc}
 8014248:	20000014 	.word	0x20000014
 801424c:	20035df8 	.word	0x20035df8

08014250 <_SetColor>:
 8014250:	b538      	push	{r3, r4, r5, lr}
 8014252:	4c0b      	ldr	r4, [pc, #44]	; (8014280 <_SetColor+0x30>)
 8014254:	6822      	ldr	r2, [r4, #0]
 8014256:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8014258:	4281      	cmp	r1, r0
 801425a:	d00d      	beq.n	8014278 <_SetColor+0x28>
 801425c:	7c55      	ldrb	r5, [r2, #17]
 801425e:	4909      	ldr	r1, [pc, #36]	; (8014284 <_SetColor+0x34>)
 8014260:	6310      	str	r0, [r2, #48]	; 0x30
 8014262:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8014266:	691b      	ldr	r3, [r3, #16]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	4798      	blx	r3
 801426c:	6823      	ldr	r3, [r4, #0]
 801426e:	7c1a      	ldrb	r2, [r3, #16]
 8014270:	0752      	lsls	r2, r2, #29
 8014272:	d402      	bmi.n	801427a <_SetColor+0x2a>
 8014274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014276:	6018      	str	r0, [r3, #0]
 8014278:	bd38      	pop	{r3, r4, r5, pc}
 801427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801427c:	6018      	str	r0, [r3, #0]
 801427e:	bd38      	pop	{r3, r4, r5, pc}
 8014280:	20000014 	.word	0x20000014
 8014284:	20035df8 	.word	0x20035df8

08014288 <_SetDrawMode>:
 8014288:	4b0a      	ldr	r3, [pc, #40]	; (80142b4 <_SetDrawMode+0x2c>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	7c1a      	ldrb	r2, [r3, #16]
 801428e:	ea82 0100 	eor.w	r1, r2, r0
 8014292:	0749      	lsls	r1, r1, #29
 8014294:	d50a      	bpl.n	80142ac <_SetDrawMode+0x24>
 8014296:	b470      	push	{r4, r5, r6}
 8014298:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801429a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 801429c:	680e      	ldr	r6, [r1, #0]
 801429e:	6825      	ldr	r5, [r4, #0]
 80142a0:	6026      	str	r6, [r4, #0]
 80142a2:	600d      	str	r5, [r1, #0]
 80142a4:	7418      	strb	r0, [r3, #16]
 80142a6:	bc70      	pop	{r4, r5, r6}
 80142a8:	4610      	mov	r0, r2
 80142aa:	4770      	bx	lr
 80142ac:	7418      	strb	r0, [r3, #16]
 80142ae:	4610      	mov	r0, r2
 80142b0:	4770      	bx	lr
 80142b2:	bf00      	nop
 80142b4:	20000014 	.word	0x20000014

080142b8 <LCD_SetDrawMode>:
 80142b8:	4b01      	ldr	r3, [pc, #4]	; (80142c0 <LCD_SetDrawMode+0x8>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	689b      	ldr	r3, [r3, #8]
 80142be:	4718      	bx	r3
 80142c0:	2000004c 	.word	0x2000004c

080142c4 <LCD_DrawPixel>:
 80142c4:	4b18      	ldr	r3, [pc, #96]	; (8014328 <LCD_DrawPixel+0x64>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80142cc:	428a      	cmp	r2, r1
 80142ce:	dc1d      	bgt.n	801430c <LCD_DrawPixel+0x48>
 80142d0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80142d4:	4291      	cmp	r1, r2
 80142d6:	dc19      	bgt.n	801430c <LCD_DrawPixel+0x48>
 80142d8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80142dc:	4282      	cmp	r2, r0
 80142de:	dc15      	bgt.n	801430c <LCD_DrawPixel+0x48>
 80142e0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80142e4:	4290      	cmp	r0, r2
 80142e6:	dc11      	bgt.n	801430c <LCD_DrawPixel+0x48>
 80142e8:	b430      	push	{r4, r5}
 80142ea:	7c1a      	ldrb	r2, [r3, #16]
 80142ec:	07d2      	lsls	r2, r2, #31
 80142ee:	d40e      	bmi.n	801430e <LCD_DrawPixel+0x4a>
 80142f0:	4a0e      	ldr	r2, [pc, #56]	; (801432c <LCD_DrawPixel+0x68>)
 80142f2:	7c5c      	ldrb	r4, [r3, #17]
 80142f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142f6:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	68e5      	ldr	r5, [r4, #12]
 80142fe:	69ad      	ldr	r5, [r5, #24]
 8014300:	460a      	mov	r2, r1
 8014302:	46ac      	mov	ip, r5
 8014304:	4601      	mov	r1, r0
 8014306:	4620      	mov	r0, r4
 8014308:	bc30      	pop	{r4, r5}
 801430a:	4760      	bx	ip
 801430c:	4770      	bx	lr
 801430e:	7c5a      	ldrb	r2, [r3, #17]
 8014310:	4b06      	ldr	r3, [pc, #24]	; (801432c <LCD_DrawPixel+0x68>)
 8014312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014316:	68dc      	ldr	r4, [r3, #12]
 8014318:	69e4      	ldr	r4, [r4, #28]
 801431a:	460a      	mov	r2, r1
 801431c:	4601      	mov	r1, r0
 801431e:	4618      	mov	r0, r3
 8014320:	4623      	mov	r3, r4
 8014322:	bc30      	pop	{r4, r5}
 8014324:	4718      	bx	r3
 8014326:	bf00      	nop
 8014328:	20000014 	.word	0x20000014
 801432c:	20035df8 	.word	0x20035df8

08014330 <LCD_DrawHLine>:
 8014330:	4b12      	ldr	r3, [pc, #72]	; (801437c <LCD_DrawHLine+0x4c>)
 8014332:	b430      	push	{r4, r5}
 8014334:	681c      	ldr	r4, [r3, #0]
 8014336:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801433a:	428b      	cmp	r3, r1
 801433c:	dc0f      	bgt.n	801435e <LCD_DrawHLine+0x2e>
 801433e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8014342:	4299      	cmp	r1, r3
 8014344:	dc0b      	bgt.n	801435e <LCD_DrawHLine+0x2e>
 8014346:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 801434a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801434e:	42a8      	cmp	r0, r5
 8014350:	bfb8      	it	lt
 8014352:	4628      	movlt	r0, r5
 8014354:	429a      	cmp	r2, r3
 8014356:	bfa8      	it	ge
 8014358:	461a      	movge	r2, r3
 801435a:	4290      	cmp	r0, r2
 801435c:	dd01      	ble.n	8014362 <LCD_DrawHLine+0x32>
 801435e:	bc30      	pop	{r4, r5}
 8014360:	4770      	bx	lr
 8014362:	4b07      	ldr	r3, [pc, #28]	; (8014380 <LCD_DrawHLine+0x50>)
 8014364:	7c64      	ldrb	r4, [r4, #17]
 8014366:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801436a:	68e5      	ldr	r5, [r4, #12]
 801436c:	68ad      	ldr	r5, [r5, #8]
 801436e:	4613      	mov	r3, r2
 8014370:	46ac      	mov	ip, r5
 8014372:	460a      	mov	r2, r1
 8014374:	4601      	mov	r1, r0
 8014376:	4620      	mov	r0, r4
 8014378:	bc30      	pop	{r4, r5}
 801437a:	4760      	bx	ip
 801437c:	20000014 	.word	0x20000014
 8014380:	20035df8 	.word	0x20035df8

08014384 <LCD_DrawVLine>:
 8014384:	4b12      	ldr	r3, [pc, #72]	; (80143d0 <LCD_DrawVLine+0x4c>)
 8014386:	b430      	push	{r4, r5}
 8014388:	681c      	ldr	r4, [r3, #0]
 801438a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801438e:	4283      	cmp	r3, r0
 8014390:	dc0f      	bgt.n	80143b2 <LCD_DrawVLine+0x2e>
 8014392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014396:	4298      	cmp	r0, r3
 8014398:	dc0b      	bgt.n	80143b2 <LCD_DrawVLine+0x2e>
 801439a:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 801439e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80143a2:	42a9      	cmp	r1, r5
 80143a4:	bfb8      	it	lt
 80143a6:	4629      	movlt	r1, r5
 80143a8:	429a      	cmp	r2, r3
 80143aa:	bfa8      	it	ge
 80143ac:	461a      	movge	r2, r3
 80143ae:	4291      	cmp	r1, r2
 80143b0:	dd01      	ble.n	80143b6 <LCD_DrawVLine+0x32>
 80143b2:	bc30      	pop	{r4, r5}
 80143b4:	4770      	bx	lr
 80143b6:	4b07      	ldr	r3, [pc, #28]	; (80143d4 <LCD_DrawVLine+0x50>)
 80143b8:	7c64      	ldrb	r4, [r4, #17]
 80143ba:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80143be:	68e5      	ldr	r5, [r4, #12]
 80143c0:	68ed      	ldr	r5, [r5, #12]
 80143c2:	4613      	mov	r3, r2
 80143c4:	46ac      	mov	ip, r5
 80143c6:	460a      	mov	r2, r1
 80143c8:	4601      	mov	r1, r0
 80143ca:	4620      	mov	r0, r4
 80143cc:	bc30      	pop	{r4, r5}
 80143ce:	4760      	bx	ip
 80143d0:	20000014 	.word	0x20000014
 80143d4:	20035df8 	.word	0x20035df8

080143d8 <LCD_FillRect>:
 80143d8:	b570      	push	{r4, r5, r6, lr}
 80143da:	4c15      	ldr	r4, [pc, #84]	; (8014430 <LCD_FillRect+0x58>)
 80143dc:	6824      	ldr	r4, [r4, #0]
 80143de:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 80143e2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80143e6:	42b0      	cmp	r0, r6
 80143e8:	bfb8      	it	lt
 80143ea:	4630      	movlt	r0, r6
 80143ec:	42aa      	cmp	r2, r5
 80143ee:	bfa8      	it	ge
 80143f0:	462a      	movge	r2, r5
 80143f2:	4282      	cmp	r2, r0
 80143f4:	b082      	sub	sp, #8
 80143f6:	db0b      	blt.n	8014410 <LCD_FillRect+0x38>
 80143f8:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 80143fc:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8014400:	42b1      	cmp	r1, r6
 8014402:	bfb8      	it	lt
 8014404:	4631      	movlt	r1, r6
 8014406:	42ab      	cmp	r3, r5
 8014408:	bfa8      	it	ge
 801440a:	462b      	movge	r3, r5
 801440c:	4299      	cmp	r1, r3
 801440e:	dd01      	ble.n	8014414 <LCD_FillRect+0x3c>
 8014410:	b002      	add	sp, #8
 8014412:	bd70      	pop	{r4, r5, r6, pc}
 8014414:	7c65      	ldrb	r5, [r4, #17]
 8014416:	4c07      	ldr	r4, [pc, #28]	; (8014434 <LCD_FillRect+0x5c>)
 8014418:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801441c:	68e5      	ldr	r5, [r4, #12]
 801441e:	9300      	str	r3, [sp, #0]
 8014420:	4613      	mov	r3, r2
 8014422:	460a      	mov	r2, r1
 8014424:	4601      	mov	r1, r0
 8014426:	4620      	mov	r0, r4
 8014428:	692c      	ldr	r4, [r5, #16]
 801442a:	47a0      	blx	r4
 801442c:	b002      	add	sp, #8
 801442e:	bd70      	pop	{r4, r5, r6, pc}
 8014430:	20000014 	.word	0x20000014
 8014434:	20035df8 	.word	0x20035df8

08014438 <LCD__DrawBitmap_1bpp>:
 8014438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801443c:	b091      	sub	sp, #68	; 0x44
 801443e:	4c82      	ldr	r4, [pc, #520]	; (8014648 <LCD__DrawBitmap_1bpp+0x210>)
 8014440:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014442:	950e      	str	r5, [sp, #56]	; 0x38
 8014444:	462e      	mov	r6, r5
 8014446:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8014448:	950c      	str	r5, [sp, #48]	; 0x30
 801444a:	6824      	ldr	r4, [r4, #0]
 801444c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801444e:	9506      	str	r5, [sp, #24]
 8014450:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8014452:	9508      	str	r5, [sp, #32]
 8014454:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014458:	f8dd e070 	ldr.w	lr, [sp, #112]	; 0x70
 801445c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801445e:	900f      	str	r0, [sp, #60]	; 0x3c
 8014460:	9205      	str	r2, [sp, #20]
 8014462:	930d      	str	r3, [sp, #52]	; 0x34
 8014464:	b12c      	cbz	r4, 8014472 <LCD__DrawBitmap_1bpp+0x3a>
 8014466:	6824      	ldr	r4, [r4, #0]
 8014468:	46a4      	mov	ip, r4
 801446a:	b011      	add	sp, #68	; 0x44
 801446c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014470:	4760      	bx	ip
 8014472:	ea4a 0306 	orr.w	r3, sl, r6
 8014476:	2b01      	cmp	r3, #1
 8014478:	4689      	mov	r9, r1
 801447a:	f000 8091 	beq.w	80145a0 <LCD__DrawBitmap_1bpp+0x168>
 801447e:	f1ce 0308 	rsb	r3, lr, #8
 8014482:	9302      	str	r3, [sp, #8]
 8014484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014486:	2b00      	cmp	r3, #0
 8014488:	f340 8087 	ble.w	801459a <LCD__DrawBitmap_1bpp+0x162>
 801448c:	4b6f      	ldr	r3, [pc, #444]	; (801464c <LCD__DrawBitmap_1bpp+0x214>)
 801448e:	940a      	str	r4, [sp, #40]	; 0x28
 8014490:	6818      	ldr	r0, [r3, #0]
 8014492:	9104      	str	r1, [sp, #16]
 8014494:	46a0      	mov	r8, r4
 8014496:	46f1      	mov	r9, lr
 8014498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801449a:	9904      	ldr	r1, [sp, #16]
 801449c:	1853      	adds	r3, r2, r1
 801449e:	461a      	mov	r2, r3
 80144a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80144a2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80144a6:	3a01      	subs	r2, #1
 80144a8:	4293      	cmp	r3, r2
 80144aa:	9209      	str	r2, [sp, #36]	; 0x24
 80144ac:	dc68      	bgt.n	8014580 <LCD__DrawBitmap_1bpp+0x148>
 80144ae:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80144b2:	428b      	cmp	r3, r1
 80144b4:	db64      	blt.n	8014580 <LCD__DrawBitmap_1bpp+0x148>
 80144b6:	9b05      	ldr	r3, [sp, #20]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	dd61      	ble.n	8014580 <LCD__DrawBitmap_1bpp+0x148>
 80144bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80144be:	9f06      	ldr	r7, [sp, #24]
 80144c0:	9707      	str	r7, [sp, #28]
 80144c2:	2600      	movs	r6, #0
 80144c4:	4635      	mov	r5, r6
 80144c6:	eb03 040a 	add.w	r4, r3, sl
 80144ca:	e04c      	b.n	8014566 <LCD__DrawBitmap_1bpp+0x12e>
 80144cc:	9b02      	ldr	r3, [sp, #8]
 80144ce:	ebc9 0606 	rsb	r6, r9, r6
 80144d2:	fa48 f303 	asr.w	r3, r8, r3
 80144d6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80144da:	fa08 f809 	lsl.w	r8, r8, r9
 80144de:	fa5f f888 	uxtb.w	r8, r8
 80144e2:	d102      	bne.n	80144ea <LCD__DrawBitmap_1bpp+0xb2>
 80144e4:	7c02      	ldrb	r2, [r0, #16]
 80144e6:	0792      	lsls	r2, r2, #30
 80144e8:	d438      	bmi.n	801455c <LCD__DrawBitmap_1bpp+0x124>
 80144ea:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 80144ee:	f8de 2000 	ldr.w	r2, [lr]
 80144f2:	9203      	str	r2, [sp, #12]
 80144f4:	9a08      	ldr	r2, [sp, #32]
 80144f6:	b10a      	cbz	r2, 80144fc <LCD__DrawBitmap_1bpp+0xc4>
 80144f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144fc:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8014500:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8014504:	f8ce 3000 	str.w	r3, [lr]
 8014508:	1e62      	subs	r2, r4, #1
 801450a:	4559      	cmp	r1, fp
 801450c:	bfb8      	it	lt
 801450e:	4659      	movlt	r1, fp
 8014510:	4562      	cmp	r2, ip
 8014512:	4613      	mov	r3, r2
 8014514:	bfa8      	it	ge
 8014516:	4663      	movge	r3, ip
 8014518:	428b      	cmp	r3, r1
 801451a:	db1c      	blt.n	8014556 <LCD__DrawBitmap_1bpp+0x11e>
 801451c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014520:	9f04      	ldr	r7, [sp, #16]
 8014522:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8014526:	42ba      	cmp	r2, r7
 8014528:	bfb8      	it	lt
 801452a:	463a      	movlt	r2, r7
 801452c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801452e:	45bc      	cmp	ip, r7
 8014530:	bfa8      	it	ge
 8014532:	46bc      	movge	ip, r7
 8014534:	4562      	cmp	r2, ip
 8014536:	dc0e      	bgt.n	8014556 <LCD__DrawBitmap_1bpp+0x11e>
 8014538:	7c40      	ldrb	r0, [r0, #17]
 801453a:	4f45      	ldr	r7, [pc, #276]	; (8014650 <LCD__DrawBitmap_1bpp+0x218>)
 801453c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8014540:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8014544:	f8cd c000 	str.w	ip, [sp]
 8014548:	f8de b010 	ldr.w	fp, [lr, #16]
 801454c:	47d8      	blx	fp
 801454e:	4b3f      	ldr	r3, [pc, #252]	; (801464c <LCD__DrawBitmap_1bpp+0x214>)
 8014550:	6818      	ldr	r0, [r3, #0]
 8014552:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8014556:	9b03      	ldr	r3, [sp, #12]
 8014558:	f8ce 3000 	str.w	r3, [lr]
 801455c:	9b05      	ldr	r3, [sp, #20]
 801455e:	3501      	adds	r5, #1
 8014560:	42ab      	cmp	r3, r5
 8014562:	4454      	add	r4, sl
 8014564:	d00c      	beq.n	8014580 <LCD__DrawBitmap_1bpp+0x148>
 8014566:	ebca 0104 	rsb	r1, sl, r4
 801456a:	2e00      	cmp	r6, #0
 801456c:	d1ae      	bne.n	80144cc <LCD__DrawBitmap_1bpp+0x94>
 801456e:	9a07      	ldr	r2, [sp, #28]
 8014570:	9e02      	ldr	r6, [sp, #8]
 8014572:	f892 8000 	ldrb.w	r8, [r2]
 8014576:	4613      	mov	r3, r2
 8014578:	3301      	adds	r3, #1
 801457a:	9307      	str	r3, [sp, #28]
 801457c:	4633      	mov	r3, r6
 801457e:	e7a8      	b.n	80144d2 <LCD__DrawBitmap_1bpp+0x9a>
 8014580:	9a06      	ldr	r2, [sp, #24]
 8014582:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014586:	440a      	add	r2, r1
 8014588:	9206      	str	r2, [sp, #24]
 801458a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801458c:	9204      	str	r2, [sp, #16]
 801458e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014590:	3301      	adds	r3, #1
 8014592:	429a      	cmp	r2, r3
 8014594:	930a      	str	r3, [sp, #40]	; 0x28
 8014596:	f47f af7f 	bne.w	8014498 <LCD__DrawBitmap_1bpp+0x60>
 801459a:	b011      	add	sp, #68	; 0x44
 801459c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a0:	4b2a      	ldr	r3, [pc, #168]	; (801464c <LCD__DrawBitmap_1bpp+0x214>)
 80145a2:	6818      	ldr	r0, [r3, #0]
 80145a4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80145a8:	1a53      	subs	r3, r2, r1
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	dd47      	ble.n	801463e <LCD__DrawBitmap_1bpp+0x206>
 80145ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80145b0:	1acc      	subs	r4, r1, r3
 80145b2:	2c00      	cmp	r4, #0
 80145b4:	ddf1      	ble.n	801459a <LCD__DrawBitmap_1bpp+0x162>
 80145b6:	9e06      	ldr	r6, [sp, #24]
 80145b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80145ba:	fb01 6303 	mla	r3, r1, r3, r6
 80145be:	9306      	str	r3, [sp, #24]
 80145c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145c2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80145c6:	444b      	add	r3, r9
 80145c8:	3b01      	subs	r3, #1
 80145ca:	1a5b      	subs	r3, r3, r1
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	dd02      	ble.n	80145d6 <LCD__DrawBitmap_1bpp+0x19e>
 80145d0:	1ae4      	subs	r4, r4, r3
 80145d2:	2c00      	cmp	r4, #0
 80145d4:	dde1      	ble.n	801459a <LCD__DrawBitmap_1bpp+0x162>
 80145d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80145d8:	9e05      	ldr	r6, [sp, #20]
 80145da:	198b      	adds	r3, r1, r6
 80145dc:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80145e0:	3b01      	subs	r3, #1
 80145e2:	1a5b      	subs	r3, r3, r1
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	dd01      	ble.n	80145ec <LCD__DrawBitmap_1bpp+0x1b4>
 80145e8:	1af3      	subs	r3, r6, r3
 80145ea:	9305      	str	r3, [sp, #20]
 80145ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80145ee:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80145f2:	1b49      	subs	r1, r1, r5
 80145f4:	4299      	cmp	r1, r3
 80145f6:	da0d      	bge.n	8014614 <LCD__DrawBitmap_1bpp+0x1dc>
 80145f8:	1a5b      	subs	r3, r3, r1
 80145fa:	9f06      	ldr	r7, [sp, #24]
 80145fc:	441d      	add	r5, r3
 80145fe:	eb07 07e5 	add.w	r7, r7, r5, asr #3
 8014602:	9706      	str	r7, [sp, #24]
 8014604:	9f05      	ldr	r7, [sp, #20]
 8014606:	f023 0607 	bic.w	r6, r3, #7
 801460a:	1afb      	subs	r3, r7, r3
 801460c:	f005 0507 	and.w	r5, r5, #7
 8014610:	9305      	str	r3, [sp, #20]
 8014612:	4431      	add	r1, r6
 8014614:	9b05      	ldr	r3, [sp, #20]
 8014616:	2b00      	cmp	r3, #0
 8014618:	ddbf      	ble.n	801459a <LCD__DrawBitmap_1bpp+0x162>
 801461a:	7c40      	ldrb	r0, [r0, #17]
 801461c:	4b0c      	ldr	r3, [pc, #48]	; (8014650 <LCD__DrawBitmap_1bpp+0x218>)
 801461e:	9f08      	ldr	r7, [sp, #32]
 8014620:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8014624:	9b05      	ldr	r3, [sp, #20]
 8014626:	68c6      	ldr	r6, [r0, #12]
 8014628:	951e      	str	r5, [sp, #120]	; 0x78
 801462a:	9d06      	ldr	r5, [sp, #24]
 801462c:	951d      	str	r5, [sp, #116]	; 0x74
 801462e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014630:	971f      	str	r7, [sp, #124]	; 0x7c
 8014632:	951c      	str	r5, [sp, #112]	; 0x70
 8014634:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 8014638:	941a      	str	r4, [sp, #104]	; 0x68
 801463a:	6874      	ldr	r4, [r6, #4]
 801463c:	e714      	b.n	8014468 <LCD__DrawBitmap_1bpp+0x30>
 801463e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014640:	460a      	mov	r2, r1
 8014642:	4623      	mov	r3, r4
 8014644:	e7bd      	b.n	80145c2 <LCD__DrawBitmap_1bpp+0x18a>
 8014646:	bf00      	nop
 8014648:	20035e0c 	.word	0x20035e0c
 801464c:	20000014 	.word	0x20000014
 8014650:	20035df8 	.word	0x20035df8

08014654 <LCD_DrawBitmap>:
 8014654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014658:	4cb6      	ldr	r4, [pc, #728]	; (8014934 <LCD_DrawBitmap+0x2e0>)
 801465a:	b091      	sub	sp, #68	; 0x44
 801465c:	f8d4 e000 	ldr.w	lr, [r4]
 8014660:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014662:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014664:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8014666:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8014668:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801466c:	950d      	str	r5, [sp, #52]	; 0x34
 801466e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8014672:	960e      	str	r6, [sp, #56]	; 0x38
 8014674:	9707      	str	r7, [sp, #28]
 8014676:	9408      	str	r4, [sp, #32]
 8014678:	900f      	str	r0, [sp, #60]	; 0x3c
 801467a:	9205      	str	r2, [sp, #20]
 801467c:	930c      	str	r3, [sp, #48]	; 0x30
 801467e:	f1be 0f00 	cmp.w	lr, #0
 8014682:	d006      	beq.n	8014692 <LCD_DrawBitmap+0x3e>
 8014684:	f8de 4000 	ldr.w	r4, [lr]
 8014688:	46a4      	mov	ip, r4
 801468a:	b011      	add	sp, #68	; 0x44
 801468c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014690:	4760      	bx	ip
 8014692:	ea4a 0305 	orr.w	r3, sl, r5
 8014696:	2b01      	cmp	r3, #1
 8014698:	4689      	mov	r9, r1
 801469a:	f000 8092 	beq.w	80147c2 <LCD_DrawBitmap+0x16e>
 801469e:	f1cc 0308 	rsb	r3, ip, #8
 80146a2:	9302      	str	r3, [sp, #8]
 80146a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	f340 8088 	ble.w	80147bc <LCD_DrawBitmap+0x168>
 80146ac:	4ba2      	ldr	r3, [pc, #648]	; (8014938 <LCD_DrawBitmap+0x2e4>)
 80146ae:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80146b2:	6818      	ldr	r0, [r3, #0]
 80146b4:	9104      	str	r1, [sp, #16]
 80146b6:	46f0      	mov	r8, lr
 80146b8:	46e1      	mov	r9, ip
 80146ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80146bc:	9904      	ldr	r1, [sp, #16]
 80146be:	1853      	adds	r3, r2, r1
 80146c0:	461a      	mov	r2, r3
 80146c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80146c4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80146c8:	3a01      	subs	r2, #1
 80146ca:	4293      	cmp	r3, r2
 80146cc:	9209      	str	r2, [sp, #36]	; 0x24
 80146ce:	dc68      	bgt.n	80147a2 <LCD_DrawBitmap+0x14e>
 80146d0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80146d4:	428b      	cmp	r3, r1
 80146d6:	db64      	blt.n	80147a2 <LCD_DrawBitmap+0x14e>
 80146d8:	9b05      	ldr	r3, [sp, #20]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	dd61      	ble.n	80147a2 <LCD_DrawBitmap+0x14e>
 80146de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146e0:	9f07      	ldr	r7, [sp, #28]
 80146e2:	9706      	str	r7, [sp, #24]
 80146e4:	2600      	movs	r6, #0
 80146e6:	4635      	mov	r5, r6
 80146e8:	eb03 040a 	add.w	r4, r3, sl
 80146ec:	e04c      	b.n	8014788 <LCD_DrawBitmap+0x134>
 80146ee:	9b02      	ldr	r3, [sp, #8]
 80146f0:	ebc9 0606 	rsb	r6, r9, r6
 80146f4:	fa48 f303 	asr.w	r3, r8, r3
 80146f8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80146fc:	fa08 f809 	lsl.w	r8, r8, r9
 8014700:	fa5f f888 	uxtb.w	r8, r8
 8014704:	d102      	bne.n	801470c <LCD_DrawBitmap+0xb8>
 8014706:	7c02      	ldrb	r2, [r0, #16]
 8014708:	0792      	lsls	r2, r2, #30
 801470a:	d438      	bmi.n	801477e <LCD_DrawBitmap+0x12a>
 801470c:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8014710:	f8de 2000 	ldr.w	r2, [lr]
 8014714:	9203      	str	r2, [sp, #12]
 8014716:	9a08      	ldr	r2, [sp, #32]
 8014718:	b10a      	cbz	r2, 801471e <LCD_DrawBitmap+0xca>
 801471a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801471e:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8014722:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8014726:	f8ce 3000 	str.w	r3, [lr]
 801472a:	1e62      	subs	r2, r4, #1
 801472c:	4559      	cmp	r1, fp
 801472e:	bfb8      	it	lt
 8014730:	4659      	movlt	r1, fp
 8014732:	4562      	cmp	r2, ip
 8014734:	4613      	mov	r3, r2
 8014736:	bfa8      	it	ge
 8014738:	4663      	movge	r3, ip
 801473a:	428b      	cmp	r3, r1
 801473c:	db1c      	blt.n	8014778 <LCD_DrawBitmap+0x124>
 801473e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014742:	9f04      	ldr	r7, [sp, #16]
 8014744:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8014748:	42ba      	cmp	r2, r7
 801474a:	bfb8      	it	lt
 801474c:	463a      	movlt	r2, r7
 801474e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014750:	45bc      	cmp	ip, r7
 8014752:	bfa8      	it	ge
 8014754:	46bc      	movge	ip, r7
 8014756:	4562      	cmp	r2, ip
 8014758:	dc0e      	bgt.n	8014778 <LCD_DrawBitmap+0x124>
 801475a:	7c40      	ldrb	r0, [r0, #17]
 801475c:	4f77      	ldr	r7, [pc, #476]	; (801493c <LCD_DrawBitmap+0x2e8>)
 801475e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8014762:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8014766:	f8cd c000 	str.w	ip, [sp]
 801476a:	f8de b010 	ldr.w	fp, [lr, #16]
 801476e:	47d8      	blx	fp
 8014770:	4b71      	ldr	r3, [pc, #452]	; (8014938 <LCD_DrawBitmap+0x2e4>)
 8014772:	6818      	ldr	r0, [r3, #0]
 8014774:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8014778:	9b03      	ldr	r3, [sp, #12]
 801477a:	f8ce 3000 	str.w	r3, [lr]
 801477e:	9b05      	ldr	r3, [sp, #20]
 8014780:	3501      	adds	r5, #1
 8014782:	42ab      	cmp	r3, r5
 8014784:	4454      	add	r4, sl
 8014786:	d00c      	beq.n	80147a2 <LCD_DrawBitmap+0x14e>
 8014788:	ebca 0104 	rsb	r1, sl, r4
 801478c:	2e00      	cmp	r6, #0
 801478e:	d1ae      	bne.n	80146ee <LCD_DrawBitmap+0x9a>
 8014790:	9a06      	ldr	r2, [sp, #24]
 8014792:	9e02      	ldr	r6, [sp, #8]
 8014794:	f892 8000 	ldrb.w	r8, [r2]
 8014798:	4613      	mov	r3, r2
 801479a:	3301      	adds	r3, #1
 801479c:	9306      	str	r3, [sp, #24]
 801479e:	4633      	mov	r3, r6
 80147a0:	e7a8      	b.n	80146f4 <LCD_DrawBitmap+0xa0>
 80147a2:	9a07      	ldr	r2, [sp, #28]
 80147a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80147a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147a8:	440a      	add	r2, r1
 80147aa:	9207      	str	r2, [sp, #28]
 80147ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80147ae:	9204      	str	r2, [sp, #16]
 80147b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147b2:	3301      	adds	r3, #1
 80147b4:	429a      	cmp	r2, r3
 80147b6:	930a      	str	r3, [sp, #40]	; 0x28
 80147b8:	f47f af7f 	bne.w	80146ba <LCD_DrawBitmap+0x66>
 80147bc:	b011      	add	sp, #68	; 0x44
 80147be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147c2:	4b5d      	ldr	r3, [pc, #372]	; (8014938 <LCD_DrawBitmap+0x2e4>)
 80147c4:	6819      	ldr	r1, [r3, #0]
 80147c6:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 80147ca:	ebc9 0302 	rsb	r3, r9, r2
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	f340 80c2 	ble.w	8014958 <LCD_DrawBitmap+0x304>
 80147d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80147d6:	1ac4      	subs	r4, r0, r3
 80147d8:	2c00      	cmp	r4, #0
 80147da:	ddef      	ble.n	80147bc <LCD_DrawBitmap+0x168>
 80147dc:	fb06 7303 	mla	r3, r6, r3, r7
 80147e0:	9307      	str	r3, [sp, #28]
 80147e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147e4:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 80147e8:	444b      	add	r3, r9
 80147ea:	3b01      	subs	r3, #1
 80147ec:	1a1b      	subs	r3, r3, r0
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	dd02      	ble.n	80147f8 <LCD_DrawBitmap+0x1a4>
 80147f2:	1ae4      	subs	r4, r4, r3
 80147f4:	2c00      	cmp	r4, #0
 80147f6:	dde1      	ble.n	80147bc <LCD_DrawBitmap+0x168>
 80147f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80147fa:	9d05      	ldr	r5, [sp, #20]
 80147fc:	1943      	adds	r3, r0, r5
 80147fe:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8014802:	3b01      	subs	r3, #1
 8014804:	1a1b      	subs	r3, r3, r0
 8014806:	2b00      	cmp	r3, #0
 8014808:	dd01      	ble.n	801480e <LCD_DrawBitmap+0x1ba>
 801480a:	1aeb      	subs	r3, r5, r3
 801480c:	9305      	str	r3, [sp, #20]
 801480e:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 8014812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014814:	4285      	cmp	r5, r0
 8014816:	db16      	blt.n	8014846 <LCD_DrawBitmap+0x1f2>
 8014818:	2300      	movs	r3, #0
 801481a:	9e05      	ldr	r6, [sp, #20]
 801481c:	2e00      	cmp	r6, #0
 801481e:	ddcd      	ble.n	80147bc <LCD_DrawBitmap+0x168>
 8014820:	7c48      	ldrb	r0, [r1, #17]
 8014822:	4946      	ldr	r1, [pc, #280]	; (801493c <LCD_DrawBitmap+0x2e8>)
 8014824:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8014828:	9908      	ldr	r1, [sp, #32]
 801482a:	68c5      	ldr	r5, [r0, #12]
 801482c:	931e      	str	r3, [sp, #120]	; 0x78
 801482e:	9b07      	ldr	r3, [sp, #28]
 8014830:	931d      	str	r3, [sp, #116]	; 0x74
 8014832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014834:	911f      	str	r1, [sp, #124]	; 0x7c
 8014836:	931c      	str	r3, [sp, #112]	; 0x70
 8014838:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 801483c:	941a      	str	r4, [sp, #104]	; 0x68
 801483e:	4633      	mov	r3, r6
 8014840:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014842:	686c      	ldr	r4, [r5, #4]
 8014844:	e720      	b.n	8014688 <LCD_DrawBitmap+0x34>
 8014846:	9e05      	ldr	r6, [sp, #20]
 8014848:	1b43      	subs	r3, r0, r5
 801484a:	1af6      	subs	r6, r6, r3
 801484c:	f10c 35ff 	add.w	r5, ip, #4294967295
 8014850:	9605      	str	r6, [sp, #20]
 8014852:	2d1f      	cmp	r5, #31
 8014854:	d8e1      	bhi.n	801481a <LCD_DrawBitmap+0x1c6>
 8014856:	a601      	add	r6, pc, #4	; (adr r6, 801485c <LCD_DrawBitmap+0x208>)
 8014858:	f856 f025 	ldr.w	pc, [r6, r5, lsl #2]
 801485c:	08014941 	.word	0x08014941
 8014860:	0801491d 	.word	0x0801491d
 8014864:	0801481b 	.word	0x0801481b
 8014868:	08014905 	.word	0x08014905
 801486c:	0801481b 	.word	0x0801481b
 8014870:	0801481b 	.word	0x0801481b
 8014874:	0801481b 	.word	0x0801481b
 8014878:	080148f9 	.word	0x080148f9
 801487c:	0801481b 	.word	0x0801481b
 8014880:	0801481b 	.word	0x0801481b
 8014884:	0801481b 	.word	0x0801481b
 8014888:	0801481b 	.word	0x0801481b
 801488c:	0801481b 	.word	0x0801481b
 8014890:	0801481b 	.word	0x0801481b
 8014894:	0801481b 	.word	0x0801481b
 8014898:	080148eb 	.word	0x080148eb
 801489c:	0801481b 	.word	0x0801481b
 80148a0:	0801481b 	.word	0x0801481b
 80148a4:	0801481b 	.word	0x0801481b
 80148a8:	0801481b 	.word	0x0801481b
 80148ac:	0801481b 	.word	0x0801481b
 80148b0:	0801481b 	.word	0x0801481b
 80148b4:	0801481b 	.word	0x0801481b
 80148b8:	080148dd 	.word	0x080148dd
 80148bc:	0801481b 	.word	0x0801481b
 80148c0:	0801481b 	.word	0x0801481b
 80148c4:	0801481b 	.word	0x0801481b
 80148c8:	0801481b 	.word	0x0801481b
 80148cc:	0801481b 	.word	0x0801481b
 80148d0:	0801481b 	.word	0x0801481b
 80148d4:	0801481b 	.word	0x0801481b
 80148d8:	080148dd 	.word	0x080148dd
 80148dc:	9d07      	ldr	r5, [sp, #28]
 80148de:	900f      	str	r0, [sp, #60]	; 0x3c
 80148e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80148e4:	9307      	str	r3, [sp, #28]
 80148e6:	2300      	movs	r3, #0
 80148e8:	e797      	b.n	801481a <LCD_DrawBitmap+0x1c6>
 80148ea:	9d07      	ldr	r5, [sp, #28]
 80148ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80148ee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80148f2:	9307      	str	r3, [sp, #28]
 80148f4:	2300      	movs	r3, #0
 80148f6:	e790      	b.n	801481a <LCD_DrawBitmap+0x1c6>
 80148f8:	9d07      	ldr	r5, [sp, #28]
 80148fa:	900f      	str	r0, [sp, #60]	; 0x3c
 80148fc:	441d      	add	r5, r3
 80148fe:	9507      	str	r5, [sp, #28]
 8014900:	2300      	movs	r3, #0
 8014902:	e78a      	b.n	801481a <LCD_DrawBitmap+0x1c6>
 8014904:	9d07      	ldr	r5, [sp, #28]
 8014906:	eb05 0563 	add.w	r5, r5, r3, asr #1
 801490a:	9507      	str	r5, [sp, #28]
 801490c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801490e:	f023 0001 	bic.w	r0, r3, #1
 8014912:	4405      	add	r5, r0
 8014914:	950f      	str	r5, [sp, #60]	; 0x3c
 8014916:	f003 0301 	and.w	r3, r3, #1
 801491a:	e77e      	b.n	801481a <LCD_DrawBitmap+0x1c6>
 801491c:	9d07      	ldr	r5, [sp, #28]
 801491e:	eb05 05a3 	add.w	r5, r5, r3, asr #2
 8014922:	9507      	str	r5, [sp, #28]
 8014924:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014926:	f023 0003 	bic.w	r0, r3, #3
 801492a:	4405      	add	r5, r0
 801492c:	950f      	str	r5, [sp, #60]	; 0x3c
 801492e:	f003 0303 	and.w	r3, r3, #3
 8014932:	e772      	b.n	801481a <LCD_DrawBitmap+0x1c6>
 8014934:	20035e0c 	.word	0x20035e0c
 8014938:	20000014 	.word	0x20000014
 801493c:	20035df8 	.word	0x20035df8
 8014940:	9d07      	ldr	r5, [sp, #28]
 8014942:	eb05 05e3 	add.w	r5, r5, r3, asr #3
 8014946:	9507      	str	r5, [sp, #28]
 8014948:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801494a:	f023 0007 	bic.w	r0, r3, #7
 801494e:	4405      	add	r5, r0
 8014950:	950f      	str	r5, [sp, #60]	; 0x3c
 8014952:	f003 0307 	and.w	r3, r3, #7
 8014956:	e760      	b.n	801481a <LCD_DrawBitmap+0x1c6>
 8014958:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801495a:	464a      	mov	r2, r9
 801495c:	4623      	mov	r3, r4
 801495e:	e741      	b.n	80147e4 <LCD_DrawBitmap+0x190>

08014960 <LCD_SetClipRectMax>:
 8014960:	4a04      	ldr	r2, [pc, #16]	; (8014974 <LCD_SetClipRectMax+0x14>)
 8014962:	4b05      	ldr	r3, [pc, #20]	; (8014978 <LCD_SetClipRectMax+0x18>)
 8014964:	6811      	ldr	r1, [r2, #0]
 8014966:	7c4a      	ldrb	r2, [r1, #17]
 8014968:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801496c:	68c3      	ldr	r3, [r0, #12]
 801496e:	3108      	adds	r1, #8
 8014970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014972:	4718      	bx	r3
 8014974:	20000014 	.word	0x20000014
 8014978:	20035df8 	.word	0x20035df8

0801497c <emWin_LCD_Init>:
 801497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014980:	4e3e      	ldr	r6, [pc, #248]	; (8014a7c <emWin_LCD_Init+0x100>)
 8014982:	4f3f      	ldr	r7, [pc, #252]	; (8014a80 <emWin_LCD_Init+0x104>)
 8014984:	6831      	ldr	r1, [r6, #0]
 8014986:	7c4b      	ldrb	r3, [r1, #17]
 8014988:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 801498c:	68c3      	ldr	r3, [r0, #12]
 801498e:	b084      	sub	sp, #16
 8014990:	3108      	adds	r1, #8
 8014992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014994:	4798      	blx	r3
 8014996:	f000 f949 	bl	8014c2c <LCD_InitColors>
 801499a:	4604      	mov	r4, r0
 801499c:	2800      	cmp	r0, #0
 801499e:	d15c      	bne.n	8014a5a <emWin_LCD_Init+0xde>
 80149a0:	4605      	mov	r5, r0
 80149a2:	4628      	mov	r0, r5
 80149a4:	f7fd f960 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 80149a8:	210c      	movs	r1, #12
 80149aa:	4603      	mov	r3, r0
 80149ac:	3501      	adds	r5, #1
 80149ae:	eb0d 0001 	add.w	r0, sp, r1
 80149b2:	9303      	str	r3, [sp, #12]
 80149b4:	b143      	cbz	r3, 80149c8 <emWin_LCD_Init+0x4c>
 80149b6:	68db      	ldr	r3, [r3, #12]
 80149b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ba:	4798      	blx	r3
 80149bc:	4603      	mov	r3, r0
 80149be:	2800      	cmp	r0, #0
 80149c0:	d05a      	beq.n	8014a78 <emWin_LCD_Init+0xfc>
 80149c2:	9803      	ldr	r0, [sp, #12]
 80149c4:	4798      	blx	r3
 80149c6:	4304      	orrs	r4, r0
 80149c8:	2d02      	cmp	r5, #2
 80149ca:	d1ea      	bne.n	80149a2 <emWin_LCD_Init+0x26>
 80149cc:	2c00      	cmp	r4, #0
 80149ce:	d144      	bne.n	8014a5a <emWin_LCD_Init+0xde>
 80149d0:	f000 f9c0 	bl	8014d54 <LCD_InitLUT>
 80149d4:	4b2b      	ldr	r3, [pc, #172]	; (8014a84 <emWin_LCD_Init+0x108>)
 80149d6:	681a      	ldr	r2, [r3, #0]
 80149d8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80149dc:	429a      	cmp	r2, r3
 80149de:	d038      	beq.n	8014a52 <emWin_LCD_Init+0xd6>
 80149e0:	4d29      	ldr	r5, [pc, #164]	; (8014a88 <emWin_LCD_Init+0x10c>)
 80149e2:	2401      	movs	r4, #1
 80149e4:	4620      	mov	r0, r4
 80149e6:	f7fd f93f 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 80149ea:	4603      	mov	r3, r0
 80149ec:	9303      	str	r3, [sp, #12]
 80149ee:	4620      	mov	r0, r4
 80149f0:	3c01      	subs	r4, #1
 80149f2:	b363      	cbz	r3, 8014a4e <emWin_LCD_Init+0xd2>
 80149f4:	f7fe f8f0 	bl	8012bd8 <GUI_SelectLayer>
 80149f8:	682b      	ldr	r3, [r5, #0]
 80149fa:	2004      	movs	r0, #4
 80149fc:	689b      	ldr	r3, [r3, #8]
 80149fe:	4798      	blx	r3
 8014a00:	6830      	ldr	r0, [r6, #0]
 8014a02:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8014a06:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014a0a:	f643 7cff 	movw	ip, #16383	; 0x3fff
 8014a0e:	4563      	cmp	r3, ip
 8014a10:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8014a14:	bfa8      	it	ge
 8014a16:	4663      	movge	r3, ip
 8014a18:	428b      	cmp	r3, r1
 8014a1a:	db0a      	blt.n	8014a32 <emWin_LCD_Init+0xb6>
 8014a1c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8014a20:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014a24:	45e6      	cmp	lr, ip
 8014a26:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8014a2a:	bfa8      	it	ge
 8014a2c:	46e6      	movge	lr, ip
 8014a2e:	4596      	cmp	lr, r2
 8014a30:	da17      	bge.n	8014a62 <emWin_LCD_Init+0xe6>
 8014a32:	682b      	ldr	r3, [r5, #0]
 8014a34:	2000      	movs	r0, #0
 8014a36:	689b      	ldr	r3, [r3, #8]
 8014a38:	4798      	blx	r3
 8014a3a:	9b03      	ldr	r3, [sp, #12]
 8014a3c:	68db      	ldr	r3, [r3, #12]
 8014a3e:	210e      	movs	r1, #14
 8014a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a42:	a803      	add	r0, sp, #12
 8014a44:	4798      	blx	r3
 8014a46:	4603      	mov	r3, r0
 8014a48:	b108      	cbz	r0, 8014a4e <emWin_LCD_Init+0xd2>
 8014a4a:	9803      	ldr	r0, [sp, #12]
 8014a4c:	4798      	blx	r3
 8014a4e:	1c63      	adds	r3, r4, #1
 8014a50:	d1c8      	bne.n	80149e4 <emWin_LCD_Init+0x68>
 8014a52:	2000      	movs	r0, #0
 8014a54:	b004      	add	sp, #16
 8014a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	b004      	add	sp, #16
 8014a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a62:	7c40      	ldrb	r0, [r0, #17]
 8014a64:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8014a68:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8014a6c:	f8cd e000 	str.w	lr, [sp]
 8014a70:	f8dc 8010 	ldr.w	r8, [ip, #16]
 8014a74:	47c0      	blx	r8
 8014a76:	e7dc      	b.n	8014a32 <emWin_LCD_Init+0xb6>
 8014a78:	2001      	movs	r0, #1
 8014a7a:	e7ef      	b.n	8014a5c <emWin_LCD_Init+0xe0>
 8014a7c:	20000014 	.word	0x20000014
 8014a80:	20035df8 	.word	0x20035df8
 8014a84:	20000600 	.word	0x20000600
 8014a88:	2000004c 	.word	0x2000004c

08014a8c <LCD_Color2Index>:
 8014a8c:	4a04      	ldr	r2, [pc, #16]	; (8014aa0 <LCD_Color2Index+0x14>)
 8014a8e:	4b05      	ldr	r3, [pc, #20]	; (8014aa4 <LCD_Color2Index+0x18>)
 8014a90:	6812      	ldr	r2, [r2, #0]
 8014a92:	7c52      	ldrb	r2, [r2, #17]
 8014a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a98:	691b      	ldr	r3, [r3, #16]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	4718      	bx	r3
 8014a9e:	bf00      	nop
 8014aa0:	20000014 	.word	0x20000014
 8014aa4:	20035df8 	.word	0x20035df8

08014aa8 <LCD_Index2Color>:
 8014aa8:	4a04      	ldr	r2, [pc, #16]	; (8014abc <LCD_Index2Color+0x14>)
 8014aaa:	4b05      	ldr	r3, [pc, #20]	; (8014ac0 <LCD_Index2Color+0x18>)
 8014aac:	6812      	ldr	r2, [r2, #0]
 8014aae:	7c52      	ldrb	r2, [r2, #17]
 8014ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ab4:	691b      	ldr	r3, [r3, #16]
 8014ab6:	685b      	ldr	r3, [r3, #4]
 8014ab8:	4718      	bx	r3
 8014aba:	bf00      	nop
 8014abc:	20000014 	.word	0x20000014
 8014ac0:	20035df8 	.word	0x20035df8

08014ac4 <LCD_SetColorIndex>:
 8014ac4:	4b04      	ldr	r3, [pc, #16]	; (8014ad8 <LCD_SetColorIndex+0x14>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	7c1a      	ldrb	r2, [r3, #16]
 8014aca:	0752      	lsls	r2, r2, #29
 8014acc:	bf4c      	ite	mi
 8014ace:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8014ad0:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8014ad2:	6018      	str	r0, [r3, #0]
 8014ad4:	4770      	bx	lr
 8014ad6:	bf00      	nop
 8014ad8:	20000014 	.word	0x20000014

08014adc <LCD_SetBkColorIndex>:
 8014adc:	4b04      	ldr	r3, [pc, #16]	; (8014af0 <LCD_SetBkColorIndex+0x14>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	7c1a      	ldrb	r2, [r3, #16]
 8014ae2:	0752      	lsls	r2, r2, #29
 8014ae4:	bf4c      	ite	mi
 8014ae6:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8014ae8:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8014aea:	6018      	str	r0, [r3, #0]
 8014aec:	4770      	bx	lr
 8014aee:	bf00      	nop
 8014af0:	20000014 	.word	0x20000014

08014af4 <LCD_SetBkColor>:
 8014af4:	4b01      	ldr	r3, [pc, #4]	; (8014afc <LCD_SetBkColor+0x8>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	685b      	ldr	r3, [r3, #4]
 8014afa:	4718      	bx	r3
 8014afc:	2000004c 	.word	0x2000004c

08014b00 <LCD_SetColor>:
 8014b00:	4b01      	ldr	r3, [pc, #4]	; (8014b08 <LCD_SetColor+0x8>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	4718      	bx	r3
 8014b08:	2000004c 	.word	0x2000004c

08014b0c <LCD_AA_MixColors16>:
 8014b0c:	b508      	push	{r3, lr}
 8014b0e:	0e0b      	lsrs	r3, r1, #24
 8014b10:	2bff      	cmp	r3, #255	; 0xff
 8014b12:	d009      	beq.n	8014b28 <LCD_AA_MixColors16+0x1c>
 8014b14:	4b0e      	ldr	r3, [pc, #56]	; (8014b50 <LCD_AA_MixColors16+0x44>)
 8014b16:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014b1a:	b2d2      	uxtb	r2, r2
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	4798      	blx	r3
 8014b20:	4b0c      	ldr	r3, [pc, #48]	; (8014b54 <LCD_AA_MixColors16+0x48>)
 8014b22:	6859      	ldr	r1, [r3, #4]
 8014b24:	4008      	ands	r0, r1
 8014b26:	bd08      	pop	{r3, pc}
 8014b28:	0e03      	lsrs	r3, r0, #24
 8014b2a:	d005      	beq.n	8014b38 <LCD_AA_MixColors16+0x2c>
 8014b2c:	2bff      	cmp	r3, #255	; 0xff
 8014b2e:	d1f1      	bne.n	8014b14 <LCD_AA_MixColors16+0x8>
 8014b30:	4b08      	ldr	r3, [pc, #32]	; (8014b54 <LCD_AA_MixColors16+0x48>)
 8014b32:	6858      	ldr	r0, [r3, #4]
 8014b34:	4008      	ands	r0, r1
 8014b36:	bd08      	pop	{r3, pc}
 8014b38:	ebc2 7102 	rsb	r1, r2, r2, lsl #28
 8014b3c:	4b05      	ldr	r3, [pc, #20]	; (8014b54 <LCD_AA_MixColors16+0x48>)
 8014b3e:	ebc2 1201 	rsb	r2, r2, r1, lsl #4
 8014b42:	32ff      	adds	r2, #255	; 0xff
 8014b44:	6859      	ldr	r1, [r3, #4]
 8014b46:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8014b4a:	4008      	ands	r0, r1
 8014b4c:	bd08      	pop	{r3, pc}
 8014b4e:	bf00      	nop
 8014b50:	20000034 	.word	0x20000034
 8014b54:	20000050 	.word	0x20000050

08014b58 <LCD_SetPixelAA4_Trans>:
 8014b58:	2a00      	cmp	r2, #0
 8014b5a:	d03a      	beq.n	8014bd2 <LCD_SetPixelAA4_Trans+0x7a>
 8014b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b60:	4f24      	ldr	r7, [pc, #144]	; (8014bf4 <LCD_SetPixelAA4_Trans+0x9c>)
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 8014b68:	42a1      	cmp	r1, r4
 8014b6a:	db30      	blt.n	8014bce <LCD_SetPixelAA4_Trans+0x76>
 8014b6c:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8014b70:	42a1      	cmp	r1, r4
 8014b72:	dc2c      	bgt.n	8014bce <LCD_SetPixelAA4_Trans+0x76>
 8014b74:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 8014b78:	42a0      	cmp	r0, r4
 8014b7a:	db28      	blt.n	8014bce <LCD_SetPixelAA4_Trans+0x76>
 8014b7c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8014b80:	42a0      	cmp	r0, r4
 8014b82:	dc24      	bgt.n	8014bce <LCD_SetPixelAA4_Trans+0x76>
 8014b84:	2a0e      	cmp	r2, #14
 8014b86:	d825      	bhi.n	8014bd4 <LCD_SetPixelAA4_Trans+0x7c>
 8014b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b8a:	4606      	mov	r6, r0
 8014b8c:	6818      	ldr	r0, [r3, #0]
 8014b8e:	4614      	mov	r4, r2
 8014b90:	460d      	mov	r5, r1
 8014b92:	f7ff ff89 	bl	8014aa8 <LCD_Index2Color>
 8014b96:	4629      	mov	r1, r5
 8014b98:	4680      	mov	r8, r0
 8014b9a:	4630      	mov	r0, r6
 8014b9c:	f000 faf8 	bl	8015190 <LCD_GetPixelColor>
 8014ba0:	4b15      	ldr	r3, [pc, #84]	; (8014bf8 <LCD_SetPixelAA4_Trans+0xa0>)
 8014ba2:	4601      	mov	r1, r0
 8014ba4:	4622      	mov	r2, r4
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	4640      	mov	r0, r8
 8014baa:	4798      	blx	r3
 8014bac:	f7ff ff6e 	bl	8014a8c <LCD_Color2Index>
 8014bb0:	683a      	ldr	r2, [r7, #0]
 8014bb2:	4b12      	ldr	r3, [pc, #72]	; (8014bfc <LCD_SetPixelAA4_Trans+0xa4>)
 8014bb4:	7c52      	ldrb	r2, [r2, #17]
 8014bb6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8014bba:	68e7      	ldr	r7, [r4, #12]
 8014bbc:	462a      	mov	r2, r5
 8014bbe:	69bd      	ldr	r5, [r7, #24]
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	4631      	mov	r1, r6
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	46ac      	mov	ip, r5
 8014bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bcc:	4760      	bx	ip
 8014bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd2:	4770      	bx	lr
 8014bd4:	4a09      	ldr	r2, [pc, #36]	; (8014bfc <LCD_SetPixelAA4_Trans+0xa4>)
 8014bd6:	7c5c      	ldrb	r4, [r3, #17]
 8014bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bda:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	68e5      	ldr	r5, [r4, #12]
 8014be2:	69ad      	ldr	r5, [r5, #24]
 8014be4:	460a      	mov	r2, r1
 8014be6:	46ac      	mov	ip, r5
 8014be8:	4601      	mov	r1, r0
 8014bea:	4620      	mov	r0, r4
 8014bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bf0:	4760      	bx	ip
 8014bf2:	bf00      	nop
 8014bf4:	20000014 	.word	0x20000014
 8014bf8:	20000050 	.word	0x20000050
 8014bfc:	20035df8 	.word	0x20035df8

08014c00 <LCD_AA_SetAndMask>:
 8014c00:	4b02      	ldr	r3, [pc, #8]	; (8014c0c <LCD_AA_SetAndMask+0xc>)
 8014c02:	685a      	ldr	r2, [r3, #4]
 8014c04:	6058      	str	r0, [r3, #4]
 8014c06:	4610      	mov	r0, r2
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop
 8014c0c:	20000050 	.word	0x20000050

08014c10 <_OnExit>:
 8014c10:	b510      	push	{r4, lr}
 8014c12:	4c04      	ldr	r4, [pc, #16]	; (8014c24 <_OnExit+0x14>)
 8014c14:	6820      	ldr	r0, [r4, #0]
 8014c16:	f7fb ff39 	bl	8010a8c <GUI_ALLOC_FreeFixedBlock>
 8014c1a:	4a03      	ldr	r2, [pc, #12]	; (8014c28 <_OnExit+0x18>)
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	6023      	str	r3, [r4, #0]
 8014c20:	6013      	str	r3, [r2, #0]
 8014c22:	bd10      	pop	{r4, pc}
 8014c24:	20035e28 	.word	0x20035e28
 8014c28:	200007f4 	.word	0x200007f4

08014c2c <LCD_InitColors>:
 8014c2c:	b538      	push	{r3, r4, r5, lr}
 8014c2e:	4d0b      	ldr	r5, [pc, #44]	; (8014c5c <LCD_InitColors+0x30>)
 8014c30:	682c      	ldr	r4, [r5, #0]
 8014c32:	b10c      	cbz	r4, 8014c38 <LCD_InitColors+0xc>
 8014c34:	2000      	movs	r0, #0
 8014c36:	bd38      	pop	{r3, r4, r5, pc}
 8014c38:	4b09      	ldr	r3, [pc, #36]	; (8014c60 <LCD_InitColors+0x34>)
 8014c3a:	6818      	ldr	r0, [r3, #0]
 8014c3c:	0080      	lsls	r0, r0, #2
 8014c3e:	f7fb ff2f 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8014c42:	6028      	str	r0, [r5, #0]
 8014c44:	b138      	cbz	r0, 8014c56 <LCD_InitColors+0x2a>
 8014c46:	4807      	ldr	r0, [pc, #28]	; (8014c64 <LCD_InitColors+0x38>)
 8014c48:	4b07      	ldr	r3, [pc, #28]	; (8014c68 <LCD_InitColors+0x3c>)
 8014c4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8014c4e:	f7fc fff7 	bl	8011c40 <GUI__RegisterExit>
 8014c52:	4620      	mov	r0, r4
 8014c54:	bd38      	pop	{r3, r4, r5, pc}
 8014c56:	2001      	movs	r0, #1
 8014c58:	bd38      	pop	{r3, r4, r5, pc}
 8014c5a:	bf00      	nop
 8014c5c:	20035e28 	.word	0x20035e28
 8014c60:	20000068 	.word	0x20000068
 8014c64:	200007f4 	.word	0x200007f4
 8014c68:	08014c11 	.word	0x08014c11

08014c6c <LCD_GetpPalConvTableUncached>:
 8014c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c70:	b360      	cbz	r0, 8014ccc <LCD_GetpPalConvTableUncached+0x60>
 8014c72:	6885      	ldr	r5, [r0, #8]
 8014c74:	b365      	cbz	r5, 8014cd0 <LCD_GetpPalConvTableUncached+0x64>
 8014c76:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8014cdc <LCD_GetpPalConvTableUncached+0x70>
 8014c7a:	f8d8 6000 	ldr.w	r6, [r8]
 8014c7e:	b306      	cbz	r6, 8014cc2 <LCD_GetpPalConvTableUncached+0x56>
 8014c80:	6807      	ldr	r7, [r0, #0]
 8014c82:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8014c86:	dc1f      	bgt.n	8014cc8 <LCD_GetpPalConvTableUncached+0x5c>
 8014c88:	4b12      	ldr	r3, [pc, #72]	; (8014cd4 <LCD_GetpPalConvTableUncached+0x68>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	429f      	cmp	r7, r3
 8014c8e:	bfa8      	it	ge
 8014c90:	461f      	movge	r7, r3
 8014c92:	2f00      	cmp	r7, #0
 8014c94:	4681      	mov	r9, r0
 8014c96:	dd0d      	ble.n	8014cb4 <LCD_GetpPalConvTableUncached+0x48>
 8014c98:	3d04      	subs	r5, #4
 8014c9a:	2400      	movs	r4, #0
 8014c9c:	e001      	b.n	8014ca2 <LCD_GetpPalConvTableUncached+0x36>
 8014c9e:	f8d8 6000 	ldr.w	r6, [r8]
 8014ca2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014ca6:	f7ff fef1 	bl	8014a8c <LCD_Color2Index>
 8014caa:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8014cae:	3401      	adds	r4, #1
 8014cb0:	42bc      	cmp	r4, r7
 8014cb2:	d1f4      	bne.n	8014c9e <LCD_GetpPalConvTableUncached+0x32>
 8014cb4:	4b08      	ldr	r3, [pc, #32]	; (8014cd8 <LCD_GetpPalConvTableUncached+0x6c>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	b10b      	cbz	r3, 8014cbe <LCD_GetpPalConvTableUncached+0x52>
 8014cba:	4648      	mov	r0, r9
 8014cbc:	4798      	blx	r3
 8014cbe:	f8d8 6000 	ldr.w	r6, [r8]
 8014cc2:	4630      	mov	r0, r6
 8014cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cc8:	2600      	movs	r6, #0
 8014cca:	e7fa      	b.n	8014cc2 <LCD_GetpPalConvTableUncached+0x56>
 8014ccc:	4606      	mov	r6, r0
 8014cce:	e7f8      	b.n	8014cc2 <LCD_GetpPalConvTableUncached+0x56>
 8014cd0:	462e      	mov	r6, r5
 8014cd2:	e7f6      	b.n	8014cc2 <LCD_GetpPalConvTableUncached+0x56>
 8014cd4:	20000068 	.word	0x20000068
 8014cd8:	200007f4 	.word	0x200007f4
 8014cdc:	20035e28 	.word	0x20035e28

08014ce0 <LCD_GetpPalConvTableBM>:
 8014ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ce4:	b360      	cbz	r0, 8014d40 <LCD_GetpPalConvTableBM+0x60>
 8014ce6:	6885      	ldr	r5, [r0, #8]
 8014ce8:	b365      	cbz	r5, 8014d44 <LCD_GetpPalConvTableBM+0x64>
 8014cea:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8014d50 <LCD_GetpPalConvTableBM+0x70>
 8014cee:	f8d8 6000 	ldr.w	r6, [r8]
 8014cf2:	b306      	cbz	r6, 8014d36 <LCD_GetpPalConvTableBM+0x56>
 8014cf4:	6807      	ldr	r7, [r0, #0]
 8014cf6:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8014cfa:	dc1f      	bgt.n	8014d3c <LCD_GetpPalConvTableBM+0x5c>
 8014cfc:	4b12      	ldr	r3, [pc, #72]	; (8014d48 <LCD_GetpPalConvTableBM+0x68>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	429f      	cmp	r7, r3
 8014d02:	bfa8      	it	ge
 8014d04:	461f      	movge	r7, r3
 8014d06:	2f00      	cmp	r7, #0
 8014d08:	4681      	mov	r9, r0
 8014d0a:	dd0d      	ble.n	8014d28 <LCD_GetpPalConvTableBM+0x48>
 8014d0c:	3d04      	subs	r5, #4
 8014d0e:	2400      	movs	r4, #0
 8014d10:	e001      	b.n	8014d16 <LCD_GetpPalConvTableBM+0x36>
 8014d12:	f8d8 6000 	ldr.w	r6, [r8]
 8014d16:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014d1a:	f7ff feb7 	bl	8014a8c <LCD_Color2Index>
 8014d1e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8014d22:	3401      	adds	r4, #1
 8014d24:	42bc      	cmp	r4, r7
 8014d26:	d1f4      	bne.n	8014d12 <LCD_GetpPalConvTableBM+0x32>
 8014d28:	4b08      	ldr	r3, [pc, #32]	; (8014d4c <LCD_GetpPalConvTableBM+0x6c>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	b10b      	cbz	r3, 8014d32 <LCD_GetpPalConvTableBM+0x52>
 8014d2e:	4648      	mov	r0, r9
 8014d30:	4798      	blx	r3
 8014d32:	f8d8 6000 	ldr.w	r6, [r8]
 8014d36:	4630      	mov	r0, r6
 8014d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d3c:	2600      	movs	r6, #0
 8014d3e:	e7fa      	b.n	8014d36 <LCD_GetpPalConvTableBM+0x56>
 8014d40:	4606      	mov	r6, r0
 8014d42:	e7f8      	b.n	8014d36 <LCD_GetpPalConvTableBM+0x56>
 8014d44:	462e      	mov	r6, r5
 8014d46:	e7f6      	b.n	8014d36 <LCD_GetpPalConvTableBM+0x56>
 8014d48:	20000068 	.word	0x20000068
 8014d4c:	200007f4 	.word	0x200007f4
 8014d50:	20035e28 	.word	0x20035e28

08014d54 <LCD_InitLUT>:
 8014d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d58:	f000 f9da 	bl	8015110 <LCD_GetNumLayers>
 8014d5c:	f1b0 0900 	subs.w	r9, r0, #0
 8014d60:	dd2f      	ble.n	8014dc2 <LCD_InitLUT+0x6e>
 8014d62:	4f19      	ldr	r7, [pc, #100]	; (8014dc8 <LCD_InitLUT+0x74>)
 8014d64:	f8df b068 	ldr.w	fp, [pc, #104]	; 8014dd0 <LCD_InitLUT+0x7c>
 8014d68:	2500      	movs	r5, #0
 8014d6a:	4628      	mov	r0, r5
 8014d6c:	f7fc ff7c 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014d70:	b320      	cbz	r0, 8014dbc <LCD_InitLUT+0x68>
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	4628      	mov	r0, r5
 8014d76:	f893 8011 	ldrb.w	r8, [r3, #17]
 8014d7a:	745d      	strb	r5, [r3, #17]
 8014d7c:	f000 f87a 	bl	8014e74 <LCD_GetBitsPerPixelEx>
 8014d80:	2808      	cmp	r0, #8
 8014d82:	dc18      	bgt.n	8014db6 <LCD_InitLUT+0x62>
 8014d84:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8014d88:	4a10      	ldr	r2, [pc, #64]	; (8014dcc <LCD_InitLUT+0x78>)
 8014d8a:	691b      	ldr	r3, [r3, #16]
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	d012      	beq.n	8014db6 <LCD_InitLUT+0x62>
 8014d90:	4628      	mov	r0, r5
 8014d92:	f000 f87f 	bl	8014e94 <LCD_GetNumColorsEx>
 8014d96:	1e06      	subs	r6, r0, #0
 8014d98:	dd0d      	ble.n	8014db6 <LCD_InitLUT+0x62>
 8014d9a:	2400      	movs	r4, #0
 8014d9c:	fa5f fa84 	uxtb.w	sl, r4
 8014da0:	4650      	mov	r0, sl
 8014da2:	f7ff fe81 	bl	8014aa8 <LCD_Index2Color>
 8014da6:	3401      	adds	r4, #1
 8014da8:	4602      	mov	r2, r0
 8014daa:	4651      	mov	r1, sl
 8014dac:	4628      	mov	r0, r5
 8014dae:	f000 ff87 	bl	8015cc0 <LCD_SetLUTEntryEx>
 8014db2:	42a6      	cmp	r6, r4
 8014db4:	d1f2      	bne.n	8014d9c <LCD_InitLUT+0x48>
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	f883 8011 	strb.w	r8, [r3, #17]
 8014dbc:	3501      	adds	r5, #1
 8014dbe:	45a9      	cmp	r9, r5
 8014dc0:	d1d3      	bne.n	8014d6a <LCD_InitLUT+0x16>
 8014dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dc6:	bf00      	nop
 8014dc8:	20000014 	.word	0x20000014
 8014dcc:	08026124 	.word	0x08026124
 8014dd0:	20035df8 	.word	0x20035df8

08014dd4 <LCD_GetBkColorIndex>:
 8014dd4:	4b02      	ldr	r3, [pc, #8]	; (8014de0 <LCD_GetBkColorIndex+0xc>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dda:	6818      	ldr	r0, [r3, #0]
 8014ddc:	4770      	bx	lr
 8014dde:	bf00      	nop
 8014de0:	20000014 	.word	0x20000014

08014de4 <LCD_GetColorIndex>:
 8014de4:	4b02      	ldr	r3, [pc, #8]	; (8014df0 <LCD_GetColorIndex+0xc>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014dea:	6818      	ldr	r0, [r3, #0]
 8014dec:	4770      	bx	lr
 8014dee:	bf00      	nop
 8014df0:	20000014 	.word	0x20000014

08014df4 <LCD_GetXSizeEx>:
 8014df4:	2801      	cmp	r0, #1
 8014df6:	dd01      	ble.n	8014dfc <LCD_GetXSizeEx+0x8>
 8014df8:	2000      	movs	r0, #0
 8014dfa:	4770      	bx	lr
 8014dfc:	b510      	push	{r4, lr}
 8014dfe:	f7fc ff33 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014e02:	b128      	cbz	r0, 8014e10 <LCD_GetXSizeEx+0x1c>
 8014e04:	68c3      	ldr	r3, [r0, #12]
 8014e06:	2101      	movs	r1, #1
 8014e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e0e:	4718      	bx	r3
 8014e10:	2000      	movs	r0, #0
 8014e12:	bd10      	pop	{r4, pc}

08014e14 <LCD_GetYSizeEx>:
 8014e14:	2801      	cmp	r0, #1
 8014e16:	dd01      	ble.n	8014e1c <LCD_GetYSizeEx+0x8>
 8014e18:	2000      	movs	r0, #0
 8014e1a:	4770      	bx	lr
 8014e1c:	b510      	push	{r4, lr}
 8014e1e:	f7fc ff23 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014e22:	b128      	cbz	r0, 8014e30 <LCD_GetYSizeEx+0x1c>
 8014e24:	68c3      	ldr	r3, [r0, #12]
 8014e26:	2102      	movs	r1, #2
 8014e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e2e:	4718      	bx	r3
 8014e30:	2000      	movs	r0, #0
 8014e32:	bd10      	pop	{r4, pc}

08014e34 <LCD_GetVXSizeEx>:
 8014e34:	2801      	cmp	r0, #1
 8014e36:	dd01      	ble.n	8014e3c <LCD_GetVXSizeEx+0x8>
 8014e38:	2000      	movs	r0, #0
 8014e3a:	4770      	bx	lr
 8014e3c:	b510      	push	{r4, lr}
 8014e3e:	f7fc ff13 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014e42:	b128      	cbz	r0, 8014e50 <LCD_GetVXSizeEx+0x1c>
 8014e44:	68c3      	ldr	r3, [r0, #12]
 8014e46:	2103      	movs	r1, #3
 8014e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e4e:	4718      	bx	r3
 8014e50:	2000      	movs	r0, #0
 8014e52:	bd10      	pop	{r4, pc}

08014e54 <LCD_GetVYSizeEx>:
 8014e54:	2801      	cmp	r0, #1
 8014e56:	dd01      	ble.n	8014e5c <LCD_GetVYSizeEx+0x8>
 8014e58:	2000      	movs	r0, #0
 8014e5a:	4770      	bx	lr
 8014e5c:	b510      	push	{r4, lr}
 8014e5e:	f7fc ff03 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014e62:	b128      	cbz	r0, 8014e70 <LCD_GetVYSizeEx+0x1c>
 8014e64:	68c3      	ldr	r3, [r0, #12]
 8014e66:	2104      	movs	r1, #4
 8014e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e6e:	4718      	bx	r3
 8014e70:	2000      	movs	r0, #0
 8014e72:	bd10      	pop	{r4, pc}

08014e74 <LCD_GetBitsPerPixelEx>:
 8014e74:	2801      	cmp	r0, #1
 8014e76:	dd01      	ble.n	8014e7c <LCD_GetBitsPerPixelEx+0x8>
 8014e78:	2000      	movs	r0, #0
 8014e7a:	4770      	bx	lr
 8014e7c:	b510      	push	{r4, lr}
 8014e7e:	f7fc fef3 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014e82:	b128      	cbz	r0, 8014e90 <LCD_GetBitsPerPixelEx+0x1c>
 8014e84:	68c3      	ldr	r3, [r0, #12]
 8014e86:	2108      	movs	r1, #8
 8014e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e8e:	4718      	bx	r3
 8014e90:	2000      	movs	r0, #0
 8014e92:	bd10      	pop	{r4, pc}

08014e94 <LCD_GetNumColorsEx>:
 8014e94:	2801      	cmp	r0, #1
 8014e96:	dd01      	ble.n	8014e9c <LCD_GetNumColorsEx+0x8>
 8014e98:	2000      	movs	r0, #0
 8014e9a:	4770      	bx	lr
 8014e9c:	b510      	push	{r4, lr}
 8014e9e:	f7fc fee3 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014ea2:	b128      	cbz	r0, 8014eb0 <LCD_GetNumColorsEx+0x1c>
 8014ea4:	68c3      	ldr	r3, [r0, #12]
 8014ea6:	2109      	movs	r1, #9
 8014ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014eae:	4718      	bx	r3
 8014eb0:	2000      	movs	r0, #0
 8014eb2:	bd10      	pop	{r4, pc}

08014eb4 <LCD_GetMirrorXEx>:
 8014eb4:	2801      	cmp	r0, #1
 8014eb6:	dd01      	ble.n	8014ebc <LCD_GetMirrorXEx+0x8>
 8014eb8:	2000      	movs	r0, #0
 8014eba:	4770      	bx	lr
 8014ebc:	b510      	push	{r4, lr}
 8014ebe:	f7fc fed3 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014ec2:	b128      	cbz	r0, 8014ed0 <LCD_GetMirrorXEx+0x1c>
 8014ec4:	68c3      	ldr	r3, [r0, #12]
 8014ec6:	210c      	movs	r1, #12
 8014ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ece:	4718      	bx	r3
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	bd10      	pop	{r4, pc}

08014ed4 <LCD_GetMirrorYEx>:
 8014ed4:	2801      	cmp	r0, #1
 8014ed6:	dd01      	ble.n	8014edc <LCD_GetMirrorYEx+0x8>
 8014ed8:	2000      	movs	r0, #0
 8014eda:	4770      	bx	lr
 8014edc:	b510      	push	{r4, lr}
 8014ede:	f7fc fec3 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014ee2:	b128      	cbz	r0, 8014ef0 <LCD_GetMirrorYEx+0x1c>
 8014ee4:	68c3      	ldr	r3, [r0, #12]
 8014ee6:	210d      	movs	r1, #13
 8014ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014eee:	4718      	bx	r3
 8014ef0:	2000      	movs	r0, #0
 8014ef2:	bd10      	pop	{r4, pc}

08014ef4 <LCD_GetSwapXYEx>:
 8014ef4:	2801      	cmp	r0, #1
 8014ef6:	dd01      	ble.n	8014efc <LCD_GetSwapXYEx+0x8>
 8014ef8:	2000      	movs	r0, #0
 8014efa:	4770      	bx	lr
 8014efc:	b510      	push	{r4, lr}
 8014efe:	f7fc feb3 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014f02:	b128      	cbz	r0, 8014f10 <LCD_GetSwapXYEx+0x1c>
 8014f04:	68c3      	ldr	r3, [r0, #12]
 8014f06:	210e      	movs	r1, #14
 8014f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f0e:	4718      	bx	r3
 8014f10:	2000      	movs	r0, #0
 8014f12:	bd10      	pop	{r4, pc}

08014f14 <LCD_GetXSize>:
 8014f14:	4b09      	ldr	r3, [pc, #36]	; (8014f3c <LCD_GetXSize+0x28>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	7c58      	ldrb	r0, [r3, #17]
 8014f1a:	2801      	cmp	r0, #1
 8014f1c:	dd01      	ble.n	8014f22 <LCD_GetXSize+0xe>
 8014f1e:	2000      	movs	r0, #0
 8014f20:	4770      	bx	lr
 8014f22:	b510      	push	{r4, lr}
 8014f24:	f7fc fea0 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014f28:	b128      	cbz	r0, 8014f36 <LCD_GetXSize+0x22>
 8014f2a:	68c3      	ldr	r3, [r0, #12]
 8014f2c:	2101      	movs	r1, #1
 8014f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f34:	4718      	bx	r3
 8014f36:	2000      	movs	r0, #0
 8014f38:	bd10      	pop	{r4, pc}
 8014f3a:	bf00      	nop
 8014f3c:	20000014 	.word	0x20000014

08014f40 <LCD_GetYSize>:
 8014f40:	4b09      	ldr	r3, [pc, #36]	; (8014f68 <LCD_GetYSize+0x28>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	7c58      	ldrb	r0, [r3, #17]
 8014f46:	2801      	cmp	r0, #1
 8014f48:	dd01      	ble.n	8014f4e <LCD_GetYSize+0xe>
 8014f4a:	2000      	movs	r0, #0
 8014f4c:	4770      	bx	lr
 8014f4e:	b510      	push	{r4, lr}
 8014f50:	f7fc fe8a 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014f54:	b128      	cbz	r0, 8014f62 <LCD_GetYSize+0x22>
 8014f56:	68c3      	ldr	r3, [r0, #12]
 8014f58:	2102      	movs	r1, #2
 8014f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f60:	4718      	bx	r3
 8014f62:	2000      	movs	r0, #0
 8014f64:	bd10      	pop	{r4, pc}
 8014f66:	bf00      	nop
 8014f68:	20000014 	.word	0x20000014

08014f6c <LCD_GetNumColors>:
 8014f6c:	4b09      	ldr	r3, [pc, #36]	; (8014f94 <LCD_GetNumColors+0x28>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	7c58      	ldrb	r0, [r3, #17]
 8014f72:	2801      	cmp	r0, #1
 8014f74:	dd01      	ble.n	8014f7a <LCD_GetNumColors+0xe>
 8014f76:	2000      	movs	r0, #0
 8014f78:	4770      	bx	lr
 8014f7a:	b510      	push	{r4, lr}
 8014f7c:	f7fc fe74 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014f80:	b128      	cbz	r0, 8014f8e <LCD_GetNumColors+0x22>
 8014f82:	68c3      	ldr	r3, [r0, #12]
 8014f84:	2109      	movs	r1, #9
 8014f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f8c:	4718      	bx	r3
 8014f8e:	2000      	movs	r0, #0
 8014f90:	bd10      	pop	{r4, pc}
 8014f92:	bf00      	nop
 8014f94:	20000014 	.word	0x20000014

08014f98 <GUI_GetBitsPerPixelEx>:
 8014f98:	4b03      	ldr	r3, [pc, #12]	; (8014fa8 <GUI_GetBitsPerPixelEx+0x10>)
 8014f9a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8014f9e:	68c3      	ldr	r3, [r0, #12]
 8014fa0:	2108      	movs	r1, #8
 8014fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fa4:	4718      	bx	r3
 8014fa6:	bf00      	nop
 8014fa8:	20035df8 	.word	0x20035df8

08014fac <LCD_GetPalette>:
 8014fac:	b510      	push	{r4, lr}
 8014fae:	4b06      	ldr	r3, [pc, #24]	; (8014fc8 <LCD_GetPalette+0x1c>)
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	7c58      	ldrb	r0, [r3, #17]
 8014fb4:	f7fc fe58 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014fb8:	b128      	cbz	r0, 8014fc6 <LCD_GetPalette+0x1a>
 8014fba:	68c3      	ldr	r3, [r0, #12]
 8014fbc:	2102      	movs	r1, #2
 8014fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fc4:	4718      	bx	r3
 8014fc6:	bd10      	pop	{r4, pc}
 8014fc8:	20000014 	.word	0x20000014

08014fcc <GUI_GetpfIndex2ColorEx>:
 8014fcc:	4b02      	ldr	r3, [pc, #8]	; (8014fd8 <GUI_GetpfIndex2ColorEx+0xc>)
 8014fce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014fd2:	691b      	ldr	r3, [r3, #16]
 8014fd4:	6858      	ldr	r0, [r3, #4]
 8014fd6:	4770      	bx	lr
 8014fd8:	20035df8 	.word	0x20035df8

08014fdc <GUI_GetpfColor2IndexEx>:
 8014fdc:	4b02      	ldr	r3, [pc, #8]	; (8014fe8 <GUI_GetpfColor2IndexEx+0xc>)
 8014fde:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014fe2:	691b      	ldr	r3, [r3, #16]
 8014fe4:	6818      	ldr	r0, [r3, #0]
 8014fe6:	4770      	bx	lr
 8014fe8:	20035df8 	.word	0x20035df8

08014fec <LCD_GetXSizeMax>:
 8014fec:	b538      	push	{r3, r4, r5, lr}
 8014fee:	2501      	movs	r5, #1
 8014ff0:	4628      	mov	r0, r5
 8014ff2:	f7fc fe39 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8014ff6:	2400      	movs	r4, #0
 8014ff8:	2101      	movs	r1, #1
 8014ffa:	b178      	cbz	r0, 801501c <LCD_GetXSizeMax+0x30>
 8014ffc:	68c3      	ldr	r3, [r0, #12]
 8014ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015000:	4798      	blx	r3
 8015002:	4284      	cmp	r4, r0
 8015004:	bfb8      	it	lt
 8015006:	4604      	movlt	r4, r0
 8015008:	b90d      	cbnz	r5, 801500e <LCD_GetXSizeMax+0x22>
 801500a:	4620      	mov	r0, r4
 801500c:	bd38      	pop	{r3, r4, r5, pc}
 801500e:	2500      	movs	r5, #0
 8015010:	4628      	mov	r0, r5
 8015012:	f7fc fe29 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8015016:	2101      	movs	r1, #1
 8015018:	2800      	cmp	r0, #0
 801501a:	d1ef      	bne.n	8014ffc <LCD_GetXSizeMax+0x10>
 801501c:	e7f1      	b.n	8015002 <LCD_GetXSizeMax+0x16>
 801501e:	bf00      	nop

08015020 <LCD_GetYSizeMax>:
 8015020:	b538      	push	{r3, r4, r5, lr}
 8015022:	2501      	movs	r5, #1
 8015024:	4628      	mov	r0, r5
 8015026:	f7fc fe1f 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 801502a:	2400      	movs	r4, #0
 801502c:	2102      	movs	r1, #2
 801502e:	b178      	cbz	r0, 8015050 <LCD_GetYSizeMax+0x30>
 8015030:	68c3      	ldr	r3, [r0, #12]
 8015032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015034:	4798      	blx	r3
 8015036:	4284      	cmp	r4, r0
 8015038:	bfb8      	it	lt
 801503a:	4604      	movlt	r4, r0
 801503c:	b90d      	cbnz	r5, 8015042 <LCD_GetYSizeMax+0x22>
 801503e:	4620      	mov	r0, r4
 8015040:	bd38      	pop	{r3, r4, r5, pc}
 8015042:	2500      	movs	r5, #0
 8015044:	4628      	mov	r0, r5
 8015046:	f7fc fe0f 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 801504a:	2102      	movs	r1, #2
 801504c:	2800      	cmp	r0, #0
 801504e:	d1ef      	bne.n	8015030 <LCD_GetYSizeMax+0x10>
 8015050:	e7f1      	b.n	8015036 <LCD_GetYSizeMax+0x16>
 8015052:	bf00      	nop

08015054 <LCD_GetVXSizeMax>:
 8015054:	b538      	push	{r3, r4, r5, lr}
 8015056:	2501      	movs	r5, #1
 8015058:	4628      	mov	r0, r5
 801505a:	f7fc fe05 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 801505e:	2400      	movs	r4, #0
 8015060:	2103      	movs	r1, #3
 8015062:	b178      	cbz	r0, 8015084 <LCD_GetVXSizeMax+0x30>
 8015064:	68c3      	ldr	r3, [r0, #12]
 8015066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015068:	4798      	blx	r3
 801506a:	4284      	cmp	r4, r0
 801506c:	bfb8      	it	lt
 801506e:	4604      	movlt	r4, r0
 8015070:	b90d      	cbnz	r5, 8015076 <LCD_GetVXSizeMax+0x22>
 8015072:	4620      	mov	r0, r4
 8015074:	bd38      	pop	{r3, r4, r5, pc}
 8015076:	2500      	movs	r5, #0
 8015078:	4628      	mov	r0, r5
 801507a:	f7fc fdf5 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 801507e:	2103      	movs	r1, #3
 8015080:	2800      	cmp	r0, #0
 8015082:	d1ef      	bne.n	8015064 <LCD_GetVXSizeMax+0x10>
 8015084:	e7f1      	b.n	801506a <LCD_GetVXSizeMax+0x16>
 8015086:	bf00      	nop

08015088 <LCD_SetDisplaySize>:
 8015088:	4b01      	ldr	r3, [pc, #4]	; (8015090 <LCD_SetDisplaySize+0x8>)
 801508a:	e883 0003 	stmia.w	r3, {r0, r1}
 801508e:	4770      	bx	lr
 8015090:	20000800 	.word	0x20000800

08015094 <LCD_GetXSizeDisplay>:
 8015094:	4b01      	ldr	r3, [pc, #4]	; (801509c <LCD_GetXSizeDisplay+0x8>)
 8015096:	6818      	ldr	r0, [r3, #0]
 8015098:	4770      	bx	lr
 801509a:	bf00      	nop
 801509c:	20000800 	.word	0x20000800

080150a0 <LCD_GetYSizeDisplay>:
 80150a0:	4b01      	ldr	r3, [pc, #4]	; (80150a8 <LCD_GetYSizeDisplay+0x8>)
 80150a2:	6858      	ldr	r0, [r3, #4]
 80150a4:	4770      	bx	lr
 80150a6:	bf00      	nop
 80150a8:	20000800 	.word	0x20000800

080150ac <LCD__GetBPPDevice>:
 80150ac:	b1c8      	cbz	r0, 80150e2 <LCD__GetBPPDevice+0x36>
 80150ae:	f030 0301 	bics.w	r3, r0, #1
 80150b2:	d017      	beq.n	80150e4 <LCD__GetBPPDevice+0x38>
 80150b4:	f030 0303 	bics.w	r3, r0, #3
 80150b8:	d101      	bne.n	80150be <LCD__GetBPPDevice+0x12>
 80150ba:	2008      	movs	r0, #8
 80150bc:	4770      	bx	lr
 80150be:	f030 0307 	bics.w	r3, r0, #7
 80150c2:	d0fa      	beq.n	80150ba <LCD__GetBPPDevice+0xe>
 80150c4:	f030 030f 	bics.w	r3, r0, #15
 80150c8:	d0f7      	beq.n	80150ba <LCD__GetBPPDevice+0xe>
 80150ca:	f030 031f 	bics.w	r3, r0, #31
 80150ce:	d0f4      	beq.n	80150ba <LCD__GetBPPDevice+0xe>
 80150d0:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 80150d4:	d0f1      	beq.n	80150ba <LCD__GetBPPDevice+0xe>
 80150d6:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 80150da:	f023 0301 	bic.w	r3, r3, #1
 80150de:	b91b      	cbnz	r3, 80150e8 <LCD__GetBPPDevice+0x3c>
 80150e0:	2010      	movs	r0, #16
 80150e2:	4770      	bx	lr
 80150e4:	2001      	movs	r0, #1
 80150e6:	4770      	bx	lr
 80150e8:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 80150ec:	f023 030f 	bic.w	r3, r3, #15
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d0f5      	beq.n	80150e0 <LCD__GetBPPDevice+0x34>
 80150f4:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 80150f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d0ef      	beq.n	80150e0 <LCD__GetBPPDevice+0x34>
 8015100:	0c00      	lsrs	r0, r0, #16
 8015102:	0400      	lsls	r0, r0, #16
 8015104:	2800      	cmp	r0, #0
 8015106:	bf0c      	ite	eq
 8015108:	2010      	moveq	r0, #16
 801510a:	2020      	movne	r0, #32
 801510c:	4770      	bx	lr
 801510e:	bf00      	nop

08015110 <LCD_GetNumLayers>:
 8015110:	b510      	push	{r4, lr}
 8015112:	2000      	movs	r0, #0
 8015114:	f7fc fda8 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8015118:	1c04      	adds	r4, r0, #0
 801511a:	f04f 0001 	mov.w	r0, #1
 801511e:	bf18      	it	ne
 8015120:	2401      	movne	r4, #1
 8015122:	f7fc fda1 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8015126:	b100      	cbz	r0, 801512a <LCD_GetNumLayers+0x1a>
 8015128:	3401      	adds	r4, #1
 801512a:	4620      	mov	r0, r4
 801512c:	bd10      	pop	{r4, pc}
 801512e:	bf00      	nop

08015130 <LCD_GetPixelIndex>:
 8015130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015132:	4e15      	ldr	r6, [pc, #84]	; (8015188 <LCD_GetPixelIndex+0x58>)
 8015134:	4d15      	ldr	r5, [pc, #84]	; (801518c <LCD_GetPixelIndex+0x5c>)
 8015136:	6833      	ldr	r3, [r6, #0]
 8015138:	7c5b      	ldrb	r3, [r3, #17]
 801513a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801513e:	68da      	ldr	r2, [r3, #12]
 8015140:	b083      	sub	sp, #12
 8015142:	4604      	mov	r4, r0
 8015144:	460f      	mov	r7, r1
 8015146:	4618      	mov	r0, r3
 8015148:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801514a:	4669      	mov	r1, sp
 801514c:	4790      	blx	r2
 801514e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8015152:	42a3      	cmp	r3, r4
 8015154:	dc0b      	bgt.n	801516e <LCD_GetPixelIndex+0x3e>
 8015156:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801515a:	429c      	cmp	r4, r3
 801515c:	dc07      	bgt.n	801516e <LCD_GetPixelIndex+0x3e>
 801515e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8015162:	42bb      	cmp	r3, r7
 8015164:	dc03      	bgt.n	801516e <LCD_GetPixelIndex+0x3e>
 8015166:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801516a:	429f      	cmp	r7, r3
 801516c:	dd02      	ble.n	8015174 <LCD_GetPixelIndex+0x44>
 801516e:	2000      	movs	r0, #0
 8015170:	b003      	add	sp, #12
 8015172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015174:	6833      	ldr	r3, [r6, #0]
 8015176:	7c5b      	ldrb	r3, [r3, #17]
 8015178:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801517c:	68c3      	ldr	r3, [r0, #12]
 801517e:	463a      	mov	r2, r7
 8015180:	4621      	mov	r1, r4
 8015182:	695b      	ldr	r3, [r3, #20]
 8015184:	4798      	blx	r3
 8015186:	e7f3      	b.n	8015170 <LCD_GetPixelIndex+0x40>
 8015188:	20000014 	.word	0x20000014
 801518c:	20035df8 	.word	0x20035df8

08015190 <LCD_GetPixelColor>:
 8015190:	b508      	push	{r3, lr}
 8015192:	f7ff ffcd 	bl	8015130 <LCD_GetPixelIndex>
 8015196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801519a:	f7ff bc85 	b.w	8014aa8 <LCD_Index2Color>
 801519e:	bf00      	nop

080151a0 <_NextPixel_SetPixel>:
 80151a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151a2:	4a56      	ldr	r2, [pc, #344]	; (80152fc <_NextPixel_SetPixel+0x15c>)
 80151a4:	6993      	ldr	r3, [r2, #24]
 80151a6:	2b02      	cmp	r3, #2
 80151a8:	b087      	sub	sp, #28
 80151aa:	d02a      	beq.n	8015202 <_NextPixel_SetPixel+0x62>
 80151ac:	2b04      	cmp	r3, #4
 80151ae:	d023      	beq.n	80151f8 <_NextPixel_SetPixel+0x58>
 80151b0:	2b01      	cmp	r3, #1
 80151b2:	d008      	beq.n	80151c6 <_NextPixel_SetPixel+0x26>
 80151b4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80151b6:	6a11      	ldr	r1, [r2, #32]
 80151b8:	4c50      	ldr	r4, [pc, #320]	; (80152fc <_NextPixel_SetPixel+0x15c>)
 80151ba:	3301      	adds	r3, #1
 80151bc:	428b      	cmp	r3, r1
 80151be:	6253      	str	r3, [r2, #36]	; 0x24
 80151c0:	d07d      	beq.n	80152be <_NextPixel_SetPixel+0x11e>
 80151c2:	b007      	add	sp, #28
 80151c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151c6:	69d3      	ldr	r3, [r2, #28]
 80151c8:	6951      	ldr	r1, [r2, #20]
 80151ca:	3b01      	subs	r3, #1
 80151cc:	2b07      	cmp	r3, #7
 80151ce:	d8f1      	bhi.n	80151b4 <_NextPixel_SetPixel+0x14>
 80151d0:	a401      	add	r4, pc, #4	; (adr r4, 80151d8 <_NextPixel_SetPixel+0x38>)
 80151d2:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 80151d6:	bf00      	nop
 80151d8:	08015287 	.word	0x08015287
 80151dc:	08015251 	.word	0x08015251
 80151e0:	080151b5 	.word	0x080151b5
 80151e4:	08015217 	.word	0x08015217
 80151e8:	080151b5 	.word	0x080151b5
 80151ec:	080151b5 	.word	0x080151b5
 80151f0:	080151b5 	.word	0x080151b5
 80151f4:	0801520d 	.word	0x0801520d
 80151f8:	6953      	ldr	r3, [r2, #20]
 80151fa:	f843 0b04 	str.w	r0, [r3], #4
 80151fe:	6153      	str	r3, [r2, #20]
 8015200:	e7d8      	b.n	80151b4 <_NextPixel_SetPixel+0x14>
 8015202:	6953      	ldr	r3, [r2, #20]
 8015204:	f823 0b02 	strh.w	r0, [r3], #2
 8015208:	6153      	str	r3, [r2, #20]
 801520a:	e7d3      	b.n	80151b4 <_NextPixel_SetPixel+0x14>
 801520c:	7008      	strb	r0, [r1, #0]
 801520e:	6953      	ldr	r3, [r2, #20]
 8015210:	3301      	adds	r3, #1
 8015212:	6153      	str	r3, [r2, #20]
 8015214:	e7ce      	b.n	80151b4 <_NextPixel_SetPixel+0x14>
 8015216:	780b      	ldrb	r3, [r1, #0]
 8015218:	f892 4028 	ldrb.w	r4, [r2, #40]	; 0x28
 801521c:	4d37      	ldr	r5, [pc, #220]	; (80152fc <_NextPixel_SetPixel+0x15c>)
 801521e:	ea23 0404 	bic.w	r4, r3, r4
 8015222:	700c      	strb	r4, [r1, #0]
 8015224:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8015226:	009b      	lsls	r3, r3, #2
 8015228:	f1c3 0304 	rsb	r3, r3, #4
 801522c:	4098      	lsls	r0, r3
 801522e:	4320      	orrs	r0, r4
 8015230:	7008      	strb	r0, [r1, #0]
 8015232:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8015234:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8015238:	3101      	adds	r1, #1
 801523a:	091b      	lsrs	r3, r3, #4
 801523c:	62d1      	str	r1, [r2, #44]	; 0x2c
 801523e:	d104      	bne.n	801524a <_NextPixel_SetPixel+0xaa>
 8015240:	6969      	ldr	r1, [r5, #20]
 8015242:	62eb      	str	r3, [r5, #44]	; 0x2c
 8015244:	3101      	adds	r1, #1
 8015246:	23f0      	movs	r3, #240	; 0xf0
 8015248:	6169      	str	r1, [r5, #20]
 801524a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 801524e:	e7b1      	b.n	80151b4 <_NextPixel_SetPixel+0x14>
 8015250:	780b      	ldrb	r3, [r1, #0]
 8015252:	f892 4028 	ldrb.w	r4, [r2, #40]	; 0x28
 8015256:	4d29      	ldr	r5, [pc, #164]	; (80152fc <_NextPixel_SetPixel+0x15c>)
 8015258:	ea23 0404 	bic.w	r4, r3, r4
 801525c:	700c      	strb	r4, [r1, #0]
 801525e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8015260:	005b      	lsls	r3, r3, #1
 8015262:	f1c3 0306 	rsb	r3, r3, #6
 8015266:	4098      	lsls	r0, r3
 8015268:	4320      	orrs	r0, r4
 801526a:	7008      	strb	r0, [r1, #0]
 801526c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801526e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8015272:	3101      	adds	r1, #1
 8015274:	089b      	lsrs	r3, r3, #2
 8015276:	62d1      	str	r1, [r2, #44]	; 0x2c
 8015278:	d1e7      	bne.n	801524a <_NextPixel_SetPixel+0xaa>
 801527a:	6969      	ldr	r1, [r5, #20]
 801527c:	62eb      	str	r3, [r5, #44]	; 0x2c
 801527e:	3101      	adds	r1, #1
 8015280:	23c0      	movs	r3, #192	; 0xc0
 8015282:	6169      	str	r1, [r5, #20]
 8015284:	e7e1      	b.n	801524a <_NextPixel_SetPixel+0xaa>
 8015286:	780b      	ldrb	r3, [r1, #0]
 8015288:	f892 4028 	ldrb.w	r4, [r2, #40]	; 0x28
 801528c:	4d1b      	ldr	r5, [pc, #108]	; (80152fc <_NextPixel_SetPixel+0x15c>)
 801528e:	ea23 0404 	bic.w	r4, r3, r4
 8015292:	700c      	strb	r4, [r1, #0]
 8015294:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8015296:	f1c3 0307 	rsb	r3, r3, #7
 801529a:	4098      	lsls	r0, r3
 801529c:	4320      	orrs	r0, r4
 801529e:	7008      	strb	r0, [r1, #0]
 80152a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80152a2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80152a6:	3101      	adds	r1, #1
 80152a8:	085b      	lsrs	r3, r3, #1
 80152aa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80152ac:	d1cd      	bne.n	801524a <_NextPixel_SetPixel+0xaa>
 80152ae:	6969      	ldr	r1, [r5, #20]
 80152b0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80152b2:	3101      	adds	r1, #1
 80152b4:	2380      	movs	r3, #128	; 0x80
 80152b6:	6169      	str	r1, [r5, #20]
 80152b8:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 80152bc:	e77a      	b.n	80151b4 <_NextPixel_SetPixel+0x14>
 80152be:	4910      	ldr	r1, [pc, #64]	; (8015300 <_NextPixel_SetPixel+0x160>)
 80152c0:	4a10      	ldr	r2, [pc, #64]	; (8015304 <_NextPixel_SetPixel+0x164>)
 80152c2:	6809      	ldr	r1, [r1, #0]
 80152c4:	6925      	ldr	r5, [r4, #16]
 80152c6:	7c48      	ldrb	r0, [r1, #17]
 80152c8:	69e1      	ldr	r1, [r4, #28]
 80152ca:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80152ce:	68a2      	ldr	r2, [r4, #8]
 80152d0:	68c6      	ldr	r6, [r0, #12]
 80152d2:	9503      	str	r5, [sp, #12]
 80152d4:	2500      	movs	r5, #0
 80152d6:	9505      	str	r5, [sp, #20]
 80152d8:	9504      	str	r5, [sp, #16]
 80152da:	9502      	str	r5, [sp, #8]
 80152dc:	9101      	str	r1, [sp, #4]
 80152de:	2701      	movs	r7, #1
 80152e0:	6861      	ldr	r1, [r4, #4]
 80152e2:	9700      	str	r7, [sp, #0]
 80152e4:	6876      	ldr	r6, [r6, #4]
 80152e6:	47b0      	blx	r6
 80152e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152ea:	6861      	ldr	r1, [r4, #4]
 80152ec:	6922      	ldr	r2, [r4, #16]
 80152ee:	6265      	str	r5, [r4, #36]	; 0x24
 80152f0:	440b      	add	r3, r1
 80152f2:	6063      	str	r3, [r4, #4]
 80152f4:	6162      	str	r2, [r4, #20]
 80152f6:	b007      	add	sp, #28
 80152f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152fa:	bf00      	nop
 80152fc:	20000808 	.word	0x20000808
 8015300:	20000014 	.word	0x20000014
 8015304:	20035df8 	.word	0x20035df8

08015308 <_NextPixel_Start>:
 8015308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801530c:	4b29      	ldr	r3, [pc, #164]	; (80153b4 <_NextPixel_Start+0xac>)
 801530e:	4c2a      	ldr	r4, [pc, #168]	; (80153b8 <_NextPixel_Start+0xb0>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	1a12      	subs	r2, r2, r0
 8015314:	4607      	mov	r7, r0
 8015316:	7c58      	ldrb	r0, [r3, #17]
 8015318:	1c55      	adds	r5, r2, #1
 801531a:	4688      	mov	r8, r1
 801531c:	f7ff fe3c 	bl	8014f98 <GUI_GetBitsPerPixelEx>
 8015320:	2818      	cmp	r0, #24
 8015322:	61e0      	str	r0, [r4, #28]
 8015324:	d035      	beq.n	8015392 <_NextPixel_Start+0x8a>
 8015326:	2808      	cmp	r0, #8
 8015328:	dc38      	bgt.n	801539c <_NextPixel_Start+0x94>
 801532a:	2601      	movs	r6, #1
 801532c:	46b1      	mov	r9, r6
 801532e:	f7fb fd13 	bl	8010d58 <GUI_ALLOC_GetMaxSize>
 8015332:	fb05 f509 	mul.w	r5, r5, r9
 8015336:	42a8      	cmp	r0, r5
 8015338:	bf2e      	itee	cs
 801533a:	462e      	movcs	r6, r5
 801533c:	fbb0 f0f6 	udivcc	r0, r0, r6
 8015340:	4346      	mulcc	r6, r0
 8015342:	4628      	mov	r0, r5
 8015344:	2500      	movs	r5, #0
 8015346:	6027      	str	r7, [r4, #0]
 8015348:	6067      	str	r7, [r4, #4]
 801534a:	f8c4 8008 	str.w	r8, [r4, #8]
 801534e:	f8c4 9018 	str.w	r9, [r4, #24]
 8015352:	6265      	str	r5, [r4, #36]	; 0x24
 8015354:	fb96 f6f9 	sdiv	r6, r6, r9
 8015358:	6226      	str	r6, [r4, #32]
 801535a:	f7fb fcb9 	bl	8010cd0 <GUI_ALLOC_AllocNoInit>
 801535e:	60e0      	str	r0, [r4, #12]
 8015360:	4c15      	ldr	r4, [pc, #84]	; (80153b8 <_NextPixel_Start+0xb0>)
 8015362:	b910      	cbnz	r0, 801536a <_NextPixel_Start+0x62>
 8015364:	2001      	movs	r0, #1
 8015366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801536a:	f7fb fcc9 	bl	8010d00 <GUI_ALLOC_LockH>
 801536e:	69e3      	ldr	r3, [r4, #28]
 8015370:	6120      	str	r0, [r4, #16]
 8015372:	2b07      	cmp	r3, #7
 8015374:	6160      	str	r0, [r4, #20]
 8015376:	dc16      	bgt.n	80153a6 <_NextPixel_Start+0x9e>
 8015378:	2201      	movs	r2, #1
 801537a:	4910      	ldr	r1, [pc, #64]	; (80153bc <_NextPixel_Start+0xb4>)
 801537c:	62e5      	str	r5, [r4, #44]	; 0x2c
 801537e:	fa02 f303 	lsl.w	r3, r2, r3
 8015382:	440b      	add	r3, r1
 8015384:	4628      	mov	r0, r5
 8015386:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801538a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 801538e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015392:	2320      	movs	r3, #32
 8015394:	2604      	movs	r6, #4
 8015396:	61e3      	str	r3, [r4, #28]
 8015398:	46b1      	mov	r9, r6
 801539a:	e7c8      	b.n	801532e <_NextPixel_Start+0x26>
 801539c:	2810      	cmp	r0, #16
 801539e:	dc05      	bgt.n	80153ac <_NextPixel_Start+0xa4>
 80153a0:	2602      	movs	r6, #2
 80153a2:	46b1      	mov	r9, r6
 80153a4:	e7c3      	b.n	801532e <_NextPixel_Start+0x26>
 80153a6:	4628      	mov	r0, r5
 80153a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153ac:	2604      	movs	r6, #4
 80153ae:	46b1      	mov	r9, r6
 80153b0:	e7bd      	b.n	801532e <_NextPixel_Start+0x26>
 80153b2:	bf00      	nop
 80153b4:	20000014 	.word	0x20000014
 80153b8:	20000808 	.word	0x20000808
 80153bc:	0802760c 	.word	0x0802760c

080153c0 <_NextPixel_NextLine>:
 80153c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153c2:	4c11      	ldr	r4, [pc, #68]	; (8015408 <_NextPixel_NextLine+0x48>)
 80153c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153c6:	b087      	sub	sp, #28
 80153c8:	b1bb      	cbz	r3, 80153fa <_NextPixel_NextLine+0x3a>
 80153ca:	4910      	ldr	r1, [pc, #64]	; (801540c <_NextPixel_NextLine+0x4c>)
 80153cc:	4a10      	ldr	r2, [pc, #64]	; (8015410 <_NextPixel_NextLine+0x50>)
 80153ce:	6809      	ldr	r1, [r1, #0]
 80153d0:	6925      	ldr	r5, [r4, #16]
 80153d2:	7c48      	ldrb	r0, [r1, #17]
 80153d4:	69e1      	ldr	r1, [r4, #28]
 80153d6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80153da:	68a2      	ldr	r2, [r4, #8]
 80153dc:	68c6      	ldr	r6, [r0, #12]
 80153de:	9503      	str	r5, [sp, #12]
 80153e0:	2701      	movs	r7, #1
 80153e2:	2500      	movs	r5, #0
 80153e4:	9101      	str	r1, [sp, #4]
 80153e6:	9505      	str	r5, [sp, #20]
 80153e8:	9504      	str	r5, [sp, #16]
 80153ea:	9502      	str	r5, [sp, #8]
 80153ec:	9700      	str	r7, [sp, #0]
 80153ee:	6861      	ldr	r1, [r4, #4]
 80153f0:	6876      	ldr	r6, [r6, #4]
 80153f2:	47b0      	blx	r6
 80153f4:	6923      	ldr	r3, [r4, #16]
 80153f6:	6265      	str	r5, [r4, #36]	; 0x24
 80153f8:	6163      	str	r3, [r4, #20]
 80153fa:	68a3      	ldr	r3, [r4, #8]
 80153fc:	6822      	ldr	r2, [r4, #0]
 80153fe:	6062      	str	r2, [r4, #4]
 8015400:	3301      	adds	r3, #1
 8015402:	60a3      	str	r3, [r4, #8]
 8015404:	b007      	add	sp, #28
 8015406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015408:	20000808 	.word	0x20000808
 801540c:	20000014 	.word	0x20000014
 8015410:	20035df8 	.word	0x20035df8

08015414 <_NextPixel_End>:
 8015414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015416:	4c14      	ldr	r4, [pc, #80]	; (8015468 <_NextPixel_End+0x54>)
 8015418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801541a:	b087      	sub	sp, #28
 801541c:	b1db      	cbz	r3, 8015456 <_NextPixel_End+0x42>
 801541e:	4913      	ldr	r1, [pc, #76]	; (801546c <_NextPixel_End+0x58>)
 8015420:	4a13      	ldr	r2, [pc, #76]	; (8015470 <_NextPixel_End+0x5c>)
 8015422:	6809      	ldr	r1, [r1, #0]
 8015424:	6925      	ldr	r5, [r4, #16]
 8015426:	7c48      	ldrb	r0, [r1, #17]
 8015428:	69e1      	ldr	r1, [r4, #28]
 801542a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 801542e:	68a2      	ldr	r2, [r4, #8]
 8015430:	68c6      	ldr	r6, [r0, #12]
 8015432:	9503      	str	r5, [sp, #12]
 8015434:	2701      	movs	r7, #1
 8015436:	2500      	movs	r5, #0
 8015438:	9101      	str	r1, [sp, #4]
 801543a:	9505      	str	r5, [sp, #20]
 801543c:	9504      	str	r5, [sp, #16]
 801543e:	9502      	str	r5, [sp, #8]
 8015440:	9700      	str	r7, [sp, #0]
 8015442:	6861      	ldr	r1, [r4, #4]
 8015444:	6876      	ldr	r6, [r6, #4]
 8015446:	47b0      	blx	r6
 8015448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801544a:	6861      	ldr	r1, [r4, #4]
 801544c:	6922      	ldr	r2, [r4, #16]
 801544e:	6265      	str	r5, [r4, #36]	; 0x24
 8015450:	440b      	add	r3, r1
 8015452:	6063      	str	r3, [r4, #4]
 8015454:	6162      	str	r2, [r4, #20]
 8015456:	4807      	ldr	r0, [pc, #28]	; (8015474 <_NextPixel_End+0x60>)
 8015458:	f7fb fc64 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801545c:	68e0      	ldr	r0, [r4, #12]
 801545e:	b007      	add	sp, #28
 8015460:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015464:	f7fb bde2 	b.w	801102c <GUI_ALLOC_Free>
 8015468:	20000808 	.word	0x20000808
 801546c:	20000014 	.word	0x20000014
 8015470:	20035df8 	.word	0x20035df8
 8015474:	20000818 	.word	0x20000818

08015478 <LCD_GetNextPixelAPI>:
 8015478:	b500      	push	{lr}
 801547a:	4a0b      	ldr	r2, [pc, #44]	; (80154a8 <LCD_GetNextPixelAPI+0x30>)
 801547c:	4b0b      	ldr	r3, [pc, #44]	; (80154ac <LCD_GetNextPixelAPI+0x34>)
 801547e:	6812      	ldr	r2, [r2, #0]
 8015480:	7c52      	ldrb	r2, [r2, #17]
 8015482:	b083      	sub	sp, #12
 8015484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015488:	9301      	str	r3, [sp, #4]
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801548e:	b133      	cbz	r3, 801549e <LCD_GetNextPixelAPI+0x26>
 8015490:	2108      	movs	r1, #8
 8015492:	a801      	add	r0, sp, #4
 8015494:	4798      	blx	r3
 8015496:	b110      	cbz	r0, 801549e <LCD_GetNextPixelAPI+0x26>
 8015498:	b003      	add	sp, #12
 801549a:	f85d fb04 	ldr.w	pc, [sp], #4
 801549e:	4804      	ldr	r0, [pc, #16]	; (80154b0 <LCD_GetNextPixelAPI+0x38>)
 80154a0:	b003      	add	sp, #12
 80154a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80154a6:	bf00      	nop
 80154a8:	20000014 	.word	0x20000014
 80154ac:	20035df8 	.word	0x20035df8
 80154b0:	2000006c 	.word	0x2000006c

080154b4 <_GetByte_pPixel>:
 80154b4:	4a02      	ldr	r2, [pc, #8]	; (80154c0 <_GetByte_pPixel+0xc>)
 80154b6:	6813      	ldr	r3, [r2, #0]
 80154b8:	1c59      	adds	r1, r3, #1
 80154ba:	6011      	str	r1, [r2, #0]
 80154bc:	7818      	ldrb	r0, [r3, #0]
 80154be:	4770      	bx	lr
 80154c0:	20000838 	.word	0x20000838

080154c4 <_GetPixel_pPixel>:
 80154c4:	4a02      	ldr	r2, [pc, #8]	; (80154d0 <_GetPixel_pPixel+0xc>)
 80154c6:	6813      	ldr	r3, [r2, #0]
 80154c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80154cc:	6013      	str	r3, [r2, #0]
 80154ce:	4770      	bx	lr
 80154d0:	20000838 	.word	0x20000838

080154d4 <_Draw>:
 80154d4:	b570      	push	{r4, r5, r6, lr}
 80154d6:	4d20      	ldr	r5, [pc, #128]	; (8015558 <_Draw+0x84>)
 80154d8:	b088      	sub	sp, #32
 80154da:	4604      	mov	r4, r0
 80154dc:	ae07      	add	r6, sp, #28
 80154de:	3004      	adds	r0, #4
 80154e0:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80154e2:	e88d 0060 	stmia.w	sp, {r5, r6}
 80154e6:	f7fd fff7 	bl	80134d8 <GUI__DoAlphaBlending>
 80154ea:	9a07      	ldr	r2, [sp, #28]
 80154ec:	6020      	str	r0, [r4, #0]
 80154ee:	07d3      	lsls	r3, r2, #31
 80154f0:	d510      	bpl.n	8015514 <_Draw+0x40>
 80154f2:	6962      	ldr	r2, [r4, #20]
 80154f4:	b982      	cbnz	r2, 8015518 <_Draw+0x44>
 80154f6:	6922      	ldr	r2, [r4, #16]
 80154f8:	4603      	mov	r3, r0
 80154fa:	68a1      	ldr	r1, [r4, #8]
 80154fc:	6860      	ldr	r0, [r4, #4]
 80154fe:	69a5      	ldr	r5, [r4, #24]
 8015500:	9304      	str	r3, [sp, #16]
 8015502:	2400      	movs	r4, #0
 8015504:	2301      	movs	r3, #1
 8015506:	9502      	str	r5, [sp, #8]
 8015508:	9405      	str	r4, [sp, #20]
 801550a:	9403      	str	r4, [sp, #12]
 801550c:	9301      	str	r3, [sp, #4]
 801550e:	9300      	str	r3, [sp, #0]
 8015510:	f7ff f8a0 	bl	8014654 <LCD_DrawBitmap>
 8015514:	b008      	add	sp, #32
 8015516:	bd70      	pop	{r4, r5, r6, pc}
 8015518:	69e3      	ldr	r3, [r4, #28]
 801551a:	69a2      	ldr	r2, [r4, #24]
 801551c:	6921      	ldr	r1, [r4, #16]
 801551e:	f00a fc49 	bl	801fdb4 <GUI__CompactPixelIndicesEx>
 8015522:	b940      	cbnz	r0, 8015536 <_Draw+0x62>
 8015524:	69e3      	ldr	r3, [r4, #28]
 8015526:	6825      	ldr	r5, [r4, #0]
 8015528:	691e      	ldr	r6, [r3, #16]
 801552a:	b146      	cbz	r6, 801553e <_Draw+0x6a>
 801552c:	2304      	movs	r3, #4
 801552e:	6922      	ldr	r2, [r4, #16]
 8015530:	4629      	mov	r1, r5
 8015532:	4628      	mov	r0, r5
 8015534:	47b0      	blx	r6
 8015536:	6922      	ldr	r2, [r4, #16]
 8015538:	6823      	ldr	r3, [r4, #0]
 801553a:	e7de      	b.n	80154fa <_Draw+0x26>
 801553c:	69e3      	ldr	r3, [r4, #28]
 801553e:	6828      	ldr	r0, [r5, #0]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	4798      	blx	r3
 8015544:	6922      	ldr	r2, [r4, #16]
 8015546:	f845 0b04 	str.w	r0, [r5], #4
 801554a:	3a01      	subs	r2, #1
 801554c:	6122      	str	r2, [r4, #16]
 801554e:	2a00      	cmp	r2, #0
 8015550:	d1f4      	bne.n	801553c <_Draw+0x68>
 8015552:	6823      	ldr	r3, [r4, #0]
 8015554:	e7d1      	b.n	80154fa <_Draw+0x26>
 8015556:	bf00      	nop
 8015558:	0801e949 	.word	0x0801e949

0801555c <_DrawClip>:
 801555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801555e:	4b19      	ldr	r3, [pc, #100]	; (80155c4 <_DrawClip+0x68>)
 8015560:	6882      	ldr	r2, [r0, #8]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	6845      	ldr	r5, [r0, #4]
 8015566:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 801556a:	68c7      	ldr	r7, [r0, #12]
 801556c:	6906      	ldr	r6, [r0, #16]
 801556e:	428a      	cmp	r2, r1
 8015570:	4604      	mov	r4, r0
 8015572:	db20      	blt.n	80155b6 <_DrawClip+0x5a>
 8015574:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8015578:	428a      	cmp	r2, r1
 801557a:	dc1c      	bgt.n	80155b6 <_DrawClip+0x5a>
 801557c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015580:	4295      	cmp	r5, r2
 8015582:	dc18      	bgt.n	80155b6 <_DrawClip+0x5a>
 8015584:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015588:	19ab      	adds	r3, r5, r6
 801558a:	428b      	cmp	r3, r1
 801558c:	dd13      	ble.n	80155b6 <_DrawClip+0x5a>
 801558e:	428d      	cmp	r5, r1
 8015590:	da15      	bge.n	80155be <_DrawClip+0x62>
 8015592:	1b4b      	subs	r3, r1, r5
 8015594:	1af0      	subs	r0, r6, r3
 8015596:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 801559a:	6061      	str	r1, [r4, #4]
 801559c:	6120      	str	r0, [r4, #16]
 801559e:	180b      	adds	r3, r1, r0
 80155a0:	f8c4 e00c 	str.w	lr, [r4, #12]
 80155a4:	3b01      	subs	r3, #1
 80155a6:	429a      	cmp	r2, r3
 80155a8:	da02      	bge.n	80155b0 <_DrawClip+0x54>
 80155aa:	1a9b      	subs	r3, r3, r2
 80155ac:	1ac3      	subs	r3, r0, r3
 80155ae:	6123      	str	r3, [r4, #16]
 80155b0:	4620      	mov	r0, r4
 80155b2:	f7ff ff8f 	bl	80154d4 <_Draw>
 80155b6:	6065      	str	r5, [r4, #4]
 80155b8:	60e7      	str	r7, [r4, #12]
 80155ba:	6126      	str	r6, [r4, #16]
 80155bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155be:	4630      	mov	r0, r6
 80155c0:	e7f0      	b.n	80155a4 <_DrawClip+0x48>
 80155c2:	bf00      	nop
 80155c4:	20000014 	.word	0x20000014

080155c8 <_DrawBitmap_RLE32Ex>:
 80155c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155cc:	4c82      	ldr	r4, [pc, #520]	; (80157d8 <_DrawBitmap_RLE32Ex+0x210>)
 80155ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80155d2:	b08b      	sub	sp, #44	; 0x2c
 80155d4:	f1b8 0f00 	cmp.w	r8, #0
 80155d8:	d013      	beq.n	8015602 <_DrawBitmap_RLE32Ex+0x3a>
 80155da:	461f      	mov	r7, r3
 80155dc:	4616      	mov	r6, r2
 80155de:	468b      	mov	fp, r1
 80155e0:	4605      	mov	r5, r0
 80155e2:	f7fb fc53 	bl	8010e8c <GUI_ALLOC_RequestSize>
 80155e6:	6862      	ldr	r2, [r4, #4]
 80155e8:	f8c8 0018 	str.w	r0, [r8, #24]
 80155ec:	6993      	ldr	r3, [r2, #24]
 80155ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80155f2:	d909      	bls.n	8015608 <_DrawBitmap_RLE32Ex+0x40>
 80155f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80155f8:	6190      	str	r0, [r2, #24]
 80155fa:	f7fb fdd7 	bl	80111ac <GUI_ALLOC_AllocZero>
 80155fe:	4680      	mov	r8, r0
 8015600:	b930      	cbnz	r0, 8015610 <_DrawBitmap_RLE32Ex+0x48>
 8015602:	b00b      	add	sp, #44	; 0x2c
 8015604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015608:	2b00      	cmp	r3, #0
 801560a:	d0fa      	beq.n	8015602 <_DrawBitmap_RLE32Ex+0x3a>
 801560c:	4618      	mov	r0, r3
 801560e:	e7f4      	b.n	80155fa <_DrawBitmap_RLE32Ex+0x32>
 8015610:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015614:	f7fb fb74 	bl	8010d00 <GUI_ALLOC_LockH>
 8015618:	6863      	ldr	r3, [r4, #4]
 801561a:	f8c9 000c 	str.w	r0, [r9, #12]
 801561e:	68d9      	ldr	r1, [r3, #12]
 8015620:	699a      	ldr	r2, [r3, #24]
 8015622:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8015626:	9503      	str	r5, [sp, #12]
 8015628:	440a      	add	r2, r1
 801562a:	2100      	movs	r1, #0
 801562c:	611a      	str	r2, [r3, #16]
 801562e:	6159      	str	r1, [r3, #20]
 8015630:	2001      	movs	r0, #1
 8015632:	f8cd b010 	str.w	fp, [sp, #16]
 8015636:	f7fe f8f7 	bl	8013828 <GUI__AllocAlphaBuffer>
 801563a:	4603      	mov	r3, r0
 801563c:	b158      	cbz	r0, 8015656 <_DrawBitmap_RLE32Ex+0x8e>
 801563e:	6860      	ldr	r0, [r4, #4]
 8015640:	f8c0 9008 	str.w	r9, [r0, #8]
 8015644:	300c      	adds	r0, #12
 8015646:	f7fb fb6d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801564a:	4640      	mov	r0, r8
 801564c:	f7fb fcee 	bl	801102c <GUI_ALLOC_Free>
 8015650:	b00b      	add	sp, #44	; 0x2c
 8015652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015656:	a902      	add	r1, sp, #8
 8015658:	aa05      	add	r2, sp, #20
 801565a:	f7fe f881 	bl	8013760 <GUI__GetAlphaBuffer>
 801565e:	2800      	cmp	r0, #0
 8015660:	d1ed      	bne.n	801563e <_DrawBitmap_RLE32Ex+0x76>
 8015662:	f8df a188 	ldr.w	sl, [pc, #392]	; 80157ec <_DrawBitmap_RLE32Ex+0x224>
 8015666:	9a03      	ldr	r2, [sp, #12]
 8015668:	f8da 3000 	ldr.w	r3, [sl]
 801566c:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8015670:	428a      	cmp	r2, r1
 8015672:	dce4      	bgt.n	801563e <_DrawBitmap_RLE32Ex+0x76>
 8015674:	9904      	ldr	r1, [sp, #16]
 8015676:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801567a:	4281      	cmp	r1, r0
 801567c:	dcdf      	bgt.n	801563e <_DrawBitmap_RLE32Ex+0x76>
 801567e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8015682:	4432      	add	r2, r6
 8015684:	4282      	cmp	r2, r0
 8015686:	ddda      	ble.n	801563e <_DrawBitmap_RLE32Ex+0x76>
 8015688:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801568c:	4439      	add	r1, r7
 801568e:	4291      	cmp	r1, r2
 8015690:	ddd5      	ble.n	801563e <_DrawBitmap_RLE32Ex+0x76>
 8015692:	7c5a      	ldrb	r2, [r3, #17]
 8015694:	4b51      	ldr	r3, [pc, #324]	; (80157dc <_DrawBitmap_RLE32Ex+0x214>)
 8015696:	9300      	str	r3, [sp, #0]
 8015698:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801569c:	68c2      	ldr	r2, [r0, #12]
 801569e:	2108      	movs	r1, #8
 80156a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80156a2:	4790      	blx	r2
 80156a4:	2817      	cmp	r0, #23
 80156a6:	bf84      	itt	hi
 80156a8:	2220      	movhi	r2, #32
 80156aa:	9208      	strhi	r2, [sp, #32]
 80156ac:	f8da 2000 	ldr.w	r2, [sl]
 80156b0:	bf98      	it	ls
 80156b2:	9008      	strls	r0, [sp, #32]
 80156b4:	7c51      	ldrb	r1, [r2, #17]
 80156b6:	9b00      	ldr	r3, [sp, #0]
 80156b8:	4849      	ldr	r0, [pc, #292]	; (80157e0 <_DrawBitmap_RLE32Ex+0x218>)
 80156ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80156be:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 80156c2:	691b      	ldr	r3, [r3, #16]
 80156c4:	9309      	str	r3, [sp, #36]	; 0x24
 80156c6:	1a1b      	subs	r3, r3, r0
 80156c8:	bf18      	it	ne
 80156ca:	2301      	movne	r3, #1
 80156cc:	eb05 0a06 	add.w	sl, r5, r6
 80156d0:	428d      	cmp	r5, r1
 80156d2:	9307      	str	r3, [sp, #28]
 80156d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80156d8:	db7a      	blt.n	80157d0 <_DrawBitmap_RLE32Ex+0x208>
 80156da:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 80156de:	459b      	cmp	fp, r3
 80156e0:	db76      	blt.n	80157d0 <_DrawBitmap_RLE32Ex+0x208>
 80156e2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80156e6:	459a      	cmp	sl, r3
 80156e8:	dc72      	bgt.n	80157d0 <_DrawBitmap_RLE32Ex+0x208>
 80156ea:	eb0b 0307 	add.w	r3, fp, r7
 80156ee:	493d      	ldr	r1, [pc, #244]	; (80157e4 <_DrawBitmap_RLE32Ex+0x21c>)
 80156f0:	f9b2 b00e 	ldrsh.w	fp, [r2, #14]
 80156f4:	4a3c      	ldr	r2, [pc, #240]	; (80157e8 <_DrawBitmap_RLE32Ex+0x220>)
 80156f6:	3b01      	subs	r3, #1
 80156f8:	455b      	cmp	r3, fp
 80156fa:	bfc8      	it	gt
 80156fc:	4611      	movgt	r1, r2
 80156fe:	9100      	str	r1, [sp, #0]
 8015700:	fb07 f306 	mul.w	r3, r7, r6
 8015704:	9301      	str	r3, [sp, #4]
 8015706:	68a3      	ldr	r3, [r4, #8]
 8015708:	4798      	blx	r3
 801570a:	4b33      	ldr	r3, [pc, #204]	; (80157d8 <_DrawBitmap_RLE32Ex+0x210>)
 801570c:	4607      	mov	r7, r0
 801570e:	2800      	cmp	r0, #0
 8015710:	d035      	beq.n	801577e <_DrawBitmap_RLE32Ex+0x1b6>
 8015712:	68db      	ldr	r3, [r3, #12]
 8015714:	4798      	blx	r3
 8015716:	9b01      	ldr	r3, [sp, #4]
 8015718:	4606      	mov	r6, r0
 801571a:	1bdb      	subs	r3, r3, r7
 801571c:	9803      	ldr	r0, [sp, #12]
 801571e:	9301      	str	r3, [sp, #4]
 8015720:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8015724:	ebc0 030a 	rsb	r3, r0, sl
 8015728:	42bb      	cmp	r3, r7
 801572a:	da19      	bge.n	8015760 <_DrawBitmap_RLE32Ex+0x198>
 801572c:	3301      	adds	r3, #1
 801572e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8015732:	9306      	str	r3, [sp, #24]
 8015734:	d00a      	beq.n	801574c <_DrawBitmap_RLE32Ex+0x184>
 8015736:	9805      	ldr	r0, [sp, #20]
 8015738:	b11b      	cbz	r3, 8015742 <_DrawBitmap_RLE32Ex+0x17a>
 801573a:	3b01      	subs	r3, #1
 801573c:	f840 6b04 	str.w	r6, [r0], #4
 8015740:	d1fb      	bne.n	801573a <_DrawBitmap_RLE32Ex+0x172>
 8015742:	a802      	add	r0, sp, #8
 8015744:	9b00      	ldr	r3, [sp, #0]
 8015746:	4798      	blx	r3
 8015748:	9803      	ldr	r0, [sp, #12]
 801574a:	9b06      	ldr	r3, [sp, #24]
 801574c:	4418      	add	r0, r3
 801574e:	4582      	cmp	sl, r0
 8015750:	db0d      	blt.n	801576e <_DrawBitmap_RLE32Ex+0x1a6>
 8015752:	9003      	str	r0, [sp, #12]
 8015754:	1aff      	subs	r7, r7, r3
 8015756:	d1e5      	bne.n	8015724 <_DrawBitmap_RLE32Ex+0x15c>
 8015758:	9b01      	ldr	r3, [sp, #4]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d1d3      	bne.n	8015706 <_DrawBitmap_RLE32Ex+0x13e>
 801575e:	e76e      	b.n	801563e <_DrawBitmap_RLE32Ex+0x76>
 8015760:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8015764:	9706      	str	r7, [sp, #24]
 8015766:	d008      	beq.n	801577a <_DrawBitmap_RLE32Ex+0x1b2>
 8015768:	9805      	ldr	r0, [sp, #20]
 801576a:	463b      	mov	r3, r7
 801576c:	e7e5      	b.n	801573a <_DrawBitmap_RLE32Ex+0x172>
 801576e:	9804      	ldr	r0, [sp, #16]
 8015770:	9503      	str	r5, [sp, #12]
 8015772:	3001      	adds	r0, #1
 8015774:	9004      	str	r0, [sp, #16]
 8015776:	4628      	mov	r0, r5
 8015778:	e7ec      	b.n	8015754 <_DrawBitmap_RLE32Ex+0x18c>
 801577a:	463b      	mov	r3, r7
 801577c:	e7e6      	b.n	801574c <_DrawBitmap_RLE32Ex+0x184>
 801577e:	689b      	ldr	r3, [r3, #8]
 8015780:	4798      	blx	r3
 8015782:	9a01      	ldr	r2, [sp, #4]
 8015784:	9b03      	ldr	r3, [sp, #12]
 8015786:	1a12      	subs	r2, r2, r0
 8015788:	4607      	mov	r7, r0
 801578a:	9201      	str	r2, [sp, #4]
 801578c:	ebc3 030a 	rsb	r3, r3, sl
 8015790:	42bb      	cmp	r3, r7
 8015792:	bfb4      	ite	lt
 8015794:	1c5e      	addlt	r6, r3, #1
 8015796:	463e      	movge	r6, r7
 8015798:	9606      	str	r6, [sp, #24]
 801579a:	f8dd b014 	ldr.w	fp, [sp, #20]
 801579e:	b12e      	cbz	r6, 80157ac <_DrawBitmap_RLE32Ex+0x1e4>
 80157a0:	68e1      	ldr	r1, [r4, #12]
 80157a2:	4788      	blx	r1
 80157a4:	3e01      	subs	r6, #1
 80157a6:	f84b 0b04 	str.w	r0, [fp], #4
 80157aa:	d1f9      	bne.n	80157a0 <_DrawBitmap_RLE32Ex+0x1d8>
 80157ac:	9b00      	ldr	r3, [sp, #0]
 80157ae:	a802      	add	r0, sp, #8
 80157b0:	4798      	blx	r3
 80157b2:	9a06      	ldr	r2, [sp, #24]
 80157b4:	9b03      	ldr	r3, [sp, #12]
 80157b6:	4413      	add	r3, r2
 80157b8:	459a      	cmp	sl, r3
 80157ba:	db03      	blt.n	80157c4 <_DrawBitmap_RLE32Ex+0x1fc>
 80157bc:	9303      	str	r3, [sp, #12]
 80157be:	1abf      	subs	r7, r7, r2
 80157c0:	d1e4      	bne.n	801578c <_DrawBitmap_RLE32Ex+0x1c4>
 80157c2:	e7c9      	b.n	8015758 <_DrawBitmap_RLE32Ex+0x190>
 80157c4:	9b04      	ldr	r3, [sp, #16]
 80157c6:	9503      	str	r5, [sp, #12]
 80157c8:	3301      	adds	r3, #1
 80157ca:	9304      	str	r3, [sp, #16]
 80157cc:	462b      	mov	r3, r5
 80157ce:	e7f6      	b.n	80157be <_DrawBitmap_RLE32Ex+0x1f6>
 80157d0:	4b05      	ldr	r3, [pc, #20]	; (80157e8 <_DrawBitmap_RLE32Ex+0x220>)
 80157d2:	9300      	str	r3, [sp, #0]
 80157d4:	e794      	b.n	8015700 <_DrawBitmap_RLE32Ex+0x138>
 80157d6:	bf00      	nop
 80157d8:	20000838 	.word	0x20000838
 80157dc:	20035df8 	.word	0x20035df8
 80157e0:	08026154 	.word	0x08026154
 80157e4:	080154d5 	.word	0x080154d5
 80157e8:	0801555d 	.word	0x0801555d
 80157ec:	20000014 	.word	0x20000014

080157f0 <_DrawBitmap_RLE32>:
 80157f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157f4:	b089      	sub	sp, #36	; 0x24
 80157f6:	4d6a      	ldr	r5, [pc, #424]	; (80159a0 <_DrawBitmap_RLE32+0x1b0>)
 80157f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80157fa:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 80159b0 <_DrawBitmap_RLE32+0x1c0>
 80157fe:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 80159b4 <_DrawBitmap_RLE32+0x1c4>
 8015802:	602c      	str	r4, [r5, #0]
 8015804:	4606      	mov	r6, r0
 8015806:	2001      	movs	r0, #1
 8015808:	460c      	mov	r4, r1
 801580a:	9601      	str	r6, [sp, #4]
 801580c:	9102      	str	r1, [sp, #8]
 801580e:	4617      	mov	r7, r2
 8015810:	4699      	mov	r9, r3
 8015812:	f8c5 c008 	str.w	ip, [r5, #8]
 8015816:	f8c5 e00c 	str.w	lr, [r5, #12]
 801581a:	f7fe f805 	bl	8013828 <GUI__AllocAlphaBuffer>
 801581e:	b110      	cbz	r0, 8015826 <_DrawBitmap_RLE32+0x36>
 8015820:	b009      	add	sp, #36	; 0x24
 8015822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015826:	4603      	mov	r3, r0
 8015828:	4669      	mov	r1, sp
 801582a:	aa03      	add	r2, sp, #12
 801582c:	f7fd ff98 	bl	8013760 <GUI__GetAlphaBuffer>
 8015830:	2800      	cmp	r0, #0
 8015832:	d1f5      	bne.n	8015820 <_DrawBitmap_RLE32+0x30>
 8015834:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80159b8 <_DrawBitmap_RLE32+0x1c8>
 8015838:	9a01      	ldr	r2, [sp, #4]
 801583a:	f8d8 3000 	ldr.w	r3, [r8]
 801583e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8015842:	428a      	cmp	r2, r1
 8015844:	dcec      	bgt.n	8015820 <_DrawBitmap_RLE32+0x30>
 8015846:	9902      	ldr	r1, [sp, #8]
 8015848:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801584c:	4281      	cmp	r1, r0
 801584e:	dce7      	bgt.n	8015820 <_DrawBitmap_RLE32+0x30>
 8015850:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8015854:	443a      	add	r2, r7
 8015856:	4282      	cmp	r2, r0
 8015858:	dde2      	ble.n	8015820 <_DrawBitmap_RLE32+0x30>
 801585a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801585e:	4449      	add	r1, r9
 8015860:	4291      	cmp	r1, r2
 8015862:	dddd      	ble.n	8015820 <_DrawBitmap_RLE32+0x30>
 8015864:	7c5b      	ldrb	r3, [r3, #17]
 8015866:	f8df a154 	ldr.w	sl, [pc, #340]	; 80159bc <_DrawBitmap_RLE32+0x1cc>
 801586a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801586e:	68c3      	ldr	r3, [r0, #12]
 8015870:	2108      	movs	r1, #8
 8015872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015874:	4798      	blx	r3
 8015876:	2817      	cmp	r0, #23
 8015878:	bf88      	it	hi
 801587a:	2320      	movhi	r3, #32
 801587c:	f8d8 2000 	ldr.w	r2, [r8]
 8015880:	bf94      	ite	ls
 8015882:	9006      	strls	r0, [sp, #24]
 8015884:	9306      	strhi	r3, [sp, #24]
 8015886:	7c53      	ldrb	r3, [r2, #17]
 8015888:	4846      	ldr	r0, [pc, #280]	; (80159a4 <_DrawBitmap_RLE32+0x1b4>)
 801588a:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 801588e:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8015892:	691b      	ldr	r3, [r3, #16]
 8015894:	9307      	str	r3, [sp, #28]
 8015896:	1a1b      	subs	r3, r3, r0
 8015898:	bf18      	it	ne
 801589a:	2301      	movne	r3, #1
 801589c:	eb06 0807 	add.w	r8, r6, r7
 80158a0:	428e      	cmp	r6, r1
 80158a2:	9305      	str	r3, [sp, #20]
 80158a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80158a8:	db77      	blt.n	801599a <_DrawBitmap_RLE32+0x1aa>
 80158aa:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 80158ae:	429c      	cmp	r4, r3
 80158b0:	db73      	blt.n	801599a <_DrawBitmap_RLE32+0x1aa>
 80158b2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80158b6:	4598      	cmp	r8, r3
 80158b8:	dc6f      	bgt.n	801599a <_DrawBitmap_RLE32+0x1aa>
 80158ba:	f9b2 a00e 	ldrsh.w	sl, [r2, #14]
 80158be:	493a      	ldr	r1, [pc, #232]	; (80159a8 <_DrawBitmap_RLE32+0x1b8>)
 80158c0:	4a3a      	ldr	r2, [pc, #232]	; (80159ac <_DrawBitmap_RLE32+0x1bc>)
 80158c2:	eb04 0309 	add.w	r3, r4, r9
 80158c6:	3b01      	subs	r3, #1
 80158c8:	4553      	cmp	r3, sl
 80158ca:	bfd4      	ite	le
 80158cc:	468a      	movle	sl, r1
 80158ce:	4692      	movgt	sl, r2
 80158d0:	fb09 f907 	mul.w	r9, r9, r7
 80158d4:	68ab      	ldr	r3, [r5, #8]
 80158d6:	4798      	blx	r3
 80158d8:	4b31      	ldr	r3, [pc, #196]	; (80159a0 <_DrawBitmap_RLE32+0x1b0>)
 80158da:	4683      	mov	fp, r0
 80158dc:	2800      	cmp	r0, #0
 80158de:	d032      	beq.n	8015946 <_DrawBitmap_RLE32+0x156>
 80158e0:	68db      	ldr	r3, [r3, #12]
 80158e2:	4798      	blx	r3
 80158e4:	9901      	ldr	r1, [sp, #4]
 80158e6:	4607      	mov	r7, r0
 80158e8:	ebcb 0909 	rsb	r9, fp, r9
 80158ec:	0e04      	lsrs	r4, r0, #24
 80158ee:	ebc1 0308 	rsb	r3, r1, r8
 80158f2:	455b      	cmp	r3, fp
 80158f4:	da1e      	bge.n	8015934 <_DrawBitmap_RLE32+0x144>
 80158f6:	3301      	adds	r3, #1
 80158f8:	2cff      	cmp	r4, #255	; 0xff
 80158fa:	9304      	str	r3, [sp, #16]
 80158fc:	d009      	beq.n	8015912 <_DrawBitmap_RLE32+0x122>
 80158fe:	9903      	ldr	r1, [sp, #12]
 8015900:	b11b      	cbz	r3, 801590a <_DrawBitmap_RLE32+0x11a>
 8015902:	3b01      	subs	r3, #1
 8015904:	f841 7b04 	str.w	r7, [r1], #4
 8015908:	d1fb      	bne.n	8015902 <_DrawBitmap_RLE32+0x112>
 801590a:	4668      	mov	r0, sp
 801590c:	47d0      	blx	sl
 801590e:	9901      	ldr	r1, [sp, #4]
 8015910:	9b04      	ldr	r3, [sp, #16]
 8015912:	4419      	add	r1, r3
 8015914:	4588      	cmp	r8, r1
 8015916:	db07      	blt.n	8015928 <_DrawBitmap_RLE32+0x138>
 8015918:	9101      	str	r1, [sp, #4]
 801591a:	ebbb 0b03 	subs.w	fp, fp, r3
 801591e:	d1e6      	bne.n	80158ee <_DrawBitmap_RLE32+0xfe>
 8015920:	f1b9 0f00 	cmp.w	r9, #0
 8015924:	d1d6      	bne.n	80158d4 <_DrawBitmap_RLE32+0xe4>
 8015926:	e77b      	b.n	8015820 <_DrawBitmap_RLE32+0x30>
 8015928:	9902      	ldr	r1, [sp, #8]
 801592a:	9601      	str	r6, [sp, #4]
 801592c:	3101      	adds	r1, #1
 801592e:	9102      	str	r1, [sp, #8]
 8015930:	4631      	mov	r1, r6
 8015932:	e7f2      	b.n	801591a <_DrawBitmap_RLE32+0x12a>
 8015934:	2cff      	cmp	r4, #255	; 0xff
 8015936:	f8cd b010 	str.w	fp, [sp, #16]
 801593a:	d002      	beq.n	8015942 <_DrawBitmap_RLE32+0x152>
 801593c:	9903      	ldr	r1, [sp, #12]
 801593e:	465b      	mov	r3, fp
 8015940:	e7df      	b.n	8015902 <_DrawBitmap_RLE32+0x112>
 8015942:	465b      	mov	r3, fp
 8015944:	e7e5      	b.n	8015912 <_DrawBitmap_RLE32+0x122>
 8015946:	689b      	ldr	r3, [r3, #8]
 8015948:	4798      	blx	r3
 801594a:	9c01      	ldr	r4, [sp, #4]
 801594c:	4607      	mov	r7, r0
 801594e:	ebc0 0909 	rsb	r9, r0, r9
 8015952:	ebc4 0408 	rsb	r4, r4, r8
 8015956:	42bc      	cmp	r4, r7
 8015958:	bfb4      	ite	lt
 801595a:	3401      	addlt	r4, #1
 801595c:	463c      	movge	r4, r7
 801595e:	9404      	str	r4, [sp, #16]
 8015960:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015964:	b12c      	cbz	r4, 8015972 <_DrawBitmap_RLE32+0x182>
 8015966:	68ea      	ldr	r2, [r5, #12]
 8015968:	4790      	blx	r2
 801596a:	3c01      	subs	r4, #1
 801596c:	f84b 0b04 	str.w	r0, [fp], #4
 8015970:	d1f9      	bne.n	8015966 <_DrawBitmap_RLE32+0x176>
 8015972:	4668      	mov	r0, sp
 8015974:	47d0      	blx	sl
 8015976:	9b04      	ldr	r3, [sp, #16]
 8015978:	9c01      	ldr	r4, [sp, #4]
 801597a:	441c      	add	r4, r3
 801597c:	45a0      	cmp	r8, r4
 801597e:	db06      	blt.n	801598e <_DrawBitmap_RLE32+0x19e>
 8015980:	9401      	str	r4, [sp, #4]
 8015982:	1aff      	subs	r7, r7, r3
 8015984:	d1e5      	bne.n	8015952 <_DrawBitmap_RLE32+0x162>
 8015986:	f1b9 0f00 	cmp.w	r9, #0
 801598a:	d1a3      	bne.n	80158d4 <_DrawBitmap_RLE32+0xe4>
 801598c:	e748      	b.n	8015820 <_DrawBitmap_RLE32+0x30>
 801598e:	9a02      	ldr	r2, [sp, #8]
 8015990:	9601      	str	r6, [sp, #4]
 8015992:	3201      	adds	r2, #1
 8015994:	9202      	str	r2, [sp, #8]
 8015996:	4634      	mov	r4, r6
 8015998:	e7f3      	b.n	8015982 <_DrawBitmap_RLE32+0x192>
 801599a:	f8df a010 	ldr.w	sl, [pc, #16]	; 80159ac <_DrawBitmap_RLE32+0x1bc>
 801599e:	e797      	b.n	80158d0 <_DrawBitmap_RLE32+0xe0>
 80159a0:	20000838 	.word	0x20000838
 80159a4:	08026154 	.word	0x08026154
 80159a8:	080154d5 	.word	0x080154d5
 80159ac:	0801555d 	.word	0x0801555d
 80159b0:	080154b5 	.word	0x080154b5
 80159b4:	080154c5 	.word	0x080154c5
 80159b8:	20000014 	.word	0x20000014
 80159bc:	20035df8 	.word	0x20035df8

080159c0 <LCD_ReadRectEx>:
 80159c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159c4:	b085      	sub	sp, #20
 80159c6:	4681      	mov	r9, r0
 80159c8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80159ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80159cc:	68ed      	ldr	r5, [r5, #12]
 80159ce:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 80159d2:	696f      	ldr	r7, [r5, #20]
 80159d4:	4616      	mov	r6, r2
 80159d6:	460d      	mov	r5, r1
 80159d8:	469a      	mov	sl, r3
 80159da:	f1b8 0f00 	cmp.w	r8, #0
 80159de:	d00f      	beq.n	8015a00 <LCD_ReadRectEx+0x40>
 80159e0:	2101      	movs	r1, #1
 80159e2:	a80f      	add	r0, sp, #60	; 0x3c
 80159e4:	47c0      	blx	r8
 80159e6:	4680      	mov	r8, r0
 80159e8:	b150      	cbz	r0, 8015a00 <LCD_ReadRectEx+0x40>
 80159ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80159ec:	9401      	str	r4, [sp, #4]
 80159ee:	f8cd a000 	str.w	sl, [sp]
 80159f2:	4633      	mov	r3, r6
 80159f4:	462a      	mov	r2, r5
 80159f6:	4649      	mov	r1, r9
 80159f8:	47c0      	blx	r8
 80159fa:	b005      	add	sp, #20
 80159fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a00:	4b6b      	ldr	r3, [pc, #428]	; (8015bb0 <LCD_ReadRectEx+0x1f0>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	7c58      	ldrb	r0, [r3, #17]
 8015a06:	f7ff fac7 	bl	8014f98 <GUI_GetBitsPerPixelEx>
 8015a0a:	2808      	cmp	r0, #8
 8015a0c:	dc34      	bgt.n	8015a78 <LCD_ReadRectEx+0xb8>
 8015a0e:	2301      	movs	r3, #1
 8015a10:	4555      	cmp	r5, sl
 8015a12:	dcf2      	bgt.n	80159fa <LCD_ReadRectEx+0x3a>
 8015a14:	2b02      	cmp	r3, #2
 8015a16:	d00a      	beq.n	8015a2e <LCD_ReadRectEx+0x6e>
 8015a18:	2b04      	cmp	r3, #4
 8015a1a:	d01d      	beq.n	8015a58 <LCD_ReadRectEx+0x98>
 8015a1c:	2b01      	cmp	r3, #1
 8015a1e:	d030      	beq.n	8015a82 <LCD_ReadRectEx+0xc2>
 8015a20:	3501      	adds	r5, #1
 8015a22:	45aa      	cmp	sl, r5
 8015a24:	daf6      	bge.n	8015a14 <LCD_ReadRectEx+0x54>
 8015a26:	e7e8      	b.n	80159fa <LCD_ReadRectEx+0x3a>
 8015a28:	3501      	adds	r5, #1
 8015a2a:	4555      	cmp	r5, sl
 8015a2c:	dce5      	bgt.n	80159fa <LCD_ReadRectEx+0x3a>
 8015a2e:	45b1      	cmp	r9, r6
 8015a30:	bfd8      	it	le
 8015a32:	46c8      	movle	r8, r9
 8015a34:	dcf8      	bgt.n	8015a28 <LCD_ReadRectEx+0x68>
 8015a36:	4641      	mov	r1, r8
 8015a38:	462a      	mov	r2, r5
 8015a3a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015a3c:	47b8      	blx	r7
 8015a3e:	f108 0801 	add.w	r8, r8, #1
 8015a42:	4546      	cmp	r6, r8
 8015a44:	f824 0b02 	strh.w	r0, [r4], #2
 8015a48:	daf5      	bge.n	8015a36 <LCD_ReadRectEx+0x76>
 8015a4a:	3501      	adds	r5, #1
 8015a4c:	45aa      	cmp	sl, r5
 8015a4e:	daee      	bge.n	8015a2e <LCD_ReadRectEx+0x6e>
 8015a50:	e7d3      	b.n	80159fa <LCD_ReadRectEx+0x3a>
 8015a52:	3501      	adds	r5, #1
 8015a54:	45aa      	cmp	sl, r5
 8015a56:	dbd0      	blt.n	80159fa <LCD_ReadRectEx+0x3a>
 8015a58:	45b1      	cmp	r9, r6
 8015a5a:	bfd8      	it	le
 8015a5c:	46c8      	movle	r8, r9
 8015a5e:	f300 80a1 	bgt.w	8015ba4 <LCD_ReadRectEx+0x1e4>
 8015a62:	4641      	mov	r1, r8
 8015a64:	462a      	mov	r2, r5
 8015a66:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015a68:	47b8      	blx	r7
 8015a6a:	f108 0801 	add.w	r8, r8, #1
 8015a6e:	4546      	cmp	r6, r8
 8015a70:	f844 0b04 	str.w	r0, [r4], #4
 8015a74:	daf5      	bge.n	8015a62 <LCD_ReadRectEx+0xa2>
 8015a76:	e7ec      	b.n	8015a52 <LCD_ReadRectEx+0x92>
 8015a78:	2811      	cmp	r0, #17
 8015a7a:	bfb4      	ite	lt
 8015a7c:	2302      	movlt	r3, #2
 8015a7e:	2304      	movge	r3, #4
 8015a80:	e7c6      	b.n	8015a10 <LCD_ReadRectEx+0x50>
 8015a82:	1e43      	subs	r3, r0, #1
 8015a84:	9303      	str	r3, [sp, #12]
 8015a86:	f04f 0800 	mov.w	r8, #0
 8015a8a:	f8cd a008 	str.w	sl, [sp, #8]
 8015a8e:	9b03      	ldr	r3, [sp, #12]
 8015a90:	2b07      	cmp	r3, #7
 8015a92:	f200 8081 	bhi.w	8015b98 <LCD_ReadRectEx+0x1d8>
 8015a96:	e8df f003 	tbb	[pc, r3]
 8015a9a:	5833      	.short	0x5833
 8015a9c:	04041717 	.word	0x04041717
 8015aa0:	0404      	.short	0x0404
 8015aa2:	45b1      	cmp	r9, r6
 8015aa4:	bfd8      	it	le
 8015aa6:	46cb      	movle	fp, r9
 8015aa8:	dc09      	bgt.n	8015abe <LCD_ReadRectEx+0xfe>
 8015aaa:	4659      	mov	r1, fp
 8015aac:	462a      	mov	r2, r5
 8015aae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015ab0:	47b8      	blx	r7
 8015ab2:	f10b 0b01 	add.w	fp, fp, #1
 8015ab6:	455e      	cmp	r6, fp
 8015ab8:	f804 0b01 	strb.w	r0, [r4], #1
 8015abc:	daf5      	bge.n	8015aaa <LCD_ReadRectEx+0xea>
 8015abe:	9b02      	ldr	r3, [sp, #8]
 8015ac0:	3501      	adds	r5, #1
 8015ac2:	42ab      	cmp	r3, r5
 8015ac4:	dae3      	bge.n	8015a8e <LCD_ReadRectEx+0xce>
 8015ac6:	e798      	b.n	80159fa <LCD_ReadRectEx+0x3a>
 8015ac8:	45b1      	cmp	r9, r6
 8015aca:	dcf8      	bgt.n	8015abe <LCD_ReadRectEx+0xfe>
 8015acc:	46ca      	mov	sl, r9
 8015ace:	f04f 0b0f 	mov.w	fp, #15
 8015ad2:	4651      	mov	r1, sl
 8015ad4:	462a      	mov	r2, r5
 8015ad6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015ad8:	47b8      	blx	r7
 8015ada:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8015ade:	7821      	ldrb	r1, [r4, #0]
 8015ae0:	f1c3 0204 	rsb	r2, r3, #4
 8015ae4:	fa0b f303 	lsl.w	r3, fp, r3
 8015ae8:	4090      	lsls	r0, r2
 8015aea:	400b      	ands	r3, r1
 8015aec:	f10a 0a01 	add.w	sl, sl, #1
 8015af0:	4303      	orrs	r3, r0
 8015af2:	4556      	cmp	r6, sl
 8015af4:	7023      	strb	r3, [r4, #0]
 8015af6:	4444      	add	r4, r8
 8015af8:	f088 0801 	eor.w	r8, r8, #1
 8015afc:	dae9      	bge.n	8015ad2 <LCD_ReadRectEx+0x112>
 8015afe:	e7de      	b.n	8015abe <LCD_ReadRectEx+0xfe>
 8015b00:	f8dd b008 	ldr.w	fp, [sp, #8]
 8015b04:	45b1      	cmp	r9, r6
 8015b06:	dcda      	bgt.n	8015abe <LCD_ReadRectEx+0xfe>
 8015b08:	46ca      	mov	sl, r9
 8015b0a:	4651      	mov	r1, sl
 8015b0c:	462a      	mov	r2, r5
 8015b0e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015b10:	47b8      	blx	r7
 8015b12:	7821      	ldrb	r1, [r4, #0]
 8015b14:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8015b18:	f1c8 0307 	rsb	r3, r8, #7
 8015b1c:	fa42 f208 	asr.w	r2, r2, r8
 8015b20:	4098      	lsls	r0, r3
 8015b22:	f10a 0a01 	add.w	sl, sl, #1
 8015b26:	ea01 0302 	and.w	r3, r1, r2
 8015b2a:	f108 0201 	add.w	r2, r8, #1
 8015b2e:	4318      	orrs	r0, r3
 8015b30:	f022 0807 	bic.w	r8, r2, #7
 8015b34:	4556      	cmp	r6, sl
 8015b36:	7020      	strb	r0, [r4, #0]
 8015b38:	fa42 f808 	asr.w	r8, r2, r8
 8015b3c:	eb04 04e2 	add.w	r4, r4, r2, asr #3
 8015b40:	dae3      	bge.n	8015b0a <LCD_ReadRectEx+0x14a>
 8015b42:	3501      	adds	r5, #1
 8015b44:	45ab      	cmp	fp, r5
 8015b46:	dadd      	bge.n	8015b04 <LCD_ReadRectEx+0x144>
 8015b48:	e757      	b.n	80159fa <LCD_ReadRectEx+0x3a>
 8015b4a:	f64f 7b3f 	movw	fp, #65343	; 0xff3f
 8015b4e:	45b1      	cmp	r9, r6
 8015b50:	dcb5      	bgt.n	8015abe <LCD_ReadRectEx+0xfe>
 8015b52:	46ca      	mov	sl, r9
 8015b54:	4651      	mov	r1, sl
 8015b56:	462a      	mov	r2, r5
 8015b58:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015b5a:	47b8      	blx	r7
 8015b5c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8015b60:	f894 e000 	ldrb.w	lr, [r4]
 8015b64:	f1c3 0206 	rsb	r2, r3, #6
 8015b68:	fa4b f303 	asr.w	r3, fp, r3
 8015b6c:	f108 0101 	add.w	r1, r8, #1
 8015b70:	4090      	lsls	r0, r2
 8015b72:	ea0e 0303 	and.w	r3, lr, r3
 8015b76:	f10a 0a01 	add.w	sl, sl, #1
 8015b7a:	4303      	orrs	r3, r0
 8015b7c:	f021 0803 	bic.w	r8, r1, #3
 8015b80:	4556      	cmp	r6, sl
 8015b82:	7023      	strb	r3, [r4, #0]
 8015b84:	fa41 f808 	asr.w	r8, r1, r8
 8015b88:	eb04 04a1 	add.w	r4, r4, r1, asr #2
 8015b8c:	dae2      	bge.n	8015b54 <LCD_ReadRectEx+0x194>
 8015b8e:	9b02      	ldr	r3, [sp, #8]
 8015b90:	3501      	adds	r5, #1
 8015b92:	42ab      	cmp	r3, r5
 8015b94:	dadb      	bge.n	8015b4e <LCD_ReadRectEx+0x18e>
 8015b96:	e730      	b.n	80159fa <LCD_ReadRectEx+0x3a>
 8015b98:	9b02      	ldr	r3, [sp, #8]
 8015b9a:	3501      	adds	r5, #1
 8015b9c:	429d      	cmp	r5, r3
 8015b9e:	f77f af76 	ble.w	8015a8e <LCD_ReadRectEx+0xce>
 8015ba2:	e72a      	b.n	80159fa <LCD_ReadRectEx+0x3a>
 8015ba4:	3501      	adds	r5, #1
 8015ba6:	4555      	cmp	r5, sl
 8015ba8:	f77f af56 	ble.w	8015a58 <LCD_ReadRectEx+0x98>
 8015bac:	e725      	b.n	80159fa <LCD_ReadRectEx+0x3a>
 8015bae:	bf00      	nop
 8015bb0:	20000014 	.word	0x20000014

08015bb4 <GUI_ReadRectEx>:
 8015bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bb6:	4c16      	ldr	r4, [pc, #88]	; (8015c10 <GUI_ReadRectEx+0x5c>)
 8015bb8:	9e05      	ldr	r6, [sp, #20]
 8015bba:	6825      	ldr	r5, [r4, #0]
 8015bbc:	9c06      	ldr	r4, [sp, #24]
 8015bbe:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015bc2:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8015bc6:	4570      	cmp	r0, lr
 8015bc8:	bfb8      	it	lt
 8015bca:	4670      	movlt	r0, lr
 8015bcc:	42ba      	cmp	r2, r7
 8015bce:	bfa8      	it	ge
 8015bd0:	463a      	movge	r2, r7
 8015bd2:	4290      	cmp	r0, r2
 8015bd4:	dc1a      	bgt.n	8015c0c <GUI_ReadRectEx+0x58>
 8015bd6:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8015bda:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8015bde:	42b9      	cmp	r1, r7
 8015be0:	bfb8      	it	lt
 8015be2:	4639      	movlt	r1, r7
 8015be4:	42ab      	cmp	r3, r5
 8015be6:	bfa8      	it	ge
 8015be8:	462b      	movge	r3, r5
 8015bea:	428b      	cmp	r3, r1
 8015bec:	da03      	bge.n	8015bf6 <GUI_ReadRectEx+0x42>
 8015bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bf0:	6825      	ldr	r5, [r4, #0]
 8015bf2:	b12d      	cbz	r5, 8015c00 <GUI_ReadRectEx+0x4c>
 8015bf4:	462c      	mov	r4, r5
 8015bf6:	68e5      	ldr	r5, [r4, #12]
 8015bf8:	682d      	ldr	r5, [r5, #0]
 8015bfa:	f035 0504 	bics.w	r5, r5, #4
 8015bfe:	d1f7      	bne.n	8015bf0 <GUI_ReadRectEx+0x3c>
 8015c00:	9406      	str	r4, [sp, #24]
 8015c02:	9605      	str	r6, [sp, #20]
 8015c04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015c08:	f7ff beda 	b.w	80159c0 <LCD_ReadRectEx>
 8015c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c0e:	bf00      	nop
 8015c10:	20000014 	.word	0x20000014

08015c14 <LCD_SelectLCD>:
 8015c14:	b510      	push	{r4, lr}
 8015c16:	4c0e      	ldr	r4, [pc, #56]	; (8015c50 <LCD_SelectLCD+0x3c>)
 8015c18:	4b0e      	ldr	r3, [pc, #56]	; (8015c54 <LCD_SelectLCD+0x40>)
 8015c1a:	6822      	ldr	r2, [r4, #0]
 8015c1c:	7c51      	ldrb	r1, [r2, #17]
 8015c1e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8015c22:	b138      	cbz	r0, 8015c34 <LCD_SelectLCD+0x20>
 8015c24:	68c3      	ldr	r3, [r0, #12]
 8015c26:	b113      	cbz	r3, 8015c2e <LCD_SelectLCD+0x1a>
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	2b04      	cmp	r3, #4
 8015c2c:	d00b      	beq.n	8015c46 <LCD_SelectLCD+0x32>
 8015c2e:	6800      	ldr	r0, [r0, #0]
 8015c30:	2800      	cmp	r0, #0
 8015c32:	d1f7      	bne.n	8015c24 <LCD_SelectLCD+0x10>
 8015c34:	2100      	movs	r1, #0
 8015c36:	f102 0308 	add.w	r3, r2, #8
 8015c3a:	6611      	str	r1, [r2, #96]	; 0x60
 8015c3c:	6153      	str	r3, [r2, #20]
 8015c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c42:	f7fe be8d 	b.w	8014960 <LCD_SetClipRectMax>
 8015c46:	f7fc f84f 	bl	8011ce8 <GUI_DEVICE_Unlink>
 8015c4a:	6822      	ldr	r2, [r4, #0]
 8015c4c:	e7f2      	b.n	8015c34 <LCD_SelectLCD+0x20>
 8015c4e:	bf00      	nop
 8015c50:	20000014 	.word	0x20000014
 8015c54:	20035df8 	.word	0x20035df8

08015c58 <LCD_GetPosEx>:
 8015c58:	b530      	push	{r4, r5, lr}
 8015c5a:	b083      	sub	sp, #12
 8015c5c:	460c      	mov	r4, r1
 8015c5e:	4615      	mov	r5, r2
 8015c60:	f7fc f802 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8015c64:	9001      	str	r0, [sp, #4]
 8015c66:	b170      	cbz	r0, 8015c86 <LCD_GetPosEx+0x2e>
 8015c68:	68c3      	ldr	r3, [r0, #12]
 8015c6a:	2104      	movs	r1, #4
 8015c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c6e:	eb0d 0001 	add.w	r0, sp, r1
 8015c72:	4798      	blx	r3
 8015c74:	4603      	mov	r3, r0
 8015c76:	b130      	cbz	r0, 8015c86 <LCD_GetPosEx+0x2e>
 8015c78:	9801      	ldr	r0, [sp, #4]
 8015c7a:	462a      	mov	r2, r5
 8015c7c:	4621      	mov	r1, r4
 8015c7e:	4798      	blx	r3
 8015c80:	2000      	movs	r0, #0
 8015c82:	b003      	add	sp, #12
 8015c84:	bd30      	pop	{r4, r5, pc}
 8015c86:	2001      	movs	r0, #1
 8015c88:	b003      	add	sp, #12
 8015c8a:	bd30      	pop	{r4, r5, pc}

08015c8c <LCD_SetDevFunc>:
 8015c8c:	b530      	push	{r4, r5, lr}
 8015c8e:	b083      	sub	sp, #12
 8015c90:	460c      	mov	r4, r1
 8015c92:	4615      	mov	r5, r2
 8015c94:	f7fb ffe8 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8015c98:	9001      	str	r0, [sp, #4]
 8015c9a:	b168      	cbz	r0, 8015cb8 <LCD_SetDevFunc+0x2c>
 8015c9c:	68c3      	ldr	r3, [r0, #12]
 8015c9e:	2116      	movs	r1, #22
 8015ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ca2:	a801      	add	r0, sp, #4
 8015ca4:	4798      	blx	r3
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	b130      	cbz	r0, 8015cb8 <LCD_SetDevFunc+0x2c>
 8015caa:	9801      	ldr	r0, [sp, #4]
 8015cac:	462a      	mov	r2, r5
 8015cae:	4621      	mov	r1, r4
 8015cb0:	4798      	blx	r3
 8015cb2:	2000      	movs	r0, #0
 8015cb4:	b003      	add	sp, #12
 8015cb6:	bd30      	pop	{r4, r5, pc}
 8015cb8:	2001      	movs	r0, #1
 8015cba:	b003      	add	sp, #12
 8015cbc:	bd30      	pop	{r4, r5, pc}
 8015cbe:	bf00      	nop

08015cc0 <LCD_SetLUTEntryEx>:
 8015cc0:	b530      	push	{r4, r5, lr}
 8015cc2:	b083      	sub	sp, #12
 8015cc4:	460c      	mov	r4, r1
 8015cc6:	4615      	mov	r5, r2
 8015cc8:	f7fb ffce 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8015ccc:	9001      	str	r0, [sp, #4]
 8015cce:	b168      	cbz	r0, 8015cec <LCD_SetLUTEntryEx+0x2c>
 8015cd0:	68c3      	ldr	r3, [r0, #12]
 8015cd2:	2110      	movs	r1, #16
 8015cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cd6:	a801      	add	r0, sp, #4
 8015cd8:	4798      	blx	r3
 8015cda:	4603      	mov	r3, r0
 8015cdc:	b130      	cbz	r0, 8015cec <LCD_SetLUTEntryEx+0x2c>
 8015cde:	9801      	ldr	r0, [sp, #4]
 8015ce0:	462a      	mov	r2, r5
 8015ce2:	4621      	mov	r1, r4
 8015ce4:	4798      	blx	r3
 8015ce6:	2000      	movs	r0, #0
 8015ce8:	b003      	add	sp, #12
 8015cea:	bd30      	pop	{r4, r5, pc}
 8015cec:	2001      	movs	r0, #1
 8015cee:	b003      	add	sp, #12
 8015cf0:	bd30      	pop	{r4, r5, pc}
 8015cf2:	bf00      	nop

08015cf4 <LCD_SetPosEx>:
 8015cf4:	b530      	push	{r4, r5, lr}
 8015cf6:	b083      	sub	sp, #12
 8015cf8:	460c      	mov	r4, r1
 8015cfa:	4615      	mov	r5, r2
 8015cfc:	f7fb ffb4 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8015d00:	9001      	str	r0, [sp, #4]
 8015d02:	b168      	cbz	r0, 8015d20 <LCD_SetPosEx+0x2c>
 8015d04:	68c3      	ldr	r3, [r0, #12]
 8015d06:	2103      	movs	r1, #3
 8015d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d0a:	a801      	add	r0, sp, #4
 8015d0c:	4798      	blx	r3
 8015d0e:	4603      	mov	r3, r0
 8015d10:	b130      	cbz	r0, 8015d20 <LCD_SetPosEx+0x2c>
 8015d12:	9801      	ldr	r0, [sp, #4]
 8015d14:	462a      	mov	r2, r5
 8015d16:	4621      	mov	r1, r4
 8015d18:	4798      	blx	r3
 8015d1a:	2000      	movs	r0, #0
 8015d1c:	b003      	add	sp, #12
 8015d1e:	bd30      	pop	{r4, r5, pc}
 8015d20:	2001      	movs	r0, #1
 8015d22:	b003      	add	sp, #12
 8015d24:	bd30      	pop	{r4, r5, pc}
 8015d26:	bf00      	nop

08015d28 <LCD_SetSizeEx>:
 8015d28:	b530      	push	{r4, r5, lr}
 8015d2a:	b083      	sub	sp, #12
 8015d2c:	460c      	mov	r4, r1
 8015d2e:	4615      	mov	r5, r2
 8015d30:	f7fb ff9a 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8015d34:	9001      	str	r0, [sp, #4]
 8015d36:	b168      	cbz	r0, 8015d54 <LCD_SetSizeEx+0x2c>
 8015d38:	68c3      	ldr	r3, [r0, #12]
 8015d3a:	210b      	movs	r1, #11
 8015d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d3e:	a801      	add	r0, sp, #4
 8015d40:	4798      	blx	r3
 8015d42:	4603      	mov	r3, r0
 8015d44:	b130      	cbz	r0, 8015d54 <LCD_SetSizeEx+0x2c>
 8015d46:	9801      	ldr	r0, [sp, #4]
 8015d48:	462a      	mov	r2, r5
 8015d4a:	4621      	mov	r1, r4
 8015d4c:	4798      	blx	r3
 8015d4e:	2000      	movs	r0, #0
 8015d50:	b003      	add	sp, #12
 8015d52:	bd30      	pop	{r4, r5, pc}
 8015d54:	2001      	movs	r0, #1
 8015d56:	b003      	add	sp, #12
 8015d58:	bd30      	pop	{r4, r5, pc}
 8015d5a:	bf00      	nop

08015d5c <LCD_SetVisEx>:
 8015d5c:	b510      	push	{r4, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	460c      	mov	r4, r1
 8015d62:	f7fb ff81 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8015d66:	9001      	str	r0, [sp, #4]
 8015d68:	b160      	cbz	r0, 8015d84 <LCD_SetVisEx+0x28>
 8015d6a:	68c3      	ldr	r3, [r0, #12]
 8015d6c:	2106      	movs	r1, #6
 8015d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d70:	a801      	add	r0, sp, #4
 8015d72:	4798      	blx	r3
 8015d74:	4603      	mov	r3, r0
 8015d76:	b128      	cbz	r0, 8015d84 <LCD_SetVisEx+0x28>
 8015d78:	9801      	ldr	r0, [sp, #4]
 8015d7a:	4621      	mov	r1, r4
 8015d7c:	4798      	blx	r3
 8015d7e:	2000      	movs	r0, #0
 8015d80:	b002      	add	sp, #8
 8015d82:	bd10      	pop	{r4, pc}
 8015d84:	2001      	movs	r0, #1
 8015d86:	b002      	add	sp, #8
 8015d88:	bd10      	pop	{r4, pc}
 8015d8a:	bf00      	nop

08015d8c <LCD_SetVRAMAddrEx>:
 8015d8c:	b510      	push	{r4, lr}
 8015d8e:	b082      	sub	sp, #8
 8015d90:	460c      	mov	r4, r1
 8015d92:	f7fb ff69 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8015d96:	9001      	str	r0, [sp, #4]
 8015d98:	b160      	cbz	r0, 8015db4 <LCD_SetVRAMAddrEx+0x28>
 8015d9a:	68c3      	ldr	r3, [r0, #12]
 8015d9c:	2109      	movs	r1, #9
 8015d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015da0:	a801      	add	r0, sp, #4
 8015da2:	4798      	blx	r3
 8015da4:	4603      	mov	r3, r0
 8015da6:	b128      	cbz	r0, 8015db4 <LCD_SetVRAMAddrEx+0x28>
 8015da8:	9801      	ldr	r0, [sp, #4]
 8015daa:	4621      	mov	r1, r4
 8015dac:	4798      	blx	r3
 8015dae:	2000      	movs	r0, #0
 8015db0:	b002      	add	sp, #8
 8015db2:	bd10      	pop	{r4, pc}
 8015db4:	2001      	movs	r0, #1
 8015db6:	b002      	add	sp, #8
 8015db8:	bd10      	pop	{r4, pc}
 8015dba:	bf00      	nop

08015dbc <LCD_SetVSizeEx>:
 8015dbc:	b530      	push	{r4, r5, lr}
 8015dbe:	b083      	sub	sp, #12
 8015dc0:	460c      	mov	r4, r1
 8015dc2:	4615      	mov	r5, r2
 8015dc4:	f7fb ff50 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8015dc8:	9001      	str	r0, [sp, #4]
 8015dca:	b168      	cbz	r0, 8015de8 <LCD_SetVSizeEx+0x2c>
 8015dcc:	68c3      	ldr	r3, [r0, #12]
 8015dce:	210a      	movs	r1, #10
 8015dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd2:	a801      	add	r0, sp, #4
 8015dd4:	4798      	blx	r3
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	b130      	cbz	r0, 8015de8 <LCD_SetVSizeEx+0x2c>
 8015dda:	9801      	ldr	r0, [sp, #4]
 8015ddc:	462a      	mov	r2, r5
 8015dde:	4621      	mov	r1, r4
 8015de0:	4798      	blx	r3
 8015de2:	2000      	movs	r0, #0
 8015de4:	b003      	add	sp, #12
 8015de6:	bd30      	pop	{r4, r5, pc}
 8015de8:	2001      	movs	r0, #1
 8015dea:	b003      	add	sp, #12
 8015dec:	bd30      	pop	{r4, r5, pc}
 8015dee:	bf00      	nop

08015df0 <LCD_UpdateColorIndices>:
 8015df0:	b510      	push	{r4, lr}
 8015df2:	4c07      	ldr	r4, [pc, #28]	; (8015e10 <LCD_UpdateColorIndices+0x20>)
 8015df4:	6823      	ldr	r3, [r4, #0]
 8015df6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015df8:	f7fe fe48 	bl	8014a8c <LCD_Color2Index>
 8015dfc:	f7fe fe62 	bl	8014ac4 <LCD_SetColorIndex>
 8015e00:	6823      	ldr	r3, [r4, #0]
 8015e02:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015e04:	f7fe fe42 	bl	8014a8c <LCD_Color2Index>
 8015e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e0c:	f7fe be66 	b.w	8014adc <LCD_SetBkColorIndex>
 8015e10:	20000014 	.word	0x20000014

08015e14 <_GetRect>:
 8015e14:	6883      	ldr	r3, [r0, #8]
 8015e16:	699a      	ldr	r2, [r3, #24]
 8015e18:	69db      	ldr	r3, [r3, #28]
 8015e1a:	2000      	movs	r0, #0
 8015e1c:	3a01      	subs	r2, #1
 8015e1e:	3b01      	subs	r3, #1
 8015e20:	808a      	strh	r2, [r1, #4]
 8015e22:	80cb      	strh	r3, [r1, #6]
 8015e24:	8008      	strh	r0, [r1, #0]
 8015e26:	8048      	strh	r0, [r1, #2]
 8015e28:	4770      	bx	lr
 8015e2a:	bf00      	nop

08015e2c <_SetPixelIndex>:
 8015e2c:	b410      	push	{r4}
 8015e2e:	6884      	ldr	r4, [r0, #8]
 8015e30:	6a20      	ldr	r0, [r4, #32]
 8015e32:	6824      	ldr	r4, [r4, #0]
 8015e34:	fb00 1202 	mla	r2, r0, r2, r1
 8015e38:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 8015e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e40:	4770      	bx	lr
 8015e42:	bf00      	nop

08015e44 <_GetPixelIndex>:
 8015e44:	6880      	ldr	r0, [r0, #8]
 8015e46:	6a03      	ldr	r3, [r0, #32]
 8015e48:	6800      	ldr	r0, [r0, #0]
 8015e4a:	fb03 1202 	mla	r2, r3, r2, r1
 8015e4e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 8015e52:	4770      	bx	lr

08015e54 <_XorPixel>:
 8015e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e56:	460f      	mov	r7, r1
 8015e58:	6881      	ldr	r1, [r0, #8]
 8015e5a:	6904      	ldr	r4, [r0, #16]
 8015e5c:	6a0b      	ldr	r3, [r1, #32]
 8015e5e:	4606      	mov	r6, r0
 8015e60:	fb03 7302 	mla	r3, r3, r2, r7
 8015e64:	6808      	ldr	r0, [r1, #0]
 8015e66:	68a1      	ldr	r1, [r4, #8]
 8015e68:	f830 5013 	ldrh.w	r5, [r0, r3, lsl #1]
 8015e6c:	4614      	mov	r4, r2
 8015e6e:	4788      	blx	r1
 8015e70:	68b3      	ldr	r3, [r6, #8]
 8015e72:	6a19      	ldr	r1, [r3, #32]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	fb01 7404 	mla	r4, r1, r4, r7
 8015e7a:	4068      	eors	r0, r5
 8015e7c:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 8015e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e82:	bf00      	nop

08015e84 <_GetDevProp>:
 8015e84:	3901      	subs	r1, #1
 8015e86:	6883      	ldr	r3, [r0, #8]
 8015e88:	290d      	cmp	r1, #13
 8015e8a:	d816      	bhi.n	8015eba <_GetDevProp+0x36>
 8015e8c:	e8df f001 	tbb	[pc, r1]
 8015e90:	0d13110f 	.word	0x0d13110f
 8015e94:	0b151515 	.word	0x0b151515
 8015e98:	07090907 	.word	0x07090907
 8015e9c:	0707      	.short	0x0707
 8015e9e:	2000      	movs	r0, #0
 8015ea0:	4770      	bx	lr
 8015ea2:	2001      	movs	r0, #1
 8015ea4:	4770      	bx	lr
 8015ea6:	2010      	movs	r0, #16
 8015ea8:	4770      	bx	lr
 8015eaa:	69d8      	ldr	r0, [r3, #28]
 8015eac:	4770      	bx	lr
 8015eae:	6918      	ldr	r0, [r3, #16]
 8015eb0:	4770      	bx	lr
 8015eb2:	6958      	ldr	r0, [r3, #20]
 8015eb4:	4770      	bx	lr
 8015eb6:	6998      	ldr	r0, [r3, #24]
 8015eb8:	4770      	bx	lr
 8015eba:	f04f 30ff 	mov.w	r0, #4294967295
 8015ebe:	4770      	bx	lr

08015ec0 <_GetDevData>:
 8015ec0:	2901      	cmp	r1, #1
 8015ec2:	4802      	ldr	r0, [pc, #8]	; (8015ecc <_GetDevData+0xc>)
 8015ec4:	bf18      	it	ne
 8015ec6:	2000      	movne	r0, #0
 8015ec8:	4770      	bx	lr
 8015eca:	bf00      	nop
 8015ecc:	08026068 	.word	0x08026068

08015ed0 <_ReadRect>:
 8015ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed4:	6880      	ldr	r0, [r0, #8]
 8015ed6:	b085      	sub	sp, #20
 8015ed8:	1a5b      	subs	r3, r3, r1
 8015eda:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8015ede:	f8d0 c000 	ldr.w	ip, [r0]
 8015ee2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015ee4:	1e5c      	subs	r4, r3, #1
 8015ee6:	f103 0e01 	add.w	lr, r3, #1
 8015eea:	005b      	lsls	r3, r3, #1
 8015eec:	0864      	lsrs	r4, r4, #1
 8015eee:	9303      	str	r3, [sp, #12]
 8015ef0:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8015ef4:	1c66      	adds	r6, r4, #1
 8015ef6:	fb08 1702 	mla	r7, r8, r2, r1
 8015efa:	9301      	str	r3, [sp, #4]
 8015efc:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8015f00:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8015f04:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8015f08:	eb0c 0547 	add.w	r5, ip, r7, lsl #1
 8015f0c:	9302      	str	r3, [sp, #8]
 8015f0e:	1d03      	adds	r3, r0, #4
 8015f10:	42ab      	cmp	r3, r5
 8015f12:	bf8c      	ite	hi
 8015f14:	2300      	movhi	r3, #0
 8015f16:	2301      	movls	r3, #1
 8015f18:	1d29      	adds	r1, r5, #4
 8015f1a:	4288      	cmp	r0, r1
 8015f1c:	bf28      	it	cs
 8015f1e:	f043 0301 	orrcs.w	r3, r3, #1
 8015f22:	b36b      	cbz	r3, 8015f80 <_ReadRect+0xb0>
 8015f24:	ea40 0305 	orr.w	r3, r0, r5
 8015f28:	f1be 0f0c 	cmp.w	lr, #12
 8015f2c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015f30:	bf94      	ite	ls
 8015f32:	2100      	movls	r1, #0
 8015f34:	2101      	movhi	r1, #1
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	bf18      	it	ne
 8015f3a:	2100      	movne	r1, #0
 8015f3c:	b301      	cbz	r1, 8015f80 <_ReadRect+0xb0>
 8015f3e:	1f2c      	subs	r4, r5, #4
 8015f40:	4601      	mov	r1, r0
 8015f42:	2300      	movs	r3, #0
 8015f44:	4693      	mov	fp, r2
 8015f46:	3301      	adds	r3, #1
 8015f48:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8015f4c:	f841 2b04 	str.w	r2, [r1], #4
 8015f50:	429e      	cmp	r6, r3
 8015f52:	d8f8      	bhi.n	8015f46 <_ReadRect+0x76>
 8015f54:	45d6      	cmp	lr, sl
 8015f56:	465a      	mov	r2, fp
 8015f58:	eb07 030a 	add.w	r3, r7, sl
 8015f5c:	d003      	beq.n	8015f66 <_ReadRect+0x96>
 8015f5e:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
 8015f62:	f820 3009 	strh.w	r3, [r0, r9]
 8015f66:	9901      	ldr	r1, [sp, #4]
 8015f68:	4408      	add	r0, r1
 8015f6a:	9902      	ldr	r1, [sp, #8]
 8015f6c:	3201      	adds	r2, #1
 8015f6e:	440d      	add	r5, r1
 8015f70:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015f72:	1e53      	subs	r3, r2, #1
 8015f74:	4299      	cmp	r1, r3
 8015f76:	4447      	add	r7, r8
 8015f78:	dcc9      	bgt.n	8015f0e <_ReadRect+0x3e>
 8015f7a:	b005      	add	sp, #20
 8015f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f80:	9903      	ldr	r1, [sp, #12]
 8015f82:	1e83      	subs	r3, r0, #2
 8015f84:	eb00 0b01 	add.w	fp, r0, r1
 8015f88:	4629      	mov	r1, r5
 8015f8a:	f831 4b02 	ldrh.w	r4, [r1], #2
 8015f8e:	f823 4f02 	strh.w	r4, [r3, #2]!
 8015f92:	455b      	cmp	r3, fp
 8015f94:	d1f9      	bne.n	8015f8a <_ReadRect+0xba>
 8015f96:	e7e6      	b.n	8015f66 <_ReadRect+0x96>

08015f98 <_GetDevFunc>:
 8015f98:	3901      	subs	r1, #1
 8015f9a:	2928      	cmp	r1, #40	; 0x28
 8015f9c:	d84a      	bhi.n	8016034 <_GetDevFunc+0x9c>
 8015f9e:	e8df f001 	tbb	[pc, r1]
 8015fa2:	1d1f      	.short	0x1d1f
 8015fa4:	1749191b 	.word	0x1749191b
 8015fa8:	47154949 	.word	0x47154949
 8015fac:	41494345 	.word	0x41494345
 8015fb0:	4949493f 	.word	0x4949493f
 8015fb4:	37393b3d 	.word	0x37393b3d
 8015fb8:	49334949 	.word	0x49334949
 8015fbc:	49494949 	.word	0x49494949
 8015fc0:	2b2d2f49 	.word	0x2b2d2f49
 8015fc4:	49234927 	.word	0x49234927
 8015fc8:	4949      	.short	0x4949
 8015fca:	21          	.byte	0x21
 8015fcb:	00          	.byte	0x00
 8015fcc:	481a      	ldr	r0, [pc, #104]	; (8016038 <_GetDevFunc+0xa0>)
 8015fce:	4770      	bx	lr
 8015fd0:	481a      	ldr	r0, [pc, #104]	; (801603c <_GetDevFunc+0xa4>)
 8015fd2:	4770      	bx	lr
 8015fd4:	481a      	ldr	r0, [pc, #104]	; (8016040 <_GetDevFunc+0xa8>)
 8015fd6:	4770      	bx	lr
 8015fd8:	481a      	ldr	r0, [pc, #104]	; (8016044 <_GetDevFunc+0xac>)
 8015fda:	4770      	bx	lr
 8015fdc:	481a      	ldr	r0, [pc, #104]	; (8016048 <_GetDevFunc+0xb0>)
 8015fde:	4770      	bx	lr
 8015fe0:	481a      	ldr	r0, [pc, #104]	; (801604c <_GetDevFunc+0xb4>)
 8015fe2:	4770      	bx	lr
 8015fe4:	481a      	ldr	r0, [pc, #104]	; (8016050 <_GetDevFunc+0xb8>)
 8015fe6:	4770      	bx	lr
 8015fe8:	6803      	ldr	r3, [r0, #0]
 8015fea:	689b      	ldr	r3, [r3, #8]
 8015fec:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8015fee:	4770      	bx	lr
 8015ff0:	6803      	ldr	r3, [r0, #0]
 8015ff2:	689b      	ldr	r3, [r3, #8]
 8015ff4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8015ff6:	4770      	bx	lr
 8015ff8:	4816      	ldr	r0, [pc, #88]	; (8016054 <_GetDevFunc+0xbc>)
 8015ffa:	4770      	bx	lr
 8015ffc:	4816      	ldr	r0, [pc, #88]	; (8016058 <_GetDevFunc+0xc0>)
 8015ffe:	4770      	bx	lr
 8016000:	6803      	ldr	r3, [r0, #0]
 8016002:	689b      	ldr	r3, [r3, #8]
 8016004:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8016006:	4770      	bx	lr
 8016008:	6803      	ldr	r3, [r0, #0]
 801600a:	689b      	ldr	r3, [r3, #8]
 801600c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801600e:	4770      	bx	lr
 8016010:	4812      	ldr	r0, [pc, #72]	; (801605c <_GetDevFunc+0xc4>)
 8016012:	4770      	bx	lr
 8016014:	4812      	ldr	r0, [pc, #72]	; (8016060 <_GetDevFunc+0xc8>)
 8016016:	4770      	bx	lr
 8016018:	4812      	ldr	r0, [pc, #72]	; (8016064 <_GetDevFunc+0xcc>)
 801601a:	4770      	bx	lr
 801601c:	4812      	ldr	r0, [pc, #72]	; (8016068 <_GetDevFunc+0xd0>)
 801601e:	4770      	bx	lr
 8016020:	4812      	ldr	r0, [pc, #72]	; (801606c <_GetDevFunc+0xd4>)
 8016022:	4770      	bx	lr
 8016024:	4812      	ldr	r0, [pc, #72]	; (8016070 <_GetDevFunc+0xd8>)
 8016026:	4770      	bx	lr
 8016028:	4812      	ldr	r0, [pc, #72]	; (8016074 <_GetDevFunc+0xdc>)
 801602a:	4770      	bx	lr
 801602c:	4812      	ldr	r0, [pc, #72]	; (8016078 <_GetDevFunc+0xe0>)
 801602e:	4770      	bx	lr
 8016030:	4812      	ldr	r0, [pc, #72]	; (801607c <_GetDevFunc+0xe4>)
 8016032:	4770      	bx	lr
 8016034:	2000      	movs	r0, #0
 8016036:	4770      	bx	lr
 8016038:	08016cc1 	.word	0x08016cc1
 801603c:	08016c81 	.word	0x08016c81
 8016040:	08016bd5 	.word	0x08016bd5
 8016044:	08016e8d 	.word	0x08016e8d
 8016048:	08016c41 	.word	0x08016c41
 801604c:	08015ed1 	.word	0x08015ed1
 8016050:	08016ba9 	.word	0x08016ba9
 8016054:	08016c05 	.word	0x08016c05
 8016058:	08016e05 	.word	0x08016e05
 801605c:	08016d95 	.word	0x08016d95
 8016060:	08016081 	.word	0x08016081
 8016064:	08016099 	.word	0x08016099
 8016068:	080160b1 	.word	0x080160b1
 801606c:	080160c9 	.word	0x080160c9
 8016070:	080160d5 	.word	0x080160d5
 8016074:	08016b79 	.word	0x08016b79
 8016078:	08016d39 	.word	0x08016d39
 801607c:	08016d01 	.word	0x08016d01

08016080 <_SetChroma>:
 8016080:	b500      	push	{lr}
 8016082:	b083      	sub	sp, #12
 8016084:	e88d 0006 	stmia.w	sp, {r1, r2}
 8016088:	6980      	ldr	r0, [r0, #24]
 801608a:	466a      	mov	r2, sp
 801608c:	210d      	movs	r1, #13
 801608e:	f7f9 f921 	bl	800f2d4 <LCD_X_DisplayDriver>
 8016092:	b003      	add	sp, #12
 8016094:	f85d fb04 	ldr.w	pc, [sp], #4

08016098 <_SetChromaMode>:
 8016098:	b500      	push	{lr}
 801609a:	b083      	sub	sp, #12
 801609c:	aa02      	add	r2, sp, #8
 801609e:	6980      	ldr	r0, [r0, #24]
 80160a0:	f842 1d04 	str.w	r1, [r2, #-4]!
 80160a4:	210c      	movs	r1, #12
 80160a6:	f7f9 f915 	bl	800f2d4 <LCD_X_DisplayDriver>
 80160aa:	b003      	add	sp, #12
 80160ac:	f85d fb04 	ldr.w	pc, [sp], #4

080160b0 <_SetAlphaMode>:
 80160b0:	b500      	push	{lr}
 80160b2:	b083      	sub	sp, #12
 80160b4:	aa02      	add	r2, sp, #8
 80160b6:	6980      	ldr	r0, [r0, #24]
 80160b8:	f842 1d04 	str.w	r1, [r2, #-4]!
 80160bc:	210b      	movs	r1, #11
 80160be:	f7f9 f909 	bl	800f2d4 <LCD_X_DisplayDriver>
 80160c2:	b003      	add	sp, #12
 80160c4:	f85d fb04 	ldr.w	pc, [sp], #4

080160c8 <_Off>:
 80160c8:	6980      	ldr	r0, [r0, #24]
 80160ca:	2200      	movs	r2, #0
 80160cc:	2106      	movs	r1, #6
 80160ce:	f7f9 b901 	b.w	800f2d4 <LCD_X_DisplayDriver>
 80160d2:	bf00      	nop

080160d4 <_On>:
 80160d4:	6980      	ldr	r0, [r0, #24]
 80160d6:	2200      	movs	r2, #0
 80160d8:	2105      	movs	r1, #5
 80160da:	f7f9 b8fb 	b.w	800f2d4 <LCD_X_DisplayDriver>
 80160de:	bf00      	nop

080160e0 <_SetOrg>:
 80160e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160e4:	4604      	mov	r4, r0
 80160e6:	b083      	sub	sp, #12
 80160e8:	2300      	movs	r3, #0
 80160ea:	6980      	ldr	r0, [r0, #24]
 80160ec:	9301      	str	r3, [sp, #4]
 80160ee:	460f      	mov	r7, r1
 80160f0:	4690      	mov	r8, r2
 80160f2:	9300      	str	r3, [sp, #0]
 80160f4:	68a6      	ldr	r6, [r4, #8]
 80160f6:	f7fe fedd 	bl	8014eb4 <LCD_GetMirrorXEx>
 80160fa:	4605      	mov	r5, r0
 80160fc:	69a0      	ldr	r0, [r4, #24]
 80160fe:	f7fe fee9 	bl	8014ed4 <LCD_GetMirrorYEx>
 8016102:	4681      	mov	r9, r0
 8016104:	69a0      	ldr	r0, [r4, #24]
 8016106:	f7fe fef5 	bl	8014ef4 <LCD_GetSwapXYEx>
 801610a:	0080      	lsls	r0, r0, #2
 801610c:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 8016110:	4328      	orrs	r0, r5
 8016112:	2807      	cmp	r0, #7
 8016114:	d810      	bhi.n	8016138 <_SetOrg+0x58>
 8016116:	e8df f000 	tbb	[pc, r0]
 801611a:	1a17      	.short	0x1a17
 801611c:	3a362a22 	.word	0x3a362a22
 8016120:	0442      	.short	0x0442
 8016122:	69f2      	ldr	r2, [r6, #28]
 8016124:	6970      	ldr	r0, [r6, #20]
 8016126:	69b3      	ldr	r3, [r6, #24]
 8016128:	6931      	ldr	r1, [r6, #16]
 801612a:	1a12      	subs	r2, r2, r0
 801612c:	1a59      	subs	r1, r3, r1
 801612e:	ebc8 0202 	rsb	r2, r8, r2
 8016132:	1bcf      	subs	r7, r1, r7
 8016134:	e88d 0084 	stmia.w	sp, {r2, r7}
 8016138:	466a      	mov	r2, sp
 801613a:	69a0      	ldr	r0, [r4, #24]
 801613c:	2103      	movs	r1, #3
 801613e:	f7f9 f8c9 	bl	800f2d4 <LCD_X_DisplayDriver>
 8016142:	b003      	add	sp, #12
 8016144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016148:	e88d 0180 	stmia.w	sp, {r7, r8}
 801614c:	e7f4      	b.n	8016138 <_SetOrg+0x58>
 801614e:	69b3      	ldr	r3, [r6, #24]
 8016150:	6931      	ldr	r1, [r6, #16]
 8016152:	f8cd 8004 	str.w	r8, [sp, #4]
 8016156:	1a59      	subs	r1, r3, r1
 8016158:	1bcf      	subs	r7, r1, r7
 801615a:	9700      	str	r7, [sp, #0]
 801615c:	e7ec      	b.n	8016138 <_SetOrg+0x58>
 801615e:	69f3      	ldr	r3, [r6, #28]
 8016160:	6972      	ldr	r2, [r6, #20]
 8016162:	9700      	str	r7, [sp, #0]
 8016164:	1a9a      	subs	r2, r3, r2
 8016166:	ebc8 0202 	rsb	r2, r8, r2
 801616a:	9201      	str	r2, [sp, #4]
 801616c:	e7e4      	b.n	8016138 <_SetOrg+0x58>
 801616e:	69b1      	ldr	r1, [r6, #24]
 8016170:	6930      	ldr	r0, [r6, #16]
 8016172:	69f3      	ldr	r3, [r6, #28]
 8016174:	6972      	ldr	r2, [r6, #20]
 8016176:	1a09      	subs	r1, r1, r0
 8016178:	1a9a      	subs	r2, r3, r2
 801617a:	1bcf      	subs	r7, r1, r7
 801617c:	ebc8 0202 	rsb	r2, r8, r2
 8016180:	9700      	str	r7, [sp, #0]
 8016182:	9201      	str	r2, [sp, #4]
 8016184:	e7d8      	b.n	8016138 <_SetOrg+0x58>
 8016186:	f8cd 8000 	str.w	r8, [sp]
 801618a:	9701      	str	r7, [sp, #4]
 801618c:	e7d4      	b.n	8016138 <_SetOrg+0x58>
 801618e:	69f3      	ldr	r3, [r6, #28]
 8016190:	6972      	ldr	r2, [r6, #20]
 8016192:	9701      	str	r7, [sp, #4]
 8016194:	1a9a      	subs	r2, r3, r2
 8016196:	ebc8 0202 	rsb	r2, r8, r2
 801619a:	9200      	str	r2, [sp, #0]
 801619c:	e7cc      	b.n	8016138 <_SetOrg+0x58>
 801619e:	69b3      	ldr	r3, [r6, #24]
 80161a0:	6931      	ldr	r1, [r6, #16]
 80161a2:	f8cd 8000 	str.w	r8, [sp]
 80161a6:	1a59      	subs	r1, r3, r1
 80161a8:	1bcf      	subs	r7, r1, r7
 80161aa:	9701      	str	r7, [sp, #4]
 80161ac:	e7c4      	b.n	8016138 <_SetOrg+0x58>
 80161ae:	bf00      	nop

080161b0 <_FillRect>:
 80161b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161b4:	6887      	ldr	r7, [r0, #8]
 80161b6:	b087      	sub	sp, #28
 80161b8:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 80161ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80161bc:	b156      	cbz	r6, 80161d4 <_FillRect+0x24>
 80161be:	4d98      	ldr	r5, [pc, #608]	; (8016420 <_FillRect+0x270>)
 80161c0:	6980      	ldr	r0, [r0, #24]
 80161c2:	682d      	ldr	r5, [r5, #0]
 80161c4:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 80161c6:	682d      	ldr	r5, [r5, #0]
 80161c8:	e88d 0030 	stmia.w	sp, {r4, r5}
 80161cc:	47b0      	blx	r6
 80161ce:	b007      	add	sp, #28
 80161d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161d4:	469c      	mov	ip, r3
 80161d6:	4b92      	ldr	r3, [pc, #584]	; (8016420 <_FillRect+0x270>)
 80161d8:	6838      	ldr	r0, [r7, #0]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	4696      	mov	lr, r2
 80161de:	6a3a      	ldr	r2, [r7, #32]
 80161e0:	ebce 0404 	rsb	r4, lr, r4
 80161e4:	460d      	mov	r5, r1
 80161e6:	1052      	asrs	r2, r2, #1
 80161e8:	7c19      	ldrb	r1, [r3, #16]
 80161ea:	9403      	str	r4, [sp, #12]
 80161ec:	4626      	mov	r6, r4
 80161ee:	4614      	mov	r4, r2
 80161f0:	086a      	lsrs	r2, r5, #1
 80161f2:	fb04 2e0e 	mla	lr, r4, lr, r2
 80161f6:	ebc5 070c 	rsb	r7, r5, ip
 80161fa:	3601      	adds	r6, #1
 80161fc:	07c9      	lsls	r1, r1, #31
 80161fe:	9402      	str	r4, [sp, #8]
 8016200:	eb00 028e 	add.w	r2, r0, lr, lsl #2
 8016204:	f107 0401 	add.w	r4, r7, #1
 8016208:	4630      	mov	r0, r6
 801620a:	d54f      	bpl.n	80162ac <_FillRect+0xfc>
 801620c:	f015 0501 	ands.w	r5, r5, #1
 8016210:	d013      	beq.n	801623a <_FillRect+0x8a>
 8016212:	2e00      	cmp	r6, #0
 8016214:	f000 80ff 	beq.w	8016416 <_FillRect+0x266>
 8016218:	9c02      	ldr	r4, [sp, #8]
 801621a:	4613      	mov	r3, r2
 801621c:	00a5      	lsls	r5, r4, #2
 801621e:	4634      	mov	r4, r6
 8016220:	6819      	ldr	r1, [r3, #0]
 8016222:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 8016226:	f481 017f 	eor.w	r1, r1, #16711680	; 0xff0000
 801622a:	3c01      	subs	r4, #1
 801622c:	6019      	str	r1, [r3, #0]
 801622e:	442b      	add	r3, r5
 8016230:	d1f6      	bne.n	8016220 <_FillRect+0x70>
 8016232:	fb05 2506 	mla	r5, r5, r6, r2
 8016236:	3204      	adds	r2, #4
 8016238:	463c      	mov	r4, r7
 801623a:	2c01      	cmp	r4, #1
 801623c:	dd26      	ble.n	801628c <_FillRect+0xdc>
 801623e:	2e00      	cmp	r6, #0
 8016240:	f000 80e1 	beq.w	8016406 <_FillRect+0x256>
 8016244:	9b02      	ldr	r3, [sp, #8]
 8016246:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801624a:	9b03      	ldr	r3, [sp, #12]
 801624c:	fb0c f903 	mul.w	r9, ip, r3
 8016250:	eb02 0e09 	add.w	lr, r2, r9
 8016254:	f1cc 0800 	rsb	r8, ip, #0
 8016258:	4637      	mov	r7, r6
 801625a:	3f01      	subs	r7, #1
 801625c:	4675      	mov	r5, lr
 801625e:	4621      	mov	r1, r4
 8016260:	682b      	ldr	r3, [r5, #0]
 8016262:	3902      	subs	r1, #2
 8016264:	43db      	mvns	r3, r3
 8016266:	2901      	cmp	r1, #1
 8016268:	f845 3b04 	str.w	r3, [r5], #4
 801626c:	dcf8      	bgt.n	8016260 <_FillRect+0xb0>
 801626e:	ebcc 0e0e 	rsb	lr, ip, lr
 8016272:	2f00      	cmp	r7, #0
 8016274:	d1f1      	bne.n	801625a <_FillRect+0xaa>
 8016276:	1ea3      	subs	r3, r4, #2
 8016278:	9903      	ldr	r1, [sp, #12]
 801627a:	085b      	lsrs	r3, r3, #1
 801627c:	fb08 9801 	mla	r8, r8, r1, r9
 8016280:	3301      	adds	r3, #1
 8016282:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8016286:	441a      	add	r2, r3
 8016288:	f004 0401 	and.w	r4, r4, #1
 801628c:	2c01      	cmp	r4, #1
 801628e:	d19e      	bne.n	80161ce <_FillRect+0x1e>
 8016290:	2e00      	cmp	r6, #0
 8016292:	d09c      	beq.n	80161ce <_FillRect+0x1e>
 8016294:	9b02      	ldr	r3, [sp, #8]
 8016296:	0099      	lsls	r1, r3, #2
 8016298:	6813      	ldr	r3, [r2, #0]
 801629a:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 801629e:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80162a2:	3801      	subs	r0, #1
 80162a4:	6013      	str	r3, [r2, #0]
 80162a6:	440a      	add	r2, r1
 80162a8:	d1f6      	bne.n	8016298 <_FillRect+0xe8>
 80162aa:	e790      	b.n	80161ce <_FillRect+0x1e>
 80162ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162ae:	f015 0501 	ands.w	r5, r5, #1
 80162b2:	f8d3 e000 	ldr.w	lr, [r3]
 80162b6:	d015      	beq.n	80162e4 <_FillRect+0x134>
 80162b8:	2e00      	cmp	r6, #0
 80162ba:	f000 80a8 	beq.w	801640e <_FillRect+0x25e>
 80162be:	9b02      	ldr	r3, [sp, #8]
 80162c0:	46b4      	mov	ip, r6
 80162c2:	0099      	lsls	r1, r3, #2
 80162c4:	4614      	mov	r4, r2
 80162c6:	ea4f 430e 	mov.w	r3, lr, lsl #16
 80162ca:	8825      	ldrh	r5, [r4, #0]
 80162cc:	f1bc 0c01 	subs.w	ip, ip, #1
 80162d0:	ea45 0503 	orr.w	r5, r5, r3
 80162d4:	6025      	str	r5, [r4, #0]
 80162d6:	440c      	add	r4, r1
 80162d8:	d1f7      	bne.n	80162ca <_FillRect+0x11a>
 80162da:	fb01 2506 	mla	r5, r1, r6, r2
 80162de:	3204      	adds	r2, #4
 80162e0:	463c      	mov	r4, r7
 80162e2:	e001      	b.n	80162e8 <_FillRect+0x138>
 80162e4:	ea4f 430e 	mov.w	r3, lr, lsl #16
 80162e8:	2c0f      	cmp	r4, #15
 80162ea:	4473      	add	r3, lr
 80162ec:	dd39      	ble.n	8016362 <_FillRect+0x1b2>
 80162ee:	f1a4 0810 	sub.w	r8, r4, #16
 80162f2:	2e00      	cmp	r6, #0
 80162f4:	f000 8091 	beq.w	801641a <_FillRect+0x26a>
 80162f8:	9902      	ldr	r1, [sp, #8]
 80162fa:	ea4f 0981 	mov.w	r9, r1, lsl #2
 80162fe:	9903      	ldr	r1, [sp, #12]
 8016300:	fb01 fa09 	mul.w	sl, r1, r9
 8016304:	f10a 0720 	add.w	r7, sl, #32
 8016308:	4417      	add	r7, r2
 801630a:	4639      	mov	r1, r7
 801630c:	f1c9 0b00 	rsb	fp, r9, #0
 8016310:	4637      	mov	r7, r6
 8016312:	468c      	mov	ip, r1
 8016314:	3f01      	subs	r7, #1
 8016316:	4661      	mov	r1, ip
 8016318:	4645      	mov	r5, r8
 801631a:	3d10      	subs	r5, #16
 801631c:	f841 3c20 	str.w	r3, [r1, #-32]
 8016320:	f841 3c1c 	str.w	r3, [r1, #-28]
 8016324:	f841 3c18 	str.w	r3, [r1, #-24]
 8016328:	f841 3c14 	str.w	r3, [r1, #-20]
 801632c:	f841 3c10 	str.w	r3, [r1, #-16]
 8016330:	f841 3c0c 	str.w	r3, [r1, #-12]
 8016334:	f841 3c08 	str.w	r3, [r1, #-8]
 8016338:	f841 3c04 	str.w	r3, [r1, #-4]
 801633c:	f101 0120 	add.w	r1, r1, #32
 8016340:	d5eb      	bpl.n	801631a <_FillRect+0x16a>
 8016342:	ebc9 0c0c 	rsb	ip, r9, ip
 8016346:	2f00      	cmp	r7, #0
 8016348:	d1e4      	bne.n	8016314 <_FillRect+0x164>
 801634a:	9d03      	ldr	r5, [sp, #12]
 801634c:	ea4f 1118 	mov.w	r1, r8, lsr #4
 8016350:	3101      	adds	r1, #1
 8016352:	fb05 aa0b 	mla	sl, r5, fp, sl
 8016356:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 801635a:	440a      	add	r2, r1
 801635c:	f004 040f 	and.w	r4, r4, #15
 8016360:	4615      	mov	r5, r2
 8016362:	2c01      	cmp	r4, #1
 8016364:	dd3f      	ble.n	80163e6 <_FillRect+0x236>
 8016366:	2e00      	cmp	r6, #0
 8016368:	d04f      	beq.n	801640a <_FillRect+0x25a>
 801636a:	9902      	ldr	r1, [sp, #8]
 801636c:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8016370:	9903      	ldr	r1, [sp, #12]
 8016372:	f1cc 0500 	rsb	r5, ip, #0
 8016376:	fb01 f10c 	mul.w	r1, r1, ip
 801637a:	9105      	str	r1, [sp, #20]
 801637c:	9504      	str	r5, [sp, #16]
 801637e:	1851      	adds	r1, r2, r1
 8016380:	1ea7      	subs	r7, r4, #2
 8016382:	4635      	mov	r5, r6
 8016384:	f1a4 0b04 	sub.w	fp, r4, #4
 8016388:	f1a4 0a06 	sub.w	sl, r4, #6
 801638c:	f1a4 0908 	sub.w	r9, r4, #8
 8016390:	f1a4 080a 	sub.w	r8, r4, #10
 8016394:	2f01      	cmp	r7, #1
 8016396:	f105 35ff 	add.w	r5, r5, #4294967295
 801639a:	600b      	str	r3, [r1, #0]
 801639c:	dd13      	ble.n	80163c6 <_FillRect+0x216>
 801639e:	f1bb 0f01 	cmp.w	fp, #1
 80163a2:	604b      	str	r3, [r1, #4]
 80163a4:	dd0f      	ble.n	80163c6 <_FillRect+0x216>
 80163a6:	f1ba 0f01 	cmp.w	sl, #1
 80163aa:	608b      	str	r3, [r1, #8]
 80163ac:	dd0b      	ble.n	80163c6 <_FillRect+0x216>
 80163ae:	f1b9 0f01 	cmp.w	r9, #1
 80163b2:	60cb      	str	r3, [r1, #12]
 80163b4:	dd07      	ble.n	80163c6 <_FillRect+0x216>
 80163b6:	f1b8 0f01 	cmp.w	r8, #1
 80163ba:	610b      	str	r3, [r1, #16]
 80163bc:	dd03      	ble.n	80163c6 <_FillRect+0x216>
 80163be:	2c0d      	cmp	r4, #13
 80163c0:	614b      	str	r3, [r1, #20]
 80163c2:	dd00      	ble.n	80163c6 <_FillRect+0x216>
 80163c4:	618b      	str	r3, [r1, #24]
 80163c6:	ebcc 0101 	rsb	r1, ip, r1
 80163ca:	2d00      	cmp	r5, #0
 80163cc:	d1e2      	bne.n	8016394 <_FillRect+0x1e4>
 80163ce:	087b      	lsrs	r3, r7, #1
 80163d0:	9904      	ldr	r1, [sp, #16]
 80163d2:	9d03      	ldr	r5, [sp, #12]
 80163d4:	9f05      	ldr	r7, [sp, #20]
 80163d6:	3301      	adds	r3, #1
 80163d8:	fb05 7101 	mla	r1, r5, r1, r7
 80163dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80163e0:	441a      	add	r2, r3
 80163e2:	f004 0401 	and.w	r4, r4, #1
 80163e6:	2c01      	cmp	r4, #1
 80163e8:	f47f aef1 	bne.w	80161ce <_FillRect+0x1e>
 80163ec:	2e00      	cmp	r6, #0
 80163ee:	f43f aeee 	beq.w	80161ce <_FillRect+0x1e>
 80163f2:	9b02      	ldr	r3, [sp, #8]
 80163f4:	0099      	lsls	r1, r3, #2
 80163f6:	8853      	ldrh	r3, [r2, #2]
 80163f8:	3801      	subs	r0, #1
 80163fa:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
 80163fe:	6013      	str	r3, [r2, #0]
 8016400:	440a      	add	r2, r1
 8016402:	d1f8      	bne.n	80163f6 <_FillRect+0x246>
 8016404:	e6e3      	b.n	80161ce <_FillRect+0x1e>
 8016406:	462a      	mov	r2, r5
 8016408:	e73e      	b.n	8016288 <_FillRect+0xd8>
 801640a:	462a      	mov	r2, r5
 801640c:	e7e9      	b.n	80163e2 <_FillRect+0x232>
 801640e:	4615      	mov	r5, r2
 8016410:	ea4f 430e 	mov.w	r3, lr, lsl #16
 8016414:	e763      	b.n	80162de <_FillRect+0x12e>
 8016416:	4615      	mov	r5, r2
 8016418:	e70d      	b.n	8016236 <_FillRect+0x86>
 801641a:	462a      	mov	r2, r5
 801641c:	e79e      	b.n	801635c <_FillRect+0x1ac>
 801641e:	bf00      	nop
 8016420:	20000014 	.word	0x20000014

08016424 <_DrawHLine>:
 8016424:	b500      	push	{lr}
 8016426:	b083      	sub	sp, #12
 8016428:	9200      	str	r2, [sp, #0]
 801642a:	f7ff fec1 	bl	80161b0 <_FillRect>
 801642e:	b003      	add	sp, #12
 8016430:	f85d fb04 	ldr.w	pc, [sp], #4

08016434 <_DrawVLine>:
 8016434:	b500      	push	{lr}
 8016436:	b083      	sub	sp, #12
 8016438:	9300      	str	r3, [sp, #0]
 801643a:	460b      	mov	r3, r1
 801643c:	f7ff feb8 	bl	80161b0 <_FillRect>
 8016440:	b003      	add	sp, #12
 8016442:	f85d fb04 	ldr.w	pc, [sp], #4
 8016446:	bf00      	nop

08016448 <_DrawBitmap>:
 8016448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801644c:	b08b      	sub	sp, #44	; 0x2c
 801644e:	460e      	mov	r6, r1
 8016450:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016452:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8016454:	9500      	str	r5, [sp, #0]
 8016456:	3c01      	subs	r4, #1
 8016458:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801645a:	9501      	str	r5, [sp, #4]
 801645c:	9302      	str	r3, [sp, #8]
 801645e:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8016462:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8016464:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8016466:	9003      	str	r0, [sp, #12]
 8016468:	6883      	ldr	r3, [r0, #8]
 801646a:	2c0f      	cmp	r4, #15
 801646c:	d83a      	bhi.n	80164e4 <_DrawBitmap+0x9c>
 801646e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8016472:	003c      	.short	0x003c
 8016474:	003900ad 	.word	0x003900ad
 8016478:	003900fa 	.word	0x003900fa
 801647c:	00390039 	.word	0x00390039
 8016480:	00390148 	.word	0x00390148
 8016484:	00390039 	.word	0x00390039
 8016488:	00390039 	.word	0x00390039
 801648c:	00390039 	.word	0x00390039
 8016490:	0010      	.short	0x0010
 8016492:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016494:	b12c      	cbz	r4, 80164a2 <_DrawBitmap+0x5a>
 8016496:	49a6      	ldr	r1, [pc, #664]	; (8016730 <_DrawBitmap+0x2e8>)
 8016498:	6809      	ldr	r1, [r1, #0]
 801649a:	7c09      	ldrb	r1, [r1, #16]
 801649c:	07c9      	lsls	r1, r1, #31
 801649e:	f140 835c 	bpl.w	8016b5a <_DrawBitmap+0x712>
 80164a2:	f1be 0f00 	cmp.w	lr, #0
 80164a6:	dd1d      	ble.n	80164e4 <_DrawBitmap+0x9c>
 80164a8:	4614      	mov	r4, r2
 80164aa:	eb0e 0502 	add.w	r5, lr, r2
 80164ae:	9a02      	ldr	r2, [sp, #8]
 80164b0:	f8df a280 	ldr.w	sl, [pc, #640]	; 8016734 <_DrawBitmap+0x2ec>
 80164b4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80164b8:	f8dd 8000 	ldr.w	r8, [sp]
 80164bc:	ea4f 0942 	mov.w	r9, r2, lsl #1
 80164c0:	e001      	b.n	80164c6 <_DrawBitmap+0x7e>
 80164c2:	f8db 3008 	ldr.w	r3, [fp, #8]
 80164c6:	6a1a      	ldr	r2, [r3, #32]
 80164c8:	6818      	ldr	r0, [r3, #0]
 80164ca:	f8da 3000 	ldr.w	r3, [sl]
 80164ce:	fb02 6204 	mla	r2, r2, r4, r6
 80164d2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80164d6:	4639      	mov	r1, r7
 80164d8:	3401      	adds	r4, #1
 80164da:	464a      	mov	r2, r9
 80164dc:	4798      	blx	r3
 80164de:	42ac      	cmp	r4, r5
 80164e0:	4447      	add	r7, r8
 80164e2:	d1ee      	bne.n	80164c2 <_DrawBitmap+0x7a>
 80164e4:	b00b      	add	sp, #44	; 0x2c
 80164e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ea:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80164ec:	b12c      	cbz	r4, 80164fa <_DrawBitmap+0xb2>
 80164ee:	4990      	ldr	r1, [pc, #576]	; (8016730 <_DrawBitmap+0x2e8>)
 80164f0:	6809      	ldr	r1, [r1, #0]
 80164f2:	7c09      	ldrb	r1, [r1, #16]
 80164f4:	07c9      	lsls	r1, r1, #31
 80164f6:	f140 831f 	bpl.w	8016b38 <_DrawBitmap+0x6f0>
 80164fa:	f1be 0f00 	cmp.w	lr, #0
 80164fe:	ddf1      	ble.n	80164e4 <_DrawBitmap+0x9c>
 8016500:	4611      	mov	r1, r2
 8016502:	4472      	add	r2, lr
 8016504:	9204      	str	r2, [sp, #16]
 8016506:	9a01      	ldr	r2, [sp, #4]
 8016508:	4889      	ldr	r0, [pc, #548]	; (8016730 <_DrawBitmap+0x2e8>)
 801650a:	9006      	str	r0, [sp, #24]
 801650c:	4698      	mov	r8, r3
 801650e:	18b0      	adds	r0, r6, r2
 8016510:	f1c2 0308 	rsb	r3, r2, #8
 8016514:	f8df b220 	ldr.w	fp, [pc, #544]	; 8016738 <_DrawBitmap+0x2f0>
 8016518:	9005      	str	r0, [sp, #20]
 801651a:	468a      	mov	sl, r1
 801651c:	9308      	str	r3, [sp, #32]
 801651e:	4646      	mov	r6, r8
 8016520:	9507      	str	r5, [sp, #28]
 8016522:	4629      	mov	r1, r5
 8016524:	9b06      	ldr	r3, [sp, #24]
 8016526:	783a      	ldrb	r2, [r7, #0]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	f81b 4002 	ldrb.w	r4, [fp, r2]
 801652e:	7c1b      	ldrb	r3, [r3, #16]
 8016530:	9a01      	ldr	r2, [sp, #4]
 8016532:	6a35      	ldr	r5, [r6, #32]
 8016534:	6848      	ldr	r0, [r1, #4]
 8016536:	f003 0303 	and.w	r3, r3, #3
 801653a:	4114      	asrs	r4, r2
 801653c:	9a05      	ldr	r2, [sp, #20]
 801653e:	2b02      	cmp	r3, #2
 8016540:	fb05 250a 	mla	r5, r5, sl, r2
 8016544:	f000 8287 	beq.w	8016a56 <_DrawBitmap+0x60e>
 8016548:	2b03      	cmp	r3, #3
 801654a:	f000 8262 	beq.w	8016a12 <_DrawBitmap+0x5ca>
 801654e:	2b01      	cmp	r3, #1
 8016550:	f000 825f 	beq.w	8016a12 <_DrawBitmap+0x5ca>
 8016554:	6833      	ldr	r3, [r6, #0]
 8016556:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801655a:	680e      	ldr	r6, [r1, #0]
 801655c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8016560:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016564:	462a      	mov	r2, r5
 8016566:	46b9      	mov	r9, r7
 8016568:	4645      	mov	r5, r8
 801656a:	469a      	mov	sl, r3
 801656c:	4690      	mov	r8, r2
 801656e:	4565      	cmp	r5, ip
 8016570:	46ae      	mov	lr, r5
 8016572:	bf28      	it	cs
 8016574:	46e6      	movcs	lr, ip
 8016576:	4673      	mov	r3, lr
 8016578:	eb0a 0248 	add.w	r2, sl, r8, lsl #1
 801657c:	f014 0f01 	tst.w	r4, #1
 8016580:	bf0c      	ite	eq
 8016582:	4631      	moveq	r1, r6
 8016584:	4601      	movne	r1, r0
 8016586:	3b01      	subs	r3, #1
 8016588:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801658c:	f822 1b02 	strh.w	r1, [r2], #2
 8016590:	d1f4      	bne.n	801657c <_DrawBitmap+0x134>
 8016592:	ebbc 0c0e 	subs.w	ip, ip, lr
 8016596:	44f0      	add	r8, lr
 8016598:	ebce 0505 	rsb	r5, lr, r5
 801659c:	d107      	bne.n	80165ae <_DrawBitmap+0x166>
 801659e:	f899 3001 	ldrb.w	r3, [r9, #1]
 80165a2:	f81b 4003 	ldrb.w	r4, [fp, r3]
 80165a6:	f109 0901 	add.w	r9, r9, #1
 80165aa:	f04f 0c08 	mov.w	ip, #8
 80165ae:	2d00      	cmp	r5, #0
 80165b0:	d1dd      	bne.n	801656e <_DrawBitmap+0x126>
 80165b2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80165b6:	9b00      	ldr	r3, [sp, #0]
 80165b8:	441f      	add	r7, r3
 80165ba:	9b04      	ldr	r3, [sp, #16]
 80165bc:	f10a 0a01 	add.w	sl, sl, #1
 80165c0:	459a      	cmp	sl, r3
 80165c2:	d08f      	beq.n	80164e4 <_DrawBitmap+0x9c>
 80165c4:	9b03      	ldr	r3, [sp, #12]
 80165c6:	9907      	ldr	r1, [sp, #28]
 80165c8:	689e      	ldr	r6, [r3, #8]
 80165ca:	e7ab      	b.n	8016524 <_DrawBitmap+0xdc>
 80165cc:	f1be 0f00 	cmp.w	lr, #0
 80165d0:	dd88      	ble.n	80164e4 <_DrawBitmap+0x9c>
 80165d2:	4957      	ldr	r1, [pc, #348]	; (8016730 <_DrawBitmap+0x2e8>)
 80165d4:	9801      	ldr	r0, [sp, #4]
 80165d6:	6809      	ldr	r1, [r1, #0]
 80165d8:	9103      	str	r1, [sp, #12]
 80165da:	9902      	ldr	r1, [sp, #8]
 80165dc:	1830      	adds	r0, r6, r0
 80165de:	4401      	add	r1, r0
 80165e0:	eb0e 0b02 	add.w	fp, lr, r2
 80165e4:	9004      	str	r0, [sp, #16]
 80165e6:	460e      	mov	r6, r1
 80165e8:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
 80165ec:	9903      	ldr	r1, [sp, #12]
 80165ee:	7838      	ldrb	r0, [r7, #0]
 80165f0:	7c09      	ldrb	r1, [r1, #16]
 80165f2:	f011 0103 	ands.w	r1, r1, #3
 80165f6:	f000 80eb 	beq.w	80167d0 <_DrawBitmap+0x388>
 80165fa:	2902      	cmp	r1, #2
 80165fc:	d12d      	bne.n	801665a <_DrawBitmap+0x212>
 80165fe:	2d00      	cmp	r5, #0
 8016600:	f000 8243 	beq.w	8016a8a <_DrawBitmap+0x642>
 8016604:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016608:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801660c:	46b9      	mov	r9, r7
 801660e:	46ba      	mov	sl, r7
 8016610:	e001      	b.n	8016616 <_DrawBitmap+0x1ce>
 8016612:	4546      	cmp	r6, r8
 8016614:	d020      	beq.n	8016658 <_DrawBitmap+0x210>
 8016616:	f1cc 0403 	rsb	r4, ip, #3
 801661a:	0064      	lsls	r4, r4, #1
 801661c:	f1c4 0106 	rsb	r1, r4, #6
 8016620:	fa4e f101 	asr.w	r1, lr, r1
 8016624:	4001      	ands	r1, r0
 8016626:	40e1      	lsrs	r1, r4
 8016628:	f10c 0c01 	add.w	ip, ip, #1
 801662c:	d007      	beq.n	801663e <_DrawBitmap+0x1f6>
 801662e:	6a1c      	ldr	r4, [r3, #32]
 8016630:	681f      	ldr	r7, [r3, #0]
 8016632:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8016636:	fb04 8402 	mla	r4, r4, r2, r8
 801663a:	f827 1014 	strh.w	r1, [r7, r4, lsl #1]
 801663e:	f1bc 0f04 	cmp.w	ip, #4
 8016642:	f108 0801 	add.w	r8, r8, #1
 8016646:	d1e4      	bne.n	8016612 <_DrawBitmap+0x1ca>
 8016648:	4546      	cmp	r6, r8
 801664a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801664e:	f04f 0c00 	mov.w	ip, #0
 8016652:	f109 0901 	add.w	r9, r9, #1
 8016656:	d1de      	bne.n	8016616 <_DrawBitmap+0x1ce>
 8016658:	4657      	mov	r7, sl
 801665a:	3201      	adds	r2, #1
 801665c:	9900      	ldr	r1, [sp, #0]
 801665e:	455a      	cmp	r2, fp
 8016660:	440f      	add	r7, r1
 8016662:	d1c3      	bne.n	80165ec <_DrawBitmap+0x1a4>
 8016664:	e73e      	b.n	80164e4 <_DrawBitmap+0x9c>
 8016666:	f1be 0f00 	cmp.w	lr, #0
 801666a:	f77f af3b 	ble.w	80164e4 <_DrawBitmap+0x9c>
 801666e:	4930      	ldr	r1, [pc, #192]	; (8016730 <_DrawBitmap+0x2e8>)
 8016670:	9801      	ldr	r0, [sp, #4]
 8016672:	6809      	ldr	r1, [r1, #0]
 8016674:	9103      	str	r1, [sp, #12]
 8016676:	9902      	ldr	r1, [sp, #8]
 8016678:	1830      	adds	r0, r6, r0
 801667a:	4401      	add	r1, r0
 801667c:	eb0e 0b02 	add.w	fp, lr, r2
 8016680:	9004      	str	r0, [sp, #16]
 8016682:	460e      	mov	r6, r1
 8016684:	f04f 0ef0 	mov.w	lr, #240	; 0xf0
 8016688:	9903      	ldr	r1, [sp, #12]
 801668a:	7838      	ldrb	r0, [r7, #0]
 801668c:	7c09      	ldrb	r1, [r1, #16]
 801668e:	f011 0103 	ands.w	r1, r1, #3
 8016692:	f000 80e4 	beq.w	801685e <_DrawBitmap+0x416>
 8016696:	2902      	cmp	r1, #2
 8016698:	d12d      	bne.n	80166f6 <_DrawBitmap+0x2ae>
 801669a:	2d00      	cmp	r5, #0
 801669c:	f000 821e 	beq.w	8016adc <_DrawBitmap+0x694>
 80166a0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80166a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80166a8:	46b9      	mov	r9, r7
 80166aa:	46ba      	mov	sl, r7
 80166ac:	e001      	b.n	80166b2 <_DrawBitmap+0x26a>
 80166ae:	4546      	cmp	r6, r8
 80166b0:	d020      	beq.n	80166f4 <_DrawBitmap+0x2ac>
 80166b2:	f1cc 0401 	rsb	r4, ip, #1
 80166b6:	00a4      	lsls	r4, r4, #2
 80166b8:	f1c4 0104 	rsb	r1, r4, #4
 80166bc:	fa4e f101 	asr.w	r1, lr, r1
 80166c0:	4001      	ands	r1, r0
 80166c2:	40e1      	lsrs	r1, r4
 80166c4:	f10c 0c01 	add.w	ip, ip, #1
 80166c8:	d007      	beq.n	80166da <_DrawBitmap+0x292>
 80166ca:	6a1c      	ldr	r4, [r3, #32]
 80166cc:	681f      	ldr	r7, [r3, #0]
 80166ce:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80166d2:	fb04 8402 	mla	r4, r4, r2, r8
 80166d6:	f827 1014 	strh.w	r1, [r7, r4, lsl #1]
 80166da:	f1bc 0f02 	cmp.w	ip, #2
 80166de:	f108 0801 	add.w	r8, r8, #1
 80166e2:	d1e4      	bne.n	80166ae <_DrawBitmap+0x266>
 80166e4:	4546      	cmp	r6, r8
 80166e6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80166ea:	f04f 0c00 	mov.w	ip, #0
 80166ee:	f109 0901 	add.w	r9, r9, #1
 80166f2:	d1de      	bne.n	80166b2 <_DrawBitmap+0x26a>
 80166f4:	4657      	mov	r7, sl
 80166f6:	3201      	adds	r2, #1
 80166f8:	9900      	ldr	r1, [sp, #0]
 80166fa:	455a      	cmp	r2, fp
 80166fc:	440f      	add	r7, r1
 80166fe:	d1c3      	bne.n	8016688 <_DrawBitmap+0x240>
 8016700:	e6f0      	b.n	80164e4 <_DrawBitmap+0x9c>
 8016702:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8016704:	b1d4      	cbz	r4, 801673c <_DrawBitmap+0x2f4>
 8016706:	490a      	ldr	r1, [pc, #40]	; (8016730 <_DrawBitmap+0x2e8>)
 8016708:	6809      	ldr	r1, [r1, #0]
 801670a:	7c09      	ldrb	r1, [r1, #16]
 801670c:	0789      	lsls	r1, r1, #30
 801670e:	d415      	bmi.n	801673c <_DrawBitmap+0x2f4>
 8016710:	b1a5      	cbz	r5, 801673c <_DrawBitmap+0x2f4>
 8016712:	9b00      	ldr	r3, [sp, #0]
 8016714:	6980      	ldr	r0, [r0, #24]
 8016716:	9316      	str	r3, [sp, #88]	; 0x58
 8016718:	9b02      	ldr	r3, [sp, #8]
 801671a:	9314      	str	r3, [sp, #80]	; 0x50
 801671c:	4631      	mov	r1, r6
 801671e:	463b      	mov	r3, r7
 8016720:	46a4      	mov	ip, r4
 8016722:	9517      	str	r5, [sp, #92]	; 0x5c
 8016724:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 8016728:	b00b      	add	sp, #44	; 0x2c
 801672a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801672e:	4760      	bx	ip
 8016730:	20000014 	.word	0x20000014
 8016734:	2000003c 	.word	0x2000003c
 8016738:	0802760c 	.word	0x0802760c
 801673c:	f1be 0f00 	cmp.w	lr, #0
 8016740:	f77f aed0 	ble.w	80164e4 <_DrawBitmap+0x9c>
 8016744:	9902      	ldr	r1, [sp, #8]
 8016746:	4cd4      	ldr	r4, [pc, #848]	; (8016a98 <_DrawBitmap+0x650>)
 8016748:	3908      	subs	r1, #8
 801674a:	08c8      	lsrs	r0, r1, #3
 801674c:	f100 0c01 	add.w	ip, r0, #1
 8016750:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8016754:	eba1 0ac0 	sub.w	sl, r1, r0, lsl #3
 8016758:	9902      	ldr	r1, [sp, #8]
 801675a:	6824      	ldr	r4, [r4, #0]
 801675c:	f8cd a008 	str.w	sl, [sp, #8]
 8016760:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8016764:	9003      	str	r0, [sp, #12]
 8016766:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801676a:	f108 0b20 	add.w	fp, r8, #32
 801676e:	9004      	str	r0, [sp, #16]
 8016770:	f8dd 8000 	ldr.w	r8, [sp]
 8016774:	f8cd b014 	str.w	fp, [sp, #20]
 8016778:	0048      	lsls	r0, r1, #1
 801677a:	4496      	add	lr, r2
 801677c:	9001      	str	r0, [sp, #4]
 801677e:	468b      	mov	fp, r1
 8016780:	b1fd      	cbz	r5, 80167c2 <_DrawBitmap+0x37a>
 8016782:	6a18      	ldr	r0, [r3, #32]
 8016784:	f894 c010 	ldrb.w	ip, [r4, #16]
 8016788:	fb00 6102 	mla	r1, r0, r2, r6
 801678c:	6818      	ldr	r0, [r3, #0]
 801678e:	f01c 0c03 	ands.w	ip, ip, #3
 8016792:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8016796:	f000 80a9 	beq.w	80168ec <_DrawBitmap+0x4a4>
 801679a:	f1bc 0f02 	cmp.w	ip, #2
 801679e:	d110      	bne.n	80167c2 <_DrawBitmap+0x37a>
 80167a0:	f1bb 0f00 	cmp.w	fp, #0
 80167a4:	dd0d      	ble.n	80167c2 <_DrawBitmap+0x37a>
 80167a6:	9801      	ldr	r0, [sp, #4]
 80167a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80167ac:	eb01 0900 	add.w	r9, r1, r0
 80167b0:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 80167b4:	b110      	cbz	r0, 80167bc <_DrawBitmap+0x374>
 80167b6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80167ba:	8008      	strh	r0, [r1, #0]
 80167bc:	3102      	adds	r1, #2
 80167be:	4549      	cmp	r1, r9
 80167c0:	d1f6      	bne.n	80167b0 <_DrawBitmap+0x368>
 80167c2:	3201      	adds	r2, #1
 80167c4:	4572      	cmp	r2, lr
 80167c6:	4447      	add	r7, r8
 80167c8:	d1da      	bne.n	8016780 <_DrawBitmap+0x338>
 80167ca:	b00b      	add	sp, #44	; 0x2c
 80167cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167d0:	6a19      	ldr	r1, [r3, #32]
 80167d2:	681c      	ldr	r4, [r3, #0]
 80167d4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80167d8:	fb01 f902 	mul.w	r9, r1, r2
 80167dc:	9904      	ldr	r1, [sp, #16]
 80167de:	eb01 0809 	add.w	r8, r1, r9
 80167e2:	44b1      	add	r9, r6
 80167e4:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 80167e8:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80167ec:	46ba      	mov	sl, r7
 80167ee:	b91d      	cbnz	r5, 80167f8 <_DrawBitmap+0x3b0>
 80167f0:	e024      	b.n	801683c <_DrawBitmap+0x3f4>
 80167f2:	45c8      	cmp	r8, r9
 80167f4:	f43f af31 	beq.w	801665a <_DrawBitmap+0x212>
 80167f8:	f1cc 0103 	rsb	r1, ip, #3
 80167fc:	004c      	lsls	r4, r1, #1
 80167fe:	f1c4 0106 	rsb	r1, r4, #6
 8016802:	fa4e f101 	asr.w	r1, lr, r1
 8016806:	4001      	ands	r1, r0
 8016808:	40e1      	lsrs	r1, r4
 801680a:	f10c 0c01 	add.w	ip, ip, #1
 801680e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8016812:	f828 1b02 	strh.w	r1, [r8], #2
 8016816:	f1bc 0f04 	cmp.w	ip, #4
 801681a:	d1ea      	bne.n	80167f2 <_DrawBitmap+0x3aa>
 801681c:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8016820:	f04f 0c00 	mov.w	ip, #0
 8016824:	f10a 0a01 	add.w	sl, sl, #1
 8016828:	e7e3      	b.n	80167f2 <_DrawBitmap+0x3aa>
 801682a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801682e:	f04f 0c00 	mov.w	ip, #0
 8016832:	f10a 0a01 	add.w	sl, sl, #1
 8016836:	45c8      	cmp	r8, r9
 8016838:	f43f af0f 	beq.w	801665a <_DrawBitmap+0x212>
 801683c:	f1cc 0103 	rsb	r1, ip, #3
 8016840:	004c      	lsls	r4, r1, #1
 8016842:	f1c4 0106 	rsb	r1, r4, #6
 8016846:	fa4e f101 	asr.w	r1, lr, r1
 801684a:	4001      	ands	r1, r0
 801684c:	f10c 0c01 	add.w	ip, ip, #1
 8016850:	40e1      	lsrs	r1, r4
 8016852:	f1bc 0f04 	cmp.w	ip, #4
 8016856:	f828 1b02 	strh.w	r1, [r8], #2
 801685a:	d1ec      	bne.n	8016836 <_DrawBitmap+0x3ee>
 801685c:	e7e5      	b.n	801682a <_DrawBitmap+0x3e2>
 801685e:	6a19      	ldr	r1, [r3, #32]
 8016860:	681c      	ldr	r4, [r3, #0]
 8016862:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016866:	fb01 f902 	mul.w	r9, r1, r2
 801686a:	9904      	ldr	r1, [sp, #16]
 801686c:	eb01 0809 	add.w	r8, r1, r9
 8016870:	44b1      	add	r9, r6
 8016872:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 8016876:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801687a:	46ba      	mov	sl, r7
 801687c:	b91d      	cbnz	r5, 8016886 <_DrawBitmap+0x43e>
 801687e:	e024      	b.n	80168ca <_DrawBitmap+0x482>
 8016880:	45c8      	cmp	r8, r9
 8016882:	f43f af38 	beq.w	80166f6 <_DrawBitmap+0x2ae>
 8016886:	f1cc 0101 	rsb	r1, ip, #1
 801688a:	008c      	lsls	r4, r1, #2
 801688c:	f1c4 0104 	rsb	r1, r4, #4
 8016890:	fa4e f101 	asr.w	r1, lr, r1
 8016894:	4001      	ands	r1, r0
 8016896:	40e1      	lsrs	r1, r4
 8016898:	f10c 0c01 	add.w	ip, ip, #1
 801689c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80168a0:	f828 1b02 	strh.w	r1, [r8], #2
 80168a4:	f1bc 0f02 	cmp.w	ip, #2
 80168a8:	d1ea      	bne.n	8016880 <_DrawBitmap+0x438>
 80168aa:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80168ae:	f04f 0c00 	mov.w	ip, #0
 80168b2:	f10a 0a01 	add.w	sl, sl, #1
 80168b6:	e7e3      	b.n	8016880 <_DrawBitmap+0x438>
 80168b8:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80168bc:	f04f 0c00 	mov.w	ip, #0
 80168c0:	f10a 0a01 	add.w	sl, sl, #1
 80168c4:	45c8      	cmp	r8, r9
 80168c6:	f43f af16 	beq.w	80166f6 <_DrawBitmap+0x2ae>
 80168ca:	f1cc 0101 	rsb	r1, ip, #1
 80168ce:	008c      	lsls	r4, r1, #2
 80168d0:	f1c4 0104 	rsb	r1, r4, #4
 80168d4:	fa4e f101 	asr.w	r1, lr, r1
 80168d8:	4001      	ands	r1, r0
 80168da:	f10c 0c01 	add.w	ip, ip, #1
 80168de:	40e1      	lsrs	r1, r4
 80168e0:	f1bc 0f02 	cmp.w	ip, #2
 80168e4:	f828 1b02 	strh.w	r1, [r8], #2
 80168e8:	d1ec      	bne.n	80168c4 <_DrawBitmap+0x47c>
 80168ea:	e7e5      	b.n	80168b8 <_DrawBitmap+0x470>
 80168ec:	f1bb 0f07 	cmp.w	fp, #7
 80168f0:	f340 811f 	ble.w	8016b32 <_DrawBitmap+0x6ea>
 80168f4:	f101 0010 	add.w	r0, r1, #16
 80168f8:	9000      	str	r0, [sp, #0]
 80168fa:	9805      	ldr	r0, [sp, #20]
 80168fc:	eb00 0a01 	add.w	sl, r0, r1
 8016900:	9800      	ldr	r0, [sp, #0]
 8016902:	f107 0c08 	add.w	ip, r7, #8
 8016906:	4699      	mov	r9, r3
 8016908:	f81c 3c08 	ldrb.w	r3, [ip, #-8]
 801690c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8016910:	f820 3c10 	strh.w	r3, [r0, #-16]
 8016914:	f81c 3c07 	ldrb.w	r3, [ip, #-7]
 8016918:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801691c:	f820 3c0e 	strh.w	r3, [r0, #-14]
 8016920:	f81c 3c06 	ldrb.w	r3, [ip, #-6]
 8016924:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8016928:	f820 3c0c 	strh.w	r3, [r0, #-12]
 801692c:	f81c 3c05 	ldrb.w	r3, [ip, #-5]
 8016930:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8016934:	f820 3c0a 	strh.w	r3, [r0, #-10]
 8016938:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801693c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8016940:	f820 3c08 	strh.w	r3, [r0, #-8]
 8016944:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
 8016948:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801694c:	f820 3c06 	strh.w	r3, [r0, #-6]
 8016950:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
 8016954:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8016958:	f820 3c04 	strh.w	r3, [r0, #-4]
 801695c:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
 8016960:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8016964:	f820 3c02 	strh.w	r3, [r0, #-2]
 8016968:	3010      	adds	r0, #16
 801696a:	4582      	cmp	sl, r0
 801696c:	f10c 0c08 	add.w	ip, ip, #8
 8016970:	d1ca      	bne.n	8016908 <_DrawBitmap+0x4c0>
 8016972:	9804      	ldr	r0, [sp, #16]
 8016974:	f8dd a008 	ldr.w	sl, [sp, #8]
 8016978:	4401      	add	r1, r0
 801697a:	9803      	ldr	r0, [sp, #12]
 801697c:	464b      	mov	r3, r9
 801697e:	1838      	adds	r0, r7, r0
 8016980:	f1ba 0f03 	cmp.w	sl, #3
 8016984:	dd23      	ble.n	80169ce <_DrawBitmap+0x586>
 8016986:	f890 c000 	ldrb.w	ip, [r0]
 801698a:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 801698e:	f8a1 c000 	strh.w	ip, [r1]
 8016992:	f890 c001 	ldrb.w	ip, [r0, #1]
 8016996:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 801699a:	f8a1 c002 	strh.w	ip, [r1, #2]
 801699e:	f890 c002 	ldrb.w	ip, [r0, #2]
 80169a2:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 80169a6:	f8a1 c004 	strh.w	ip, [r1, #4]
 80169aa:	f890 9003 	ldrb.w	r9, [r0, #3]
 80169ae:	f1aa 0a04 	sub.w	sl, sl, #4
 80169b2:	ea4f 0c9a 	mov.w	ip, sl, lsr #2
 80169b6:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 80169ba:	f8a1 9006 	strh.w	r9, [r1, #6]
 80169be:	f10c 0901 	add.w	r9, ip, #1
 80169c2:	ebaa 0a8c 	sub.w	sl, sl, ip, lsl #2
 80169c6:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 80169ca:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80169ce:	f1ba 0f00 	cmp.w	sl, #0
 80169d2:	f43f aef6 	beq.w	80167c2 <_DrawBitmap+0x37a>
 80169d6:	f890 c000 	ldrb.w	ip, [r0]
 80169da:	f1ba 0f01 	cmp.w	sl, #1
 80169de:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 80169e2:	f8a1 c000 	strh.w	ip, [r1]
 80169e6:	f43f aeec 	beq.w	80167c2 <_DrawBitmap+0x37a>
 80169ea:	f890 c001 	ldrb.w	ip, [r0, #1]
 80169ee:	f1ba 0f02 	cmp.w	sl, #2
 80169f2:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 80169f6:	f8a1 c002 	strh.w	ip, [r1, #2]
 80169fa:	f43f aee2 	beq.w	80167c2 <_DrawBitmap+0x37a>
 80169fe:	7880      	ldrb	r0, [r0, #2]
 8016a00:	3201      	adds	r2, #1
 8016a02:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8016a06:	8088      	strh	r0, [r1, #4]
 8016a08:	4572      	cmp	r2, lr
 8016a0a:	4447      	add	r7, r8
 8016a0c:	f47f aeb8 	bne.w	8016780 <_DrawBitmap+0x338>
 8016a10:	e6db      	b.n	80167ca <_DrawBitmap+0x382>
 8016a12:	9b03      	ldr	r3, [sp, #12]
 8016a14:	691b      	ldr	r3, [r3, #16]
 8016a16:	689b      	ldr	r3, [r3, #8]
 8016a18:	4798      	blx	r3
 8016a1a:	9b02      	ldr	r3, [sp, #8]
 8016a1c:	eb03 0e05 	add.w	lr, r3, r5
 8016a20:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8016a24:	006d      	lsls	r5, r5, #1
 8016a26:	9b08      	ldr	r3, [sp, #32]
 8016a28:	4639      	mov	r1, r7
 8016a2a:	4684      	mov	ip, r0
 8016a2c:	e004      	b.n	8016a38 <_DrawBitmap+0x5f0>
 8016a2e:	0864      	lsrs	r4, r4, #1
 8016a30:	3502      	adds	r5, #2
 8016a32:	4575      	cmp	r5, lr
 8016a34:	f43f adbf 	beq.w	80165b6 <_DrawBitmap+0x16e>
 8016a38:	07e0      	lsls	r0, r4, #31
 8016a3a:	d504      	bpl.n	8016a46 <_DrawBitmap+0x5fe>
 8016a3c:	6830      	ldr	r0, [r6, #0]
 8016a3e:	5a2a      	ldrh	r2, [r5, r0]
 8016a40:	ea8c 0202 	eor.w	r2, ip, r2
 8016a44:	522a      	strh	r2, [r5, r0]
 8016a46:	3b01      	subs	r3, #1
 8016a48:	d1f1      	bne.n	8016a2e <_DrawBitmap+0x5e6>
 8016a4a:	784a      	ldrb	r2, [r1, #1]
 8016a4c:	2308      	movs	r3, #8
 8016a4e:	f81b 4002 	ldrb.w	r4, [fp, r2]
 8016a52:	3101      	adds	r1, #1
 8016a54:	e7ec      	b.n	8016a30 <_DrawBitmap+0x5e8>
 8016a56:	9b02      	ldr	r3, [sp, #8]
 8016a58:	9a08      	ldr	r2, [sp, #32]
 8016a5a:	1959      	adds	r1, r3, r5
 8016a5c:	0049      	lsls	r1, r1, #1
 8016a5e:	006d      	lsls	r5, r5, #1
 8016a60:	46be      	mov	lr, r7
 8016a62:	e004      	b.n	8016a6e <_DrawBitmap+0x626>
 8016a64:	0864      	lsrs	r4, r4, #1
 8016a66:	3502      	adds	r5, #2
 8016a68:	42a9      	cmp	r1, r5
 8016a6a:	f43f ada4 	beq.w	80165b6 <_DrawBitmap+0x16e>
 8016a6e:	07e3      	lsls	r3, r4, #31
 8016a70:	bf44      	itt	mi
 8016a72:	6833      	ldrmi	r3, [r6, #0]
 8016a74:	5358      	strhmi	r0, [r3, r5]
 8016a76:	3a01      	subs	r2, #1
 8016a78:	d1f4      	bne.n	8016a64 <_DrawBitmap+0x61c>
 8016a7a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8016a7e:	2208      	movs	r2, #8
 8016a80:	f81b 4003 	ldrb.w	r4, [fp, r3]
 8016a84:	f10e 0e01 	add.w	lr, lr, #1
 8016a88:	e7ed      	b.n	8016a66 <_DrawBitmap+0x61e>
 8016a8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016a8e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8016a92:	46ba      	mov	sl, r7
 8016a94:	46ac      	mov	ip, r5
 8016a96:	e003      	b.n	8016aa0 <_DrawBitmap+0x658>
 8016a98:	20000014 	.word	0x20000014
 8016a9c:	454e      	cmp	r6, r9
 8016a9e:	d044      	beq.n	8016b2a <_DrawBitmap+0x6e2>
 8016aa0:	f1c8 0403 	rsb	r4, r8, #3
 8016aa4:	0064      	lsls	r4, r4, #1
 8016aa6:	f1c4 0106 	rsb	r1, r4, #6
 8016aaa:	fa4e f101 	asr.w	r1, lr, r1
 8016aae:	4001      	ands	r1, r0
 8016ab0:	40e1      	lsrs	r1, r4
 8016ab2:	f108 0801 	add.w	r8, r8, #1
 8016ab6:	d005      	beq.n	8016ac4 <_DrawBitmap+0x67c>
 8016ab8:	6a1c      	ldr	r4, [r3, #32]
 8016aba:	681d      	ldr	r5, [r3, #0]
 8016abc:	fb04 9402 	mla	r4, r4, r2, r9
 8016ac0:	f825 1014 	strh.w	r1, [r5, r4, lsl #1]
 8016ac4:	f1b8 0f04 	cmp.w	r8, #4
 8016ac8:	f109 0901 	add.w	r9, r9, #1
 8016acc:	d1e6      	bne.n	8016a9c <_DrawBitmap+0x654>
 8016ace:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8016ad2:	f04f 0800 	mov.w	r8, #0
 8016ad6:	f10a 0a01 	add.w	sl, sl, #1
 8016ada:	e7df      	b.n	8016a9c <_DrawBitmap+0x654>
 8016adc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016ae0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8016ae4:	46ba      	mov	sl, r7
 8016ae6:	46ac      	mov	ip, r5
 8016ae8:	e001      	b.n	8016aee <_DrawBitmap+0x6a6>
 8016aea:	454e      	cmp	r6, r9
 8016aec:	d01f      	beq.n	8016b2e <_DrawBitmap+0x6e6>
 8016aee:	f1c8 0401 	rsb	r4, r8, #1
 8016af2:	00a4      	lsls	r4, r4, #2
 8016af4:	f1c4 0104 	rsb	r1, r4, #4
 8016af8:	fa4e f101 	asr.w	r1, lr, r1
 8016afc:	4001      	ands	r1, r0
 8016afe:	40e1      	lsrs	r1, r4
 8016b00:	f108 0801 	add.w	r8, r8, #1
 8016b04:	d005      	beq.n	8016b12 <_DrawBitmap+0x6ca>
 8016b06:	6a1c      	ldr	r4, [r3, #32]
 8016b08:	681d      	ldr	r5, [r3, #0]
 8016b0a:	fb04 9402 	mla	r4, r4, r2, r9
 8016b0e:	f825 1014 	strh.w	r1, [r5, r4, lsl #1]
 8016b12:	f1b8 0f02 	cmp.w	r8, #2
 8016b16:	f109 0901 	add.w	r9, r9, #1
 8016b1a:	d1e6      	bne.n	8016aea <_DrawBitmap+0x6a2>
 8016b1c:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8016b20:	f04f 0800 	mov.w	r8, #0
 8016b24:	f10a 0a01 	add.w	sl, sl, #1
 8016b28:	e7df      	b.n	8016aea <_DrawBitmap+0x6a2>
 8016b2a:	4665      	mov	r5, ip
 8016b2c:	e595      	b.n	801665a <_DrawBitmap+0x212>
 8016b2e:	4665      	mov	r5, ip
 8016b30:	e5e1      	b.n	80166f6 <_DrawBitmap+0x2ae>
 8016b32:	46da      	mov	sl, fp
 8016b34:	4638      	mov	r0, r7
 8016b36:	e723      	b.n	8016980 <_DrawBitmap+0x538>
 8016b38:	9b00      	ldr	r3, [sp, #0]
 8016b3a:	6980      	ldr	r0, [r0, #24]
 8016b3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8016b3e:	9b02      	ldr	r3, [sp, #8]
 8016b40:	9315      	str	r3, [sp, #84]	; 0x54
 8016b42:	9b01      	ldr	r3, [sp, #4]
 8016b44:	9314      	str	r3, [sp, #80]	; 0x50
 8016b46:	4631      	mov	r1, r6
 8016b48:	463b      	mov	r3, r7
 8016b4a:	46a4      	mov	ip, r4
 8016b4c:	9518      	str	r5, [sp, #96]	; 0x60
 8016b4e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8016b52:	b00b      	add	sp, #44	; 0x2c
 8016b54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b58:	4760      	bx	ip
 8016b5a:	9b00      	ldr	r3, [sp, #0]
 8016b5c:	6980      	ldr	r0, [r0, #24]
 8016b5e:	9316      	str	r3, [sp, #88]	; 0x58
 8016b60:	9b02      	ldr	r3, [sp, #8]
 8016b62:	9314      	str	r3, [sp, #80]	; 0x50
 8016b64:	4631      	mov	r1, r6
 8016b66:	463b      	mov	r3, r7
 8016b68:	46a4      	mov	ip, r4
 8016b6a:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 8016b6e:	b00b      	add	sp, #44	; 0x2c
 8016b70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b74:	4760      	bx	ip
 8016b76:	bf00      	nop

08016b78 <_Init>:
 8016b78:	b538      	push	{r3, r4, r5, lr}
 8016b7a:	6884      	ldr	r4, [r0, #8]
 8016b7c:	4605      	mov	r5, r0
 8016b7e:	b14c      	cbz	r4, 8016b94 <_Init+0x1c>
 8016b80:	69a8      	ldr	r0, [r5, #24]
 8016b82:	2200      	movs	r2, #0
 8016b84:	2101      	movs	r1, #1
 8016b86:	f7f8 fba5 	bl	800f2d4 <LCD_X_DisplayDriver>
 8016b8a:	2c00      	cmp	r4, #0
 8016b8c:	bf08      	it	eq
 8016b8e:	f040 0001 	orreq.w	r0, r0, #1
 8016b92:	bd38      	pop	{r3, r4, r5, pc}
 8016b94:	2050      	movs	r0, #80	; 0x50
 8016b96:	f7f9 ff83 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016b9a:	4621      	mov	r1, r4
 8016b9c:	60a8      	str	r0, [r5, #8]
 8016b9e:	2250      	movs	r2, #80	; 0x50
 8016ba0:	f7fd f8fa 	bl	8013d98 <GUI__memset>
 8016ba4:	68ac      	ldr	r4, [r5, #8]
 8016ba6:	e7eb      	b.n	8016b80 <_Init+0x8>

08016ba8 <_SetVRAM_BufferPTR>:
 8016ba8:	b570      	push	{r4, r5, r6, lr}
 8016baa:	6884      	ldr	r4, [r0, #8]
 8016bac:	460d      	mov	r5, r1
 8016bae:	b11c      	cbz	r4, 8016bb8 <_SetVRAM_BufferPTR+0x10>
 8016bb0:	682b      	ldr	r3, [r5, #0]
 8016bb2:	6023      	str	r3, [r4, #0]
 8016bb4:	60a5      	str	r5, [r4, #8]
 8016bb6:	bd70      	pop	{r4, r5, r6, pc}
 8016bb8:	4606      	mov	r6, r0
 8016bba:	2050      	movs	r0, #80	; 0x50
 8016bbc:	f7f9 ff70 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016bc0:	4621      	mov	r1, r4
 8016bc2:	60b0      	str	r0, [r6, #8]
 8016bc4:	2250      	movs	r2, #80	; 0x50
 8016bc6:	f7fd f8e7 	bl	8013d98 <GUI__memset>
 8016bca:	68b4      	ldr	r4, [r6, #8]
 8016bcc:	2c00      	cmp	r4, #0
 8016bce:	d1ef      	bne.n	8016bb0 <_SetVRAM_BufferPTR+0x8>
 8016bd0:	bd70      	pop	{r4, r5, r6, pc}
 8016bd2:	bf00      	nop

08016bd4 <_GetPos>:
 8016bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bd6:	6884      	ldr	r4, [r0, #8]
 8016bd8:	460f      	mov	r7, r1
 8016bda:	4616      	mov	r6, r2
 8016bdc:	b124      	cbz	r4, 8016be8 <_GetPos+0x14>
 8016bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016be0:	603b      	str	r3, [r7, #0]
 8016be2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016be4:	6033      	str	r3, [r6, #0]
 8016be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016be8:	4605      	mov	r5, r0
 8016bea:	2050      	movs	r0, #80	; 0x50
 8016bec:	f7f9 ff58 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016bf0:	4621      	mov	r1, r4
 8016bf2:	60a8      	str	r0, [r5, #8]
 8016bf4:	2250      	movs	r2, #80	; 0x50
 8016bf6:	f7fd f8cf 	bl	8013d98 <GUI__memset>
 8016bfa:	68ac      	ldr	r4, [r5, #8]
 8016bfc:	2c00      	cmp	r4, #0
 8016bfe:	d1ee      	bne.n	8016bde <_GetPos+0xa>
 8016c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c02:	bf00      	nop

08016c04 <_ShowBuffer>:
 8016c04:	b570      	push	{r4, r5, r6, lr}
 8016c06:	6885      	ldr	r5, [r0, #8]
 8016c08:	b082      	sub	sp, #8
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	9301      	str	r3, [sp, #4]
 8016c10:	460e      	mov	r6, r1
 8016c12:	b145      	cbz	r5, 8016c26 <_ShowBuffer+0x22>
 8016c14:	aa02      	add	r2, sp, #8
 8016c16:	69a0      	ldr	r0, [r4, #24]
 8016c18:	f842 6d04 	str.w	r6, [r2, #-4]!
 8016c1c:	210e      	movs	r1, #14
 8016c1e:	f7f8 fb59 	bl	800f2d4 <LCD_X_DisplayDriver>
 8016c22:	b002      	add	sp, #8
 8016c24:	bd70      	pop	{r4, r5, r6, pc}
 8016c26:	2050      	movs	r0, #80	; 0x50
 8016c28:	f7f9 ff3a 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016c2c:	4629      	mov	r1, r5
 8016c2e:	60a0      	str	r0, [r4, #8]
 8016c30:	2250      	movs	r2, #80	; 0x50
 8016c32:	f7fd f8b1 	bl	8013d98 <GUI__memset>
 8016c36:	68a3      	ldr	r3, [r4, #8]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d1eb      	bne.n	8016c14 <_ShowBuffer+0x10>
 8016c3c:	b002      	add	sp, #8
 8016c3e:	bd70      	pop	{r4, r5, r6, pc}

08016c40 <_SetAlpha>:
 8016c40:	b570      	push	{r4, r5, r6, lr}
 8016c42:	6884      	ldr	r4, [r0, #8]
 8016c44:	b082      	sub	sp, #8
 8016c46:	2300      	movs	r3, #0
 8016c48:	4605      	mov	r5, r0
 8016c4a:	9301      	str	r3, [sp, #4]
 8016c4c:	460e      	mov	r6, r1
 8016c4e:	b14c      	cbz	r4, 8016c64 <_SetAlpha+0x24>
 8016c50:	aa02      	add	r2, sp, #8
 8016c52:	62e6      	str	r6, [r4, #44]	; 0x2c
 8016c54:	f842 6d04 	str.w	r6, [r2, #-4]!
 8016c58:	69a8      	ldr	r0, [r5, #24]
 8016c5a:	210a      	movs	r1, #10
 8016c5c:	f7f8 fb3a 	bl	800f2d4 <LCD_X_DisplayDriver>
 8016c60:	b002      	add	sp, #8
 8016c62:	bd70      	pop	{r4, r5, r6, pc}
 8016c64:	2050      	movs	r0, #80	; 0x50
 8016c66:	f7f9 ff1b 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016c6a:	4621      	mov	r1, r4
 8016c6c:	60a8      	str	r0, [r5, #8]
 8016c6e:	2250      	movs	r2, #80	; 0x50
 8016c70:	f7fd f892 	bl	8013d98 <GUI__memset>
 8016c74:	68ac      	ldr	r4, [r5, #8]
 8016c76:	2c00      	cmp	r4, #0
 8016c78:	d1ea      	bne.n	8016c50 <_SetAlpha+0x10>
 8016c7a:	b002      	add	sp, #8
 8016c7c:	bd70      	pop	{r4, r5, r6, pc}
 8016c7e:	bf00      	nop

08016c80 <_SetVis>:
 8016c80:	b570      	push	{r4, r5, r6, lr}
 8016c82:	6884      	ldr	r4, [r0, #8]
 8016c84:	b082      	sub	sp, #8
 8016c86:	2300      	movs	r3, #0
 8016c88:	4605      	mov	r5, r0
 8016c8a:	9301      	str	r3, [sp, #4]
 8016c8c:	460e      	mov	r6, r1
 8016c8e:	b14c      	cbz	r4, 8016ca4 <_SetVis+0x24>
 8016c90:	aa02      	add	r2, sp, #8
 8016c92:	6326      	str	r6, [r4, #48]	; 0x30
 8016c94:	f842 6d04 	str.w	r6, [r2, #-4]!
 8016c98:	69a8      	ldr	r0, [r5, #24]
 8016c9a:	2109      	movs	r1, #9
 8016c9c:	f7f8 fb1a 	bl	800f2d4 <LCD_X_DisplayDriver>
 8016ca0:	b002      	add	sp, #8
 8016ca2:	bd70      	pop	{r4, r5, r6, pc}
 8016ca4:	2050      	movs	r0, #80	; 0x50
 8016ca6:	f7f9 fefb 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016caa:	4621      	mov	r1, r4
 8016cac:	60a8      	str	r0, [r5, #8]
 8016cae:	2250      	movs	r2, #80	; 0x50
 8016cb0:	f7fd f872 	bl	8013d98 <GUI__memset>
 8016cb4:	68ac      	ldr	r4, [r5, #8]
 8016cb6:	2c00      	cmp	r4, #0
 8016cb8:	d1ea      	bne.n	8016c90 <_SetVis+0x10>
 8016cba:	b002      	add	sp, #8
 8016cbc:	bd70      	pop	{r4, r5, r6, pc}
 8016cbe:	bf00      	nop

08016cc0 <_SetVRAMAddr>:
 8016cc0:	b570      	push	{r4, r5, r6, lr}
 8016cc2:	6884      	ldr	r4, [r0, #8]
 8016cc4:	b082      	sub	sp, #8
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	4606      	mov	r6, r0
 8016cca:	9301      	str	r3, [sp, #4]
 8016ccc:	460d      	mov	r5, r1
 8016cce:	b154      	cbz	r4, 8016ce6 <_SetVRAMAddr+0x26>
 8016cd0:	aa02      	add	r2, sp, #8
 8016cd2:	6025      	str	r5, [r4, #0]
 8016cd4:	6065      	str	r5, [r4, #4]
 8016cd6:	f842 5d04 	str.w	r5, [r2, #-4]!
 8016cda:	69b0      	ldr	r0, [r6, #24]
 8016cdc:	2102      	movs	r1, #2
 8016cde:	f7f8 faf9 	bl	800f2d4 <LCD_X_DisplayDriver>
 8016ce2:	b002      	add	sp, #8
 8016ce4:	bd70      	pop	{r4, r5, r6, pc}
 8016ce6:	2050      	movs	r0, #80	; 0x50
 8016ce8:	f7f9 feda 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016cec:	4621      	mov	r1, r4
 8016cee:	60b0      	str	r0, [r6, #8]
 8016cf0:	2250      	movs	r2, #80	; 0x50
 8016cf2:	f7fd f851 	bl	8013d98 <GUI__memset>
 8016cf6:	68b4      	ldr	r4, [r6, #8]
 8016cf8:	2c00      	cmp	r4, #0
 8016cfa:	d1e9      	bne.n	8016cd0 <_SetVRAMAddr+0x10>
 8016cfc:	b002      	add	sp, #8
 8016cfe:	bd70      	pop	{r4, r5, r6, pc}

08016d00 <_SetVSize>:
 8016d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d02:	6884      	ldr	r4, [r0, #8]
 8016d04:	4605      	mov	r5, r0
 8016d06:	460e      	mov	r6, r1
 8016d08:	4617      	mov	r7, r2
 8016d0a:	b14c      	cbz	r4, 8016d20 <_SetVSize+0x20>
 8016d0c:	69a8      	ldr	r0, [r5, #24]
 8016d0e:	f7fe f8f1 	bl	8014ef4 <LCD_GetSwapXYEx>
 8016d12:	61a6      	str	r6, [r4, #24]
 8016d14:	61e7      	str	r7, [r4, #28]
 8016d16:	b908      	cbnz	r0, 8016d1c <_SetVSize+0x1c>
 8016d18:	6226      	str	r6, [r4, #32]
 8016d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d1c:	6227      	str	r7, [r4, #32]
 8016d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d20:	2050      	movs	r0, #80	; 0x50
 8016d22:	f7f9 febd 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016d26:	4621      	mov	r1, r4
 8016d28:	60a8      	str	r0, [r5, #8]
 8016d2a:	2250      	movs	r2, #80	; 0x50
 8016d2c:	f7fd f834 	bl	8013d98 <GUI__memset>
 8016d30:	68ac      	ldr	r4, [r5, #8]
 8016d32:	2c00      	cmp	r4, #0
 8016d34:	d1ea      	bne.n	8016d0c <_SetVSize+0xc>
 8016d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016d38 <_SetSize>:
 8016d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d3a:	6884      	ldr	r4, [r0, #8]
 8016d3c:	b083      	sub	sp, #12
 8016d3e:	2300      	movs	r3, #0
 8016d40:	4605      	mov	r5, r0
 8016d42:	460f      	mov	r7, r1
 8016d44:	4616      	mov	r6, r2
 8016d46:	9301      	str	r3, [sp, #4]
 8016d48:	9300      	str	r3, [sp, #0]
 8016d4a:	b1ac      	cbz	r4, 8016d78 <_SetSize+0x40>
 8016d4c:	6a23      	ldr	r3, [r4, #32]
 8016d4e:	b153      	cbz	r3, 8016d66 <_SetSize+0x2e>
 8016d50:	6127      	str	r7, [r4, #16]
 8016d52:	6166      	str	r6, [r4, #20]
 8016d54:	466a      	mov	r2, sp
 8016d56:	69a8      	ldr	r0, [r5, #24]
 8016d58:	9700      	str	r7, [sp, #0]
 8016d5a:	2107      	movs	r1, #7
 8016d5c:	9601      	str	r6, [sp, #4]
 8016d5e:	f7f8 fab9 	bl	800f2d4 <LCD_X_DisplayDriver>
 8016d62:	b003      	add	sp, #12
 8016d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d66:	69a8      	ldr	r0, [r5, #24]
 8016d68:	f7fe f8c4 	bl	8014ef4 <LCD_GetSwapXYEx>
 8016d6c:	2800      	cmp	r0, #0
 8016d6e:	bf0c      	ite	eq
 8016d70:	4638      	moveq	r0, r7
 8016d72:	4630      	movne	r0, r6
 8016d74:	6220      	str	r0, [r4, #32]
 8016d76:	e7eb      	b.n	8016d50 <_SetSize+0x18>
 8016d78:	2050      	movs	r0, #80	; 0x50
 8016d7a:	f7f9 fe91 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016d7e:	4621      	mov	r1, r4
 8016d80:	60a8      	str	r0, [r5, #8]
 8016d82:	2250      	movs	r2, #80	; 0x50
 8016d84:	f7fd f808 	bl	8013d98 <GUI__memset>
 8016d88:	68ac      	ldr	r4, [r5, #8]
 8016d8a:	2c00      	cmp	r4, #0
 8016d8c:	d1de      	bne.n	8016d4c <_SetSize+0x14>
 8016d8e:	b003      	add	sp, #12
 8016d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d92:	bf00      	nop

08016d94 <_SetDevFunc>:
 8016d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d96:	6885      	ldr	r5, [r0, #8]
 8016d98:	460c      	mov	r4, r1
 8016d9a:	4617      	mov	r7, r2
 8016d9c:	b325      	cbz	r5, 8016de8 <_SetDevFunc+0x54>
 8016d9e:	1ee3      	subs	r3, r4, #3
 8016da0:	2b22      	cmp	r3, #34	; 0x22
 8016da2:	d814      	bhi.n	8016dce <_SetDevFunc+0x3a>
 8016da4:	e8df f003 	tbb	[pc, r3]
 8016da8:	13131316 	.word	0x13131316
 8016dac:	13131313 	.word	0x13131313
 8016db0:	13131313 	.word	0x13131313
 8016db4:	13131313 	.word	0x13131313
 8016db8:	13131313 	.word	0x13131313
 8016dbc:	13181313 	.word	0x13181313
 8016dc0:	13131313 	.word	0x13131313
 8016dc4:	131c1a13 	.word	0x131c1a13
 8016dc8:	121e      	.short	0x121e
 8016dca:	14          	.byte	0x14
 8016dcb:	00          	.byte	0x00
 8016dcc:	64ef      	str	r7, [r5, #76]	; 0x4c
 8016dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dd0:	642f      	str	r7, [r5, #64]	; 0x40
 8016dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dd4:	64af      	str	r7, [r5, #72]	; 0x48
 8016dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dd8:	636f      	str	r7, [r5, #52]	; 0x34
 8016dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ddc:	63ef      	str	r7, [r5, #60]	; 0x3c
 8016dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016de0:	63af      	str	r7, [r5, #56]	; 0x38
 8016de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016de4:	646f      	str	r7, [r5, #68]	; 0x44
 8016de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016de8:	4606      	mov	r6, r0
 8016dea:	2050      	movs	r0, #80	; 0x50
 8016dec:	f7f9 fe58 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016df0:	4629      	mov	r1, r5
 8016df2:	60b0      	str	r0, [r6, #8]
 8016df4:	2250      	movs	r2, #80	; 0x50
 8016df6:	f7fc ffcf 	bl	8013d98 <GUI__memset>
 8016dfa:	68b5      	ldr	r5, [r6, #8]
 8016dfc:	2d00      	cmp	r5, #0
 8016dfe:	d1ce      	bne.n	8016d9e <_SetDevFunc+0xa>
 8016e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e02:	bf00      	nop

08016e04 <_CopyBuffer>:
 8016e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e08:	6884      	ldr	r4, [r0, #8]
 8016e0a:	4605      	mov	r5, r0
 8016e0c:	460e      	mov	r6, r1
 8016e0e:	4617      	mov	r7, r2
 8016e10:	b334      	cbz	r4, 8016e60 <_CopyBuffer+0x5c>
 8016e12:	42be      	cmp	r6, r7
 8016e14:	d01c      	beq.n	8016e50 <_CopyBuffer+0x4c>
 8016e16:	68eb      	ldr	r3, [r5, #12]
 8016e18:	2108      	movs	r1, #8
 8016e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e1c:	4628      	mov	r0, r5
 8016e1e:	4798      	blx	r3
 8016e20:	69a1      	ldr	r1, [r4, #24]
 8016e22:	6963      	ldr	r3, [r4, #20]
 8016e24:	68a2      	ldr	r2, [r4, #8]
 8016e26:	fb03 f301 	mul.w	r3, r3, r1
 8016e2a:	fb00 f003 	mul.w	r0, r0, r3
 8016e2e:	08c3      	lsrs	r3, r0, #3
 8016e30:	b182      	cbz	r2, 8016e54 <_CopyBuffer+0x50>
 8016e32:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 8016e36:	f852 9027 	ldr.w	r9, [r2, r7, lsl #2]
 8016e3a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8016e3e:	f1b8 0f00 	cmp.w	r8, #0
 8016e42:	d01a      	beq.n	8016e7a <_CopyBuffer+0x76>
 8016e44:	463a      	mov	r2, r7
 8016e46:	4631      	mov	r1, r6
 8016e48:	69a8      	ldr	r0, [r5, #24]
 8016e4a:	47c0      	blx	r8
 8016e4c:	f8c4 9000 	str.w	r9, [r4]
 8016e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e54:	6862      	ldr	r2, [r4, #4]
 8016e56:	fb03 2106 	mla	r1, r3, r6, r2
 8016e5a:	fb03 2907 	mla	r9, r3, r7, r2
 8016e5e:	e7ec      	b.n	8016e3a <_CopyBuffer+0x36>
 8016e60:	2050      	movs	r0, #80	; 0x50
 8016e62:	f7f9 fe1d 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016e66:	4621      	mov	r1, r4
 8016e68:	60a8      	str	r0, [r5, #8]
 8016e6a:	2250      	movs	r2, #80	; 0x50
 8016e6c:	f7fc ff94 	bl	8013d98 <GUI__memset>
 8016e70:	68ac      	ldr	r4, [r5, #8]
 8016e72:	2c00      	cmp	r4, #0
 8016e74:	d1cd      	bne.n	8016e12 <_CopyBuffer+0xe>
 8016e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e7a:	4803      	ldr	r0, [pc, #12]	; (8016e88 <_CopyBuffer+0x84>)
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	6803      	ldr	r3, [r0, #0]
 8016e80:	4648      	mov	r0, r9
 8016e82:	4798      	blx	r3
 8016e84:	e7e2      	b.n	8016e4c <_CopyBuffer+0x48>
 8016e86:	bf00      	nop
 8016e88:	2000003c 	.word	0x2000003c

08016e8c <_SetPos>:
 8016e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e90:	6884      	ldr	r4, [r0, #8]
 8016e92:	b089      	sub	sp, #36	; 0x24
 8016e94:	2300      	movs	r3, #0
 8016e96:	4605      	mov	r5, r0
 8016e98:	460f      	mov	r7, r1
 8016e9a:	4616      	mov	r6, r2
 8016e9c:	9303      	str	r3, [sp, #12]
 8016e9e:	9302      	str	r3, [sp, #8]
 8016ea0:	9304      	str	r3, [sp, #16]
 8016ea2:	9305      	str	r3, [sp, #20]
 8016ea4:	9306      	str	r3, [sp, #24]
 8016ea6:	9307      	str	r3, [sp, #28]
 8016ea8:	2c00      	cmp	r4, #0
 8016eaa:	d05e      	beq.n	8016f6a <_SetPos+0xde>
 8016eac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8016eae:	b133      	cbz	r3, 8016ebe <_SetPos+0x32>
 8016eb0:	4632      	mov	r2, r6
 8016eb2:	4639      	mov	r1, r7
 8016eb4:	69a8      	ldr	r0, [r5, #24]
 8016eb6:	4798      	blx	r3
 8016eb8:	b009      	add	sp, #36	; 0x24
 8016eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ebe:	6267      	str	r7, [r4, #36]	; 0x24
 8016ec0:	62a6      	str	r6, [r4, #40]	; 0x28
 8016ec2:	f7fe f8e7 	bl	8015094 <LCD_GetXSizeDisplay>
 8016ec6:	4681      	mov	r9, r0
 8016ec8:	f7fe f8ea 	bl	80150a0 <LCD_GetYSizeDisplay>
 8016ecc:	68eb      	ldr	r3, [r5, #12]
 8016ece:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ed4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016ed8:	4682      	mov	sl, r0
 8016eda:	2108      	movs	r1, #8
 8016edc:	4628      	mov	r0, r5
 8016ede:	4798      	blx	r3
 8016ee0:	1dc2      	adds	r2, r0, #7
 8016ee2:	bf48      	it	mi
 8016ee4:	f100 020e 	addmi.w	r2, r0, #14
 8016ee8:	10d2      	asrs	r2, r2, #3
 8016eea:	2f00      	cmp	r7, #0
 8016eec:	9206      	str	r2, [sp, #24]
 8016eee:	db56      	blt.n	8016f9e <_SetPos+0x112>
 8016ef0:	eb07 030b 	add.w	r3, r7, fp
 8016ef4:	4599      	cmp	r9, r3
 8016ef6:	9702      	str	r7, [sp, #8]
 8016ef8:	bfb6      	itet	lt
 8016efa:	ebc7 0709 	rsblt	r7, r7, r9
 8016efe:	f8cd b010 	strge.w	fp, [sp, #16]
 8016f02:	9704      	strlt	r7, [sp, #16]
 8016f04:	2e00      	cmp	r6, #0
 8016f06:	db3e      	blt.n	8016f86 <_SetPos+0xfa>
 8016f08:	eb06 0308 	add.w	r3, r6, r8
 8016f0c:	459a      	cmp	sl, r3
 8016f0e:	bfb8      	it	lt
 8016f10:	ebc6 010a 	rsblt	r1, r6, sl
 8016f14:	9603      	str	r6, [sp, #12]
 8016f16:	bfa6      	itte	ge
 8016f18:	f8cd 8014 	strge.w	r8, [sp, #20]
 8016f1c:	4641      	movge	r1, r8
 8016f1e:	9105      	strlt	r1, [sp, #20]
 8016f20:	9b04      	ldr	r3, [sp, #16]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	dd0f      	ble.n	8016f46 <_SetPos+0xba>
 8016f26:	2900      	cmp	r1, #0
 8016f28:	dd0d      	ble.n	8016f46 <_SetPos+0xba>
 8016f2a:	9b02      	ldr	r3, [sp, #8]
 8016f2c:	4599      	cmp	r9, r3
 8016f2e:	dd0a      	ble.n	8016f46 <_SetPos+0xba>
 8016f30:	45b2      	cmp	sl, r6
 8016f32:	dd08      	ble.n	8016f46 <_SetPos+0xba>
 8016f34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d03a      	beq.n	8016fb0 <_SetPos+0x124>
 8016f3a:	aa02      	add	r2, sp, #8
 8016f3c:	69a8      	ldr	r0, [r5, #24]
 8016f3e:	2108      	movs	r1, #8
 8016f40:	f7f8 f9c8 	bl	800f2d4 <LCD_X_DisplayDriver>
 8016f44:	e7b8      	b.n	8016eb8 <_SetPos+0x2c>
 8016f46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f48:	2b01      	cmp	r3, #1
 8016f4a:	d1b5      	bne.n	8016eb8 <_SetPos+0x2c>
 8016f4c:	68ac      	ldr	r4, [r5, #8]
 8016f4e:	2300      	movs	r3, #0
 8016f50:	9301      	str	r3, [sp, #4]
 8016f52:	2c00      	cmp	r4, #0
 8016f54:	d039      	beq.n	8016fca <_SetPos+0x13e>
 8016f56:	aa08      	add	r2, sp, #32
 8016f58:	2300      	movs	r3, #0
 8016f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8016f5c:	69a8      	ldr	r0, [r5, #24]
 8016f5e:	f842 3d1c 	str.w	r3, [r2, #-28]!
 8016f62:	2109      	movs	r1, #9
 8016f64:	f7f8 f9b6 	bl	800f2d4 <LCD_X_DisplayDriver>
 8016f68:	e7a6      	b.n	8016eb8 <_SetPos+0x2c>
 8016f6a:	2050      	movs	r0, #80	; 0x50
 8016f6c:	f7f9 fd98 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016f70:	4621      	mov	r1, r4
 8016f72:	60a8      	str	r0, [r5, #8]
 8016f74:	2250      	movs	r2, #80	; 0x50
 8016f76:	f7fc ff0f 	bl	8013d98 <GUI__memset>
 8016f7a:	68ac      	ldr	r4, [r5, #8]
 8016f7c:	2c00      	cmp	r4, #0
 8016f7e:	d195      	bne.n	8016eac <_SetPos+0x20>
 8016f80:	b009      	add	sp, #36	; 0x24
 8016f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f86:	9b07      	ldr	r3, [sp, #28]
 8016f88:	fb02 f206 	mul.w	r2, r2, r6
 8016f8c:	eb06 0108 	add.w	r1, r6, r8
 8016f90:	fb0b 3312 	mls	r3, fp, r2, r3
 8016f94:	2600      	movs	r6, #0
 8016f96:	9105      	str	r1, [sp, #20]
 8016f98:	9307      	str	r3, [sp, #28]
 8016f9a:	9603      	str	r6, [sp, #12]
 8016f9c:	e7c0      	b.n	8016f20 <_SetPos+0x94>
 8016f9e:	9b07      	ldr	r3, [sp, #28]
 8016fa0:	2100      	movs	r1, #0
 8016fa2:	fb02 3317 	mls	r3, r2, r7, r3
 8016fa6:	445f      	add	r7, fp
 8016fa8:	9307      	str	r3, [sp, #28]
 8016faa:	9704      	str	r7, [sp, #16]
 8016fac:	9102      	str	r1, [sp, #8]
 8016fae:	e7a9      	b.n	8016f04 <_SetPos+0x78>
 8016fb0:	68ac      	ldr	r4, [r5, #8]
 8016fb2:	9301      	str	r3, [sp, #4]
 8016fb4:	b1b4      	cbz	r4, 8016fe4 <_SetPos+0x158>
 8016fb6:	aa08      	add	r2, sp, #32
 8016fb8:	2301      	movs	r3, #1
 8016fba:	6323      	str	r3, [r4, #48]	; 0x30
 8016fbc:	2109      	movs	r1, #9
 8016fbe:	f842 3d1c 	str.w	r3, [r2, #-28]!
 8016fc2:	69a8      	ldr	r0, [r5, #24]
 8016fc4:	f7f8 f986 	bl	800f2d4 <LCD_X_DisplayDriver>
 8016fc8:	e7b7      	b.n	8016f3a <_SetPos+0xae>
 8016fca:	2050      	movs	r0, #80	; 0x50
 8016fcc:	f7f9 fd68 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016fd0:	4621      	mov	r1, r4
 8016fd2:	60a8      	str	r0, [r5, #8]
 8016fd4:	2250      	movs	r2, #80	; 0x50
 8016fd6:	f7fc fedf 	bl	8013d98 <GUI__memset>
 8016fda:	68ac      	ldr	r4, [r5, #8]
 8016fdc:	2c00      	cmp	r4, #0
 8016fde:	f43f af6b 	beq.w	8016eb8 <_SetPos+0x2c>
 8016fe2:	e7b8      	b.n	8016f56 <_SetPos+0xca>
 8016fe4:	2050      	movs	r0, #80	; 0x50
 8016fe6:	f7f9 fd5b 	bl	8010aa0 <GUI_ALLOC_GetFixedBlock>
 8016fea:	4621      	mov	r1, r4
 8016fec:	60a8      	str	r0, [r5, #8]
 8016fee:	2250      	movs	r2, #80	; 0x50
 8016ff0:	f7fc fed2 	bl	8013d98 <GUI__memset>
 8016ff4:	68ac      	ldr	r4, [r5, #8]
 8016ff6:	2c00      	cmp	r4, #0
 8016ff8:	d09f      	beq.n	8016f3a <_SetPos+0xae>
 8016ffa:	e7dc      	b.n	8016fb6 <_SetPos+0x12a>

08016ffc <_GetDevData>:
 8016ffc:	2901      	cmp	r1, #1
 8016ffe:	4802      	ldr	r0, [pc, #8]	; (8017008 <_GetDevData+0xc>)
 8017000:	bf18      	it	ne
 8017002:	2000      	movne	r0, #0
 8017004:	4770      	bx	lr
 8017006:	bf00      	nop
 8017008:	08026068 	.word	0x08026068

0801700c <_GetDevFunc>:
 801700c:	2916      	cmp	r1, #22
 801700e:	4802      	ldr	r0, [pc, #8]	; (8017018 <_GetDevFunc+0xc>)
 8017010:	bf18      	it	ne
 8017012:	2000      	movne	r0, #0
 8017014:	4770      	bx	lr
 8017016:	bf00      	nop
 8017018:	08017ea1 	.word	0x08017ea1

0801701c <_SetOrg>:
 801701c:	6800      	ldr	r0, [r0, #0]
 801701e:	b110      	cbz	r0, 8017026 <_SetOrg+0xa>
 8017020:	68c3      	ldr	r3, [r0, #12]
 8017022:	6a1b      	ldr	r3, [r3, #32]
 8017024:	4718      	bx	r3
 8017026:	4770      	bx	lr

08017028 <_GetRect>:
 8017028:	b570      	push	{r4, r5, r6, lr}
 801702a:	b082      	sub	sp, #8
 801702c:	6880      	ldr	r0, [r0, #8]
 801702e:	460c      	mov	r4, r1
 8017030:	f7f9 fe66 	bl	8010d00 <GUI_ALLOC_LockH>
 8017034:	a902      	add	r1, sp, #8
 8017036:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801703a:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 801703e:	8902      	ldrh	r2, [r0, #8]
 8017040:	8943      	ldrh	r3, [r0, #10]
 8017042:	f841 0d04 	str.w	r0, [r1, #-4]!
 8017046:	4432      	add	r2, r6
 8017048:	442b      	add	r3, r5
 801704a:	3a01      	subs	r2, #1
 801704c:	3b01      	subs	r3, #1
 801704e:	8026      	strh	r6, [r4, #0]
 8017050:	80a2      	strh	r2, [r4, #4]
 8017052:	8065      	strh	r5, [r4, #2]
 8017054:	80e3      	strh	r3, [r4, #6]
 8017056:	4608      	mov	r0, r1
 8017058:	f7f9 fe64 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801705c:	b002      	add	sp, #8
 801705e:	bd70      	pop	{r4, r5, r6, pc}

08017060 <_DrawBitmap>:
 8017060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017064:	4ca7      	ldr	r4, [pc, #668]	; (8017304 <_DrawBitmap+0x2a4>)
 8017066:	6824      	ldr	r4, [r4, #0]
 8017068:	b095      	sub	sp, #84	; 0x54
 801706a:	4683      	mov	fp, r0
 801706c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801706e:	920a      	str	r2, [sp, #40]	; 0x28
 8017070:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8017072:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 8017076:	9309      	str	r3, [sp, #36]	; 0x24
 8017078:	460c      	mov	r4, r1
 801707a:	f7f9 fe41 	bl	8010d00 <GUI_ALLOC_LockH>
 801707e:	6942      	ldr	r2, [r0, #20]
 8017080:	9011      	str	r0, [sp, #68]	; 0x44
 8017082:	2a00      	cmp	r2, #0
 8017084:	f040 80ae 	bne.w	80171e4 <_DrawBitmap+0x184>
 8017088:	4603      	mov	r3, r0
 801708a:	68db      	ldr	r3, [r3, #12]
 801708c:	9306      	str	r3, [sp, #24]
 801708e:	a811      	add	r0, sp, #68	; 0x44
 8017090:	9212      	str	r2, [sp, #72]	; 0x48
 8017092:	f7f9 fe47 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017096:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017098:	9812      	ldr	r0, [sp, #72]	; 0x48
 801709a:	18e3      	adds	r3, r4, r3
 801709c:	9308      	str	r3, [sp, #32]
 801709e:	4b99      	ldr	r3, [pc, #612]	; (8017304 <_DrawBitmap+0x2a4>)
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	b120      	cbz	r0, 80170ae <_DrawBitmap+0x4e>
 80170a4:	7c1a      	ldrb	r2, [r3, #16]
 80170a6:	4c97      	ldr	r4, [pc, #604]	; (8017304 <_DrawBitmap+0x2a4>)
 80170a8:	0791      	lsls	r1, r2, #30
 80170aa:	f000 80cf 	beq.w	801724c <_DrawBitmap+0x1ec>
 80170ae:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80170b0:	f7f9 fe26 	bl	8010d00 <GUI_ALLOC_LockH>
 80170b4:	4604      	mov	r4, r0
 80170b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80170b8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80170bc:	68e3      	ldr	r3, [r4, #12]
 80170be:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80170c2:	1a8a      	subs	r2, r1, r2
 80170c4:	fb03 f302 	mul.w	r3, r3, r2
 80170c8:	9a08      	ldr	r2, [sp, #32]
 80170ca:	a814      	add	r0, sp, #80	; 0x50
 80170cc:	ebc9 0902 	rsb	r9, r9, r2
 80170d0:	3318      	adds	r3, #24
 80170d2:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 80170d6:	18e3      	adds	r3, r4, r3
 80170d8:	f840 4d04 	str.w	r4, [r0, #-4]!
 80170dc:	9302      	str	r3, [sp, #8]
 80170de:	f7f9 fe21 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80170e2:	2d10      	cmp	r5, #16
 80170e4:	f000 8084 	beq.w	80171f0 <_DrawBitmap+0x190>
 80170e8:	2d17      	cmp	r5, #23
 80170ea:	dd41      	ble.n	8017170 <_DrawBitmap+0x110>
 80170ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	f340 84b9 	ble.w	8017a66 <_DrawBitmap+0xa06>
 80170f4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80170f8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80170fa:	444b      	add	r3, r9
 80170fc:	9303      	str	r3, [sp, #12]
 80170fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017100:	f1a3 0a04 	sub.w	sl, r3, #4
 8017104:	f11a 0f04 	cmn.w	sl, #4
 8017108:	d020      	beq.n	801714c <_DrawBitmap+0xec>
 801710a:	9f02      	ldr	r7, [sp, #8]
 801710c:	b1f7      	cbz	r7, 801714c <_DrawBitmap+0xec>
 801710e:	2e00      	cmp	r6, #0
 8017110:	d05a      	beq.n	80171c8 <_DrawBitmap+0x168>
 8017112:	68b2      	ldr	r2, [r6, #8]
 8017114:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017116:	6854      	ldr	r4, [r2, #4]
 8017118:	9908      	ldr	r1, [sp, #32]
 801711a:	462b      	mov	r3, r5
 801711c:	464a      	mov	r2, r9
 801711e:	4630      	mov	r0, r6
 8017120:	47a0      	blx	r4
 8017122:	9c08      	ldr	r4, [sp, #32]
 8017124:	46d0      	mov	r8, sl
 8017126:	f8db 3010 	ldr.w	r3, [fp, #16]
 801712a:	f858 0f04 	ldr.w	r0, [r8, #4]!
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	4798      	blx	r3
 8017132:	68b3      	ldr	r3, [r6, #8]
 8017134:	f827 0b02 	strh.w	r0, [r7], #2
 8017138:	4621      	mov	r1, r4
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	464a      	mov	r2, r9
 801713e:	4630      	mov	r0, r6
 8017140:	4798      	blx	r3
 8017142:	3d01      	subs	r5, #1
 8017144:	f104 0401 	add.w	r4, r4, #1
 8017148:	d1ed      	bne.n	8017126 <_DrawBitmap+0xc6>
 801714a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801714c:	9b02      	ldr	r3, [sp, #8]
 801714e:	9a06      	ldr	r2, [sp, #24]
 8017150:	4413      	add	r3, r2
 8017152:	9302      	str	r3, [sp, #8]
 8017154:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017156:	449a      	add	sl, r3
 8017158:	9b03      	ldr	r3, [sp, #12]
 801715a:	f109 0901 	add.w	r9, r9, #1
 801715e:	4599      	cmp	r9, r3
 8017160:	d1d0      	bne.n	8017104 <_DrawBitmap+0xa4>
 8017162:	b116      	cbz	r6, 801716a <_DrawBitmap+0x10a>
 8017164:	a812      	add	r0, sp, #72	; 0x48
 8017166:	f7f9 fddd 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801716a:	b015      	add	sp, #84	; 0x54
 801716c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017170:	2d08      	cmp	r5, #8
 8017172:	d074      	beq.n	801725e <_DrawBitmap+0x1fe>
 8017174:	4b64      	ldr	r3, [pc, #400]	; (8017308 <_DrawBitmap+0x2a8>)
 8017176:	f1ba 0f00 	cmp.w	sl, #0
 801717a:	bf08      	it	eq
 801717c:	469a      	moveq	sl, r3
 801717e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017180:	2b00      	cmp	r3, #0
 8017182:	f340 812b 	ble.w	80173dc <_DrawBitmap+0x37c>
 8017186:	461c      	mov	r4, r3
 8017188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801718a:	9806      	ldr	r0, [sp, #24]
 801718c:	9a02      	ldr	r2, [sp, #8]
 801718e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8017190:	9921      	ldr	r1, [sp, #132]	; 0x84
 8017192:	009b      	lsls	r3, r3, #2
 8017194:	9303      	str	r3, [sp, #12]
 8017196:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017198:	005b      	lsls	r3, r3, #1
 801719a:	9307      	str	r3, [sp, #28]
 801719c:	2300      	movs	r3, #0
 801719e:	2d02      	cmp	r5, #2
 80171a0:	f000 8123 	beq.w	80173ea <_DrawBitmap+0x38a>
 80171a4:	2d04      	cmp	r5, #4
 80171a6:	f000 81f8 	beq.w	801759a <_DrawBitmap+0x53a>
 80171aa:	2d01      	cmp	r5, #1
 80171ac:	f000 8337 	beq.w	801781e <_DrawBitmap+0x7be>
 80171b0:	3301      	adds	r3, #1
 80171b2:	429c      	cmp	r4, r3
 80171b4:	4431      	add	r1, r6
 80171b6:	4402      	add	r2, r0
 80171b8:	dcf1      	bgt.n	801719e <_DrawBitmap+0x13e>
 80171ba:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80171be:	46de      	mov	lr, fp
 80171c0:	f1be 0f00 	cmp.w	lr, #0
 80171c4:	d1ce      	bne.n	8017164 <_DrawBitmap+0x104>
 80171c6:	e7d0      	b.n	801716a <_DrawBitmap+0x10a>
 80171c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80171ca:	463d      	mov	r5, r7
 80171cc:	4656      	mov	r6, sl
 80171ce:	f8db 3010 	ldr.w	r3, [fp, #16]
 80171d2:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	4798      	blx	r3
 80171da:	3c01      	subs	r4, #1
 80171dc:	f825 0b02 	strh.w	r0, [r5], #2
 80171e0:	d1f5      	bne.n	80171ce <_DrawBitmap+0x16e>
 80171e2:	e7b2      	b.n	801714a <_DrawBitmap+0xea>
 80171e4:	4610      	mov	r0, r2
 80171e6:	f7f9 fd8b 	bl	8010d00 <GUI_ALLOC_LockH>
 80171ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80171ec:	4602      	mov	r2, r0
 80171ee:	e74c      	b.n	801708a <_DrawBitmap+0x2a>
 80171f0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80171f2:	2f00      	cmp	r7, #0
 80171f4:	f000 8429 	beq.w	8017a4a <_DrawBitmap+0x9ea>
 80171f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	ddb2      	ble.n	8017164 <_DrawBitmap+0x104>
 80171fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017200:	4e42      	ldr	r6, [pc, #264]	; (801730c <_DrawBitmap+0x2ac>)
 8017202:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017206:	f8dd b080 	ldr.w	fp, [sp, #128]	; 0x80
 801720a:	005d      	lsls	r5, r3, #1
 801720c:	2400      	movs	r4, #0
 801720e:	46a0      	mov	r8, r4
 8017210:	46a9      	mov	r9, r5
 8017212:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8017214:	9d02      	ldr	r5, [sp, #8]
 8017216:	4621      	mov	r1, r4
 8017218:	464a      	mov	r2, r9
 801721a:	4628      	mov	r0, r5
 801721c:	b164      	cbz	r4, 8017238 <_DrawBitmap+0x1d8>
 801721e:	b15d      	cbz	r5, 8017238 <_DrawBitmap+0x1d8>
 8017220:	6833      	ldr	r3, [r6, #0]
 8017222:	4798      	blx	r3
 8017224:	b13f      	cbz	r7, 8017236 <_DrawBitmap+0x1d6>
 8017226:	68bb      	ldr	r3, [r7, #8]
 8017228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801722a:	9908      	ldr	r1, [sp, #32]
 801722c:	4638      	mov	r0, r7
 801722e:	4442      	add	r2, r8
 8017230:	685f      	ldr	r7, [r3, #4]
 8017232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017234:	47b8      	blx	r7
 8017236:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8017238:	9b06      	ldr	r3, [sp, #24]
 801723a:	f108 0801 	add.w	r8, r8, #1
 801723e:	45c2      	cmp	sl, r8
 8017240:	445c      	add	r4, fp
 8017242:	441d      	add	r5, r3
 8017244:	dce7      	bgt.n	8017216 <_DrawBitmap+0x1b6>
 8017246:	2f00      	cmp	r7, #0
 8017248:	d18c      	bne.n	8017164 <_DrawBitmap+0x104>
 801724a:	e78e      	b.n	801716a <_DrawBitmap+0x10a>
 801724c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801724e:	9300      	str	r3, [sp, #0]
 8017250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017254:	9908      	ldr	r1, [sp, #32]
 8017256:	f000 fe11 	bl	8017e7c <GUI_USAGE_AddRect>
 801725a:	6823      	ldr	r3, [r4, #0]
 801725c:	e727      	b.n	80170ae <_DrawBitmap+0x4e>
 801725e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017260:	2b00      	cmp	r3, #0
 8017262:	f340 8409 	ble.w	8017a78 <_DrawBitmap+0xa18>
 8017266:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801726a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801726e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017270:	444b      	add	r3, r9
 8017272:	9304      	str	r3, [sp, #16]
 8017274:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017276:	3b01      	subs	r3, #1
 8017278:	9303      	str	r3, [sp, #12]
 801727a:	9b02      	ldr	r3, [sp, #8]
 801727c:	4658      	mov	r0, fp
 801727e:	eb03 0642 	add.w	r6, r3, r2, lsl #1
 8017282:	4657      	mov	r7, sl
 8017284:	9b03      	ldr	r3, [sp, #12]
 8017286:	1c59      	adds	r1, r3, #1
 8017288:	4b1e      	ldr	r3, [pc, #120]	; (8017304 <_DrawBitmap+0x2a4>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	7c1b      	ldrb	r3, [r3, #16]
 801728e:	2f00      	cmp	r7, #0
 8017290:	d049      	beq.n	8017326 <_DrawBitmap+0x2c6>
 8017292:	f013 0303 	ands.w	r3, r3, #3
 8017296:	d03b      	beq.n	8017310 <_DrawBitmap+0x2b0>
 8017298:	2b02      	cmp	r3, #2
 801729a:	d11f      	bne.n	80172dc <_DrawBitmap+0x27c>
 801729c:	f1bb 0f00 	cmp.w	fp, #0
 80172a0:	d064      	beq.n	801736c <_DrawBitmap+0x30c>
 80172a2:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80172a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80172aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80172ac:	9c08      	ldr	r4, [sp, #32]
 80172ae:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 80172b2:	4621      	mov	r1, r4
 80172b4:	464a      	mov	r2, r9
 80172b6:	3401      	adds	r4, #1
 80172b8:	4658      	mov	r0, fp
 80172ba:	b143      	cbz	r3, 80172ce <_DrawBitmap+0x26e>
 80172bc:	f8db e008 	ldr.w	lr, [fp, #8]
 80172c0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80172c4:	f8a8 3000 	strh.w	r3, [r8]
 80172c8:	f8de 3000 	ldr.w	r3, [lr]
 80172cc:	4798      	blx	r3
 80172ce:	3d01      	subs	r5, #1
 80172d0:	f108 0802 	add.w	r8, r8, #2
 80172d4:	d1eb      	bne.n	80172ae <_DrawBitmap+0x24e>
 80172d6:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80172da:	4658      	mov	r0, fp
 80172dc:	9b02      	ldr	r3, [sp, #8]
 80172de:	9a06      	ldr	r2, [sp, #24]
 80172e0:	4619      	mov	r1, r3
 80172e2:	4411      	add	r1, r2
 80172e4:	9b03      	ldr	r3, [sp, #12]
 80172e6:	9102      	str	r1, [sp, #8]
 80172e8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80172ea:	440b      	add	r3, r1
 80172ec:	9303      	str	r3, [sp, #12]
 80172ee:	9b04      	ldr	r3, [sp, #16]
 80172f0:	f109 0901 	add.w	r9, r9, #1
 80172f4:	454b      	cmp	r3, r9
 80172f6:	4416      	add	r6, r2
 80172f8:	d1c4      	bne.n	8017284 <_DrawBitmap+0x224>
 80172fa:	2800      	cmp	r0, #0
 80172fc:	f47f af32 	bne.w	8017164 <_DrawBitmap+0x104>
 8017300:	e733      	b.n	801716a <_DrawBitmap+0x10a>
 8017302:	bf00      	nop
 8017304:	20000014 	.word	0x20000014
 8017308:	0802609c 	.word	0x0802609c
 801730c:	2000003c 	.word	0x2000003c
 8017310:	9a03      	ldr	r2, [sp, #12]
 8017312:	9b02      	ldr	r3, [sp, #8]
 8017314:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8017318:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801731c:	f823 1b02 	strh.w	r1, [r3], #2
 8017320:	42b3      	cmp	r3, r6
 8017322:	d1f7      	bne.n	8017314 <_DrawBitmap+0x2b4>
 8017324:	e7da      	b.n	80172dc <_DrawBitmap+0x27c>
 8017326:	f013 0303 	ands.w	r3, r3, #3
 801732a:	f000 836a 	beq.w	8017a02 <_DrawBitmap+0x9a2>
 801732e:	2b02      	cmp	r3, #2
 8017330:	d1d4      	bne.n	80172dc <_DrawBitmap+0x27c>
 8017332:	f1bb 0f00 	cmp.w	fp, #0
 8017336:	f000 837e 	beq.w	8017a36 <_DrawBitmap+0x9d6>
 801733a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801733e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8017342:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017344:	9c08      	ldr	r4, [sp, #32]
 8017346:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 801734a:	4621      	mov	r1, r4
 801734c:	464a      	mov	r2, r9
 801734e:	3401      	adds	r4, #1
 8017350:	4658      	mov	r0, fp
 8017352:	b133      	cbz	r3, 8017362 <_DrawBitmap+0x302>
 8017354:	f8db e008 	ldr.w	lr, [fp, #8]
 8017358:	f8a8 3000 	strh.w	r3, [r8]
 801735c:	f8de 3000 	ldr.w	r3, [lr]
 8017360:	4798      	blx	r3
 8017362:	3d01      	subs	r5, #1
 8017364:	f108 0802 	add.w	r8, r8, #2
 8017368:	d1ed      	bne.n	8017346 <_DrawBitmap+0x2e6>
 801736a:	e7b4      	b.n	80172d6 <_DrawBitmap+0x276>
 801736c:	9903      	ldr	r1, [sp, #12]
 801736e:	9b02      	ldr	r3, [sp, #8]
 8017370:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017374:	b112      	cbz	r2, 801737c <_DrawBitmap+0x31c>
 8017376:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801737a:	801a      	strh	r2, [r3, #0]
 801737c:	3302      	adds	r3, #2
 801737e:	429e      	cmp	r6, r3
 8017380:	d1f6      	bne.n	8017370 <_DrawBitmap+0x310>
 8017382:	e7aa      	b.n	80172da <_DrawBitmap+0x27a>
 8017384:	9b03      	ldr	r3, [sp, #12]
 8017386:	464a      	mov	r2, r9
 8017388:	f014 0f01 	tst.w	r4, #1
 801738c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8017390:	d003      	beq.n	801739a <_DrawBitmap+0x33a>
 8017392:	8819      	ldrh	r1, [r3, #0]
 8017394:	ea8a 0101 	eor.w	r1, sl, r1
 8017398:	8019      	strh	r1, [r3, #0]
 801739a:	3a01      	subs	r2, #1
 801739c:	f103 0302 	add.w	r3, r3, #2
 80173a0:	d1f2      	bne.n	8017388 <_DrawBitmap+0x328>
 80173a2:	9b03      	ldr	r3, [sp, #12]
 80173a4:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 80173a8:	9303      	str	r3, [sp, #12]
 80173aa:	f1bb 0f00 	cmp.w	fp, #0
 80173ae:	f040 82c6 	bne.w	801793e <_DrawBitmap+0x8de>
 80173b2:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 80173b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173b8:	9a06      	ldr	r2, [sp, #24]
 80173ba:	3301      	adds	r3, #1
 80173bc:	461c      	mov	r4, r3
 80173be:	930b      	str	r3, [sp, #44]	; 0x2c
 80173c0:	9b02      	ldr	r3, [sp, #8]
 80173c2:	4413      	add	r3, r2
 80173c4:	9302      	str	r3, [sp, #8]
 80173c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80173c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173ca:	a811      	add	r0, sp, #68	; 0x44
 80173cc:	4413      	add	r3, r2
 80173ce:	930c      	str	r3, [sp, #48]	; 0x30
 80173d0:	f7f9 fca8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80173d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80173d6:	4294      	cmp	r4, r2
 80173d8:	f2c0 822d 	blt.w	8017836 <_DrawBitmap+0x7d6>
 80173dc:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 80173e0:	f1be 0f00 	cmp.w	lr, #0
 80173e4:	f47f aebe 	bne.w	8017164 <_DrawBitmap+0x104>
 80173e8:	e6bf      	b.n	801716a <_DrawBitmap+0x10a>
 80173ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80173ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80173ee:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80173f2:	9202      	str	r2, [sp, #8]
 80173f4:	f1c3 0304 	rsb	r3, r3, #4
 80173f8:	b2db      	uxtb	r3, r3
 80173fa:	930c      	str	r3, [sp, #48]	; 0x30
 80173fc:	465b      	mov	r3, fp
 80173fe:	9121      	str	r1, [sp, #132]	; 0x84
 8017400:	46d3      	mov	fp, sl
 8017402:	469a      	mov	sl, r3
 8017404:	46d6      	mov	lr, sl
 8017406:	4657      	mov	r7, sl
 8017408:	4ba4      	ldr	r3, [pc, #656]	; (801769c <_DrawBitmap+0x63c>)
 801740a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	7814      	ldrb	r4, [r2, #0]
 8017410:	7c1b      	ldrb	r3, [r3, #16]
 8017412:	9a07      	ldr	r2, [sp, #28]
 8017414:	f003 0303 	and.w	r3, r3, #3
 8017418:	4094      	lsls	r4, r2
 801741a:	2b01      	cmp	r3, #1
 801741c:	b2e4      	uxtb	r4, r4
 801741e:	f000 809d 	beq.w	801755c <_DrawBitmap+0x4fc>
 8017422:	d37b      	bcc.n	801751c <_DrawBitmap+0x4bc>
 8017424:	2b02      	cmp	r3, #2
 8017426:	d166      	bne.n	80174f6 <_DrawBitmap+0x496>
 8017428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801742a:	9303      	str	r3, [sp, #12]
 801742c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801742e:	9305      	str	r3, [sp, #20]
 8017430:	9b08      	ldr	r3, [sp, #32]
 8017432:	9304      	str	r3, [sp, #16]
 8017434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017438:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801743c:	9d02      	ldr	r5, [sp, #8]
 801743e:	eb03 0a02 	add.w	sl, r3, r2
 8017442:	9a03      	ldr	r2, [sp, #12]
 8017444:	9b03      	ldr	r3, [sp, #12]
 8017446:	4591      	cmp	r9, r2
 8017448:	bfc8      	it	gt
 801744a:	fa5f f982 	uxtbgt.w	r9, r2
 801744e:	ebc9 0303 	rsb	r3, r9, r3
 8017452:	f109 39ff 	add.w	r9, r9, #4294967295
 8017456:	9303      	str	r3, [sp, #12]
 8017458:	fa5f f989 	uxtb.w	r9, r9
 801745c:	b347      	cbz	r7, 80174b0 <_DrawBitmap+0x450>
 801745e:	f109 0801 	add.w	r8, r9, #1
 8017462:	9e04      	ldr	r6, [sp, #16]
 8017464:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 8017468:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801746c:	4631      	mov	r1, r6
 801746e:	ea4f 1394 	mov.w	r3, r4, lsr #6
 8017472:	f106 0601 	add.w	r6, r6, #1
 8017476:	4652      	mov	r2, sl
 8017478:	4638      	mov	r0, r7
 801747a:	d007      	beq.n	801748c <_DrawBitmap+0x42c>
 801747c:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8017480:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8017484:	802b      	strh	r3, [r5, #0]
 8017486:	f8de 3000 	ldr.w	r3, [lr]
 801748a:	4798      	blx	r3
 801748c:	3502      	adds	r5, #2
 801748e:	00a4      	lsls	r4, r4, #2
 8017490:	4545      	cmp	r5, r8
 8017492:	b2e4      	uxtb	r4, r4
 8017494:	d1e8      	bne.n	8017468 <_DrawBitmap+0x408>
 8017496:	9b04      	ldr	r3, [sp, #16]
 8017498:	3301      	adds	r3, #1
 801749a:	444b      	add	r3, r9
 801749c:	9304      	str	r3, [sp, #16]
 801749e:	9b03      	ldr	r3, [sp, #12]
 80174a0:	b1c3      	cbz	r3, 80174d4 <_DrawBitmap+0x474>
 80174a2:	9b05      	ldr	r3, [sp, #20]
 80174a4:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80174a8:	9305      	str	r3, [sp, #20]
 80174aa:	f04f 0904 	mov.w	r9, #4
 80174ae:	e7c8      	b.n	8017442 <_DrawBitmap+0x3e2>
 80174b0:	f109 0101 	add.w	r1, r9, #1
 80174b4:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 80174b8:	09a2      	lsrs	r2, r4, #6
 80174ba:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80174be:	ea4f 0384 	mov.w	r3, r4, lsl #2
 80174c2:	b2dc      	uxtb	r4, r3
 80174c4:	bf1c      	itt	ne
 80174c6:	f85b 3022 	ldrne.w	r3, [fp, r2, lsl #2]
 80174ca:	802b      	strhne	r3, [r5, #0]
 80174cc:	3502      	adds	r5, #2
 80174ce:	42a9      	cmp	r1, r5
 80174d0:	d1f2      	bne.n	80174b8 <_DrawBitmap+0x458>
 80174d2:	e7e0      	b.n	8017496 <_DrawBitmap+0x436>
 80174d4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80174d6:	46be      	mov	lr, r7
 80174d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174da:	9920      	ldr	r1, [sp, #128]	; 0x80
 80174dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174de:	440a      	add	r2, r1
 80174e0:	9221      	str	r2, [sp, #132]	; 0x84
 80174e2:	9906      	ldr	r1, [sp, #24]
 80174e4:	9a02      	ldr	r2, [sp, #8]
 80174e6:	440a      	add	r2, r1
 80174e8:	9202      	str	r2, [sp, #8]
 80174ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80174ec:	3301      	adds	r3, #1
 80174ee:	429a      	cmp	r2, r3
 80174f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80174f2:	dc89      	bgt.n	8017408 <_DrawBitmap+0x3a8>
 80174f4:	e664      	b.n	80171c0 <_DrawBitmap+0x160>
 80174f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174f8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80174fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174fc:	440a      	add	r2, r1
 80174fe:	9221      	str	r2, [sp, #132]	; 0x84
 8017500:	9906      	ldr	r1, [sp, #24]
 8017502:	9a02      	ldr	r2, [sp, #8]
 8017504:	440a      	add	r2, r1
 8017506:	9202      	str	r2, [sp, #8]
 8017508:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801750a:	3301      	adds	r3, #1
 801750c:	429a      	cmp	r2, r3
 801750e:	46ba      	mov	sl, r7
 8017510:	930b      	str	r3, [sp, #44]	; 0x2c
 8017512:	f73f af77 	bgt.w	8017404 <_DrawBitmap+0x3a4>
 8017516:	46d3      	mov	fp, sl
 8017518:	46de      	mov	lr, fp
 801751a:	e651      	b.n	80171c0 <_DrawBitmap+0x160>
 801751c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801751e:	9e02      	ldr	r6, [sp, #8]
 8017520:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017522:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8017526:	42ab      	cmp	r3, r5
 8017528:	bfc8      	it	gt
 801752a:	b2eb      	uxtbgt	r3, r5
 801752c:	1e58      	subs	r0, r3, #1
 801752e:	b2c0      	uxtb	r0, r0
 8017530:	1aed      	subs	r5, r5, r3
 8017532:	eb06 0140 	add.w	r1, r6, r0, lsl #1
 8017536:	1eb3      	subs	r3, r6, #2
 8017538:	09a2      	lsrs	r2, r4, #6
 801753a:	00a4      	lsls	r4, r4, #2
 801753c:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 8017540:	f823 2f02 	strh.w	r2, [r3, #2]!
 8017544:	428b      	cmp	r3, r1
 8017546:	b2e4      	uxtb	r4, r4
 8017548:	d1f6      	bne.n	8017538 <_DrawBitmap+0x4d8>
 801754a:	3001      	adds	r0, #1
 801754c:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8017550:	2d00      	cmp	r5, #0
 8017552:	d0c1      	beq.n	80174d8 <_DrawBitmap+0x478>
 8017554:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 8017558:	2304      	movs	r3, #4
 801755a:	e7e4      	b.n	8017526 <_DrawBitmap+0x4c6>
 801755c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801755e:	9b02      	ldr	r3, [sp, #8]
 8017560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017562:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8017564:	4282      	cmp	r2, r0
 8017566:	bfc8      	it	gt
 8017568:	b2c2      	uxtbgt	r2, r0
 801756a:	1e51      	subs	r1, r2, #1
 801756c:	b2c9      	uxtb	r1, r1
 801756e:	3101      	adds	r1, #1
 8017570:	1a80      	subs	r0, r0, r2
 8017572:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8017576:	00a2      	lsls	r2, r4, #2
 8017578:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801757c:	b2d4      	uxtb	r4, r2
 801757e:	d003      	beq.n	8017588 <_DrawBitmap+0x528>
 8017580:	881a      	ldrh	r2, [r3, #0]
 8017582:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 8017586:	801a      	strh	r2, [r3, #0]
 8017588:	3302      	adds	r3, #2
 801758a:	428b      	cmp	r3, r1
 801758c:	d1f3      	bne.n	8017576 <_DrawBitmap+0x516>
 801758e:	2800      	cmp	r0, #0
 8017590:	d0a2      	beq.n	80174d8 <_DrawBitmap+0x478>
 8017592:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8017596:	2204      	movs	r2, #4
 8017598:	e7e4      	b.n	8017564 <_DrawBitmap+0x504>
 801759a:	9121      	str	r1, [sp, #132]	; 0x84
 801759c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801759e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80175a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80175a4:	f1c1 0302 	rsb	r3, r1, #2
 80175a8:	b2d9      	uxtb	r1, r3
 80175aa:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 80175ae:	9107      	str	r1, [sp, #28]
 80175b0:	4613      	mov	r3, r2
 80175b2:	465a      	mov	r2, fp
 80175b4:	46d3      	mov	fp, sl
 80175b6:	4692      	mov	sl, r2
 80175b8:	3302      	adds	r3, #2
 80175ba:	9302      	str	r3, [sp, #8]
 80175bc:	46d6      	mov	lr, sl
 80175be:	4b37      	ldr	r3, [pc, #220]	; (801769c <_DrawBitmap+0x63c>)
 80175c0:	9903      	ldr	r1, [sp, #12]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	f899 2000 	ldrb.w	r2, [r9]
 80175c8:	7c1b      	ldrb	r3, [r3, #16]
 80175ca:	408a      	lsls	r2, r1
 80175cc:	f003 0303 	and.w	r3, r3, #3
 80175d0:	9902      	ldr	r1, [sp, #8]
 80175d2:	2b01      	cmp	r3, #1
 80175d4:	b2d4      	uxtb	r4, r2
 80175d6:	f1a1 0802 	sub.w	r8, r1, #2
 80175da:	f000 80d2 	beq.w	8017782 <_DrawBitmap+0x722>
 80175de:	f0c0 809d 	bcc.w	801771c <_DrawBitmap+0x6bc>
 80175e2:	2b02      	cmp	r3, #2
 80175e4:	f040 808c 	bne.w	8017700 <_DrawBitmap+0x6a0>
 80175e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80175ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175ec:	440b      	add	r3, r1
 80175ee:	4619      	mov	r1, r3
 80175f0:	9305      	str	r3, [sp, #20]
 80175f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	f000 80e8 	beq.w	80177ca <_DrawBitmap+0x76a>
 80175fa:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80175fe:	f040 8209 	bne.w	8017a14 <_DrawBitmap+0x9b4>
 8017602:	9b08      	ldr	r3, [sp, #32]
 8017604:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8017608:	f899 4001 	ldrb.w	r4, [r9, #1]
 801760c:	1c59      	adds	r1, r3, #1
 801760e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017610:	f109 0601 	add.w	r6, r9, #1
 8017614:	1e5f      	subs	r7, r3, #1
 8017616:	2f01      	cmp	r7, #1
 8017618:	dd51      	ble.n	80176be <_DrawBitmap+0x65e>
 801761a:	1ebb      	subs	r3, r7, #2
 801761c:	9304      	str	r3, [sp, #16]
 801761e:	f1ba 0f00 	cmp.w	sl, #0
 8017622:	f000 80d6 	beq.w	80177d2 <_DrawBitmap+0x772>
 8017626:	085b      	lsrs	r3, r3, #1
 8017628:	1c8a      	adds	r2, r1, #2
 801762a:	930c      	str	r3, [sp, #48]	; 0x30
 801762c:	005b      	lsls	r3, r3, #1
 801762e:	930d      	str	r3, [sp, #52]	; 0x34
 8017630:	18d3      	adds	r3, r2, r3
 8017632:	f108 0704 	add.w	r7, r8, #4
 8017636:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 801763a:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 801763e:	920e      	str	r2, [sp, #56]	; 0x38
 8017640:	460d      	mov	r5, r1
 8017642:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017646:	4699      	mov	r9, r3
 8017648:	e01d      	b.n	8017686 <_DrawBitmap+0x626>
 801764a:	f8da e008 	ldr.w	lr, [sl, #8]
 801764e:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8017652:	f827 3c04 	strh.w	r3, [r7, #-4]
 8017656:	f8de 3000 	ldr.w	r3, [lr]
 801765a:	4798      	blx	r3
 801765c:	f014 040f 	ands.w	r4, r4, #15
 8017660:	d00a      	beq.n	8017678 <_DrawBitmap+0x618>
 8017662:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8017666:	f827 3c02 	strh.w	r3, [r7, #-2]
 801766a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801766e:	4642      	mov	r2, r8
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	1c69      	adds	r1, r5, #1
 8017674:	4650      	mov	r0, sl
 8017676:	4798      	blx	r3
 8017678:	3502      	adds	r5, #2
 801767a:	45a9      	cmp	r9, r5
 801767c:	f107 0704 	add.w	r7, r7, #4
 8017680:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8017684:	d00c      	beq.n	80176a0 <_DrawBitmap+0x640>
 8017686:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 801768a:	ea4f 1314 	mov.w	r3, r4, lsr #4
 801768e:	4629      	mov	r1, r5
 8017690:	4642      	mov	r2, r8
 8017692:	4650      	mov	r0, sl
 8017694:	d1d9      	bne.n	801764a <_DrawBitmap+0x5ea>
 8017696:	2c00      	cmp	r4, #0
 8017698:	d0ee      	beq.n	8017678 <_DrawBitmap+0x618>
 801769a:	e7e2      	b.n	8017662 <_DrawBitmap+0x602>
 801769c:	20000014 	.word	0x20000014
 80176a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80176a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80176a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80176a6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80176aa:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 80176ae:	4613      	mov	r3, r2
 80176b0:	4401      	add	r1, r0
 80176b2:	9804      	ldr	r0, [sp, #16]
 80176b4:	3301      	adds	r3, #1
 80176b6:	eba0 0742 	sub.w	r7, r0, r2, lsl #1
 80176ba:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 80176be:	b177      	cbz	r7, 80176de <_DrawBitmap+0x67e>
 80176c0:	0924      	lsrs	r4, r4, #4
 80176c2:	d00c      	beq.n	80176de <_DrawBitmap+0x67e>
 80176c4:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 80176c8:	f8a8 3000 	strh.w	r3, [r8]
 80176cc:	f1ba 0f00 	cmp.w	sl, #0
 80176d0:	d005      	beq.n	80176de <_DrawBitmap+0x67e>
 80176d2:	f8da 3008 	ldr.w	r3, [sl, #8]
 80176d6:	9a05      	ldr	r2, [sp, #20]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	4650      	mov	r0, sl
 80176dc:	4798      	blx	r3
 80176de:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 80176e2:	46d6      	mov	lr, sl
 80176e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80176e6:	9906      	ldr	r1, [sp, #24]
 80176e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176ea:	4491      	add	r9, r2
 80176ec:	9a02      	ldr	r2, [sp, #8]
 80176ee:	440a      	add	r2, r1
 80176f0:	9202      	str	r2, [sp, #8]
 80176f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80176f4:	3301      	adds	r3, #1
 80176f6:	429a      	cmp	r2, r3
 80176f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80176fa:	f73f af60 	bgt.w	80175be <_DrawBitmap+0x55e>
 80176fe:	e55f      	b.n	80171c0 <_DrawBitmap+0x160>
 8017700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017702:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017704:	3301      	adds	r3, #1
 8017706:	461a      	mov	r2, r3
 8017708:	930b      	str	r3, [sp, #44]	; 0x2c
 801770a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801770c:	4499      	add	r9, r3
 801770e:	9b06      	ldr	r3, [sp, #24]
 8017710:	4291      	cmp	r1, r2
 8017712:	4443      	add	r3, r8
 8017714:	f73f af50 	bgt.w	80175b8 <_DrawBitmap+0x558>
 8017718:	46d3      	mov	fp, sl
 801771a:	e6fd      	b.n	8017518 <_DrawBitmap+0x4b8>
 801771c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801771e:	2b00      	cmp	r3, #0
 8017720:	d050      	beq.n	80177c4 <_DrawBitmap+0x764>
 8017722:	0924      	lsrs	r4, r4, #4
 8017724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017726:	1e5d      	subs	r5, r3, #1
 8017728:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 801772c:	f8a8 3000 	strh.w	r3, [r8]
 8017730:	f899 4001 	ldrb.w	r4, [r9, #1]
 8017734:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8017738:	f109 0201 	add.w	r2, r9, #1
 801773c:	2d01      	cmp	r5, #1
 801773e:	dd18      	ble.n	8017772 <_DrawBitmap+0x712>
 8017740:	106e      	asrs	r6, r5, #1
 8017742:	1990      	adds	r0, r2, r6
 8017744:	f005 0501 	and.w	r5, r5, #1
 8017748:	f108 0304 	add.w	r3, r8, #4
 801774c:	0921      	lsrs	r1, r4, #4
 801774e:	f004 040f 	and.w	r4, r4, #15
 8017752:	f85b 7021 	ldr.w	r7, [fp, r1, lsl #2]
 8017756:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 801775a:	f823 1c02 	strh.w	r1, [r3, #-2]
 801775e:	f823 7c04 	strh.w	r7, [r3, #-4]
 8017762:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8017766:	4282      	cmp	r2, r0
 8017768:	f103 0304 	add.w	r3, r3, #4
 801776c:	d1ee      	bne.n	801774c <_DrawBitmap+0x6ec>
 801776e:	eb08 0886 	add.w	r8, r8, r6, lsl #2
 8017772:	2d00      	cmp	r5, #0
 8017774:	d0b6      	beq.n	80176e4 <_DrawBitmap+0x684>
 8017776:	0924      	lsrs	r4, r4, #4
 8017778:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 801777c:	f8a8 3000 	strh.w	r3, [r8]
 8017780:	e7b0      	b.n	80176e4 <_DrawBitmap+0x684>
 8017782:	9b07      	ldr	r3, [sp, #28]
 8017784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017786:	4648      	mov	r0, r9
 8017788:	428b      	cmp	r3, r1
 801778a:	bfc8      	it	gt
 801778c:	b2cb      	uxtbgt	r3, r1
 801778e:	1e5a      	subs	r2, r3, #1
 8017790:	b2d2      	uxtb	r2, r2
 8017792:	3201      	adds	r2, #1
 8017794:	1ac9      	subs	r1, r1, r3
 8017796:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 801779a:	0123      	lsls	r3, r4, #4
 801779c:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80177a0:	b2dc      	uxtb	r4, r3
 80177a2:	d005      	beq.n	80177b0 <_DrawBitmap+0x750>
 80177a4:	f8b8 3000 	ldrh.w	r3, [r8]
 80177a8:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80177ac:	f8a8 3000 	strh.w	r3, [r8]
 80177b0:	f108 0802 	add.w	r8, r8, #2
 80177b4:	4590      	cmp	r8, r2
 80177b6:	d1f0      	bne.n	801779a <_DrawBitmap+0x73a>
 80177b8:	2900      	cmp	r1, #0
 80177ba:	d093      	beq.n	80176e4 <_DrawBitmap+0x684>
 80177bc:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80177c0:	2302      	movs	r3, #2
 80177c2:	e7e1      	b.n	8017788 <_DrawBitmap+0x728>
 80177c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80177c6:	464a      	mov	r2, r9
 80177c8:	e7b8      	b.n	801773c <_DrawBitmap+0x6dc>
 80177ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80177cc:	9908      	ldr	r1, [sp, #32]
 80177ce:	464e      	mov	r6, r9
 80177d0:	e721      	b.n	8017616 <_DrawBitmap+0x5b6>
 80177d2:	085f      	lsrs	r7, r3, #1
 80177d4:	f107 0e01 	add.w	lr, r7, #1
 80177d8:	eb06 000e 	add.w	r0, r6, lr
 80177dc:	f108 0304 	add.w	r3, r8, #4
 80177e0:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 80177e4:	ea4f 1214 	mov.w	r2, r4, lsr #4
 80177e8:	d003      	beq.n	80177f2 <_DrawBitmap+0x792>
 80177ea:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 80177ee:	f823 2c04 	strh.w	r2, [r3, #-4]
 80177f2:	f014 040f 	ands.w	r4, r4, #15
 80177f6:	d003      	beq.n	8017800 <_DrawBitmap+0x7a0>
 80177f8:	f85b 2024 	ldr.w	r2, [fp, r4, lsl #2]
 80177fc:	f823 2c02 	strh.w	r2, [r3, #-2]
 8017800:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8017804:	42b0      	cmp	r0, r6
 8017806:	f103 0304 	add.w	r3, r3, #4
 801780a:	d1e9      	bne.n	80177e0 <_DrawBitmap+0x780>
 801780c:	9b04      	ldr	r3, [sp, #16]
 801780e:	3102      	adds	r1, #2
 8017810:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8017814:	eb08 088e 	add.w	r8, r8, lr, lsl #2
 8017818:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 801781c:	e74f      	b.n	80176be <_DrawBitmap+0x65e>
 801781e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017820:	460b      	mov	r3, r1
 8017822:	3301      	adds	r3, #1
 8017824:	930c      	str	r3, [sp, #48]	; 0x30
 8017826:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017828:	9202      	str	r2, [sp, #8]
 801782a:	f1c3 0308 	rsb	r3, r3, #8
 801782e:	9121      	str	r1, [sp, #132]	; 0x84
 8017830:	930d      	str	r3, [sp, #52]	; 0x34
 8017832:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8017836:	4b93      	ldr	r3, [pc, #588]	; (8017a84 <_DrawBitmap+0xa24>)
 8017838:	4c93      	ldr	r4, [pc, #588]	; (8017a88 <_DrawBitmap+0xa28>)
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801783e:	f7f9 fa5f 	bl	8010d00 <GUI_ALLOC_LockH>
 8017842:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017844:	4b8f      	ldr	r3, [pc, #572]	; (8017a84 <_DrawBitmap+0xa24>)
 8017846:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	5ca4      	ldrb	r4, [r4, r2]
 801784e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017850:	7c1b      	ldrb	r3, [r3, #16]
 8017852:	9011      	str	r0, [sp, #68]	; 0x44
 8017854:	4114      	asrs	r4, r2
 8017856:	f101 3bff 	add.w	fp, r1, #4294967295
 801785a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801785c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801785e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8017862:	f003 0303 	and.w	r3, r3, #3
 8017866:	440a      	add	r2, r1
 8017868:	2b02      	cmp	r3, #2
 801786a:	9204      	str	r2, [sp, #16]
 801786c:	d071      	beq.n	8017952 <_DrawBitmap+0x8f2>
 801786e:	2b03      	cmp	r3, #3
 8017870:	d01f      	beq.n	80178b2 <_DrawBitmap+0x852>
 8017872:	2b01      	cmp	r3, #1
 8017874:	d01d      	beq.n	80178b2 <_DrawBitmap+0x852>
 8017876:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017878:	9e02      	ldr	r6, [sp, #8]
 801787a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801787c:	42a8      	cmp	r0, r5
 801787e:	bf28      	it	cs
 8017880:	4628      	movcs	r0, r5
 8017882:	1a2d      	subs	r5, r5, r0
 8017884:	4602      	mov	r2, r0
 8017886:	4631      	mov	r1, r6
 8017888:	f004 0301 	and.w	r3, r4, #1
 801788c:	3a01      	subs	r2, #1
 801788e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8017892:	f821 3b02 	strh.w	r3, [r1], #2
 8017896:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801789a:	d1f5      	bne.n	8017888 <_DrawBitmap+0x828>
 801789c:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80178a0:	2d00      	cmp	r5, #0
 80178a2:	f43f ad88 	beq.w	80173b6 <_DrawBitmap+0x356>
 80178a6:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 80178aa:	4a77      	ldr	r2, [pc, #476]	; (8017a88 <_DrawBitmap+0xa28>)
 80178ac:	2008      	movs	r0, #8
 80178ae:	5cd4      	ldrb	r4, [r2, r3]
 80178b0:	e7e4      	b.n	801787c <_DrawBitmap+0x81c>
 80178b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80178b4:	691b      	ldr	r3, [r3, #16]
 80178b6:	689b      	ldr	r3, [r3, #8]
 80178b8:	4798      	blx	r3
 80178ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178bc:	9a02      	ldr	r2, [sp, #8]
 80178be:	9305      	str	r3, [sp, #20]
 80178c0:	9203      	str	r2, [sp, #12]
 80178c2:	b283      	uxth	r3, r0
 80178c4:	9a08      	ldr	r2, [sp, #32]
 80178c6:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80178ca:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80178ce:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 80178d2:	9207      	str	r2, [sp, #28]
 80178d4:	469a      	mov	sl, r3
 80178d6:	45d9      	cmp	r9, fp
 80178d8:	bf28      	it	cs
 80178da:	46d9      	movcs	r9, fp
 80178dc:	ebc9 0b0b 	rsb	fp, r9, fp
 80178e0:	f1b8 0f00 	cmp.w	r8, #0
 80178e4:	f43f ad4e 	beq.w	8017384 <_DrawBitmap+0x324>
 80178e8:	464d      	mov	r5, r9
 80178ea:	9e03      	ldr	r6, [sp, #12]
 80178ec:	9f07      	ldr	r7, [sp, #28]
 80178ee:	e005      	b.n	80178fc <_DrawBitmap+0x89c>
 80178f0:	3d01      	subs	r5, #1
 80178f2:	f106 0602 	add.w	r6, r6, #2
 80178f6:	f107 0701 	add.w	r7, r7, #1
 80178fa:	d015      	beq.n	8017928 <_DrawBitmap+0x8c8>
 80178fc:	f014 0f01 	tst.w	r4, #1
 8017900:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8017904:	d0f4      	beq.n	80178f0 <_DrawBitmap+0x890>
 8017906:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801790a:	9a04      	ldr	r2, [sp, #16]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	4639      	mov	r1, r7
 8017910:	4640      	mov	r0, r8
 8017912:	4798      	blx	r3
 8017914:	8833      	ldrh	r3, [r6, #0]
 8017916:	3d01      	subs	r5, #1
 8017918:	ea8a 0303 	eor.w	r3, sl, r3
 801791c:	8033      	strh	r3, [r6, #0]
 801791e:	f107 0701 	add.w	r7, r7, #1
 8017922:	f106 0602 	add.w	r6, r6, #2
 8017926:	d1e9      	bne.n	80178fc <_DrawBitmap+0x89c>
 8017928:	9b03      	ldr	r3, [sp, #12]
 801792a:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 801792e:	9303      	str	r3, [sp, #12]
 8017930:	9b07      	ldr	r3, [sp, #28]
 8017932:	444b      	add	r3, r9
 8017934:	9307      	str	r3, [sp, #28]
 8017936:	f1bb 0f00 	cmp.w	fp, #0
 801793a:	f43f ad3a 	beq.w	80173b2 <_DrawBitmap+0x352>
 801793e:	9b05      	ldr	r3, [sp, #20]
 8017940:	4a51      	ldr	r2, [pc, #324]	; (8017a88 <_DrawBitmap+0xa28>)
 8017942:	781b      	ldrb	r3, [r3, #0]
 8017944:	5cd4      	ldrb	r4, [r2, r3]
 8017946:	9b05      	ldr	r3, [sp, #20]
 8017948:	3301      	adds	r3, #1
 801794a:	9305      	str	r3, [sp, #20]
 801794c:	f04f 0908 	mov.w	r9, #8
 8017950:	e7c1      	b.n	80178d6 <_DrawBitmap+0x876>
 8017952:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017954:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017958:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801795c:	f8cd b00c 	str.w	fp, [sp, #12]
 8017960:	454d      	cmp	r5, r9
 8017962:	bf28      	it	cs
 8017964:	464d      	movcs	r5, r9
 8017966:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 801796a:	9e02      	ldr	r6, [sp, #8]
 801796c:	9f08      	ldr	r7, [sp, #32]
 801796e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8017972:	469a      	mov	sl, r3
 8017974:	ebc5 0909 	rsb	r9, r5, r9
 8017978:	f1b8 0f00 	cmp.w	r8, #0
 801797c:	d02d      	beq.n	80179da <_DrawBitmap+0x97a>
 801797e:	b944      	cbnz	r4, 8017992 <_DrawBitmap+0x932>
 8017980:	e038      	b.n	80179f4 <_DrawBitmap+0x994>
 8017982:	3d01      	subs	r5, #1
 8017984:	f107 0701 	add.w	r7, r7, #1
 8017988:	f106 0602 	add.w	r6, r6, #2
 801798c:	d012      	beq.n	80179b4 <_DrawBitmap+0x954>
 801798e:	0864      	lsrs	r4, r4, #1
 8017990:	d030      	beq.n	80179f4 <_DrawBitmap+0x994>
 8017992:	07e2      	lsls	r2, r4, #31
 8017994:	d5f5      	bpl.n	8017982 <_DrawBitmap+0x922>
 8017996:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801799a:	4639      	mov	r1, r7
 801799c:	465a      	mov	r2, fp
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	4640      	mov	r0, r8
 80179a2:	4798      	blx	r3
 80179a4:	3d01      	subs	r5, #1
 80179a6:	f8a6 a000 	strh.w	sl, [r6]
 80179aa:	f107 0701 	add.w	r7, r7, #1
 80179ae:	f106 0602 	add.w	r6, r6, #2
 80179b2:	d1ec      	bne.n	801798e <_DrawBitmap+0x92e>
 80179b4:	f1b9 0f00 	cmp.w	r9, #0
 80179b8:	f43f acfb 	beq.w	80173b2 <_DrawBitmap+0x352>
 80179bc:	9a03      	ldr	r2, [sp, #12]
 80179be:	2508      	movs	r5, #8
 80179c0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80179c4:	9203      	str	r2, [sp, #12]
 80179c6:	454d      	cmp	r5, r9
 80179c8:	4a2f      	ldr	r2, [pc, #188]	; (8017a88 <_DrawBitmap+0xa28>)
 80179ca:	bf28      	it	cs
 80179cc:	464d      	movcs	r5, r9
 80179ce:	5cd4      	ldrb	r4, [r2, r3]
 80179d0:	ebc5 0909 	rsb	r9, r5, r9
 80179d4:	f1b8 0f00 	cmp.w	r8, #0
 80179d8:	d1d1      	bne.n	801797e <_DrawBitmap+0x91e>
 80179da:	b914      	cbnz	r4, 80179e2 <_DrawBitmap+0x982>
 80179dc:	e00e      	b.n	80179fc <_DrawBitmap+0x99c>
 80179de:	0864      	lsrs	r4, r4, #1
 80179e0:	d00c      	beq.n	80179fc <_DrawBitmap+0x99c>
 80179e2:	07e3      	lsls	r3, r4, #31
 80179e4:	bf48      	it	mi
 80179e6:	f8a6 a000 	strhmi.w	sl, [r6]
 80179ea:	3d01      	subs	r5, #1
 80179ec:	f106 0602 	add.w	r6, r6, #2
 80179f0:	d1f5      	bne.n	80179de <_DrawBitmap+0x97e>
 80179f2:	e7df      	b.n	80179b4 <_DrawBitmap+0x954>
 80179f4:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 80179f8:	442f      	add	r7, r5
 80179fa:	e7db      	b.n	80179b4 <_DrawBitmap+0x954>
 80179fc:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 8017a00:	e7d8      	b.n	80179b4 <_DrawBitmap+0x954>
 8017a02:	4b22      	ldr	r3, [pc, #136]	; (8017a8c <_DrawBitmap+0xa2c>)
 8017a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	9802      	ldr	r0, [sp, #8]
 8017a0a:	4798      	blx	r3
 8017a0c:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8017a10:	4658      	mov	r0, fp
 8017a12:	e463      	b.n	80172dc <_DrawBitmap+0x27c>
 8017a14:	0924      	lsrs	r4, r4, #4
 8017a16:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8017a1a:	f8a8 3000 	strh.w	r3, [r8]
 8017a1e:	f1ba 0f00 	cmp.w	sl, #0
 8017a22:	f43f adee 	beq.w	8017602 <_DrawBitmap+0x5a2>
 8017a26:	f8da 3008 	ldr.w	r3, [sl, #8]
 8017a2a:	460a      	mov	r2, r1
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	9908      	ldr	r1, [sp, #32]
 8017a30:	4650      	mov	r0, sl
 8017a32:	4798      	blx	r3
 8017a34:	e5e5      	b.n	8017602 <_DrawBitmap+0x5a2>
 8017a36:	9903      	ldr	r1, [sp, #12]
 8017a38:	9b02      	ldr	r3, [sp, #8]
 8017a3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017a3e:	b102      	cbz	r2, 8017a42 <_DrawBitmap+0x9e2>
 8017a40:	801a      	strh	r2, [r3, #0]
 8017a42:	3302      	adds	r3, #2
 8017a44:	42b3      	cmp	r3, r6
 8017a46:	d1f8      	bne.n	8017a3a <_DrawBitmap+0x9da>
 8017a48:	e447      	b.n	80172da <_DrawBitmap+0x27a>
 8017a4a:	4b11      	ldr	r3, [pc, #68]	; (8017a90 <_DrawBitmap+0xa30>)
 8017a4c:	681c      	ldr	r4, [r3, #0]
 8017a4e:	b16c      	cbz	r4, 8017a6c <_DrawBitmap+0xa0c>
 8017a50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017a52:	9301      	str	r3, [sp, #4]
 8017a54:	9b06      	ldr	r3, [sp, #24]
 8017a56:	9300      	str	r3, [sp, #0]
 8017a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017a5c:	9921      	ldr	r1, [sp, #132]	; 0x84
 8017a5e:	9802      	ldr	r0, [sp, #8]
 8017a60:	47a0      	blx	r4
 8017a62:	f7ff bb82 	b.w	801716a <_DrawBitmap+0x10a>
 8017a66:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8017a68:	f7ff bb7b 	b.w	8017162 <_DrawBitmap+0x102>
 8017a6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	f77f ab7b 	ble.w	801716a <_DrawBitmap+0x10a>
 8017a74:	f7ff bbc3 	b.w	80171fe <_DrawBitmap+0x19e>
 8017a78:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017a7a:	2800      	cmp	r0, #0
 8017a7c:	f47f ab72 	bne.w	8017164 <_DrawBitmap+0x104>
 8017a80:	f7ff bb73 	b.w	801716a <_DrawBitmap+0x10a>
 8017a84:	20000014 	.word	0x20000014
 8017a88:	0802760c 	.word	0x0802760c
 8017a8c:	2000003c 	.word	0x2000003c
 8017a90:	20000850 	.word	0x20000850

08017a94 <_GetDevProp>:
 8017a94:	2908      	cmp	r1, #8
 8017a96:	d101      	bne.n	8017a9c <_GetDevProp+0x8>
 8017a98:	2010      	movs	r0, #16
 8017a9a:	4770      	bx	lr
 8017a9c:	6800      	ldr	r0, [r0, #0]
 8017a9e:	b110      	cbz	r0, 8017aa6 <_GetDevProp+0x12>
 8017aa0:	68c3      	ldr	r3, [r0, #12]
 8017aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017aa4:	4718      	bx	r3
 8017aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8017aaa:	4770      	bx	lr

08017aac <_GetPixelIndex>:
 8017aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017aae:	4b0e      	ldr	r3, [pc, #56]	; (8017ae8 <_GetPixelIndex+0x3c>)
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	b083      	sub	sp, #12
 8017ab4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017ab6:	460e      	mov	r6, r1
 8017ab8:	4617      	mov	r7, r2
 8017aba:	f7f9 f921 	bl	8010d00 <GUI_ALLOC_LockH>
 8017abe:	4605      	mov	r5, r0
 8017ac0:	a802      	add	r0, sp, #8
 8017ac2:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8017ac6:	68eb      	ldr	r3, [r5, #12]
 8017ac8:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 8017acc:	f840 5d04 	str.w	r5, [r0, #-4]!
 8017ad0:	1abf      	subs	r7, r7, r2
 8017ad2:	fb03 f307 	mul.w	r3, r3, r7
 8017ad6:	3318      	adds	r3, #24
 8017ad8:	1b34      	subs	r4, r6, r4
 8017ada:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8017ade:	f7f9 f921 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017ae2:	5b28      	ldrh	r0, [r5, r4]
 8017ae4:	b003      	add	sp, #12
 8017ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ae8:	20000014 	.word	0x20000014

08017aec <_SetPixelIndex>:
 8017aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017af0:	4c1b      	ldr	r4, [pc, #108]	; (8017b60 <_SetPixelIndex+0x74>)
 8017af2:	6820      	ldr	r0, [r4, #0]
 8017af4:	b083      	sub	sp, #12
 8017af6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8017af8:	460f      	mov	r7, r1
 8017afa:	4690      	mov	r8, r2
 8017afc:	4699      	mov	r9, r3
 8017afe:	f7f9 f8ff 	bl	8010d00 <GUI_ALLOC_LockH>
 8017b02:	6823      	ldr	r3, [r4, #0]
 8017b04:	9000      	str	r0, [sp, #0]
 8017b06:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017b08:	f7f9 f8fa 	bl	8010d00 <GUI_ALLOC_LockH>
 8017b0c:	ae02      	add	r6, sp, #8
 8017b0e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017b12:	68c1      	ldr	r1, [r0, #12]
 8017b14:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017b18:	f846 0d04 	str.w	r0, [r6, #-4]!
 8017b1c:	ebc2 0208 	rsb	r2, r2, r8
 8017b20:	fb01 f202 	mul.w	r2, r1, r2
 8017b24:	4605      	mov	r5, r0
 8017b26:	3218      	adds	r2, #24
 8017b28:	1b3c      	subs	r4, r7, r4
 8017b2a:	4630      	mov	r0, r6
 8017b2c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017b30:	f7f9 f8f8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017b34:	9b00      	ldr	r3, [sp, #0]
 8017b36:	f825 9004 	strh.w	r9, [r5, r4]
 8017b3a:	6958      	ldr	r0, [r3, #20]
 8017b3c:	b150      	cbz	r0, 8017b54 <_SetPixelIndex+0x68>
 8017b3e:	f7f9 f8df 	bl	8010d00 <GUI_ALLOC_LockH>
 8017b42:	9001      	str	r0, [sp, #4]
 8017b44:	6883      	ldr	r3, [r0, #8]
 8017b46:	4642      	mov	r2, r8
 8017b48:	4639      	mov	r1, r7
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	4798      	blx	r3
 8017b4e:	4630      	mov	r0, r6
 8017b50:	f7f9 f8e8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017b54:	4668      	mov	r0, sp
 8017b56:	f7f9 f8e5 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017b5a:	b003      	add	sp, #12
 8017b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b60:	20000014 	.word	0x20000014

08017b64 <_XorPixel>:
 8017b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b68:	4c1e      	ldr	r4, [pc, #120]	; (8017be4 <_XorPixel+0x80>)
 8017b6a:	6823      	ldr	r3, [r4, #0]
 8017b6c:	b083      	sub	sp, #12
 8017b6e:	4681      	mov	r9, r0
 8017b70:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017b72:	460f      	mov	r7, r1
 8017b74:	4690      	mov	r8, r2
 8017b76:	f7f9 f8c3 	bl	8010d00 <GUI_ALLOC_LockH>
 8017b7a:	6823      	ldr	r3, [r4, #0]
 8017b7c:	9000      	str	r0, [sp, #0]
 8017b7e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017b80:	f7f9 f8be 	bl	8010d00 <GUI_ALLOC_LockH>
 8017b84:	ae02      	add	r6, sp, #8
 8017b86:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8017b8a:	68c2      	ldr	r2, [r0, #12]
 8017b8c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017b90:	f846 0d04 	str.w	r0, [r6, #-4]!
 8017b94:	ebc3 0308 	rsb	r3, r3, r8
 8017b98:	fb02 f303 	mul.w	r3, r2, r3
 8017b9c:	4605      	mov	r5, r0
 8017b9e:	3318      	adds	r3, #24
 8017ba0:	1b3c      	subs	r4, r7, r4
 8017ba2:	4630      	mov	r0, r6
 8017ba4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8017ba8:	f7f9 f8bc 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017bac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017bb0:	689b      	ldr	r3, [r3, #8]
 8017bb2:	4798      	blx	r3
 8017bb4:	9a00      	ldr	r2, [sp, #0]
 8017bb6:	5b2b      	ldrh	r3, [r5, r4]
 8017bb8:	6952      	ldr	r2, [r2, #20]
 8017bba:	4058      	eors	r0, r3
 8017bbc:	5328      	strh	r0, [r5, r4]
 8017bbe:	b15a      	cbz	r2, 8017bd8 <_XorPixel+0x74>
 8017bc0:	4610      	mov	r0, r2
 8017bc2:	f7f9 f89d 	bl	8010d00 <GUI_ALLOC_LockH>
 8017bc6:	9001      	str	r0, [sp, #4]
 8017bc8:	6883      	ldr	r3, [r0, #8]
 8017bca:	4642      	mov	r2, r8
 8017bcc:	4639      	mov	r1, r7
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	4798      	blx	r3
 8017bd2:	4630      	mov	r0, r6
 8017bd4:	f7f9 f8a6 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017bd8:	4668      	mov	r0, sp
 8017bda:	f7f9 f8a3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017bde:	b003      	add	sp, #12
 8017be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017be4:	20000014 	.word	0x20000014

08017be8 <_FillRect>:
 8017be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bec:	4f58      	ldr	r7, [pc, #352]	; (8017d50 <_FillRect+0x168>)
 8017bee:	683c      	ldr	r4, [r7, #0]
 8017bf0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8017bf2:	b089      	sub	sp, #36	; 0x24
 8017bf4:	4683      	mov	fp, r0
 8017bf6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8017bf8:	f8d5 a000 	ldr.w	sl, [r5]
 8017bfc:	4689      	mov	r9, r1
 8017bfe:	4615      	mov	r5, r2
 8017c00:	461e      	mov	r6, r3
 8017c02:	f7f9 f87d 	bl	8010d00 <GUI_ALLOC_LockH>
 8017c06:	683b      	ldr	r3, [r7, #0]
 8017c08:	9006      	str	r0, [sp, #24]
 8017c0a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017c0c:	f7f9 f878 	bl	8010d00 <GUI_ALLOC_LockH>
 8017c10:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017c14:	68c3      	ldr	r3, [r0, #12]
 8017c16:	f10d 0820 	add.w	r8, sp, #32
 8017c1a:	4604      	mov	r4, r0
 8017c1c:	1aaa      	subs	r2, r5, r2
 8017c1e:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8017c22:	f848 4d04 	str.w	r4, [r8, #-4]!
 8017c26:	fb03 f202 	mul.w	r2, r3, r2
 8017c2a:	f102 0118 	add.w	r1, r2, #24
 8017c2e:	ebc0 0209 	rsb	r2, r0, r9
 8017c32:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8017c36:	4640      	mov	r0, r8
 8017c38:	4414      	add	r4, r2
 8017c3a:	f7f9 f873 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017c3e:	9b06      	ldr	r3, [sp, #24]
 8017c40:	6958      	ldr	r0, [r3, #20]
 8017c42:	68db      	ldr	r3, [r3, #12]
 8017c44:	9302      	str	r3, [sp, #8]
 8017c46:	ebc9 0306 	rsb	r3, r9, r6
 8017c4a:	9305      	str	r3, [sp, #20]
 8017c4c:	1c5e      	adds	r6, r3, #1
 8017c4e:	2800      	cmp	r0, #0
 8017c50:	d16e      	bne.n	8017d30 <_FillRect+0x148>
 8017c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017c54:	429d      	cmp	r5, r3
 8017c56:	dc5d      	bgt.n	8017d14 <_FillRect+0x12c>
 8017c58:	fa1f f38a 	uxth.w	r3, sl
 8017c5c:	9304      	str	r3, [sp, #16]
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	7c1b      	ldrb	r3, [r3, #16]
 8017c62:	07db      	lsls	r3, r3, #31
 8017c64:	d55c      	bpl.n	8017d20 <_FillRect+0x138>
 8017c66:	f8db 3010 	ldr.w	r3, [fp, #16]
 8017c6a:	689b      	ldr	r3, [r3, #8]
 8017c6c:	4798      	blx	r3
 8017c6e:	f3c4 0340 	ubfx	r3, r4, #1, #1
 8017c72:	42b3      	cmp	r3, r6
 8017c74:	bf28      	it	cs
 8017c76:	4633      	movcs	r3, r6
 8017c78:	2e03      	cmp	r6, #3
 8017c7a:	bf98      	it	ls
 8017c7c:	4633      	movls	r3, r6
 8017c7e:	b280      	uxth	r0, r0
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d053      	beq.n	8017d2c <_FillRect+0x144>
 8017c84:	8822      	ldrh	r2, [r4, #0]
 8017c86:	46a4      	mov	ip, r4
 8017c88:	4042      	eors	r2, r0
 8017c8a:	2b01      	cmp	r3, #1
 8017c8c:	f82c 2b02 	strh.w	r2, [ip], #2
 8017c90:	d00c      	beq.n	8017cac <_FillRect+0xc4>
 8017c92:	8862      	ldrh	r2, [r4, #2]
 8017c94:	2b03      	cmp	r3, #3
 8017c96:	ea82 0200 	eor.w	r2, r2, r0
 8017c9a:	8062      	strh	r2, [r4, #2]
 8017c9c:	f104 0c04 	add.w	ip, r4, #4
 8017ca0:	d104      	bne.n	8017cac <_FillRect+0xc4>
 8017ca2:	88a2      	ldrh	r2, [r4, #4]
 8017ca4:	4042      	eors	r2, r0
 8017ca6:	80a2      	strh	r2, [r4, #4]
 8017ca8:	f104 0c06 	add.w	ip, r4, #6
 8017cac:	42b3      	cmp	r3, r6
 8017cae:	d02b      	beq.n	8017d08 <_FillRect+0x120>
 8017cb0:	ebc3 0a06 	rsb	sl, r3, r6
 8017cb4:	f1aa 0e02 	sub.w	lr, sl, #2
 8017cb8:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 8017cbc:	f10e 0e01 	add.w	lr, lr, #1
 8017cc0:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8017cc4:	9203      	str	r2, [sp, #12]
 8017cc6:	9a05      	ldr	r2, [sp, #20]
 8017cc8:	4293      	cmp	r3, r2
 8017cca:	d018      	beq.n	8017cfe <_FillRect+0x116>
 8017ccc:	f04f 0900 	mov.w	r9, #0
 8017cd0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017cd4:	f360 090f 	bfi	r9, r0, #0, #16
 8017cd8:	f360 491f 	bfi	r9, r0, #16, #16
 8017cdc:	f1a3 0804 	sub.w	r8, r3, #4
 8017ce0:	2100      	movs	r1, #0
 8017ce2:	f858 2f04 	ldr.w	r2, [r8, #4]!
 8017ce6:	3101      	adds	r1, #1
 8017ce8:	ea89 0202 	eor.w	r2, r9, r2
 8017cec:	458e      	cmp	lr, r1
 8017cee:	f843 2b04 	str.w	r2, [r3], #4
 8017cf2:	d8f6      	bhi.n	8017ce2 <_FillRect+0xfa>
 8017cf4:	9a03      	ldr	r2, [sp, #12]
 8017cf6:	4592      	cmp	sl, r2
 8017cf8:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
 8017cfc:	d004      	beq.n	8017d08 <_FillRect+0x120>
 8017cfe:	f8bc 3000 	ldrh.w	r3, [ip]
 8017d02:	4058      	eors	r0, r3
 8017d04:	f8ac 0000 	strh.w	r0, [ip]
 8017d08:	9b02      	ldr	r3, [sp, #8]
 8017d0a:	441c      	add	r4, r3
 8017d0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017d0e:	3501      	adds	r5, #1
 8017d10:	42ab      	cmp	r3, r5
 8017d12:	daa4      	bge.n	8017c5e <_FillRect+0x76>
 8017d14:	a806      	add	r0, sp, #24
 8017d16:	f7f9 f805 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017d1a:	b009      	add	sp, #36	; 0x24
 8017d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d20:	4632      	mov	r2, r6
 8017d22:	9904      	ldr	r1, [sp, #16]
 8017d24:	4620      	mov	r0, r4
 8017d26:	f7fc f879 	bl	8013e1c <GUI__memset16>
 8017d2a:	e7ed      	b.n	8017d08 <_FillRect+0x120>
 8017d2c:	46a4      	mov	ip, r4
 8017d2e:	e7bf      	b.n	8017cb0 <_FillRect+0xc8>
 8017d30:	f7f8 ffe6 	bl	8010d00 <GUI_ALLOC_LockH>
 8017d34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017d36:	9007      	str	r0, [sp, #28]
 8017d38:	1b5b      	subs	r3, r3, r5
 8017d3a:	3301      	adds	r3, #1
 8017d3c:	9300      	str	r3, [sp, #0]
 8017d3e:	4649      	mov	r1, r9
 8017d40:	4633      	mov	r3, r6
 8017d42:	462a      	mov	r2, r5
 8017d44:	f000 f89a 	bl	8017e7c <GUI_USAGE_AddRect>
 8017d48:	4640      	mov	r0, r8
 8017d4a:	f7f8 ffeb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017d4e:	e780      	b.n	8017c52 <_FillRect+0x6a>
 8017d50:	20000014 	.word	0x20000014

08017d54 <_DrawHLine>:
 8017d54:	b500      	push	{lr}
 8017d56:	b083      	sub	sp, #12
 8017d58:	9200      	str	r2, [sp, #0]
 8017d5a:	f7ff ff45 	bl	8017be8 <_FillRect>
 8017d5e:	b003      	add	sp, #12
 8017d60:	f85d fb04 	ldr.w	pc, [sp], #4

08017d64 <_DrawVLine>:
 8017d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d68:	4f36      	ldr	r7, [pc, #216]	; (8017e44 <_DrawVLine+0xe0>)
 8017d6a:	683c      	ldr	r4, [r7, #0]
 8017d6c:	b085      	sub	sp, #20
 8017d6e:	4681      	mov	r9, r0
 8017d70:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8017d72:	4688      	mov	r8, r1
 8017d74:	4615      	mov	r5, r2
 8017d76:	461e      	mov	r6, r3
 8017d78:	f7f8 ffc2 	bl	8010d00 <GUI_ALLOC_LockH>
 8017d7c:	9001      	str	r0, [sp, #4]
 8017d7e:	6940      	ldr	r0, [r0, #20]
 8017d80:	2800      	cmp	r0, #0
 8017d82:	d13d      	bne.n	8017e00 <_DrawVLine+0x9c>
 8017d84:	683b      	ldr	r3, [r7, #0]
 8017d86:	9002      	str	r0, [sp, #8]
 8017d88:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017d8a:	f7f8 ffb9 	bl	8010d00 <GUI_ALLOC_LockH>
 8017d8e:	4602      	mov	r2, r0
 8017d90:	a804      	add	r0, sp, #16
 8017d92:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 8017d96:	68d3      	ldr	r3, [r2, #12]
 8017d98:	f840 2d04 	str.w	r2, [r0, #-4]!
 8017d9c:	1b2c      	subs	r4, r5, r4
 8017d9e:	fb03 f304 	mul.w	r3, r3, r4
 8017da2:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8017da6:	3318      	adds	r3, #24
 8017da8:	ebc4 0408 	rsb	r4, r4, r8
 8017dac:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8017db0:	18d4      	adds	r4, r2, r3
 8017db2:	f7f8 ffb7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	7c1a      	ldrb	r2, [r3, #16]
 8017dba:	07d2      	lsls	r2, r2, #31
 8017dbc:	d423      	bmi.n	8017e06 <_DrawVLine+0xa2>
 8017dbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017dc0:	9802      	ldr	r0, [sp, #8]
 8017dc2:	9b01      	ldr	r3, [sp, #4]
 8017dc4:	6812      	ldr	r2, [r2, #0]
 8017dc6:	68df      	ldr	r7, [r3, #12]
 8017dc8:	2800      	cmp	r0, #0
 8017dca:	d033      	beq.n	8017e34 <_DrawVLine+0xd0>
 8017dcc:	fa1f f982 	uxth.w	r9, r2
 8017dd0:	e000      	b.n	8017dd4 <_DrawVLine+0x70>
 8017dd2:	9802      	ldr	r0, [sp, #8]
 8017dd4:	6883      	ldr	r3, [r0, #8]
 8017dd6:	462a      	mov	r2, r5
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	4641      	mov	r1, r8
 8017ddc:	3501      	adds	r5, #1
 8017dde:	4798      	blx	r3
 8017de0:	42ae      	cmp	r6, r5
 8017de2:	f8a4 9000 	strh.w	r9, [r4]
 8017de6:	443c      	add	r4, r7
 8017de8:	daf3      	bge.n	8017dd2 <_DrawVLine+0x6e>
 8017dea:	a801      	add	r0, sp, #4
 8017dec:	f7f8 ff9a 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017df0:	9b02      	ldr	r3, [sp, #8]
 8017df2:	b113      	cbz	r3, 8017dfa <_DrawVLine+0x96>
 8017df4:	a802      	add	r0, sp, #8
 8017df6:	f7f8 ff95 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017dfa:	b005      	add	sp, #20
 8017dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e00:	f7f8 ff7e 	bl	8010d00 <GUI_ALLOC_LockH>
 8017e04:	e7be      	b.n	8017d84 <_DrawVLine+0x20>
 8017e06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017e0a:	689b      	ldr	r3, [r3, #8]
 8017e0c:	4798      	blx	r3
 8017e0e:	b287      	uxth	r7, r0
 8017e10:	9b02      	ldr	r3, [sp, #8]
 8017e12:	462a      	mov	r2, r5
 8017e14:	4641      	mov	r1, r8
 8017e16:	3501      	adds	r5, #1
 8017e18:	4618      	mov	r0, r3
 8017e1a:	b113      	cbz	r3, 8017e22 <_DrawVLine+0xbe>
 8017e1c:	689b      	ldr	r3, [r3, #8]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	4798      	blx	r3
 8017e22:	9a01      	ldr	r2, [sp, #4]
 8017e24:	8823      	ldrh	r3, [r4, #0]
 8017e26:	68d2      	ldr	r2, [r2, #12]
 8017e28:	407b      	eors	r3, r7
 8017e2a:	42b5      	cmp	r5, r6
 8017e2c:	8023      	strh	r3, [r4, #0]
 8017e2e:	4414      	add	r4, r2
 8017e30:	ddee      	ble.n	8017e10 <_DrawVLine+0xac>
 8017e32:	e7da      	b.n	8017dea <_DrawVLine+0x86>
 8017e34:	1b73      	subs	r3, r6, r5
 8017e36:	3301      	adds	r3, #1
 8017e38:	b292      	uxth	r2, r2
 8017e3a:	3b01      	subs	r3, #1
 8017e3c:	8022      	strh	r2, [r4, #0]
 8017e3e:	443c      	add	r4, r7
 8017e40:	d1fb      	bne.n	8017e3a <_DrawVLine+0xd6>
 8017e42:	e7d2      	b.n	8017dea <_DrawVLine+0x86>
 8017e44:	20000014 	.word	0x20000014

08017e48 <GUI_USAGE_DecUseCnt>:
 8017e48:	b530      	push	{r4, r5, lr}
 8017e4a:	4605      	mov	r5, r0
 8017e4c:	b083      	sub	sp, #12
 8017e4e:	f7fa ff3f 	bl	8012cd0 <GUI_Lock>
 8017e52:	4628      	mov	r0, r5
 8017e54:	f7f8 ff54 	bl	8010d00 <GUI_ALLOC_LockH>
 8017e58:	ab02      	add	r3, sp, #8
 8017e5a:	8984      	ldrh	r4, [r0, #12]
 8017e5c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8017e60:	3c01      	subs	r4, #1
 8017e62:	b224      	sxth	r4, r4
 8017e64:	8184      	strh	r4, [r0, #12]
 8017e66:	4618      	mov	r0, r3
 8017e68:	f7f8 ff5c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017e6c:	b914      	cbnz	r4, 8017e74 <GUI_USAGE_DecUseCnt+0x2c>
 8017e6e:	4628      	mov	r0, r5
 8017e70:	f7f9 f8dc 	bl	801102c <GUI_ALLOC_Free>
 8017e74:	f7fa ff22 	bl	8012cbc <GUI_Unlock>
 8017e78:	b003      	add	sp, #12
 8017e7a:	bd30      	pop	{r4, r5, pc}

08017e7c <GUI_USAGE_AddRect>:
 8017e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e80:	9c08      	ldr	r4, [sp, #32]
 8017e82:	4605      	mov	r5, r0
 8017e84:	4689      	mov	r9, r1
 8017e86:	4698      	mov	r8, r3
 8017e88:	68ab      	ldr	r3, [r5, #8]
 8017e8a:	4649      	mov	r1, r9
 8017e8c:	685f      	ldr	r7, [r3, #4]
 8017e8e:	4628      	mov	r0, r5
 8017e90:	4643      	mov	r3, r8
 8017e92:	1c56      	adds	r6, r2, #1
 8017e94:	47b8      	blx	r7
 8017e96:	3c01      	subs	r4, #1
 8017e98:	4632      	mov	r2, r6
 8017e9a:	d1f5      	bne.n	8017e88 <GUI_USAGE_AddRect+0xc>
 8017e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017ea0 <GUI_MEMDEV__WriteToActiveOpaque>:
 8017ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ea4:	b0a1      	sub	sp, #132	; 0x84
 8017ea6:	910d      	str	r1, [sp, #52]	; 0x34
 8017ea8:	b910      	cbnz	r0, 8017eb0 <GUI_MEMDEV__WriteToActiveOpaque+0x10>
 8017eaa:	b021      	add	sp, #132	; 0x84
 8017eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eb0:	4692      	mov	sl, r2
 8017eb2:	4607      	mov	r7, r0
 8017eb4:	f7f8 ff24 	bl	8010d00 <GUI_ALLOC_LockH>
 8017eb8:	ab20      	add	r3, sp, #128	; 0x80
 8017eba:	6944      	ldr	r4, [r0, #20]
 8017ebc:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7f8 ff2f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017ec6:	4638      	mov	r0, r7
 8017ec8:	f008 fc5e 	bl	8020788 <GUI_MEMDEV_GetBitsPerPixel>
 8017ecc:	2808      	cmp	r0, #8
 8017ece:	4605      	mov	r5, r0
 8017ed0:	dd02      	ble.n	8017ed8 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 8017ed2:	2c00      	cmp	r4, #0
 8017ed4:	f000 80d9 	beq.w	801808a <GUI_MEMDEV__WriteToActiveOpaque+0x1ea>
 8017ed8:	2301      	movs	r3, #1
 8017eda:	f04f 0b00 	mov.w	fp, #0
 8017ede:	4638      	mov	r0, r7
 8017ee0:	931f      	str	r3, [sp, #124]	; 0x7c
 8017ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8017ee4:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 8017ee8:	f7f8 ff0a 	bl	8010d00 <GUI_ALLOC_LockH>
 8017eec:	6801      	ldr	r1, [r0, #0]
 8017eee:	f8df 8468 	ldr.w	r8, [pc, #1128]	; 8018358 <GUI_MEMDEV__WriteToActiveOpaque+0x4b8>
 8017ef2:	6909      	ldr	r1, [r1, #16]
 8017ef4:	4604      	mov	r4, r0
 8017ef6:	f8d8 0000 	ldr.w	r0, [r8]
 8017efa:	68e3      	ldr	r3, [r4, #12]
 8017efc:	684d      	ldr	r5, [r1, #4]
 8017efe:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8017f02:	930f      	str	r3, [sp, #60]	; 0x3c
 8017f04:	ae20      	add	r6, sp, #128	; 0x80
 8017f06:	6923      	ldr	r3, [r4, #16]
 8017f08:	9114      	str	r1, [sp, #80]	; 0x50
 8017f0a:	7c40      	ldrb	r0, [r0, #17]
 8017f0c:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8017f10:	9309      	str	r3, [sp, #36]	; 0x24
 8017f12:	f846 4d14 	str.w	r4, [r6, #-20]!
 8017f16:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8017f1a:	9116      	str	r1, [sp, #88]	; 0x58
 8017f1c:	f7fd f83c 	bl	8014f98 <GUI_GetBitsPerPixelEx>
 8017f20:	f8d8 1000 	ldr.w	r1, [r8]
 8017f24:	9008      	str	r0, [sp, #32]
 8017f26:	7c48      	ldrb	r0, [r1, #17]
 8017f28:	f7fd f850 	bl	8014fcc <GUI_GetpfIndex2ColorEx>
 8017f2c:	4604      	mov	r4, r0
 8017f2e:	4630      	mov	r0, r6
 8017f30:	f7f8 fef8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8017f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f38:	2a08      	cmp	r2, #8
 8017f3a:	f240 80a0 	bls.w	801807e <GUI_MEMDEV__WriteToActiveOpaque+0x1de>
 8017f3e:	2a10      	cmp	r2, #16
 8017f40:	4613      	mov	r3, r2
 8017f42:	bf8c      	ite	hi
 8017f44:	2304      	movhi	r3, #4
 8017f46:	2302      	movls	r3, #2
 8017f48:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8017f4c:	930e      	str	r3, [sp, #56]	; 0x38
 8017f4e:	42a5      	cmp	r5, r4
 8017f50:	f000 81ac 	beq.w	80182ac <GUI_MEMDEV__WriteToActiveOpaque+0x40c>
 8017f54:	f8d8 3000 	ldr.w	r3, [r8]
 8017f58:	7c58      	ldrb	r0, [r3, #17]
 8017f5a:	f7fd f83f 	bl	8014fdc <GUI_GetpfColor2IndexEx>
 8017f5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017f60:	4606      	mov	r6, r0
 8017f62:	0098      	lsls	r0, r3, #2
 8017f64:	f7f8 feb4 	bl	8010cd0 <GUI_ALLOC_AllocNoInit>
 8017f68:	9012      	str	r0, [sp, #72]	; 0x48
 8017f6a:	2800      	cmp	r0, #0
 8017f6c:	d09d      	beq.n	8017eaa <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8017f6e:	4638      	mov	r0, r7
 8017f70:	f009 fc68 	bl	8021844 <GUI_MEMDEV_GetDataPtr>
 8017f74:	4607      	mov	r7, r0
 8017f76:	f1b9 0f00 	cmp.w	r9, #0
 8017f7a:	f000 80f5 	beq.w	8018168 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 8017f7e:	4648      	mov	r0, r9
 8017f80:	f7f8 febe 	bl	8010d00 <GUI_ALLOC_LockH>
 8017f84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017f86:	901c      	str	r0, [sp, #112]	; 0x70
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	f340 818b 	ble.w	80182a4 <GUI_MEMDEV__WriteToActiveOpaque+0x404>
 8017f8e:	2300      	movs	r3, #0
 8017f90:	930c      	str	r3, [sp, #48]	; 0x30
 8017f92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f94:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8017f98:	18fb      	adds	r3, r7, r3
 8017f9a:	9315      	str	r3, [sp, #84]	; 0x54
 8017f9c:	ab1d      	add	r3, sp, #116	; 0x74
 8017f9e:	9311      	str	r3, [sp, #68]	; 0x44
 8017fa0:	f04f 0801 	mov.w	r8, #1
 8017fa4:	4619      	mov	r1, r3
 8017fa6:	6883      	ldr	r3, [r0, #8]
 8017fa8:	2200      	movs	r2, #0
 8017faa:	921d      	str	r2, [sp, #116]	; 0x74
 8017fac:	695b      	ldr	r3, [r3, #20]
 8017fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017fb0:	4798      	blx	r3
 8017fb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017fb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017fb6:	1a9b      	subs	r3, r3, r2
 8017fb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8017fba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017fbc:	4283      	cmp	r3, r0
 8017fbe:	4604      	mov	r4, r0
 8017fc0:	f000 8131 	beq.w	8018226 <GUI_MEMDEV__WriteToActiveOpaque+0x386>
 8017fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fc6:	2b01      	cmp	r3, #1
 8017fc8:	f000 80f2 	beq.w	80181b0 <GUI_MEMDEV__WriteToActiveOpaque+0x310>
 8017fcc:	2800      	cmp	r0, #0
 8017fce:	d045      	beq.n	801805c <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 8017fd0:	ab1a      	add	r3, sp, #104	; 0x68
 8017fd2:	9313      	str	r3, [sp, #76]	; 0x4c
 8017fd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017fd6:	f7f8 fe93 	bl	8010d00 <GUI_ALLOC_LockH>
 8017fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fdc:	901a      	str	r0, [sp, #104]	; 0x68
 8017fde:	2b08      	cmp	r3, #8
 8017fe0:	4607      	mov	r7, r0
 8017fe2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017fe4:	f240 80d4 	bls.w	8018190 <GUI_MEMDEV__WriteToActiveOpaque+0x2f0>
 8017fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017fec:	46a3      	mov	fp, r4
 8017fee:	fb02 1a03 	mla	sl, r2, r3, r1
 8017ff2:	4681      	mov	r9, r0
 8017ff4:	f83a 0b02 	ldrh.w	r0, [sl], #2
 8017ff8:	47a8      	blx	r5
 8017ffa:	47b0      	blx	r6
 8017ffc:	f1bb 0b01 	subs.w	fp, fp, #1
 8018000:	f849 0b04 	str.w	r0, [r9], #4
 8018004:	d1f6      	bne.n	8017ff4 <GUI_MEMDEV__WriteToActiveOpaque+0x154>
 8018006:	9b08      	ldr	r3, [sp, #32]
 8018008:	2b1f      	cmp	r3, #31
 801800a:	d804      	bhi.n	8018016 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 801800c:	4638      	mov	r0, r7
 801800e:	461a      	mov	r2, r3
 8018010:	4621      	mov	r1, r4
 8018012:	f007 fe07 	bl	801fc24 <GUI__CompactPixelIndices>
 8018016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018018:	9205      	str	r2, [sp, #20]
 801801a:	2200      	movs	r2, #0
 801801c:	9203      	str	r2, [sp, #12]
 801801e:	9a08      	ldr	r2, [sp, #32]
 8018020:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018022:	9202      	str	r2, [sp, #8]
 8018024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018026:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018028:	9910      	ldr	r1, [sp, #64]	; 0x40
 801802a:	9304      	str	r3, [sp, #16]
 801802c:	4410      	add	r0, r2
 801802e:	2301      	movs	r3, #1
 8018030:	4622      	mov	r2, r4
 8018032:	f8cd 8004 	str.w	r8, [sp, #4]
 8018036:	f8cd 8000 	str.w	r8, [sp]
 801803a:	f7fc fb0b 	bl	8014654 <LCD_DrawBitmap>
 801803e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018040:	f7f8 fe70 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018044:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018046:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018048:	6882      	ldr	r2, [r0, #8]
 801804a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801804c:	6957      	ldr	r7, [r2, #20]
 801804e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018050:	441c      	add	r4, r3
 8018052:	941d      	str	r4, [sp, #116]	; 0x74
 8018054:	47b8      	blx	r7
 8018056:	4604      	mov	r4, r0
 8018058:	2800      	cmp	r0, #0
 801805a:	d1bb      	bne.n	8017fd4 <GUI_MEMDEV__WriteToActiveOpaque+0x134>
 801805c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801805e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018062:	440a      	add	r2, r1
 8018064:	9215      	str	r2, [sp, #84]	; 0x54
 8018066:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018068:	3201      	adds	r2, #1
 801806a:	9210      	str	r2, [sp, #64]	; 0x40
 801806c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801806e:	3301      	adds	r3, #1
 8018070:	429a      	cmp	r2, r3
 8018072:	930c      	str	r3, [sp, #48]	; 0x30
 8018074:	f000 8116 	beq.w	80182a4 <GUI_MEMDEV__WriteToActiveOpaque+0x404>
 8018078:	981c      	ldr	r0, [sp, #112]	; 0x70
 801807a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801807c:	e793      	b.n	8017fa6 <GUI_MEMDEV__WriteToActiveOpaque+0x106>
 801807e:	2a01      	cmp	r2, #1
 8018080:	d16e      	bne.n	8018160 <GUI_MEMDEV__WriteToActiveOpaque+0x2c0>
 8018082:	ab1e      	add	r3, sp, #120	; 0x78
 8018084:	920e      	str	r2, [sp, #56]	; 0x38
 8018086:	930a      	str	r3, [sp, #40]	; 0x28
 8018088:	e761      	b.n	8017f4e <GUI_MEMDEV__WriteToActiveOpaque+0xae>
 801808a:	4638      	mov	r0, r7
 801808c:	f7f8 fe38 	bl	8010d00 <GUI_ALLOC_LockH>
 8018090:	ab20      	add	r3, sp, #128	; 0x80
 8018092:	f9b0 8008 	ldrsh.w	r8, [r0, #8]
 8018096:	f843 0d10 	str.w	r0, [r3, #-16]!
 801809a:	4602      	mov	r2, r0
 801809c:	6801      	ldr	r1, [r0, #0]
 801809e:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80180a2:	9008      	str	r0, [sp, #32]
 80180a4:	4618      	mov	r0, r3
 80180a6:	690e      	ldr	r6, [r1, #16]
 80180a8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80180ac:	9209      	str	r2, [sp, #36]	; 0x24
 80180ae:	930e      	str	r3, [sp, #56]	; 0x38
 80180b0:	f7f8 fe38 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80180b4:	48a8      	ldr	r0, [pc, #672]	; (8018358 <GUI_MEMDEV__WriteToActiveOpaque+0x4b8>)
 80180b6:	49a9      	ldr	r1, [pc, #676]	; (801835c <GUI_MEMDEV__WriteToActiveOpaque+0x4bc>)
 80180b8:	6800      	ldr	r0, [r0, #0]
 80180ba:	6873      	ldr	r3, [r6, #4]
 80180bc:	7c40      	ldrb	r0, [r0, #17]
 80180be:	930c      	str	r3, [sp, #48]	; 0x30
 80180c0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80180c4:	690c      	ldr	r4, [r1, #16]
 80180c6:	6823      	ldr	r3, [r4, #0]
 80180c8:	930a      	str	r3, [sp, #40]	; 0x28
 80180ca:	f7fc ff65 	bl	8014f98 <GUI_GetBitsPerPixelEx>
 80180ce:	2808      	cmp	r0, #8
 80180d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80180d2:	d940      	bls.n	8018156 <GUI_MEMDEV__WriteToActiveOpaque+0x2b6>
 80180d4:	2810      	cmp	r0, #16
 80180d6:	bf8c      	ite	hi
 80180d8:	2320      	movhi	r3, #32
 80180da:	2310      	movls	r3, #16
 80180dc:	9309      	str	r3, [sp, #36]	; 0x24
 80180de:	bf8c      	ite	hi
 80180e0:	f04f 0904 	movhi.w	r9, #4
 80180e4:	f04f 0902 	movls.w	r9, #2
 80180e8:	42a6      	cmp	r6, r4
 80180ea:	f000 822d 	beq.w	8018548 <GUI_MEMDEV__WriteToActiveOpaque+0x6a8>
 80180ee:	2d20      	cmp	r5, #32
 80180f0:	f000 819e 	beq.w	8018430 <GUI_MEMDEV__WriteToActiveOpaque+0x590>
 80180f4:	2d10      	cmp	r5, #16
 80180f6:	f47f aed8 	bne.w	8017eaa <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 80180fa:	fb08 f009 	mul.w	r0, r8, r9
 80180fe:	f7f8 fde7 	bl	8010cd0 <GUI_ALLOC_AllocNoInit>
 8018102:	9010      	str	r0, [sp, #64]	; 0x40
 8018104:	2800      	cmp	r0, #0
 8018106:	f43f aed0 	beq.w	8017eaa <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801810a:	f7f8 fdf9 	bl	8010d00 <GUI_ALLOC_LockH>
 801810e:	901e      	str	r0, [sp, #120]	; 0x78
 8018110:	4638      	mov	r0, r7
 8018112:	f7f8 fdf5 	bl	8010d00 <GUI_ALLOC_LockH>
 8018116:	901c      	str	r0, [sp, #112]	; 0x70
 8018118:	6923      	ldr	r3, [r4, #16]
 801811a:	f100 0218 	add.w	r2, r0, #24
 801811e:	920b      	str	r2, [sp, #44]	; 0x2c
 8018120:	2b00      	cmp	r3, #0
 8018122:	f000 8222 	beq.w	801856a <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 8018126:	6973      	ldr	r3, [r6, #20]
 8018128:	2b00      	cmp	r3, #0
 801812a:	f000 821e 	beq.w	801856a <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 801812e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8018132:	0080      	lsls	r0, r0, #2
 8018134:	f7f8 fdcc 	bl	8010cd0 <GUI_ALLOC_AllocNoInit>
 8018138:	900f      	str	r0, [sp, #60]	; 0x3c
 801813a:	2800      	cmp	r0, #0
 801813c:	f040 8269 	bne.w	8018612 <GUI_MEMDEV__WriteToActiveOpaque+0x772>
 8018140:	901d      	str	r0, [sp, #116]	; 0x74
 8018142:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018144:	f7f8 fdee 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018148:	a81e      	add	r0, sp, #120	; 0x78
 801814a:	f7f8 fdeb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801814e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018150:	f7f8 ff6c 	bl	801102c <GUI_ALLOC_Free>
 8018154:	e6a9      	b.n	8017eaa <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8018156:	2308      	movs	r3, #8
 8018158:	9309      	str	r3, [sp, #36]	; 0x24
 801815a:	f04f 0901 	mov.w	r9, #1
 801815e:	e7c3      	b.n	80180e8 <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 8018160:	930e      	str	r3, [sp, #56]	; 0x38
 8018162:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8018166:	e6f2      	b.n	8017f4e <GUI_MEMDEV__WriteToActiveOpaque+0xae>
 8018168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801816a:	9305      	str	r3, [sp, #20]
 801816c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801816e:	9303      	str	r3, [sp, #12]
 8018170:	2401      	movs	r4, #1
 8018172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018174:	9004      	str	r0, [sp, #16]
 8018176:	9302      	str	r3, [sp, #8]
 8018178:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801817a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801817c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801817e:	9401      	str	r4, [sp, #4]
 8018180:	4651      	mov	r1, sl
 8018182:	9400      	str	r4, [sp, #0]
 8018184:	f7fc fa66 	bl	8014654 <LCD_DrawBitmap>
 8018188:	9812      	ldr	r0, [sp, #72]	; 0x48
 801818a:	f7f8 ff4f 	bl	801102c <GUI_ALLOC_Free>
 801818e:	e68c      	b.n	8017eaa <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8018190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018192:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018194:	46a1      	mov	r9, r4
 8018196:	fb02 1b03 	mla	fp, r2, r3, r1
 801819a:	4682      	mov	sl, r0
 801819c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80181a0:	47a8      	blx	r5
 80181a2:	47b0      	blx	r6
 80181a4:	f1b9 0901 	subs.w	r9, r9, #1
 80181a8:	f84a 0b04 	str.w	r0, [sl], #4
 80181ac:	d1f6      	bne.n	801819c <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 80181ae:	e72a      	b.n	8018006 <GUI_MEMDEV__WriteToActiveOpaque+0x166>
 80181b0:	2800      	cmp	r0, #0
 80181b2:	f43f af53 	beq.w	801805c <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 80181b6:	9617      	str	r6, [sp, #92]	; 0x5c
 80181b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80181ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80181bc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80181c0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80181c4:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80181c8:	9513      	str	r5, [sp, #76]	; 0x4c
 80181ca:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 80181ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80181d0:	9605      	str	r6, [sp, #20]
 80181d2:	f00e 0007 	and.w	r0, lr, #7
 80181d6:	9006      	str	r0, [sp, #24]
 80181d8:	eb0a 000e 	add.w	r0, sl, lr
 80181dc:	f1be 0f00 	cmp.w	lr, #0
 80181e0:	bfb8      	it	lt
 80181e2:	f10e 0e07 	addlt.w	lr, lr, #7
 80181e6:	eb05 0eee 	add.w	lr, r5, lr, asr #3
 80181ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80181ec:	f8cd e010 	str.w	lr, [sp, #16]
 80181f0:	4622      	mov	r2, r4
 80181f2:	2301      	movs	r3, #1
 80181f4:	4649      	mov	r1, r9
 80181f6:	9503      	str	r5, [sp, #12]
 80181f8:	f8cd 8008 	str.w	r8, [sp, #8]
 80181fc:	f8cd 8004 	str.w	r8, [sp, #4]
 8018200:	f8cd 8000 	str.w	r8, [sp]
 8018204:	f7fc f918 	bl	8014438 <LCD__DrawBitmap_1bpp>
 8018208:	981c      	ldr	r0, [sp, #112]	; 0x70
 801820a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801820c:	6882      	ldr	r2, [r0, #8]
 801820e:	441c      	add	r4, r3
 8018210:	4659      	mov	r1, fp
 8018212:	6953      	ldr	r3, [r2, #20]
 8018214:	941d      	str	r4, [sp, #116]	; 0x74
 8018216:	463a      	mov	r2, r7
 8018218:	4798      	blx	r3
 801821a:	4604      	mov	r4, r0
 801821c:	2800      	cmp	r0, #0
 801821e:	d1d4      	bne.n	80181ca <GUI_MEMDEV__WriteToActiveOpaque+0x32a>
 8018220:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018222:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8018224:	e71a      	b.n	801805c <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 8018226:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018228:	f7f8 fd6a 	bl	8010d00 <GUI_ALLOC_LockH>
 801822c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801822e:	901a      	str	r0, [sp, #104]	; 0x68
 8018230:	2b08      	cmp	r3, #8
 8018232:	4681      	mov	r9, r0
 8018234:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018236:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801823a:	4604      	mov	r4, r0
 801823c:	d929      	bls.n	8018292 <GUI_MEMDEV__WriteToActiveOpaque+0x3f2>
 801823e:	f83a 0b02 	ldrh.w	r0, [sl], #2
 8018242:	47a8      	blx	r5
 8018244:	47b0      	blx	r6
 8018246:	3f01      	subs	r7, #1
 8018248:	f844 0b04 	str.w	r0, [r4], #4
 801824c:	d1f7      	bne.n	801823e <GUI_MEMDEV__WriteToActiveOpaque+0x39e>
 801824e:	9b08      	ldr	r3, [sp, #32]
 8018250:	2b1f      	cmp	r3, #31
 8018252:	d804      	bhi.n	801825e <GUI_MEMDEV__WriteToActiveOpaque+0x3be>
 8018254:	4648      	mov	r0, r9
 8018256:	461a      	mov	r2, r3
 8018258:	9914      	ldr	r1, [sp, #80]	; 0x50
 801825a:	f007 fce3 	bl	801fc24 <GUI__CompactPixelIndices>
 801825e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018260:	9205      	str	r2, [sp, #20]
 8018262:	ab20      	add	r3, sp, #128	; 0x80
 8018264:	461a      	mov	r2, r3
 8018266:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018268:	f852 3d18 	ldr.w	r3, [r2, #-24]!
 801826c:	9304      	str	r3, [sp, #16]
 801826e:	4614      	mov	r4, r2
 8018270:	2200      	movs	r2, #0
 8018272:	9203      	str	r2, [sp, #12]
 8018274:	9a08      	ldr	r2, [sp, #32]
 8018276:	9202      	str	r2, [sp, #8]
 8018278:	f8cd 8004 	str.w	r8, [sp, #4]
 801827c:	f8cd 8000 	str.w	r8, [sp]
 8018280:	2301      	movs	r3, #1
 8018282:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018284:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018286:	f7fc f9e5 	bl	8014654 <LCD_DrawBitmap>
 801828a:	4620      	mov	r0, r4
 801828c:	f7f8 fd4a 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018290:	e6e4      	b.n	801805c <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 8018292:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8018296:	47a8      	blx	r5
 8018298:	47b0      	blx	r6
 801829a:	3f01      	subs	r7, #1
 801829c:	f844 0b04 	str.w	r0, [r4], #4
 80182a0:	d1f7      	bne.n	8018292 <GUI_MEMDEV__WriteToActiveOpaque+0x3f2>
 80182a2:	e7d4      	b.n	801824e <GUI_MEMDEV__WriteToActiveOpaque+0x3ae>
 80182a4:	a81c      	add	r0, sp, #112	; 0x70
 80182a6:	f7f8 fd3d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80182aa:	e76d      	b.n	8018188 <GUI_MEMDEV__WriteToActiveOpaque+0x2e8>
 80182ac:	4638      	mov	r0, r7
 80182ae:	f009 fac9 	bl	8021844 <GUI_MEMDEV_GetDataPtr>
 80182b2:	4607      	mov	r7, r0
 80182b4:	f1b9 0f00 	cmp.w	r9, #0
 80182b8:	f000 80a9 	beq.w	801840e <GUI_MEMDEV__WriteToActiveOpaque+0x56e>
 80182bc:	4648      	mov	r0, r9
 80182be:	f7f8 fd1f 	bl	8010d00 <GUI_ALLOC_LockH>
 80182c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80182c4:	901c      	str	r0, [sp, #112]	; 0x70
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	f340 809d 	ble.w	8018406 <GUI_MEMDEV__WriteToActiveOpaque+0x566>
 80182cc:	2600      	movs	r6, #0
 80182ce:	ab1d      	add	r3, sp, #116	; 0x74
 80182d0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80182d4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80182d8:	46b1      	mov	r9, r6
 80182da:	2501      	movs	r5, #1
 80182dc:	4698      	mov	r8, r3
 80182de:	6883      	ldr	r3, [r0, #8]
 80182e0:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
 80182e4:	695b      	ldr	r3, [r3, #20]
 80182e6:	4632      	mov	r2, r6
 80182e8:	4641      	mov	r1, r8
 80182ea:	4798      	blx	r3
 80182ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80182ee:	4283      	cmp	r3, r0
 80182f0:	4604      	mov	r4, r0
 80182f2:	d02d      	beq.n	8018350 <GUI_MEMDEV__WriteToActiveOpaque+0x4b0>
 80182f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182f6:	2b01      	cmp	r3, #1
 80182f8:	d055      	beq.n	80183a6 <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 80182fa:	b308      	cbz	r0, 8018340 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 80182fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80182fe:	eb03 0b06 	add.w	fp, r3, r6
 8018302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018304:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018306:	9305      	str	r3, [sp, #20]
 8018308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801830a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801830c:	9203      	str	r2, [sp, #12]
 801830e:	fb03 7300 	mla	r3, r3, r0, r7
 8018312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018314:	9202      	str	r2, [sp, #8]
 8018316:	9304      	str	r3, [sp, #16]
 8018318:	4622      	mov	r2, r4
 801831a:	4450      	add	r0, sl
 801831c:	2301      	movs	r3, #1
 801831e:	4659      	mov	r1, fp
 8018320:	9501      	str	r5, [sp, #4]
 8018322:	9500      	str	r5, [sp, #0]
 8018324:	f7fc f996 	bl	8014654 <LCD_DrawBitmap>
 8018328:	981c      	ldr	r0, [sp, #112]	; 0x70
 801832a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801832c:	6882      	ldr	r2, [r0, #8]
 801832e:	441c      	add	r4, r3
 8018330:	4641      	mov	r1, r8
 8018332:	6953      	ldr	r3, [r2, #20]
 8018334:	941d      	str	r4, [sp, #116]	; 0x74
 8018336:	4632      	mov	r2, r6
 8018338:	4798      	blx	r3
 801833a:	4604      	mov	r4, r0
 801833c:	2800      	cmp	r0, #0
 801833e:	d1e0      	bne.n	8018302 <GUI_MEMDEV__WriteToActiveOpaque+0x462>
 8018340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018342:	3601      	adds	r6, #1
 8018344:	441f      	add	r7, r3
 8018346:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018348:	42b3      	cmp	r3, r6
 801834a:	dd5c      	ble.n	8018406 <GUI_MEMDEV__WriteToActiveOpaque+0x566>
 801834c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801834e:	e7c6      	b.n	80182de <GUI_MEMDEV__WriteToActiveOpaque+0x43e>
 8018350:	9708      	str	r7, [sp, #32]
 8018352:	46b3      	mov	fp, r6
 8018354:	461f      	mov	r7, r3
 8018356:	e004      	b.n	8018362 <GUI_MEMDEV__WriteToActiveOpaque+0x4c2>
 8018358:	20000014 	.word	0x20000014
 801835c:	20035df8 	.word	0x20035df8
 8018360:	46a3      	mov	fp, r4
 8018362:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018364:	6883      	ldr	r3, [r0, #8]
 8018366:	f10b 0401 	add.w	r4, fp, #1
 801836a:	695b      	ldr	r3, [r3, #20]
 801836c:	4622      	mov	r2, r4
 801836e:	4641      	mov	r1, r8
 8018370:	4798      	blx	r3
 8018372:	4287      	cmp	r7, r0
 8018374:	d0f4      	beq.n	8018360 <GUI_MEMDEV__WriteToActiveOpaque+0x4c0>
 8018376:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018378:	9102      	str	r1, [sp, #8]
 801837a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801837c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801837e:	9f08      	ldr	r7, [sp, #32]
 8018380:	9205      	str	r2, [sp, #20]
 8018382:	ebc6 030b 	rsb	r3, r6, fp
 8018386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018388:	9704      	str	r7, [sp, #16]
 801838a:	4431      	add	r1, r6
 801838c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801838e:	9203      	str	r2, [sp, #12]
 8018390:	3301      	adds	r3, #1
 8018392:	9501      	str	r5, [sp, #4]
 8018394:	9500      	str	r5, [sp, #0]
 8018396:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018398:	4650      	mov	r0, sl
 801839a:	fb06 7703 	mla	r7, r6, r3, r7
 801839e:	4626      	mov	r6, r4
 80183a0:	f7fc f958 	bl	8014654 <LCD_DrawBitmap>
 80183a4:	e7cf      	b.n	8018346 <GUI_MEMDEV__WriteToActiveOpaque+0x4a6>
 80183a6:	2800      	cmp	r0, #0
 80183a8:	d0ca      	beq.n	8018340 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 80183aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183ac:	9608      	str	r6, [sp, #32]
 80183ae:	eb03 0b06 	add.w	fp, r3, r6
 80183b2:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 80183b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80183b8:	9005      	str	r0, [sp, #20]
 80183ba:	f00e 0007 	and.w	r0, lr, #7
 80183be:	9006      	str	r0, [sp, #24]
 80183c0:	eb0a 000e 	add.w	r0, sl, lr
 80183c4:	f1be 0f00 	cmp.w	lr, #0
 80183c8:	bfb8      	it	lt
 80183ca:	f10e 0e07 	addlt.w	lr, lr, #7
 80183ce:	eb07 0eee 	add.w	lr, r7, lr, asr #3
 80183d2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80183d4:	f8cd e010 	str.w	lr, [sp, #16]
 80183d8:	4622      	mov	r2, r4
 80183da:	2301      	movs	r3, #1
 80183dc:	4659      	mov	r1, fp
 80183de:	9603      	str	r6, [sp, #12]
 80183e0:	9502      	str	r5, [sp, #8]
 80183e2:	9501      	str	r5, [sp, #4]
 80183e4:	9500      	str	r5, [sp, #0]
 80183e6:	f7fc f827 	bl	8014438 <LCD__DrawBitmap_1bpp>
 80183ea:	981c      	ldr	r0, [sp, #112]	; 0x70
 80183ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80183ee:	6882      	ldr	r2, [r0, #8]
 80183f0:	441c      	add	r4, r3
 80183f2:	4641      	mov	r1, r8
 80183f4:	6953      	ldr	r3, [r2, #20]
 80183f6:	941d      	str	r4, [sp, #116]	; 0x74
 80183f8:	9a08      	ldr	r2, [sp, #32]
 80183fa:	4798      	blx	r3
 80183fc:	4604      	mov	r4, r0
 80183fe:	2800      	cmp	r0, #0
 8018400:	d1d7      	bne.n	80183b2 <GUI_MEMDEV__WriteToActiveOpaque+0x512>
 8018402:	9e08      	ldr	r6, [sp, #32]
 8018404:	e79c      	b.n	8018340 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 8018406:	a81c      	add	r0, sp, #112	; 0x70
 8018408:	f7f8 fc8c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801840c:	e54d      	b.n	8017eaa <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801840e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018410:	9305      	str	r3, [sp, #20]
 8018412:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018414:	9303      	str	r3, [sp, #12]
 8018416:	2401      	movs	r4, #1
 8018418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801841a:	9004      	str	r0, [sp, #16]
 801841c:	9302      	str	r3, [sp, #8]
 801841e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018420:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018422:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018424:	9401      	str	r4, [sp, #4]
 8018426:	4651      	mov	r1, sl
 8018428:	9400      	str	r4, [sp, #0]
 801842a:	f7fc f913 	bl	8014654 <LCD_DrawBitmap>
 801842e:	e53c      	b.n	8017eaa <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8018430:	fb09 f008 	mul.w	r0, r9, r8
 8018434:	f7f8 fc4c 	bl	8010cd0 <GUI_ALLOC_AllocNoInit>
 8018438:	900b      	str	r0, [sp, #44]	; 0x2c
 801843a:	2800      	cmp	r0, #0
 801843c:	f43f ad35 	beq.w	8017eaa <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8018440:	f7f8 fc5e 	bl	8010d00 <GUI_ALLOC_LockH>
 8018444:	901e      	str	r0, [sp, #120]	; 0x78
 8018446:	4638      	mov	r0, r7
 8018448:	f7f8 fc5a 	bl	8010d00 <GUI_ALLOC_LockH>
 801844c:	901c      	str	r0, [sp, #112]	; 0x70
 801844e:	6925      	ldr	r5, [r4, #16]
 8018450:	f100 0718 	add.w	r7, r0, #24
 8018454:	b345      	cbz	r5, 80184a8 <GUI_MEMDEV__WriteToActiveOpaque+0x608>
 8018456:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 801845a:	2601      	movs	r6, #1
 801845c:	e019      	b.n	8018492 <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 801845e:	f1b9 0f04 	cmp.w	r9, #4
 8018462:	d019      	beq.n	8018498 <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 8018464:	f1b9 0f01 	cmp.w	r9, #1
 8018468:	d016      	beq.n	8018498 <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 801846a:	2200      	movs	r2, #0
 801846c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801846e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018470:	9002      	str	r0, [sp, #8]
 8018472:	2301      	movs	r3, #1
 8018474:	9205      	str	r2, [sp, #20]
 8018476:	9203      	str	r2, [sp, #12]
 8018478:	9104      	str	r1, [sp, #16]
 801847a:	9601      	str	r6, [sp, #4]
 801847c:	4651      	mov	r1, sl
 801847e:	9600      	str	r6, [sp, #0]
 8018480:	4642      	mov	r2, r8
 8018482:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018484:	449a      	add	sl, r3
 8018486:	f7fc f8e5 	bl	8014654 <LCD_DrawBitmap>
 801848a:	9b08      	ldr	r3, [sp, #32]
 801848c:	3b01      	subs	r3, #1
 801848e:	9308      	str	r3, [sp, #32]
 8018490:	d050      	beq.n	8018534 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 8018492:	f1b9 0f02 	cmp.w	r9, #2
 8018496:	d1e2      	bne.n	801845e <GUI_MEMDEV__WriteToActiveOpaque+0x5be>
 8018498:	4638      	mov	r0, r7
 801849a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801849c:	6925      	ldr	r5, [r4, #16]
 801849e:	464b      	mov	r3, r9
 80184a0:	4642      	mov	r2, r8
 80184a2:	47a8      	blx	r5
 80184a4:	445f      	add	r7, fp
 80184a6:	e7e0      	b.n	801846a <GUI_MEMDEV__WriteToActiveOpaque+0x5ca>
 80184a8:	950c      	str	r5, [sp, #48]	; 0x30
 80184aa:	2601      	movs	r6, #1
 80184ac:	9c08      	ldr	r4, [sp, #32]
 80184ae:	e014      	b.n	80184da <GUI_MEMDEV__WriteToActiveOpaque+0x63a>
 80184b0:	f1b9 0f04 	cmp.w	r9, #4
 80184b4:	f000 818d 	beq.w	80187d2 <GUI_MEMDEV__WriteToActiveOpaque+0x932>
 80184b8:	4599      	cmp	r9, r3
 80184ba:	f000 8135 	beq.w	8018728 <GUI_MEMDEV__WriteToActiveOpaque+0x888>
 80184be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80184c0:	9505      	str	r5, [sp, #20]
 80184c2:	9503      	str	r5, [sp, #12]
 80184c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80184c6:	9502      	str	r5, [sp, #8]
 80184c8:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80184ca:	9601      	str	r6, [sp, #4]
 80184cc:	9600      	str	r6, [sp, #0]
 80184ce:	9504      	str	r5, [sp, #16]
 80184d0:	f7fc f8c0 	bl	8014654 <LCD_DrawBitmap>
 80184d4:	3c01      	subs	r4, #1
 80184d6:	d02d      	beq.n	8018534 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 80184d8:	46da      	mov	sl, fp
 80184da:	2301      	movs	r3, #1
 80184dc:	f1b9 0f02 	cmp.w	r9, #2
 80184e0:	4651      	mov	r1, sl
 80184e2:	4642      	mov	r2, r8
 80184e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80184e6:	eb0a 0b03 	add.w	fp, sl, r3
 80184ea:	d1e1      	bne.n	80184b0 <GUI_MEMDEV__WriteToActiveOpaque+0x610>
 80184ec:	9408      	str	r4, [sp, #32]
 80184ee:	ea4f 0588 	mov.w	r5, r8, lsl #2
 80184f2:	2401      	movs	r4, #1
 80184f4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80184f8:	46bb      	mov	fp, r7
 80184fa:	4646      	mov	r6, r8
 80184fc:	f85b 0b04 	ldr.w	r0, [fp], #4
 8018500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018502:	4798      	blx	r3
 8018504:	3e01      	subs	r6, #1
 8018506:	f829 0b02 	strh.w	r0, [r9], #2
 801850a:	d1f7      	bne.n	80184fc <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 801850c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801850e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018510:	9202      	str	r2, [sp, #8]
 8018512:	9304      	str	r3, [sp, #16]
 8018514:	4651      	mov	r1, sl
 8018516:	2301      	movs	r3, #1
 8018518:	9605      	str	r6, [sp, #20]
 801851a:	9603      	str	r6, [sp, #12]
 801851c:	9401      	str	r4, [sp, #4]
 801851e:	9400      	str	r4, [sp, #0]
 8018520:	4642      	mov	r2, r8
 8018522:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018524:	449a      	add	sl, r3
 8018526:	f7fc f895 	bl	8014654 <LCD_DrawBitmap>
 801852a:	9b08      	ldr	r3, [sp, #32]
 801852c:	3b01      	subs	r3, #1
 801852e:	442f      	add	r7, r5
 8018530:	9308      	str	r3, [sp, #32]
 8018532:	d1df      	bne.n	80184f4 <GUI_MEMDEV__WriteToActiveOpaque+0x654>
 8018534:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018536:	f7f8 fbf5 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801853a:	a81e      	add	r0, sp, #120	; 0x78
 801853c:	f7f8 fbf2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018540:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018542:	f7f8 fd73 	bl	801102c <GUI_ALLOC_Free>
 8018546:	e4b0      	b.n	8017eaa <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 8018548:	2401      	movs	r4, #1
 801854a:	3218      	adds	r2, #24
 801854c:	2600      	movs	r6, #0
 801854e:	9204      	str	r2, [sp, #16]
 8018550:	f8cd b00c 	str.w	fp, [sp, #12]
 8018554:	9502      	str	r5, [sp, #8]
 8018556:	9b08      	ldr	r3, [sp, #32]
 8018558:	980d      	ldr	r0, [sp, #52]	; 0x34
 801855a:	9605      	str	r6, [sp, #20]
 801855c:	4642      	mov	r2, r8
 801855e:	4651      	mov	r1, sl
 8018560:	9401      	str	r4, [sp, #4]
 8018562:	9400      	str	r4, [sp, #0]
 8018564:	f7fc f876 	bl	8014654 <LCD_DrawBitmap>
 8018568:	e49f      	b.n	8017eaa <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801856a:	2500      	movs	r5, #0
 801856c:	2601      	movs	r6, #1
 801856e:	9c08      	ldr	r4, [sp, #32]
 8018570:	e016      	b.n	80185a0 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 8018572:	f1b9 0f04 	cmp.w	r9, #4
 8018576:	f000 80fc 	beq.w	8018772 <GUI_MEMDEV__WriteToActiveOpaque+0x8d2>
 801857a:	4599      	cmp	r9, r3
 801857c:	f000 80a4 	beq.w	80186c8 <GUI_MEMDEV__WriteToActiveOpaque+0x828>
 8018580:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8018582:	9708      	str	r7, [sp, #32]
 8018584:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018586:	9702      	str	r7, [sp, #8]
 8018588:	9f08      	ldr	r7, [sp, #32]
 801858a:	9505      	str	r5, [sp, #20]
 801858c:	9503      	str	r5, [sp, #12]
 801858e:	9601      	str	r6, [sp, #4]
 8018590:	9600      	str	r6, [sp, #0]
 8018592:	9704      	str	r7, [sp, #16]
 8018594:	f7fc f85e 	bl	8014654 <LCD_DrawBitmap>
 8018598:	3c01      	subs	r4, #1
 801859a:	f43f add2 	beq.w	8018142 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 801859e:	46da      	mov	sl, fp
 80185a0:	2301      	movs	r3, #1
 80185a2:	f1b9 0f02 	cmp.w	r9, #2
 80185a6:	4651      	mov	r1, sl
 80185a8:	4642      	mov	r2, r8
 80185aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80185ac:	eb0a 0b03 	add.w	fp, sl, r3
 80185b0:	d1df      	bne.n	8018572 <GUI_MEMDEV__WriteToActiveOpaque+0x6d2>
 80185b2:	ea4f 0648 	mov.w	r6, r8, lsl #1
 80185b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80185b8:	9408      	str	r4, [sp, #32]
 80185ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80185bc:	960a      	str	r6, [sp, #40]	; 0x28
 80185be:	2401      	movs	r4, #1
 80185c0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80185c2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80185c6:	46c1      	mov	r9, r8
 80185c8:	f83b 0b02 	ldrh.w	r0, [fp], #2
 80185cc:	47a8      	blx	r5
 80185ce:	47b8      	blx	r7
 80185d0:	f1b9 0901 	subs.w	r9, r9, #1
 80185d4:	f826 0b02 	strh.w	r0, [r6], #2
 80185d8:	d1f6      	bne.n	80185c8 <GUI_MEMDEV__WriteToActiveOpaque+0x728>
 80185da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80185dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80185de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185e0:	9302      	str	r3, [sp, #8]
 80185e2:	46b6      	mov	lr, r6
 80185e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80185e6:	9204      	str	r2, [sp, #16]
 80185e8:	2301      	movs	r3, #1
 80185ea:	4651      	mov	r1, sl
 80185ec:	44b6      	add	lr, r6
 80185ee:	f8cd 9014 	str.w	r9, [sp, #20]
 80185f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80185f6:	9401      	str	r4, [sp, #4]
 80185f8:	9400      	str	r4, [sp, #0]
 80185fa:	4642      	mov	r2, r8
 80185fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80185fe:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8018602:	449a      	add	sl, r3
 8018604:	f7fc f826 	bl	8014654 <LCD_DrawBitmap>
 8018608:	9b08      	ldr	r3, [sp, #32]
 801860a:	3b01      	subs	r3, #1
 801860c:	9308      	str	r3, [sp, #32]
 801860e:	d1d7      	bne.n	80185c0 <GUI_MEMDEV__WriteToActiveOpaque+0x720>
 8018610:	e597      	b.n	8018142 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 8018612:	f7f8 fb75 	bl	8010d00 <GUI_ALLOC_LockH>
 8018616:	901d      	str	r0, [sp, #116]	; 0x74
 8018618:	2800      	cmp	r0, #0
 801861a:	f43f ad92 	beq.w	8018142 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 801861e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8018622:	4637      	mov	r7, r6
 8018624:	930a      	str	r3, [sp, #40]	; 0x28
 8018626:	2501      	movs	r5, #1
 8018628:	940c      	str	r4, [sp, #48]	; 0x30
 801862a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801862c:	e019      	b.n	8018662 <GUI_MEMDEV__WriteToActiveOpaque+0x7c2>
 801862e:	f1b9 0f04 	cmp.w	r9, #4
 8018632:	d030      	beq.n	8018696 <GUI_MEMDEV__WriteToActiveOpaque+0x7f6>
 8018634:	f1b9 0f01 	cmp.w	r9, #1
 8018638:	d028      	beq.n	801868c <GUI_MEMDEV__WriteToActiveOpaque+0x7ec>
 801863a:	2200      	movs	r2, #0
 801863c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801863e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018640:	9002      	str	r0, [sp, #8]
 8018642:	2301      	movs	r3, #1
 8018644:	9205      	str	r2, [sp, #20]
 8018646:	9203      	str	r2, [sp, #12]
 8018648:	9104      	str	r1, [sp, #16]
 801864a:	9501      	str	r5, [sp, #4]
 801864c:	4651      	mov	r1, sl
 801864e:	9500      	str	r5, [sp, #0]
 8018650:	4642      	mov	r2, r8
 8018652:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018654:	449a      	add	sl, r3
 8018656:	f7fb fffd 	bl	8014654 <LCD_DrawBitmap>
 801865a:	9b08      	ldr	r3, [sp, #32]
 801865c:	3b01      	subs	r3, #1
 801865e:	9308      	str	r3, [sp, #32]
 8018660:	d02b      	beq.n	80186ba <GUI_MEMDEV__WriteToActiveOpaque+0x81a>
 8018662:	f1b9 0f02 	cmp.w	r9, #2
 8018666:	d1e2      	bne.n	801862e <GUI_MEMDEV__WriteToActiveOpaque+0x78e>
 8018668:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 801866c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801866e:	464b      	mov	r3, r9
 8018670:	4642      	mov	r2, r8
 8018672:	4630      	mov	r0, r6
 8018674:	697c      	ldr	r4, [r7, #20]
 8018676:	47a0      	blx	r4
 8018678:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801867a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801867c:	4426      	add	r6, r4
 801867e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018680:	4659      	mov	r1, fp
 8018682:	464b      	mov	r3, r9
 8018684:	4642      	mov	r2, r8
 8018686:	6924      	ldr	r4, [r4, #16]
 8018688:	47a0      	blx	r4
 801868a:	e7d6      	b.n	801863a <GUI_MEMDEV__WriteToActiveOpaque+0x79a>
 801868c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8018690:	991d      	ldr	r1, [sp, #116]	; 0x74
 8018692:	2302      	movs	r3, #2
 8018694:	e7ec      	b.n	8018670 <GUI_MEMDEV__WriteToActiveOpaque+0x7d0>
 8018696:	4630      	mov	r0, r6
 8018698:	991d      	ldr	r1, [sp, #116]	; 0x74
 801869a:	697c      	ldr	r4, [r7, #20]
 801869c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 80186a0:	2302      	movs	r3, #2
 80186a2:	4642      	mov	r2, r8
 80186a4:	47a0      	blx	r4
 80186a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80186a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80186aa:	6924      	ldr	r4, [r4, #16]
 80186ac:	464b      	mov	r3, r9
 80186ae:	4659      	mov	r1, fp
 80186b0:	4642      	mov	r2, r8
 80186b2:	47a0      	blx	r4
 80186b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186b6:	441e      	add	r6, r3
 80186b8:	e7bf      	b.n	801863a <GUI_MEMDEV__WriteToActiveOpaque+0x79a>
 80186ba:	a81d      	add	r0, sp, #116	; 0x74
 80186bc:	f7f8 fb32 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80186c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80186c2:	f7f8 fcb3 	bl	801102c <GUI_ALLOC_Free>
 80186c6:	e53c      	b.n	8018142 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 80186c8:	fa08 f603 	lsl.w	r6, r8, r3
 80186cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80186ce:	9408      	str	r4, [sp, #32]
 80186d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80186d2:	960a      	str	r6, [sp, #40]	; 0x28
 80186d4:	464c      	mov	r4, r9
 80186d6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80186d8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80186dc:	46c1      	mov	r9, r8
 80186de:	f83b 0b02 	ldrh.w	r0, [fp], #2
 80186e2:	47a8      	blx	r5
 80186e4:	47b8      	blx	r7
 80186e6:	f1b9 0901 	subs.w	r9, r9, #1
 80186ea:	f806 0b01 	strb.w	r0, [r6], #1
 80186ee:	d1f6      	bne.n	80186de <GUI_MEMDEV__WriteToActiveOpaque+0x83e>
 80186f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80186f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80186f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186f6:	9302      	str	r3, [sp, #8]
 80186f8:	46b6      	mov	lr, r6
 80186fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80186fc:	9204      	str	r2, [sp, #16]
 80186fe:	2301      	movs	r3, #1
 8018700:	4651      	mov	r1, sl
 8018702:	44b6      	add	lr, r6
 8018704:	f8cd 9014 	str.w	r9, [sp, #20]
 8018708:	f8cd 900c 	str.w	r9, [sp, #12]
 801870c:	9401      	str	r4, [sp, #4]
 801870e:	9400      	str	r4, [sp, #0]
 8018710:	4642      	mov	r2, r8
 8018712:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018714:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8018718:	449a      	add	sl, r3
 801871a:	f7fb ff9b 	bl	8014654 <LCD_DrawBitmap>
 801871e:	9b08      	ldr	r3, [sp, #32]
 8018720:	3b01      	subs	r3, #1
 8018722:	9308      	str	r3, [sp, #32]
 8018724:	d1d7      	bne.n	80186d6 <GUI_MEMDEV__WriteToActiveOpaque+0x836>
 8018726:	e50c      	b.n	8018142 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 8018728:	9408      	str	r4, [sp, #32]
 801872a:	ea4f 0588 	mov.w	r5, r8, lsl #2
 801872e:	464c      	mov	r4, r9
 8018730:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8018734:	46bb      	mov	fp, r7
 8018736:	4646      	mov	r6, r8
 8018738:	f85b 0b04 	ldr.w	r0, [fp], #4
 801873c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801873e:	4798      	blx	r3
 8018740:	3e01      	subs	r6, #1
 8018742:	f809 0b01 	strb.w	r0, [r9], #1
 8018746:	d1f7      	bne.n	8018738 <GUI_MEMDEV__WriteToActiveOpaque+0x898>
 8018748:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801874a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801874c:	9202      	str	r2, [sp, #8]
 801874e:	9304      	str	r3, [sp, #16]
 8018750:	4651      	mov	r1, sl
 8018752:	2301      	movs	r3, #1
 8018754:	9605      	str	r6, [sp, #20]
 8018756:	9603      	str	r6, [sp, #12]
 8018758:	9401      	str	r4, [sp, #4]
 801875a:	9400      	str	r4, [sp, #0]
 801875c:	4642      	mov	r2, r8
 801875e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018760:	449a      	add	sl, r3
 8018762:	f7fb ff77 	bl	8014654 <LCD_DrawBitmap>
 8018766:	9b08      	ldr	r3, [sp, #32]
 8018768:	3b01      	subs	r3, #1
 801876a:	442f      	add	r7, r5
 801876c:	9308      	str	r3, [sp, #32]
 801876e:	d1df      	bne.n	8018730 <GUI_MEMDEV__WriteToActiveOpaque+0x890>
 8018770:	e6e0      	b.n	8018534 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 8018772:	ea4f 0648 	mov.w	r6, r8, lsl #1
 8018776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018778:	9408      	str	r4, [sp, #32]
 801877a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801877c:	960a      	str	r6, [sp, #40]	; 0x28
 801877e:	2401      	movs	r4, #1
 8018780:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8018782:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8018786:	46c1      	mov	r9, r8
 8018788:	f83b 0b02 	ldrh.w	r0, [fp], #2
 801878c:	47a8      	blx	r5
 801878e:	47b8      	blx	r7
 8018790:	f1b9 0901 	subs.w	r9, r9, #1
 8018794:	f846 0b04 	str.w	r0, [r6], #4
 8018798:	d1f6      	bne.n	8018788 <GUI_MEMDEV__WriteToActiveOpaque+0x8e8>
 801879a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801879c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801879e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187a0:	9302      	str	r3, [sp, #8]
 80187a2:	46b6      	mov	lr, r6
 80187a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80187a6:	9204      	str	r2, [sp, #16]
 80187a8:	2301      	movs	r3, #1
 80187aa:	4651      	mov	r1, sl
 80187ac:	44b6      	add	lr, r6
 80187ae:	f8cd 9014 	str.w	r9, [sp, #20]
 80187b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80187b6:	9401      	str	r4, [sp, #4]
 80187b8:	9400      	str	r4, [sp, #0]
 80187ba:	4642      	mov	r2, r8
 80187bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80187be:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80187c2:	449a      	add	sl, r3
 80187c4:	f7fb ff46 	bl	8014654 <LCD_DrawBitmap>
 80187c8:	9b08      	ldr	r3, [sp, #32]
 80187ca:	3b01      	subs	r3, #1
 80187cc:	9308      	str	r3, [sp, #32]
 80187ce:	d1d7      	bne.n	8018780 <GUI_MEMDEV__WriteToActiveOpaque+0x8e0>
 80187d0:	e4b7      	b.n	8018142 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 80187d2:	9408      	str	r4, [sp, #32]
 80187d4:	ea4f 0588 	mov.w	r5, r8, lsl #2
 80187d8:	2401      	movs	r4, #1
 80187da:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80187de:	46bb      	mov	fp, r7
 80187e0:	4646      	mov	r6, r8
 80187e2:	f85b 0b04 	ldr.w	r0, [fp], #4
 80187e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80187e8:	4798      	blx	r3
 80187ea:	3e01      	subs	r6, #1
 80187ec:	f849 0b04 	str.w	r0, [r9], #4
 80187f0:	d1f7      	bne.n	80187e2 <GUI_MEMDEV__WriteToActiveOpaque+0x942>
 80187f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80187f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187f6:	9202      	str	r2, [sp, #8]
 80187f8:	9304      	str	r3, [sp, #16]
 80187fa:	4651      	mov	r1, sl
 80187fc:	2301      	movs	r3, #1
 80187fe:	9605      	str	r6, [sp, #20]
 8018800:	9603      	str	r6, [sp, #12]
 8018802:	9401      	str	r4, [sp, #4]
 8018804:	9400      	str	r4, [sp, #0]
 8018806:	4642      	mov	r2, r8
 8018808:	980d      	ldr	r0, [sp, #52]	; 0x34
 801880a:	449a      	add	sl, r3
 801880c:	f7fb ff22 	bl	8014654 <LCD_DrawBitmap>
 8018810:	9b08      	ldr	r3, [sp, #32]
 8018812:	3b01      	subs	r3, #1
 8018814:	442f      	add	r7, r5
 8018816:	9308      	str	r3, [sp, #32]
 8018818:	d1df      	bne.n	80187da <GUI_MEMDEV__WriteToActiveOpaque+0x93a>
 801881a:	e68b      	b.n	8018534 <GUI_MEMDEV__WriteToActiveOpaque+0x694>

0801881c <_OnExit>:
 801881c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018820:	4d1a      	ldr	r5, [pc, #104]	; (801888c <_OnExit+0x70>)
 8018822:	4b1b      	ldr	r3, [pc, #108]	; (8018890 <_OnExit+0x74>)
 8018824:	f8df e094 	ldr.w	lr, [pc, #148]	; 80188bc <_OnExit+0xa0>
 8018828:	f8df c094 	ldr.w	ip, [pc, #148]	; 80188c0 <_OnExit+0xa4>
 801882c:	4919      	ldr	r1, [pc, #100]	; (8018894 <_OnExit+0x78>)
 801882e:	4a1a      	ldr	r2, [pc, #104]	; (8018898 <_OnExit+0x7c>)
 8018830:	4f1a      	ldr	r7, [pc, #104]	; (801889c <_OnExit+0x80>)
 8018832:	4e1b      	ldr	r6, [pc, #108]	; (80188a0 <_OnExit+0x84>)
 8018834:	2400      	movs	r4, #0
 8018836:	602c      	str	r4, [r5, #0]
 8018838:	4d1a      	ldr	r5, [pc, #104]	; (80188a4 <_OnExit+0x88>)
 801883a:	f8cc 4000 	str.w	r4, [ip]
 801883e:	f8ce 4000 	str.w	r4, [lr]
 8018842:	6034      	str	r4, [r6, #0]
 8018844:	600c      	str	r4, [r1, #0]
 8018846:	604c      	str	r4, [r1, #4]
 8018848:	6014      	str	r4, [r2, #0]
 801884a:	6054      	str	r4, [r2, #4]
 801884c:	4621      	mov	r1, r4
 801884e:	f103 000c 	add.w	r0, r3, #12
 8018852:	603c      	str	r4, [r7, #0]
 8018854:	682e      	ldr	r6, [r5, #0]
 8018856:	701c      	strb	r4, [r3, #0]
 8018858:	2218      	movs	r2, #24
 801885a:	605c      	str	r4, [r3, #4]
 801885c:	609c      	str	r4, [r3, #8]
 801885e:	47b0      	blx	r6
 8018860:	4b11      	ldr	r3, [pc, #68]	; (80188a8 <_OnExit+0x8c>)
 8018862:	4a12      	ldr	r2, [pc, #72]	; (80188ac <_OnExit+0x90>)
 8018864:	601c      	str	r4, [r3, #0]
 8018866:	6014      	str	r4, [r2, #0]
 8018868:	605c      	str	r4, [r3, #4]
 801886a:	4621      	mov	r1, r4
 801886c:	682b      	ldr	r3, [r5, #0]
 801886e:	4810      	ldr	r0, [pc, #64]	; (80188b0 <_OnExit+0x94>)
 8018870:	2210      	movs	r2, #16
 8018872:	4798      	blx	r3
 8018874:	682b      	ldr	r3, [r5, #0]
 8018876:	480f      	ldr	r0, [pc, #60]	; (80188b4 <_OnExit+0x98>)
 8018878:	4621      	mov	r1, r4
 801887a:	2210      	movs	r2, #16
 801887c:	4798      	blx	r3
 801887e:	682b      	ldr	r3, [r5, #0]
 8018880:	480d      	ldr	r0, [pc, #52]	; (80188b8 <_OnExit+0x9c>)
 8018882:	4621      	mov	r1, r4
 8018884:	2210      	movs	r2, #16
 8018886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801888a:	4718      	bx	r3
 801888c:	20035e48 	.word	0x20035e48
 8018890:	20000854 	.word	0x20000854
 8018894:	20035e68 	.word	0x20035e68
 8018898:	20035e58 	.word	0x20035e58
 801889c:	20035e74 	.word	0x20035e74
 80188a0:	20035e54 	.word	0x20035e54
 80188a4:	20000040 	.word	0x20000040
 80188a8:	20035e80 	.word	0x20035e80
 80188ac:	20035e64 	.word	0x20035e64
 80188b0:	20035e98 	.word	0x20035e98
 80188b4:	20035ea8 	.word	0x20035ea8
 80188b8:	20035e88 	.word	0x20035e88
 80188bc:	20035e7c 	.word	0x20035e7c
 80188c0:	20035e60 	.word	0x20035e60

080188c4 <_Findy1>:
 80188c4:	2800      	cmp	r0, #0
 80188c6:	d064      	beq.n	8018992 <_Findy1+0xce>
 80188c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188ca:	460e      	mov	r6, r1
 80188cc:	b085      	sub	sp, #20
 80188ce:	4617      	mov	r7, r2
 80188d0:	4604      	mov	r4, r0
 80188d2:	4620      	mov	r0, r4
 80188d4:	f7f8 fa14 	bl	8010d00 <GUI_ALLOC_LockH>
 80188d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80188da:	9001      	str	r0, [sp, #4]
 80188dc:	07a2      	lsls	r2, r4, #30
 80188de:	d524      	bpl.n	801892a <_Findy1+0x66>
 80188e0:	2f00      	cmp	r7, #0
 80188e2:	d040      	beq.n	8018966 <_Findy1+0xa2>
 80188e4:	ad02      	add	r5, sp, #8
 80188e6:	4601      	mov	r1, r0
 80188e8:	463a      	mov	r2, r7
 80188ea:	4628      	mov	r0, r5
 80188ec:	f7fb fa28 	bl	8013d40 <GUI__IntersectRects>
 80188f0:	4629      	mov	r1, r5
 80188f2:	4630      	mov	r0, r6
 80188f4:	f7f8 ff16 	bl	8011724 <GUI_RectsIntersect>
 80188f8:	b368      	cbz	r0, 8018956 <_Findy1+0x92>
 80188fa:	07e3      	lsls	r3, r4, #31
 80188fc:	9801      	ldr	r0, [sp, #4]
 80188fe:	d41c      	bmi.n	801893a <_Findy1+0x76>
 8018900:	2f00      	cmp	r7, #0
 8018902:	d043      	beq.n	801898c <_Findy1+0xc8>
 8018904:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018908:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801890c:	4293      	cmp	r3, r2
 801890e:	bfb8      	it	lt
 8018910:	4613      	movlt	r3, r2
 8018912:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8018916:	4293      	cmp	r3, r2
 8018918:	dd2a      	ble.n	8018970 <_Findy1+0xac>
 801891a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801891e:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 8018922:	429a      	cmp	r2, r3
 8018924:	db01      	blt.n	801892a <_Findy1+0x66>
 8018926:	3b01      	subs	r3, #1
 8018928:	80f3      	strh	r3, [r6, #6]
 801892a:	6a04      	ldr	r4, [r0, #32]
 801892c:	a801      	add	r0, sp, #4
 801892e:	f7f8 f9f9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018932:	2c00      	cmp	r4, #0
 8018934:	d1cd      	bne.n	80188d2 <_Findy1+0xe>
 8018936:	b005      	add	sp, #20
 8018938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801893a:	69c4      	ldr	r4, [r0, #28]
 801893c:	2c00      	cmp	r4, #0
 801893e:	d0f4      	beq.n	801892a <_Findy1+0x66>
 8018940:	4620      	mov	r0, r4
 8018942:	462a      	mov	r2, r5
 8018944:	4631      	mov	r1, r6
 8018946:	f7ff ffbd 	bl	80188c4 <_Findy1>
 801894a:	4620      	mov	r0, r4
 801894c:	f7f8 f9ce 	bl	8010cec <GUI_ALLOC_h2p>
 8018950:	6a04      	ldr	r4, [r0, #32]
 8018952:	2c00      	cmp	r4, #0
 8018954:	d1f4      	bne.n	8018940 <_Findy1+0x7c>
 8018956:	9801      	ldr	r0, [sp, #4]
 8018958:	6a04      	ldr	r4, [r0, #32]
 801895a:	a801      	add	r0, sp, #4
 801895c:	f7f8 f9e2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018960:	2c00      	cmp	r4, #0
 8018962:	d1b6      	bne.n	80188d2 <_Findy1+0xe>
 8018964:	e7e7      	b.n	8018936 <_Findy1+0x72>
 8018966:	c803      	ldmia	r0, {r0, r1}
 8018968:	ad02      	add	r5, sp, #8
 801896a:	e885 0003 	stmia.w	r5, {r0, r1}
 801896e:	e7bf      	b.n	80188f0 <_Findy1+0x2c>
 8018970:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018974:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 8018978:	429a      	cmp	r2, r3
 801897a:	ddd6      	ble.n	801892a <_Findy1+0x66>
 801897c:	6a04      	ldr	r4, [r0, #32]
 801897e:	80f3      	strh	r3, [r6, #6]
 8018980:	a801      	add	r0, sp, #4
 8018982:	f7f8 f9cf 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018986:	2c00      	cmp	r4, #0
 8018988:	d1a3      	bne.n	80188d2 <_Findy1+0xe>
 801898a:	e7d4      	b.n	8018936 <_Findy1+0x72>
 801898c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018990:	e7bf      	b.n	8018912 <_Findy1+0x4e>
 8018992:	4770      	bx	lr

08018994 <_Findx0>:
 8018994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018998:	4604      	mov	r4, r0
 801899a:	b084      	sub	sp, #16
 801899c:	2800      	cmp	r0, #0
 801899e:	d04a      	beq.n	8018a36 <_Findx0+0xa2>
 80189a0:	460f      	mov	r7, r1
 80189a2:	4690      	mov	r8, r2
 80189a4:	2600      	movs	r6, #0
 80189a6:	e00c      	b.n	80189c2 <_Findx0+0x2e>
 80189a8:	07e3      	lsls	r3, r4, #31
 80189aa:	d430      	bmi.n	8018a0e <_Findx0+0x7a>
 80189ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80189b0:	9801      	ldr	r0, [sp, #4]
 80189b2:	3301      	adds	r3, #1
 80189b4:	803b      	strh	r3, [r7, #0]
 80189b6:	2601      	movs	r6, #1
 80189b8:	6a04      	ldr	r4, [r0, #32]
 80189ba:	a801      	add	r0, sp, #4
 80189bc:	f7f8 f9b2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80189c0:	b1e4      	cbz	r4, 80189fc <_Findx0+0x68>
 80189c2:	4620      	mov	r0, r4
 80189c4:	f7f8 f99c 	bl	8010d00 <GUI_ALLOC_LockH>
 80189c8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80189ca:	9001      	str	r0, [sp, #4]
 80189cc:	07a2      	lsls	r2, r4, #30
 80189ce:	d5f3      	bpl.n	80189b8 <_Findx0+0x24>
 80189d0:	f1b8 0f00 	cmp.w	r8, #0
 80189d4:	d016      	beq.n	8018a04 <_Findx0+0x70>
 80189d6:	ad02      	add	r5, sp, #8
 80189d8:	4601      	mov	r1, r0
 80189da:	4642      	mov	r2, r8
 80189dc:	4628      	mov	r0, r5
 80189de:	f7fb f9af 	bl	8013d40 <GUI__IntersectRects>
 80189e2:	4629      	mov	r1, r5
 80189e4:	4638      	mov	r0, r7
 80189e6:	f7f8 fe9d 	bl	8011724 <GUI_RectsIntersect>
 80189ea:	2800      	cmp	r0, #0
 80189ec:	d1dc      	bne.n	80189a8 <_Findx0+0x14>
 80189ee:	9801      	ldr	r0, [sp, #4]
 80189f0:	6a04      	ldr	r4, [r0, #32]
 80189f2:	a801      	add	r0, sp, #4
 80189f4:	f7f8 f996 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80189f8:	2c00      	cmp	r4, #0
 80189fa:	d1e2      	bne.n	80189c2 <_Findx0+0x2e>
 80189fc:	4630      	mov	r0, r6
 80189fe:	b004      	add	sp, #16
 8018a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a04:	c803      	ldmia	r0, {r0, r1}
 8018a06:	ad02      	add	r5, sp, #8
 8018a08:	e885 0003 	stmia.w	r5, {r0, r1}
 8018a0c:	e7e9      	b.n	80189e2 <_Findx0+0x4e>
 8018a0e:	9801      	ldr	r0, [sp, #4]
 8018a10:	69c4      	ldr	r4, [r0, #28]
 8018a12:	2c00      	cmp	r4, #0
 8018a14:	d0d0      	beq.n	80189b8 <_Findx0+0x24>
 8018a16:	462a      	mov	r2, r5
 8018a18:	4639      	mov	r1, r7
 8018a1a:	4620      	mov	r0, r4
 8018a1c:	f7ff ffba 	bl	8018994 <_Findx0>
 8018a20:	2800      	cmp	r0, #0
 8018a22:	4620      	mov	r0, r4
 8018a24:	bf18      	it	ne
 8018a26:	2601      	movne	r6, #1
 8018a28:	f7f8 f960 	bl	8010cec <GUI_ALLOC_h2p>
 8018a2c:	6a04      	ldr	r4, [r0, #32]
 8018a2e:	2c00      	cmp	r4, #0
 8018a30:	d1f1      	bne.n	8018a16 <_Findx0+0x82>
 8018a32:	9801      	ldr	r0, [sp, #4]
 8018a34:	e7dc      	b.n	80189f0 <_Findx0+0x5c>
 8018a36:	4606      	mov	r6, r0
 8018a38:	e7e0      	b.n	80189fc <_Findx0+0x68>
 8018a3a:	bf00      	nop

08018a3c <_Findx1>:
 8018a3c:	2800      	cmp	r0, #0
 8018a3e:	d044      	beq.n	8018aca <_Findx1+0x8e>
 8018a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a42:	460e      	mov	r6, r1
 8018a44:	b085      	sub	sp, #20
 8018a46:	4617      	mov	r7, r2
 8018a48:	4604      	mov	r4, r0
 8018a4a:	e00b      	b.n	8018a64 <_Findx1+0x28>
 8018a4c:	07e3      	lsls	r3, r4, #31
 8018a4e:	d42b      	bmi.n	8018aa8 <_Findx1+0x6c>
 8018a50:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018a54:	9801      	ldr	r0, [sp, #4]
 8018a56:	3b01      	subs	r3, #1
 8018a58:	80b3      	strh	r3, [r6, #4]
 8018a5a:	6a04      	ldr	r4, [r0, #32]
 8018a5c:	a801      	add	r0, sp, #4
 8018a5e:	f7f8 f961 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018a62:	b1d4      	cbz	r4, 8018a9a <_Findx1+0x5e>
 8018a64:	4620      	mov	r0, r4
 8018a66:	f7f8 f94b 	bl	8010d00 <GUI_ALLOC_LockH>
 8018a6a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018a6c:	9001      	str	r0, [sp, #4]
 8018a6e:	07a2      	lsls	r2, r4, #30
 8018a70:	d5f3      	bpl.n	8018a5a <_Findx1+0x1e>
 8018a72:	b1a7      	cbz	r7, 8018a9e <_Findx1+0x62>
 8018a74:	ad02      	add	r5, sp, #8
 8018a76:	4601      	mov	r1, r0
 8018a78:	463a      	mov	r2, r7
 8018a7a:	4628      	mov	r0, r5
 8018a7c:	f7fb f960 	bl	8013d40 <GUI__IntersectRects>
 8018a80:	4629      	mov	r1, r5
 8018a82:	4630      	mov	r0, r6
 8018a84:	f7f8 fe4e 	bl	8011724 <GUI_RectsIntersect>
 8018a88:	2800      	cmp	r0, #0
 8018a8a:	d1df      	bne.n	8018a4c <_Findx1+0x10>
 8018a8c:	9801      	ldr	r0, [sp, #4]
 8018a8e:	6a04      	ldr	r4, [r0, #32]
 8018a90:	a801      	add	r0, sp, #4
 8018a92:	f7f8 f947 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018a96:	2c00      	cmp	r4, #0
 8018a98:	d1e4      	bne.n	8018a64 <_Findx1+0x28>
 8018a9a:	b005      	add	sp, #20
 8018a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a9e:	c803      	ldmia	r0, {r0, r1}
 8018aa0:	ad02      	add	r5, sp, #8
 8018aa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8018aa6:	e7eb      	b.n	8018a80 <_Findx1+0x44>
 8018aa8:	9801      	ldr	r0, [sp, #4]
 8018aaa:	69c4      	ldr	r4, [r0, #28]
 8018aac:	2c00      	cmp	r4, #0
 8018aae:	d0d4      	beq.n	8018a5a <_Findx1+0x1e>
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	462a      	mov	r2, r5
 8018ab4:	4631      	mov	r1, r6
 8018ab6:	f7ff ffc1 	bl	8018a3c <_Findx1>
 8018aba:	4620      	mov	r0, r4
 8018abc:	f7f8 f916 	bl	8010cec <GUI_ALLOC_h2p>
 8018ac0:	6a04      	ldr	r4, [r0, #32]
 8018ac2:	2c00      	cmp	r4, #0
 8018ac4:	d1f4      	bne.n	8018ab0 <_Findx1+0x74>
 8018ac6:	9801      	ldr	r0, [sp, #4]
 8018ac8:	e7e1      	b.n	8018a8e <_Findx1+0x52>
 8018aca:	4770      	bx	lr

08018acc <_Paint1Trans>:
 8018acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ad0:	4d29      	ldr	r5, [pc, #164]	; (8018b78 <_Paint1Trans+0xac>)
 8018ad2:	682b      	ldr	r3, [r5, #0]
 8018ad4:	b083      	sub	sp, #12
 8018ad6:	4606      	mov	r6, r0
 8018ad8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8018ada:	f7f8 f911 	bl	8010d00 <GUI_ALLOC_LockH>
 8018ade:	9000      	str	r0, [sp, #0]
 8018ae0:	4630      	mov	r0, r6
 8018ae2:	f7f8 f90d 	bl	8010d00 <GUI_ALLOC_LockH>
 8018ae6:	4601      	mov	r1, r0
 8018ae8:	9800      	ldr	r0, [sp, #0]
 8018aea:	9101      	str	r1, [sp, #4]
 8018aec:	3008      	adds	r0, #8
 8018aee:	f7f8 fe19 	bl	8011724 <GUI_RectsIntersect>
 8018af2:	b950      	cbnz	r0, 8018b0a <_Paint1Trans+0x3e>
 8018af4:	4604      	mov	r4, r0
 8018af6:	4668      	mov	r0, sp
 8018af8:	f7f8 f914 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018afc:	a801      	add	r0, sp, #4
 8018afe:	f7f8 f911 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018b02:	4620      	mov	r0, r4
 8018b04:	b003      	add	sp, #12
 8018b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b0a:	ac02      	add	r4, sp, #8
 8018b0c:	9901      	ldr	r1, [sp, #4]
 8018b0e:	f854 2d08 	ldr.w	r2, [r4, #-8]!
 8018b12:	682b      	ldr	r3, [r5, #0]
 8018b14:	4f19      	ldr	r7, [pc, #100]	; (8018b7c <_Paint1Trans+0xb0>)
 8018b16:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 8018b1a:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 8018b1e:	3208      	adds	r2, #8
 8018b20:	f101 0008 	add.w	r0, r1, #8
 8018b24:	f7fb f90c 	bl	8013d40 <GUI__IntersectRects>
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f7f8 f8fb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018b2e:	a802      	add	r0, sp, #8
 8018b30:	682b      	ldr	r3, [r5, #0]
 8018b32:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8018b36:	603e      	str	r6, [r7, #0]
 8018b38:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018b3c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8018b40:	651a      	str	r2, [r3, #80]	; 0x50
 8018b42:	64d9      	str	r1, [r3, #76]	; 0x4c
 8018b44:	f7f8 f8ee 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018b48:	4630      	mov	r0, r6
 8018b4a:	f7f8 f8cf 	bl	8010cec <GUI_ALLOC_h2p>
 8018b4e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8018b50:	4a0b      	ldr	r2, [pc, #44]	; (8018b80 <_Paint1Trans+0xb4>)
 8018b52:	4b0c      	ldr	r3, [pc, #48]	; (8018b84 <_Paint1Trans+0xb8>)
 8018b54:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8018b58:	bf08      	it	eq
 8018b5a:	4613      	moveq	r3, r2
 8018b5c:	4630      	mov	r0, r6
 8018b5e:	4798      	blx	r3
 8018b60:	2401      	movs	r4, #1
 8018b62:	682b      	ldr	r3, [r5, #0]
 8018b64:	2200      	movs	r2, #0
 8018b66:	4620      	mov	r0, r4
 8018b68:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 8018b6c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 8018b70:	603a      	str	r2, [r7, #0]
 8018b72:	b003      	add	sp, #12
 8018b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b78:	20000014 	.word	0x20000014
 8018b7c:	20035e48 	.word	0x20035e48
 8018b80:	0801a611 	.word	0x0801a611
 8018b84:	08021971 	.word	0x08021971

08018b88 <_PaintTransChildren>:
 8018b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b8c:	b082      	sub	sp, #8
 8018b8e:	4605      	mov	r5, r0
 8018b90:	f7f8 f8b6 	bl	8010d00 <GUI_ALLOC_LockH>
 8018b94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018b96:	9001      	str	r0, [sp, #4]
 8018b98:	079b      	lsls	r3, r3, #30
 8018b9a:	d524      	bpl.n	8018be6 <_PaintTransChildren+0x5e>
 8018b9c:	69c6      	ldr	r6, [r0, #28]
 8018b9e:	b316      	cbz	r6, 8018be6 <_PaintTransChildren+0x5e>
 8018ba0:	ac01      	add	r4, sp, #4
 8018ba2:	e004      	b.n	8018bae <_PaintTransChildren+0x26>
 8018ba4:	6a1e      	ldr	r6, [r3, #32]
 8018ba6:	4668      	mov	r0, sp
 8018ba8:	f7f8 f8bc 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018bac:	b1ae      	cbz	r6, 8018bda <_PaintTransChildren+0x52>
 8018bae:	4630      	mov	r0, r6
 8018bb0:	f7f8 f8a6 	bl	8010d00 <GUI_ALLOC_LockH>
 8018bb4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8018bb6:	9000      	str	r0, [sp, #0]
 8018bb8:	f002 0203 	and.w	r2, r2, #3
 8018bbc:	2a03      	cmp	r2, #3
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	d1f0      	bne.n	8018ba4 <_PaintTransChildren+0x1c>
 8018bc2:	9901      	ldr	r1, [sp, #4]
 8018bc4:	3108      	adds	r1, #8
 8018bc6:	f7f8 fdad 	bl	8011724 <GUI_RectsIntersect>
 8018bca:	b998      	cbnz	r0, 8018bf4 <_PaintTransChildren+0x6c>
 8018bcc:	9b00      	ldr	r3, [sp, #0]
 8018bce:	6a1e      	ldr	r6, [r3, #32]
 8018bd0:	4668      	mov	r0, sp
 8018bd2:	f7f8 f8a7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018bd6:	2e00      	cmp	r6, #0
 8018bd8:	d1e9      	bne.n	8018bae <_PaintTransChildren+0x26>
 8018bda:	4620      	mov	r0, r4
 8018bdc:	f7f8 f8a2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018be0:	b002      	add	sp, #8
 8018be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018be6:	ac01      	add	r4, sp, #4
 8018be8:	4620      	mov	r0, r4
 8018bea:	f7f8 f89b 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018bee:	b002      	add	sp, #8
 8018bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bf4:	9b01      	ldr	r3, [sp, #4]
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
 8018bfc:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 8018c00:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 8018c04:	f9b3 a00e 	ldrsh.w	sl, [r3, #14]
 8018c08:	f7f8 f88c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018c0c:	4668      	mov	r0, sp
 8018c0e:	f7f8 f889 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018c12:	4630      	mov	r0, r6
 8018c14:	f7ff ff5a 	bl	8018acc <_Paint1Trans>
 8018c18:	b988      	cbnz	r0, 8018c3e <_PaintTransChildren+0xb6>
 8018c1a:	4628      	mov	r0, r5
 8018c1c:	f7f8 f870 	bl	8010d00 <GUI_ALLOC_LockH>
 8018c20:	9001      	str	r0, [sp, #4]
 8018c22:	4630      	mov	r0, r6
 8018c24:	f7f8 f86c 	bl	8010d00 <GUI_ALLOC_LockH>
 8018c28:	9a01      	ldr	r2, [sp, #4]
 8018c2a:	9000      	str	r0, [sp, #0]
 8018c2c:	4603      	mov	r3, r0
 8018c2e:	f8a2 9008 	strh.w	r9, [r2, #8]
 8018c32:	f8a2 800a 	strh.w	r8, [r2, #10]
 8018c36:	8197      	strh	r7, [r2, #12]
 8018c38:	f8a2 a00e 	strh.w	sl, [r2, #14]
 8018c3c:	e7b2      	b.n	8018ba4 <_PaintTransChildren+0x1c>
 8018c3e:	4630      	mov	r0, r6
 8018c40:	f7f8 f854 	bl	8010cec <GUI_ALLOC_h2p>
 8018c44:	9000      	str	r0, [sp, #0]
 8018c46:	4630      	mov	r0, r6
 8018c48:	f7ff ff9e 	bl	8018b88 <_PaintTransChildren>
 8018c4c:	4630      	mov	r0, r6
 8018c4e:	f7f8 f84d 	bl	8010cec <GUI_ALLOC_h2p>
 8018c52:	9000      	str	r0, [sp, #0]
 8018c54:	4628      	mov	r0, r5
 8018c56:	f7f8 f849 	bl	8010cec <GUI_ALLOC_h2p>
 8018c5a:	9001      	str	r0, [sp, #4]
 8018c5c:	e7dd      	b.n	8018c1a <_PaintTransChildren+0x92>
 8018c5e:	bf00      	nop

08018c60 <_Findx0.constprop.10>:
 8018c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c62:	4604      	mov	r4, r0
 8018c64:	b085      	sub	sp, #20
 8018c66:	2800      	cmp	r0, #0
 8018c68:	d03e      	beq.n	8018ce8 <_Findx0.constprop.10+0x88>
 8018c6a:	460f      	mov	r7, r1
 8018c6c:	2600      	movs	r6, #0
 8018c6e:	ad02      	add	r5, sp, #8
 8018c70:	e00c      	b.n	8018c8c <_Findx0.constprop.10+0x2c>
 8018c72:	07e3      	lsls	r3, r4, #31
 8018c74:	d424      	bmi.n	8018cc0 <_Findx0.constprop.10+0x60>
 8018c76:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018c7a:	9801      	ldr	r0, [sp, #4]
 8018c7c:	3301      	adds	r3, #1
 8018c7e:	803b      	strh	r3, [r7, #0]
 8018c80:	2601      	movs	r6, #1
 8018c82:	6a04      	ldr	r4, [r0, #32]
 8018c84:	a801      	add	r0, sp, #4
 8018c86:	f7f8 f84d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018c8a:	b1b4      	cbz	r4, 8018cba <_Findx0.constprop.10+0x5a>
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	f7f8 f837 	bl	8010d00 <GUI_ALLOC_LockH>
 8018c92:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018c94:	9001      	str	r0, [sp, #4]
 8018c96:	07a2      	lsls	r2, r4, #30
 8018c98:	d5f3      	bpl.n	8018c82 <_Findx0.constprop.10+0x22>
 8018c9a:	c803      	ldmia	r0, {r0, r1}
 8018c9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8018ca0:	4629      	mov	r1, r5
 8018ca2:	4638      	mov	r0, r7
 8018ca4:	f7f8 fd3e 	bl	8011724 <GUI_RectsIntersect>
 8018ca8:	2800      	cmp	r0, #0
 8018caa:	d1e2      	bne.n	8018c72 <_Findx0.constprop.10+0x12>
 8018cac:	9801      	ldr	r0, [sp, #4]
 8018cae:	6a04      	ldr	r4, [r0, #32]
 8018cb0:	a801      	add	r0, sp, #4
 8018cb2:	f7f8 f837 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018cb6:	2c00      	cmp	r4, #0
 8018cb8:	d1e8      	bne.n	8018c8c <_Findx0.constprop.10+0x2c>
 8018cba:	4630      	mov	r0, r6
 8018cbc:	b005      	add	sp, #20
 8018cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cc0:	9801      	ldr	r0, [sp, #4]
 8018cc2:	69c4      	ldr	r4, [r0, #28]
 8018cc4:	2c00      	cmp	r4, #0
 8018cc6:	d0dc      	beq.n	8018c82 <_Findx0.constprop.10+0x22>
 8018cc8:	462a      	mov	r2, r5
 8018cca:	4639      	mov	r1, r7
 8018ccc:	4620      	mov	r0, r4
 8018cce:	f7ff fe61 	bl	8018994 <_Findx0>
 8018cd2:	2800      	cmp	r0, #0
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	bf18      	it	ne
 8018cd8:	2601      	movne	r6, #1
 8018cda:	f7f8 f807 	bl	8010cec <GUI_ALLOC_h2p>
 8018cde:	6a04      	ldr	r4, [r0, #32]
 8018ce0:	2c00      	cmp	r4, #0
 8018ce2:	d1f1      	bne.n	8018cc8 <_Findx0.constprop.10+0x68>
 8018ce4:	9801      	ldr	r0, [sp, #4]
 8018ce6:	e7e2      	b.n	8018cae <_Findx0.constprop.10+0x4e>
 8018ce8:	4606      	mov	r6, r0
 8018cea:	e7e6      	b.n	8018cba <_Findx0.constprop.10+0x5a>

08018cec <_Findy1.constprop.11>:
 8018cec:	2800      	cmp	r0, #0
 8018cee:	d050      	beq.n	8018d92 <_Findy1.constprop.11+0xa6>
 8018cf0:	b570      	push	{r4, r5, r6, lr}
 8018cf2:	b084      	sub	sp, #16
 8018cf4:	460e      	mov	r6, r1
 8018cf6:	4604      	mov	r4, r0
 8018cf8:	ad02      	add	r5, sp, #8
 8018cfa:	4620      	mov	r0, r4
 8018cfc:	f7f8 f800 	bl	8010d00 <GUI_ALLOC_LockH>
 8018d00:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018d02:	9001      	str	r0, [sp, #4]
 8018d04:	07a2      	lsls	r2, r4, #30
 8018d06:	d518      	bpl.n	8018d3a <_Findy1.constprop.11+0x4e>
 8018d08:	c803      	ldmia	r0, {r0, r1}
 8018d0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8018d0e:	4629      	mov	r1, r5
 8018d10:	4630      	mov	r0, r6
 8018d12:	f7f8 fd07 	bl	8011724 <GUI_RectsIntersect>
 8018d16:	b330      	cbz	r0, 8018d66 <_Findy1.constprop.11+0x7a>
 8018d18:	07e3      	lsls	r3, r4, #31
 8018d1a:	9801      	ldr	r0, [sp, #4]
 8018d1c:	d415      	bmi.n	8018d4a <_Findy1.constprop.11+0x5e>
 8018d1e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8018d22:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018d26:	429a      	cmp	r2, r3
 8018d28:	dd25      	ble.n	8018d76 <_Findy1.constprop.11+0x8a>
 8018d2a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8018d2e:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 8018d32:	429a      	cmp	r2, r3
 8018d34:	db01      	blt.n	8018d3a <_Findy1.constprop.11+0x4e>
 8018d36:	3b01      	subs	r3, #1
 8018d38:	80f3      	strh	r3, [r6, #6]
 8018d3a:	6a04      	ldr	r4, [r0, #32]
 8018d3c:	a801      	add	r0, sp, #4
 8018d3e:	f7f7 fff1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018d42:	2c00      	cmp	r4, #0
 8018d44:	d1d9      	bne.n	8018cfa <_Findy1.constprop.11+0xe>
 8018d46:	b004      	add	sp, #16
 8018d48:	bd70      	pop	{r4, r5, r6, pc}
 8018d4a:	69c4      	ldr	r4, [r0, #28]
 8018d4c:	2c00      	cmp	r4, #0
 8018d4e:	d0f4      	beq.n	8018d3a <_Findy1.constprop.11+0x4e>
 8018d50:	4620      	mov	r0, r4
 8018d52:	462a      	mov	r2, r5
 8018d54:	4631      	mov	r1, r6
 8018d56:	f7ff fdb5 	bl	80188c4 <_Findy1>
 8018d5a:	4620      	mov	r0, r4
 8018d5c:	f7f7 ffc6 	bl	8010cec <GUI_ALLOC_h2p>
 8018d60:	6a04      	ldr	r4, [r0, #32]
 8018d62:	2c00      	cmp	r4, #0
 8018d64:	d1f4      	bne.n	8018d50 <_Findy1.constprop.11+0x64>
 8018d66:	9801      	ldr	r0, [sp, #4]
 8018d68:	6a04      	ldr	r4, [r0, #32]
 8018d6a:	a801      	add	r0, sp, #4
 8018d6c:	f7f7 ffda 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018d70:	2c00      	cmp	r4, #0
 8018d72:	d1c2      	bne.n	8018cfa <_Findy1.constprop.11+0xe>
 8018d74:	e7e7      	b.n	8018d46 <_Findy1.constprop.11+0x5a>
 8018d76:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018d7a:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 8018d7e:	429a      	cmp	r2, r3
 8018d80:	dddb      	ble.n	8018d3a <_Findy1.constprop.11+0x4e>
 8018d82:	6a04      	ldr	r4, [r0, #32]
 8018d84:	80f3      	strh	r3, [r6, #6]
 8018d86:	a801      	add	r0, sp, #4
 8018d88:	f7f7 ffcc 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018d8c:	2c00      	cmp	r4, #0
 8018d8e:	d1b4      	bne.n	8018cfa <_Findy1.constprop.11+0xe>
 8018d90:	e7d9      	b.n	8018d46 <_Findy1.constprop.11+0x5a>
 8018d92:	4770      	bx	lr

08018d94 <WM__PaintWinAndOverlays>:
 8018d94:	b530      	push	{r4, r5, lr}
 8018d96:	b083      	sub	sp, #12
 8018d98:	4604      	mov	r4, r0
 8018d9a:	f7f7 ffb1 	bl	8010d00 <GUI_ALLOC_LockH>
 8018d9e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8018da0:	9001      	str	r0, [sp, #4]
 8018da2:	f640 0301 	movw	r3, #2049	; 0x801
 8018da6:	4013      	ands	r3, r2
 8018da8:	2b01      	cmp	r3, #1
 8018daa:	d00e      	beq.n	8018dca <WM__PaintWinAndOverlays+0x36>
 8018dac:	a801      	add	r0, sp, #4
 8018dae:	f7f7 ffb9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018db2:	4620      	mov	r0, r4
 8018db4:	f7f7 ff9a 	bl	8010cec <GUI_ALLOC_h2p>
 8018db8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8018dba:	4a1b      	ldr	r2, [pc, #108]	; (8018e28 <WM__PaintWinAndOverlays+0x94>)
 8018dbc:	4b1b      	ldr	r3, [pc, #108]	; (8018e2c <WM__PaintWinAndOverlays+0x98>)
 8018dbe:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8018dc2:	bf08      	it	eq
 8018dc4:	4613      	moveq	r3, r2
 8018dc6:	4620      	mov	r0, r4
 8018dc8:	4798      	blx	r3
 8018dca:	4b19      	ldr	r3, [pc, #100]	; (8018e30 <WM__PaintWinAndOverlays+0x9c>)
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	b90b      	cbnz	r3, 8018dd4 <WM__PaintWinAndOverlays+0x40>
 8018dd0:	b003      	add	sp, #12
 8018dd2:	bd30      	pop	{r4, r5, pc}
 8018dd4:	4620      	mov	r0, r4
 8018dd6:	f7ff fed7 	bl	8018b88 <_PaintTransChildren>
 8018dda:	4620      	mov	r0, r4
 8018ddc:	f7f7 ff86 	bl	8010cec <GUI_ALLOC_h2p>
 8018de0:	6985      	ldr	r5, [r0, #24]
 8018de2:	6a04      	ldr	r4, [r0, #32]
 8018de4:	2d00      	cmp	r5, #0
 8018de6:	d0f3      	beq.n	8018dd0 <WM__PaintWinAndOverlays+0x3c>
 8018de8:	b184      	cbz	r4, 8018e0c <WM__PaintWinAndOverlays+0x78>
 8018dea:	4620      	mov	r0, r4
 8018dec:	f7f7 ff7e 	bl	8010cec <GUI_ALLOC_h2p>
 8018df0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018df2:	f003 0303 	and.w	r3, r3, #3
 8018df6:	2b03      	cmp	r3, #3
 8018df8:	d011      	beq.n	8018e1e <WM__PaintWinAndOverlays+0x8a>
 8018dfa:	4620      	mov	r0, r4
 8018dfc:	f7ff fec4 	bl	8018b88 <_PaintTransChildren>
 8018e00:	4620      	mov	r0, r4
 8018e02:	f7f7 ff73 	bl	8010cec <GUI_ALLOC_h2p>
 8018e06:	6a04      	ldr	r4, [r0, #32]
 8018e08:	2c00      	cmp	r4, #0
 8018e0a:	d1ee      	bne.n	8018dea <WM__PaintWinAndOverlays+0x56>
 8018e0c:	4628      	mov	r0, r5
 8018e0e:	f7f7 ff6d 	bl	8010cec <GUI_ALLOC_h2p>
 8018e12:	6985      	ldr	r5, [r0, #24]
 8018e14:	6a04      	ldr	r4, [r0, #32]
 8018e16:	2d00      	cmp	r5, #0
 8018e18:	d1e6      	bne.n	8018de8 <WM__PaintWinAndOverlays+0x54>
 8018e1a:	b003      	add	sp, #12
 8018e1c:	bd30      	pop	{r4, r5, pc}
 8018e1e:	4620      	mov	r0, r4
 8018e20:	f7ff fe54 	bl	8018acc <_Paint1Trans>
 8018e24:	e7e9      	b.n	8018dfa <WM__PaintWinAndOverlays+0x66>
 8018e26:	bf00      	nop
 8018e28:	0801a611 	.word	0x0801a611
 8018e2c:	08021971 	.word	0x08021971
 8018e30:	20035e7c 	.word	0x20035e7c

08018e34 <_cbPaintMemDev>:
 8018e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e38:	4d19      	ldr	r5, [pc, #100]	; (8018ea0 <_cbPaintMemDev+0x6c>)
 8018e3a:	682b      	ldr	r3, [r5, #0]
 8018e3c:	b082      	sub	sp, #8
 8018e3e:	4681      	mov	r9, r0
 8018e40:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8018e42:	f7f7 ff5d 	bl	8010d00 <GUI_ALLOC_LockH>
 8018e46:	682a      	ldr	r2, [r5, #0]
 8018e48:	ac02      	add	r4, sp, #8
 8018e4a:	3208      	adds	r2, #8
 8018e4c:	4603      	mov	r3, r0
 8018e4e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8018e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e56:	f103 0208 	add.w	r2, r3, #8
 8018e5a:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
 8018e5e:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 8018e62:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 8018e66:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 8018e6a:	e882 0003 	stmia.w	r2, {r0, r1}
 8018e6e:	4620      	mov	r0, r4
 8018e70:	f7f7 ff58 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018e74:	f8d9 0000 	ldr.w	r0, [r9]
 8018e78:	f7ff ff8c 	bl	8018d94 <WM__PaintWinAndOverlays>
 8018e7c:	682b      	ldr	r3, [r5, #0]
 8018e7e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8018e80:	f7f7 ff3e 	bl	8010d00 <GUI_ALLOC_LockH>
 8018e84:	4603      	mov	r3, r0
 8018e86:	4620      	mov	r0, r4
 8018e88:	f8a3 a008 	strh.w	sl, [r3, #8]
 8018e8c:	f8a3 800a 	strh.w	r8, [r3, #10]
 8018e90:	819f      	strh	r7, [r3, #12]
 8018e92:	81de      	strh	r6, [r3, #14]
 8018e94:	9301      	str	r3, [sp, #4]
 8018e96:	f7f7 ff45 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018e9a:	b002      	add	sp, #8
 8018e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ea0:	20000014 	.word	0x20000014

08018ea4 <_Invalidate1Abs>:
 8018ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ea6:	b085      	sub	sp, #20
 8018ea8:	4616      	mov	r6, r2
 8018eaa:	460c      	mov	r4, r1
 8018eac:	4605      	mov	r5, r0
 8018eae:	f7f7 ff1d 	bl	8010cec <GUI_ALLOC_h2p>
 8018eb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018eb4:	9001      	str	r0, [sp, #4]
 8018eb6:	079a      	lsls	r2, r3, #30
 8018eb8:	d505      	bpl.n	8018ec6 <_Invalidate1Abs+0x22>
 8018eba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018ebe:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018ec2:	4291      	cmp	r1, r2
 8018ec4:	da01      	bge.n	8018eca <_Invalidate1Abs+0x26>
 8018ec6:	b005      	add	sp, #20
 8018ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018eca:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018ece:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018ed2:	4291      	cmp	r1, r2
 8018ed4:	dcf7      	bgt.n	8018ec6 <_Invalidate1Abs+0x22>
 8018ed6:	f640 0201 	movw	r2, #2049	; 0x801
 8018eda:	401a      	ands	r2, r3
 8018edc:	2a01      	cmp	r2, #1
 8018ede:	d0f2      	beq.n	8018ec6 <_Invalidate1Abs+0x22>
 8018ee0:	4628      	mov	r0, r5
 8018ee2:	f7f7 ff0d 	bl	8010d00 <GUI_ALLOC_LockH>
 8018ee6:	af02      	add	r7, sp, #8
 8018ee8:	4603      	mov	r3, r0
 8018eea:	4602      	mov	r2, r0
 8018eec:	4621      	mov	r1, r4
 8018eee:	4638      	mov	r0, r7
 8018ef0:	9301      	str	r3, [sp, #4]
 8018ef2:	f7fa ff25 	bl	8013d40 <GUI__IntersectRects>
 8018ef6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8018efa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018efe:	429a      	cmp	r2, r3
 8018f00:	dc31      	bgt.n	8018f66 <_Invalidate1Abs+0xc2>
 8018f02:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8018f06:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018f0a:	429a      	cmp	r2, r3
 8018f0c:	dc2b      	bgt.n	8018f66 <_Invalidate1Abs+0xc2>
 8018f0e:	9a01      	ldr	r2, [sp, #4]
 8018f10:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8018f12:	f244 0320 	movw	r3, #16416	; 0x4020
 8018f16:	4023      	ands	r3, r4
 8018f18:	bb53      	cbnz	r3, 8018f70 <_Invalidate1Abs+0xcc>
 8018f1a:	f8df e070 	ldr.w	lr, [pc, #112]	; 8018f8c <_Invalidate1Abs+0xe8>
 8018f1e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018f22:	f8be 3000 	ldrh.w	r3, [lr]
 8018f26:	4326      	orrs	r6, r4
 8018f28:	3301      	adds	r3, #1
 8018f2a:	f102 0408 	add.w	r4, r2, #8
 8018f2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018f32:	f8ae 3000 	strh.w	r3, [lr]
 8018f36:	6296      	str	r6, [r2, #40]	; 0x28
 8018f38:	e000      	b.n	8018f3c <_Invalidate1Abs+0x98>
 8018f3a:	461d      	mov	r5, r3
 8018f3c:	4628      	mov	r0, r5
 8018f3e:	f7f7 fed5 	bl	8010cec <GUI_ALLOC_h2p>
 8018f42:	6983      	ldr	r3, [r0, #24]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d1f8      	bne.n	8018f3a <_Invalidate1Abs+0x96>
 8018f48:	4b0e      	ldr	r3, [pc, #56]	; (8018f84 <_Invalidate1Abs+0xe0>)
 8018f4a:	681a      	ldr	r2, [r3, #0]
 8018f4c:	4295      	cmp	r5, r2
 8018f4e:	d016      	beq.n	8018f7e <_Invalidate1Abs+0xda>
 8018f50:	685b      	ldr	r3, [r3, #4]
 8018f52:	42ab      	cmp	r3, r5
 8018f54:	bf0c      	ite	eq
 8018f56:	2302      	moveq	r3, #2
 8018f58:	2300      	movne	r3, #0
 8018f5a:	4a0b      	ldr	r2, [pc, #44]	; (8018f88 <_Invalidate1Abs+0xe4>)
 8018f5c:	6811      	ldr	r1, [r2, #0]
 8018f5e:	430b      	orrs	r3, r1
 8018f60:	6013      	str	r3, [r2, #0]
 8018f62:	f7fa fa1f 	bl	80133a4 <GUI_SignalEvent>
 8018f66:	a801      	add	r0, sp, #4
 8018f68:	f7f7 fedc 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018f6c:	b005      	add	sp, #20
 8018f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f70:	f102 0108 	add.w	r1, r2, #8
 8018f74:	4608      	mov	r0, r1
 8018f76:	463a      	mov	r2, r7
 8018f78:	f7f8 faf4 	bl	8011564 <GUI_MergeRect>
 8018f7c:	e7f3      	b.n	8018f66 <_Invalidate1Abs+0xc2>
 8018f7e:	2301      	movs	r3, #1
 8018f80:	e7eb      	b.n	8018f5a <_Invalidate1Abs+0xb6>
 8018f82:	bf00      	nop
 8018f84:	20035e80 	.word	0x20035e80
 8018f88:	20035e44 	.word	0x20035e44
 8018f8c:	20035e78 	.word	0x20035e78

08018f90 <WM__ActivateClipRect>:
 8018f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f94:	4f45      	ldr	r7, [pc, #276]	; (80190ac <WM__ActivateClipRect+0x11c>)
 8018f96:	683b      	ldr	r3, [r7, #0]
 8018f98:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8018f9c:	b086      	sub	sp, #24
 8018f9e:	2a00      	cmp	r2, #0
 8018fa0:	d139      	bne.n	8019016 <WM__ActivateClipRect+0x86>
 8018fa2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8018fa4:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80190b0 <WM__ActivateClipRect+0x120>
 8018fa8:	f7f7 feaa 	bl	8010d00 <GUI_ALLOC_LockH>
 8018fac:	4603      	mov	r3, r0
 8018fae:	c803      	ldmia	r0, {r0, r1}
 8018fb0:	ae02      	add	r6, sp, #8
 8018fb2:	e886 0003 	stmia.w	r6, {r0, r1}
 8018fb6:	4668      	mov	r0, sp
 8018fb8:	9300      	str	r3, [sp, #0]
 8018fba:	f7f7 feb3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018fbe:	f8d8 4000 	ldr.w	r4, [r8]
 8018fc2:	2c00      	cmp	r4, #0
 8018fc4:	d14e      	bne.n	8019064 <WM__ActivateClipRect+0xd4>
 8018fc6:	683c      	ldr	r4, [r7, #0]
 8018fc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d065      	beq.n	801909a <WM__ActivateClipRect+0x10a>
 8018fce:	6818      	ldr	r0, [r3, #0]
 8018fd0:	6859      	ldr	r1, [r3, #4]
 8018fd2:	f8d8 2000 	ldr.w	r2, [r8]
 8018fd6:	ad04      	add	r5, sp, #16
 8018fd8:	462b      	mov	r3, r5
 8018fda:	c303      	stmia	r3!, {r0, r1}
 8018fdc:	b1ca      	cbz	r2, 8019012 <WM__ActivateClipRect+0x82>
 8018fde:	4610      	mov	r0, r2
 8018fe0:	f7f7 fe8e 	bl	8010d00 <GUI_ALLOC_LockH>
 8018fe4:	ac06      	add	r4, sp, #24
 8018fe6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018fea:	f844 0d14 	str.w	r0, [r4, #-20]!
 8018fee:	f9b0 1000 	ldrsh.w	r1, [r0]
 8018ff2:	4628      	mov	r0, r5
 8018ff4:	f7f8 fae4 	bl	80115c0 <GUI_MoveRect>
 8018ff8:	4620      	mov	r0, r4
 8018ffa:	f7f7 fe93 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8018ffe:	4628      	mov	r0, r5
 8019000:	4631      	mov	r1, r6
 8019002:	f7fa fe7f 	bl	8013d04 <GUI__IntersectRect>
 8019006:	4628      	mov	r0, r5
 8019008:	f007 fa6a 	bl	80204e0 <LCD_SetClipRectEx>
 801900c:	b006      	add	sp, #24
 801900e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019012:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8019014:	e7e3      	b.n	8018fde <WM__ActivateClipRect+0x4e>
 8019016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019018:	2a00      	cmp	r2, #0
 801901a:	d042      	beq.n	80190a2 <WM__ActivateClipRect+0x112>
 801901c:	4c24      	ldr	r4, [pc, #144]	; (80190b0 <WM__ActivateClipRect+0x120>)
 801901e:	6810      	ldr	r0, [r2, #0]
 8019020:	6851      	ldr	r1, [r2, #4]
 8019022:	6824      	ldr	r4, [r4, #0]
 8019024:	ad04      	add	r5, sp, #16
 8019026:	462a      	mov	r2, r5
 8019028:	c203      	stmia	r2!, {r0, r1}
 801902a:	b1cc      	cbz	r4, 8019060 <WM__ActivateClipRect+0xd0>
 801902c:	4620      	mov	r0, r4
 801902e:	f7f7 fe67 	bl	8010d00 <GUI_ALLOC_LockH>
 8019032:	ac06      	add	r4, sp, #24
 8019034:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019038:	f844 0d10 	str.w	r0, [r4, #-16]!
 801903c:	f9b0 1000 	ldrsh.w	r1, [r0]
 8019040:	4628      	mov	r0, r5
 8019042:	f7f8 fabd 	bl	80115c0 <GUI_MoveRect>
 8019046:	4620      	mov	r0, r4
 8019048:	f7f7 fe6c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801904c:	4919      	ldr	r1, [pc, #100]	; (80190b4 <WM__ActivateClipRect+0x124>)
 801904e:	4628      	mov	r0, r5
 8019050:	f7fa fe58 	bl	8013d04 <GUI__IntersectRect>
 8019054:	4628      	mov	r0, r5
 8019056:	f007 fa43 	bl	80204e0 <LCD_SetClipRectEx>
 801905a:	b006      	add	sp, #24
 801905c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019060:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8019062:	e7e3      	b.n	801902c <WM__ActivateClipRect+0x9c>
 8019064:	ad04      	add	r5, sp, #16
 8019066:	e007      	b.n	8019078 <WM__ActivateClipRect+0xe8>
 8019068:	f7fa fe4c 	bl	8013d04 <GUI__IntersectRect>
 801906c:	9b04      	ldr	r3, [sp, #16]
 801906e:	699c      	ldr	r4, [r3, #24]
 8019070:	4628      	mov	r0, r5
 8019072:	b17c      	cbz	r4, 8019094 <WM__ActivateClipRect+0x104>
 8019074:	f7f7 fe56 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019078:	4620      	mov	r0, r4
 801907a:	f7f7 fe41 	bl	8010d00 <GUI_ALLOC_LockH>
 801907e:	4603      	mov	r3, r0
 8019080:	4601      	mov	r1, r0
 8019082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019084:	9304      	str	r3, [sp, #16]
 8019086:	0793      	lsls	r3, r2, #30
 8019088:	4630      	mov	r0, r6
 801908a:	d4ed      	bmi.n	8019068 <WM__ActivateClipRect+0xd8>
 801908c:	4628      	mov	r0, r5
 801908e:	f7f7 fe49 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019092:	e798      	b.n	8018fc6 <WM__ActivateClipRect+0x36>
 8019094:	f7f7 fe46 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019098:	e795      	b.n	8018fc6 <WM__ActivateClipRect+0x36>
 801909a:	4630      	mov	r0, r6
 801909c:	f007 fa20 	bl	80204e0 <LCD_SetClipRectEx>
 80190a0:	e7b4      	b.n	801900c <WM__ActivateClipRect+0x7c>
 80190a2:	4804      	ldr	r0, [pc, #16]	; (80190b4 <WM__ActivateClipRect+0x124>)
 80190a4:	f007 fa1c 	bl	80204e0 <LCD_SetClipRectEx>
 80190a8:	e7b0      	b.n	801900c <WM__ActivateClipRect+0x7c>
 80190aa:	bf00      	nop
 80190ac:	20000014 	.word	0x20000014
 80190b0:	20035e48 	.word	0x20035e48
 80190b4:	20000868 	.word	0x20000868

080190b8 <WM__InsertWindowIntoList>:
 80190b8:	b901      	cbnz	r1, 80190bc <WM__InsertWindowIntoList+0x4>
 80190ba:	4770      	bx	lr
 80190bc:	b570      	push	{r4, r5, r6, lr}
 80190be:	b084      	sub	sp, #16
 80190c0:	460c      	mov	r4, r1
 80190c2:	4605      	mov	r5, r0
 80190c4:	f7f7 fe1c 	bl	8010d00 <GUI_ALLOC_LockH>
 80190c8:	4603      	mov	r3, r0
 80190ca:	2200      	movs	r2, #0
 80190cc:	6184      	str	r4, [r0, #24]
 80190ce:	4620      	mov	r0, r4
 80190d0:	621a      	str	r2, [r3, #32]
 80190d2:	9301      	str	r3, [sp, #4]
 80190d4:	f7f7 fe14 	bl	8010d00 <GUI_ALLOC_LockH>
 80190d8:	69c4      	ldr	r4, [r0, #28]
 80190da:	9002      	str	r0, [sp, #8]
 80190dc:	2c00      	cmp	r4, #0
 80190de:	d02c      	beq.n	801913a <WM__InsertWindowIntoList+0x82>
 80190e0:	9b01      	ldr	r3, [sp, #4]
 80190e2:	4620      	mov	r0, r4
 80190e4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80190e6:	f7f7 fe0b 	bl	8010d00 <GUI_ALLOC_LockH>
 80190ea:	f006 0608 	and.w	r6, r6, #8
 80190ee:	9003      	str	r0, [sp, #12]
 80190f0:	2e00      	cmp	r6, #0
 80190f2:	d12b      	bne.n	801914c <WM__InsertWindowIntoList+0x94>
 80190f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80190f6:	071a      	lsls	r2, r3, #28
 80190f8:	d43d      	bmi.n	8019176 <WM__InsertWindowIntoList+0xbe>
 80190fa:	a802      	add	r0, sp, #8
 80190fc:	f7f7 fe12 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019100:	a803      	add	r0, sp, #12
 8019102:	f7f7 fe0f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019106:	4620      	mov	r0, r4
 8019108:	f7f7 fdf0 	bl	8010cec <GUI_ALLOC_h2p>
 801910c:	6a04      	ldr	r4, [r0, #32]
 801910e:	9003      	str	r0, [sp, #12]
 8019110:	b924      	cbnz	r4, 801911c <WM__InsertWindowIntoList+0x64>
 8019112:	e02e      	b.n	8019172 <WM__InsertWindowIntoList+0xba>
 8019114:	6a04      	ldr	r4, [r0, #32]
 8019116:	9003      	str	r0, [sp, #12]
 8019118:	2c00      	cmp	r4, #0
 801911a:	d02a      	beq.n	8019172 <WM__InsertWindowIntoList+0xba>
 801911c:	4620      	mov	r0, r4
 801911e:	f7f7 fde5 	bl	8010cec <GUI_ALLOC_h2p>
 8019122:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019124:	071b      	lsls	r3, r3, #28
 8019126:	d5f5      	bpl.n	8019114 <WM__InsertWindowIntoList+0x5c>
 8019128:	9a03      	ldr	r2, [sp, #12]
 801912a:	9b01      	ldr	r3, [sp, #4]
 801912c:	6215      	str	r5, [r2, #32]
 801912e:	621c      	str	r4, [r3, #32]
 8019130:	a801      	add	r0, sp, #4
 8019132:	f7f7 fdf7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019136:	b004      	add	sp, #16
 8019138:	bd70      	pop	{r4, r5, r6, pc}
 801913a:	61c5      	str	r5, [r0, #28]
 801913c:	a801      	add	r0, sp, #4
 801913e:	f7f7 fdf1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019142:	a802      	add	r0, sp, #8
 8019144:	f7f7 fdee 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019148:	b004      	add	sp, #16
 801914a:	bd70      	pop	{r4, r5, r6, pc}
 801914c:	a802      	add	r0, sp, #8
 801914e:	f7f7 fde9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019152:	a803      	add	r0, sp, #12
 8019154:	f7f7 fde6 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019158:	4620      	mov	r0, r4
 801915a:	f7f7 fdc7 	bl	8010cec <GUI_ALLOC_h2p>
 801915e:	6a02      	ldr	r2, [r0, #32]
 8019160:	9003      	str	r0, [sp, #12]
 8019162:	b132      	cbz	r2, 8019172 <WM__InsertWindowIntoList+0xba>
 8019164:	4610      	mov	r0, r2
 8019166:	f7f7 fdc1 	bl	8010cec <GUI_ALLOC_h2p>
 801916a:	6a02      	ldr	r2, [r0, #32]
 801916c:	9003      	str	r0, [sp, #12]
 801916e:	2a00      	cmp	r2, #0
 8019170:	d1f8      	bne.n	8019164 <WM__InsertWindowIntoList+0xac>
 8019172:	6205      	str	r5, [r0, #32]
 8019174:	e7dc      	b.n	8019130 <WM__InsertWindowIntoList+0x78>
 8019176:	9a01      	ldr	r2, [sp, #4]
 8019178:	9b02      	ldr	r3, [sp, #8]
 801917a:	6214      	str	r4, [r2, #32]
 801917c:	a801      	add	r0, sp, #4
 801917e:	61dd      	str	r5, [r3, #28]
 8019180:	f7f7 fdd0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019184:	a802      	add	r0, sp, #8
 8019186:	f7f7 fdcd 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801918a:	a803      	add	r0, sp, #12
 801918c:	f7f7 fdca 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019190:	e7da      	b.n	8019148 <WM__InsertWindowIntoList+0x90>
 8019192:	bf00      	nop

08019194 <WM__RemoveWindowFromList>:
 8019194:	b570      	push	{r4, r5, r6, lr}
 8019196:	4604      	mov	r4, r0
 8019198:	f7f7 fda8 	bl	8010cec <GUI_ALLOC_h2p>
 801919c:	4605      	mov	r5, r0
 801919e:	6980      	ldr	r0, [r0, #24]
 80191a0:	b900      	cbnz	r0, 80191a4 <WM__RemoveWindowFromList+0x10>
 80191a2:	bd70      	pop	{r4, r5, r6, pc}
 80191a4:	f7f7 fda2 	bl	8010cec <GUI_ALLOC_h2p>
 80191a8:	69c3      	ldr	r3, [r0, #28]
 80191aa:	429c      	cmp	r4, r3
 80191ac:	4606      	mov	r6, r0
 80191ae:	d00c      	beq.n	80191ca <WM__RemoveWindowFromList+0x36>
 80191b0:	b913      	cbnz	r3, 80191b8 <WM__RemoveWindowFromList+0x24>
 80191b2:	e010      	b.n	80191d6 <WM__RemoveWindowFromList+0x42>
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d0f4      	beq.n	80191a2 <WM__RemoveWindowFromList+0xe>
 80191b8:	4618      	mov	r0, r3
 80191ba:	f7f7 fd97 	bl	8010cec <GUI_ALLOC_h2p>
 80191be:	6a03      	ldr	r3, [r0, #32]
 80191c0:	429c      	cmp	r4, r3
 80191c2:	d1f7      	bne.n	80191b4 <WM__RemoveWindowFromList+0x20>
 80191c4:	6a2b      	ldr	r3, [r5, #32]
 80191c6:	6203      	str	r3, [r0, #32]
 80191c8:	bd70      	pop	{r4, r5, r6, pc}
 80191ca:	4620      	mov	r0, r4
 80191cc:	f7f7 fd8e 	bl	8010cec <GUI_ALLOC_h2p>
 80191d0:	6a03      	ldr	r3, [r0, #32]
 80191d2:	61f3      	str	r3, [r6, #28]
 80191d4:	bd70      	pop	{r4, r5, r6, pc}
 80191d6:	bd70      	pop	{r4, r5, r6, pc}

080191d8 <WM__IsWindow>:
 80191d8:	4b0a      	ldr	r3, [pc, #40]	; (8019204 <WM__IsWindow+0x2c>)
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	b183      	cbz	r3, 8019200 <WM__IsWindow+0x28>
 80191de:	4283      	cmp	r3, r0
 80191e0:	b510      	push	{r4, lr}
 80191e2:	4604      	mov	r4, r0
 80191e4:	d102      	bne.n	80191ec <WM__IsWindow+0x14>
 80191e6:	e009      	b.n	80191fc <WM__IsWindow+0x24>
 80191e8:	429c      	cmp	r4, r3
 80191ea:	d007      	beq.n	80191fc <WM__IsWindow+0x24>
 80191ec:	4618      	mov	r0, r3
 80191ee:	f7f7 fd7d 	bl	8010cec <GUI_ALLOC_h2p>
 80191f2:	6943      	ldr	r3, [r0, #20]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d1f7      	bne.n	80191e8 <WM__IsWindow+0x10>
 80191f8:	2000      	movs	r0, #0
 80191fa:	bd10      	pop	{r4, pc}
 80191fc:	2001      	movs	r0, #1
 80191fe:	bd10      	pop	{r4, pc}
 8019200:	2000      	movs	r0, #0
 8019202:	4770      	bx	lr
 8019204:	20035e38 	.word	0x20035e38

08019208 <WM__InvalidateDrawAndDescs>:
 8019208:	b900      	cbnz	r0, 801920c <WM__InvalidateDrawAndDescs+0x4>
 801920a:	4770      	bx	lr
 801920c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019210:	b08f      	sub	sp, #60	; 0x3c
 8019212:	4604      	mov	r4, r0
 8019214:	f7f7 fd74 	bl	8010d00 <GUI_ALLOC_LockH>
 8019218:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801921a:	9005      	str	r0, [sp, #20]
 801921c:	079a      	lsls	r2, r3, #30
 801921e:	f140 813c 	bpl.w	801949a <WM__InvalidateDrawAndDescs+0x292>
 8019222:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019224:	b140      	cbz	r0, 8019238 <WM__InvalidateDrawAndDescs+0x30>
 8019226:	4ba0      	ldr	r3, [pc, #640]	; (80194a8 <WM__InvalidateDrawAndDescs+0x2a0>)
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	429c      	cmp	r4, r3
 801922c:	d004      	beq.n	8019238 <WM__InvalidateDrawAndDescs+0x30>
 801922e:	f007 fac7 	bl	80207c0 <GUI_MEMDEV_Delete>
 8019232:	9b05      	ldr	r3, [sp, #20]
 8019234:	2200      	movs	r2, #0
 8019236:	625a      	str	r2, [r3, #36]	; 0x24
 8019238:	4620      	mov	r0, r4
 801923a:	f002 f803 	bl	801b244 <WM_GetFirstChild>
 801923e:	9003      	str	r0, [sp, #12]
 8019240:	2800      	cmp	r0, #0
 8019242:	f000 812a 	beq.w	801949a <WM__InvalidateDrawAndDescs+0x292>
 8019246:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80194a8 <WM__InvalidateDrawAndDescs+0x2a0>
 801924a:	9803      	ldr	r0, [sp, #12]
 801924c:	f7f7 fd58 	bl	8010d00 <GUI_ALLOC_LockH>
 8019250:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019252:	9006      	str	r0, [sp, #24]
 8019254:	079b      	lsls	r3, r3, #30
 8019256:	f140 8115 	bpl.w	8019484 <WM__InvalidateDrawAndDescs+0x27c>
 801925a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801925c:	b148      	cbz	r0, 8019272 <WM__InvalidateDrawAndDescs+0x6a>
 801925e:	f8d8 3000 	ldr.w	r3, [r8]
 8019262:	9a03      	ldr	r2, [sp, #12]
 8019264:	4293      	cmp	r3, r2
 8019266:	d004      	beq.n	8019272 <WM__InvalidateDrawAndDescs+0x6a>
 8019268:	f007 faaa 	bl	80207c0 <GUI_MEMDEV_Delete>
 801926c:	9b06      	ldr	r3, [sp, #24]
 801926e:	2200      	movs	r2, #0
 8019270:	625a      	str	r2, [r3, #36]	; 0x24
 8019272:	9803      	ldr	r0, [sp, #12]
 8019274:	f001 ffe6 	bl	801b244 <WM_GetFirstChild>
 8019278:	9002      	str	r0, [sp, #8]
 801927a:	2800      	cmp	r0, #0
 801927c:	f000 8102 	beq.w	8019484 <WM__InvalidateDrawAndDescs+0x27c>
 8019280:	9802      	ldr	r0, [sp, #8]
 8019282:	f7f7 fd3d 	bl	8010d00 <GUI_ALLOC_LockH>
 8019286:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019288:	9007      	str	r0, [sp, #28]
 801928a:	079f      	lsls	r7, r3, #30
 801928c:	f140 80ef 	bpl.w	801946e <WM__InvalidateDrawAndDescs+0x266>
 8019290:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019292:	b148      	cbz	r0, 80192a8 <WM__InvalidateDrawAndDescs+0xa0>
 8019294:	f8d8 3000 	ldr.w	r3, [r8]
 8019298:	9a02      	ldr	r2, [sp, #8]
 801929a:	4293      	cmp	r3, r2
 801929c:	d004      	beq.n	80192a8 <WM__InvalidateDrawAndDescs+0xa0>
 801929e:	f007 fa8f 	bl	80207c0 <GUI_MEMDEV_Delete>
 80192a2:	9b07      	ldr	r3, [sp, #28]
 80192a4:	2200      	movs	r2, #0
 80192a6:	625a      	str	r2, [r3, #36]	; 0x24
 80192a8:	9802      	ldr	r0, [sp, #8]
 80192aa:	f001 ffcb 	bl	801b244 <WM_GetFirstChild>
 80192ae:	4683      	mov	fp, r0
 80192b0:	2800      	cmp	r0, #0
 80192b2:	f000 80dc 	beq.w	801946e <WM__InvalidateDrawAndDescs+0x266>
 80192b6:	4658      	mov	r0, fp
 80192b8:	f7f7 fd22 	bl	8010d00 <GUI_ALLOC_LockH>
 80192bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80192be:	9008      	str	r0, [sp, #32]
 80192c0:	079e      	lsls	r6, r3, #30
 80192c2:	f140 80c8 	bpl.w	8019456 <WM__InvalidateDrawAndDescs+0x24e>
 80192c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80192c8:	b140      	cbz	r0, 80192dc <WM__InvalidateDrawAndDescs+0xd4>
 80192ca:	f8d8 3000 	ldr.w	r3, [r8]
 80192ce:	455b      	cmp	r3, fp
 80192d0:	d004      	beq.n	80192dc <WM__InvalidateDrawAndDescs+0xd4>
 80192d2:	f007 fa75 	bl	80207c0 <GUI_MEMDEV_Delete>
 80192d6:	9b08      	ldr	r3, [sp, #32]
 80192d8:	2200      	movs	r2, #0
 80192da:	625a      	str	r2, [r3, #36]	; 0x24
 80192dc:	4658      	mov	r0, fp
 80192de:	f001 ffb1 	bl	801b244 <WM_GetFirstChild>
 80192e2:	4682      	mov	sl, r0
 80192e4:	2800      	cmp	r0, #0
 80192e6:	f000 80b6 	beq.w	8019456 <WM__InvalidateDrawAndDescs+0x24e>
 80192ea:	4650      	mov	r0, sl
 80192ec:	f7f7 fd08 	bl	8010d00 <GUI_ALLOC_LockH>
 80192f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80192f2:	9009      	str	r0, [sp, #36]	; 0x24
 80192f4:	079d      	lsls	r5, r3, #30
 80192f6:	f140 80a2 	bpl.w	801943e <WM__InvalidateDrawAndDescs+0x236>
 80192fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80192fc:	b140      	cbz	r0, 8019310 <WM__InvalidateDrawAndDescs+0x108>
 80192fe:	f8d8 3000 	ldr.w	r3, [r8]
 8019302:	4553      	cmp	r3, sl
 8019304:	d004      	beq.n	8019310 <WM__InvalidateDrawAndDescs+0x108>
 8019306:	f007 fa5b 	bl	80207c0 <GUI_MEMDEV_Delete>
 801930a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801930c:	2200      	movs	r2, #0
 801930e:	625a      	str	r2, [r3, #36]	; 0x24
 8019310:	4650      	mov	r0, sl
 8019312:	f001 ff97 	bl	801b244 <WM_GetFirstChild>
 8019316:	9001      	str	r0, [sp, #4]
 8019318:	2800      	cmp	r0, #0
 801931a:	f000 8090 	beq.w	801943e <WM__InvalidateDrawAndDescs+0x236>
 801931e:	9801      	ldr	r0, [sp, #4]
 8019320:	f7f7 fcee 	bl	8010d00 <GUI_ALLOC_LockH>
 8019324:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019326:	900a      	str	r0, [sp, #40]	; 0x28
 8019328:	079c      	lsls	r4, r3, #30
 801932a:	d57d      	bpl.n	8019428 <WM__InvalidateDrawAndDescs+0x220>
 801932c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801932e:	b148      	cbz	r0, 8019344 <WM__InvalidateDrawAndDescs+0x13c>
 8019330:	f8d8 3000 	ldr.w	r3, [r8]
 8019334:	9a01      	ldr	r2, [sp, #4]
 8019336:	4293      	cmp	r3, r2
 8019338:	d004      	beq.n	8019344 <WM__InvalidateDrawAndDescs+0x13c>
 801933a:	f007 fa41 	bl	80207c0 <GUI_MEMDEV_Delete>
 801933e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019340:	2200      	movs	r2, #0
 8019342:	625a      	str	r2, [r3, #36]	; 0x24
 8019344:	9801      	ldr	r0, [sp, #4]
 8019346:	f001 ff7d 	bl	801b244 <WM_GetFirstChild>
 801934a:	4606      	mov	r6, r0
 801934c:	2800      	cmp	r0, #0
 801934e:	d06b      	beq.n	8019428 <WM__InvalidateDrawAndDescs+0x220>
 8019350:	4630      	mov	r0, r6
 8019352:	f7f7 fcd5 	bl	8010d00 <GUI_ALLOC_LockH>
 8019356:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019358:	900b      	str	r0, [sp, #44]	; 0x2c
 801935a:	0799      	lsls	r1, r3, #30
 801935c:	d55b      	bpl.n	8019416 <WM__InvalidateDrawAndDescs+0x20e>
 801935e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019360:	b140      	cbz	r0, 8019374 <WM__InvalidateDrawAndDescs+0x16c>
 8019362:	f8d8 3000 	ldr.w	r3, [r8]
 8019366:	42b3      	cmp	r3, r6
 8019368:	d004      	beq.n	8019374 <WM__InvalidateDrawAndDescs+0x16c>
 801936a:	f007 fa29 	bl	80207c0 <GUI_MEMDEV_Delete>
 801936e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019370:	2200      	movs	r2, #0
 8019372:	625a      	str	r2, [r3, #36]	; 0x24
 8019374:	4630      	mov	r0, r6
 8019376:	f001 ff65 	bl	801b244 <WM_GetFirstChild>
 801937a:	4605      	mov	r5, r0
 801937c:	2800      	cmp	r0, #0
 801937e:	d04a      	beq.n	8019416 <WM__InvalidateDrawAndDescs+0x20e>
 8019380:	4628      	mov	r0, r5
 8019382:	f7f7 fcbd 	bl	8010d00 <GUI_ALLOC_LockH>
 8019386:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019388:	900c      	str	r0, [sp, #48]	; 0x30
 801938a:	079a      	lsls	r2, r3, #30
 801938c:	d53a      	bpl.n	8019404 <WM__InvalidateDrawAndDescs+0x1fc>
 801938e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019390:	b140      	cbz	r0, 80193a4 <WM__InvalidateDrawAndDescs+0x19c>
 8019392:	f8d8 3000 	ldr.w	r3, [r8]
 8019396:	42ab      	cmp	r3, r5
 8019398:	d004      	beq.n	80193a4 <WM__InvalidateDrawAndDescs+0x19c>
 801939a:	f007 fa11 	bl	80207c0 <GUI_MEMDEV_Delete>
 801939e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193a0:	2200      	movs	r2, #0
 80193a2:	625a      	str	r2, [r3, #36]	; 0x24
 80193a4:	4628      	mov	r0, r5
 80193a6:	f001 ff4d 	bl	801b244 <WM_GetFirstChild>
 80193aa:	f04f 0900 	mov.w	r9, #0
 80193ae:	4604      	mov	r4, r0
 80193b0:	b340      	cbz	r0, 8019404 <WM__InvalidateDrawAndDescs+0x1fc>
 80193b2:	4620      	mov	r0, r4
 80193b4:	f7f7 fca4 	bl	8010d00 <GUI_ALLOC_LockH>
 80193b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80193ba:	900d      	str	r0, [sp, #52]	; 0x34
 80193bc:	079b      	lsls	r3, r3, #30
 80193be:	d518      	bpl.n	80193f2 <WM__InvalidateDrawAndDescs+0x1ea>
 80193c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80193c2:	b140      	cbz	r0, 80193d6 <WM__InvalidateDrawAndDescs+0x1ce>
 80193c4:	f8d8 3000 	ldr.w	r3, [r8]
 80193c8:	42a3      	cmp	r3, r4
 80193ca:	d004      	beq.n	80193d6 <WM__InvalidateDrawAndDescs+0x1ce>
 80193cc:	f007 f9f8 	bl	80207c0 <GUI_MEMDEV_Delete>
 80193d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80193d2:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 80193d6:	4620      	mov	r0, r4
 80193d8:	f001 ff34 	bl	801b244 <WM_GetFirstChild>
 80193dc:	4607      	mov	r7, r0
 80193de:	b140      	cbz	r0, 80193f2 <WM__InvalidateDrawAndDescs+0x1ea>
 80193e0:	4638      	mov	r0, r7
 80193e2:	f7ff ff11 	bl	8019208 <WM__InvalidateDrawAndDescs>
 80193e6:	4638      	mov	r0, r7
 80193e8:	f7f7 fc80 	bl	8010cec <GUI_ALLOC_h2p>
 80193ec:	6a07      	ldr	r7, [r0, #32]
 80193ee:	2f00      	cmp	r7, #0
 80193f0:	d1f6      	bne.n	80193e0 <WM__InvalidateDrawAndDescs+0x1d8>
 80193f2:	a80d      	add	r0, sp, #52	; 0x34
 80193f4:	f7f7 fc96 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80193f8:	4620      	mov	r0, r4
 80193fa:	f7f7 fc77 	bl	8010cec <GUI_ALLOC_h2p>
 80193fe:	6a04      	ldr	r4, [r0, #32]
 8019400:	2c00      	cmp	r4, #0
 8019402:	d1d6      	bne.n	80193b2 <WM__InvalidateDrawAndDescs+0x1aa>
 8019404:	a80c      	add	r0, sp, #48	; 0x30
 8019406:	f7f7 fc8d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801940a:	4628      	mov	r0, r5
 801940c:	f7f7 fc6e 	bl	8010cec <GUI_ALLOC_h2p>
 8019410:	6a05      	ldr	r5, [r0, #32]
 8019412:	2d00      	cmp	r5, #0
 8019414:	d1b4      	bne.n	8019380 <WM__InvalidateDrawAndDescs+0x178>
 8019416:	a80b      	add	r0, sp, #44	; 0x2c
 8019418:	f7f7 fc84 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801941c:	4630      	mov	r0, r6
 801941e:	f7f7 fc65 	bl	8010cec <GUI_ALLOC_h2p>
 8019422:	6a06      	ldr	r6, [r0, #32]
 8019424:	2e00      	cmp	r6, #0
 8019426:	d193      	bne.n	8019350 <WM__InvalidateDrawAndDescs+0x148>
 8019428:	a80a      	add	r0, sp, #40	; 0x28
 801942a:	f7f7 fc7b 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801942e:	9801      	ldr	r0, [sp, #4]
 8019430:	f7f7 fc5c 	bl	8010cec <GUI_ALLOC_h2p>
 8019434:	6a03      	ldr	r3, [r0, #32]
 8019436:	9301      	str	r3, [sp, #4]
 8019438:	2b00      	cmp	r3, #0
 801943a:	f47f af70 	bne.w	801931e <WM__InvalidateDrawAndDescs+0x116>
 801943e:	a809      	add	r0, sp, #36	; 0x24
 8019440:	f7f7 fc70 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019444:	4650      	mov	r0, sl
 8019446:	f7f7 fc51 	bl	8010cec <GUI_ALLOC_h2p>
 801944a:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801944e:	f1ba 0f00 	cmp.w	sl, #0
 8019452:	f47f af4a 	bne.w	80192ea <WM__InvalidateDrawAndDescs+0xe2>
 8019456:	a808      	add	r0, sp, #32
 8019458:	f7f7 fc64 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801945c:	4658      	mov	r0, fp
 801945e:	f7f7 fc45 	bl	8010cec <GUI_ALLOC_h2p>
 8019462:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8019466:	f1bb 0f00 	cmp.w	fp, #0
 801946a:	f47f af24 	bne.w	80192b6 <WM__InvalidateDrawAndDescs+0xae>
 801946e:	a807      	add	r0, sp, #28
 8019470:	f7f7 fc58 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019474:	9802      	ldr	r0, [sp, #8]
 8019476:	f7f7 fc39 	bl	8010cec <GUI_ALLOC_h2p>
 801947a:	6a03      	ldr	r3, [r0, #32]
 801947c:	9302      	str	r3, [sp, #8]
 801947e:	2b00      	cmp	r3, #0
 8019480:	f47f aefe 	bne.w	8019280 <WM__InvalidateDrawAndDescs+0x78>
 8019484:	a806      	add	r0, sp, #24
 8019486:	f7f7 fc4d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801948a:	9803      	ldr	r0, [sp, #12]
 801948c:	f7f7 fc2e 	bl	8010cec <GUI_ALLOC_h2p>
 8019490:	6a03      	ldr	r3, [r0, #32]
 8019492:	9303      	str	r3, [sp, #12]
 8019494:	2b00      	cmp	r3, #0
 8019496:	f47f aed8 	bne.w	801924a <WM__InvalidateDrawAndDescs+0x42>
 801949a:	a805      	add	r0, sp, #20
 801949c:	f7f7 fc42 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80194a0:	b00f      	add	sp, #60	; 0x3c
 80194a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194a6:	bf00      	nop
 80194a8:	20035e2c 	.word	0x20035e2c

080194ac <WM_InvalidateWindowAndDescsEx>:
 80194ac:	b900      	cbnz	r0, 80194b0 <WM_InvalidateWindowAndDescsEx+0x4>
 80194ae:	4770      	bx	lr
 80194b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194b4:	b0a1      	sub	sp, #132	; 0x84
 80194b6:	4604      	mov	r4, r0
 80194b8:	9201      	str	r2, [sp, #4]
 80194ba:	460d      	mov	r5, r1
 80194bc:	f7f7 fc20 	bl	8010d00 <GUI_ALLOC_LockH>
 80194c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80194c2:	9005      	str	r0, [sp, #20]
 80194c4:	079a      	lsls	r2, r3, #30
 80194c6:	f140 8156 	bpl.w	8019776 <WM_InvalidateWindowAndDescsEx+0x2ca>
 80194ca:	4602      	mov	r2, r0
 80194cc:	4629      	mov	r1, r5
 80194ce:	a80e      	add	r0, sp, #56	; 0x38
 80194d0:	f7fa fc36 	bl	8013d40 <GUI__IntersectRects>
 80194d4:	2800      	cmp	r0, #0
 80194d6:	f000 814e 	beq.w	8019776 <WM_InvalidateWindowAndDescsEx+0x2ca>
 80194da:	a805      	add	r0, sp, #20
 80194dc:	f7f7 fc22 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80194e0:	4620      	mov	r0, r4
 80194e2:	9a01      	ldr	r2, [sp, #4]
 80194e4:	a90e      	add	r1, sp, #56	; 0x38
 80194e6:	f7ff fcdd 	bl	8018ea4 <_Invalidate1Abs>
 80194ea:	4620      	mov	r0, r4
 80194ec:	f001 feaa 	bl	801b244 <WM_GetFirstChild>
 80194f0:	4604      	mov	r4, r0
 80194f2:	2800      	cmp	r0, #0
 80194f4:	f000 8142 	beq.w	801977c <WM_InvalidateWindowAndDescsEx+0x2d0>
 80194f8:	4620      	mov	r0, r4
 80194fa:	f7f7 fc01 	bl	8010d00 <GUI_ALLOC_LockH>
 80194fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019500:	9006      	str	r0, [sp, #24]
 8019502:	079b      	lsls	r3, r3, #30
 8019504:	f140 813d 	bpl.w	8019782 <WM_InvalidateWindowAndDescsEx+0x2d6>
 8019508:	4602      	mov	r2, r0
 801950a:	a90e      	add	r1, sp, #56	; 0x38
 801950c:	a810      	add	r0, sp, #64	; 0x40
 801950e:	f7fa fc17 	bl	8013d40 <GUI__IntersectRects>
 8019512:	2800      	cmp	r0, #0
 8019514:	f000 8135 	beq.w	8019782 <WM_InvalidateWindowAndDescsEx+0x2d6>
 8019518:	a806      	add	r0, sp, #24
 801951a:	f7f7 fc03 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801951e:	9a01      	ldr	r2, [sp, #4]
 8019520:	a910      	add	r1, sp, #64	; 0x40
 8019522:	4620      	mov	r0, r4
 8019524:	f7ff fcbe 	bl	8018ea4 <_Invalidate1Abs>
 8019528:	4620      	mov	r0, r4
 801952a:	f001 fe8b 	bl	801b244 <WM_GetFirstChild>
 801952e:	4605      	mov	r5, r0
 8019530:	2800      	cmp	r0, #0
 8019532:	f000 8118 	beq.w	8019766 <WM_InvalidateWindowAndDescsEx+0x2ba>
 8019536:	9402      	str	r4, [sp, #8]
 8019538:	4628      	mov	r0, r5
 801953a:	f7f7 fbe1 	bl	8010d00 <GUI_ALLOC_LockH>
 801953e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019540:	9007      	str	r0, [sp, #28]
 8019542:	079f      	lsls	r7, r3, #30
 8019544:	f140 8121 	bpl.w	801978a <WM_InvalidateWindowAndDescsEx+0x2de>
 8019548:	4602      	mov	r2, r0
 801954a:	a910      	add	r1, sp, #64	; 0x40
 801954c:	a812      	add	r0, sp, #72	; 0x48
 801954e:	f7fa fbf7 	bl	8013d40 <GUI__IntersectRects>
 8019552:	2800      	cmp	r0, #0
 8019554:	f000 8119 	beq.w	801978a <WM_InvalidateWindowAndDescsEx+0x2de>
 8019558:	a807      	add	r0, sp, #28
 801955a:	f7f7 fbe3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801955e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8019562:	4628      	mov	r0, r5
 8019564:	4652      	mov	r2, sl
 8019566:	a912      	add	r1, sp, #72	; 0x48
 8019568:	f7ff fc9c 	bl	8018ea4 <_Invalidate1Abs>
 801956c:	4628      	mov	r0, r5
 801956e:	f001 fe69 	bl	801b244 <WM_GetFirstChild>
 8019572:	2800      	cmp	r0, #0
 8019574:	f000 80ef 	beq.w	8019756 <WM_InvalidateWindowAndDescsEx+0x2aa>
 8019578:	9503      	str	r5, [sp, #12]
 801957a:	4605      	mov	r5, r0
 801957c:	4628      	mov	r0, r5
 801957e:	f7f7 fbbf 	bl	8010d00 <GUI_ALLOC_LockH>
 8019582:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019584:	9008      	str	r0, [sp, #32]
 8019586:	079e      	lsls	r6, r3, #30
 8019588:	f140 8103 	bpl.w	8019792 <WM_InvalidateWindowAndDescsEx+0x2e6>
 801958c:	4602      	mov	r2, r0
 801958e:	a912      	add	r1, sp, #72	; 0x48
 8019590:	a814      	add	r0, sp, #80	; 0x50
 8019592:	f7fa fbd5 	bl	8013d40 <GUI__IntersectRects>
 8019596:	2800      	cmp	r0, #0
 8019598:	f000 80fb 	beq.w	8019792 <WM_InvalidateWindowAndDescsEx+0x2e6>
 801959c:	a808      	add	r0, sp, #32
 801959e:	f7f7 fbc1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80195a2:	4628      	mov	r0, r5
 80195a4:	4652      	mov	r2, sl
 80195a6:	a914      	add	r1, sp, #80	; 0x50
 80195a8:	f7ff fc7c 	bl	8018ea4 <_Invalidate1Abs>
 80195ac:	4628      	mov	r0, r5
 80195ae:	f001 fe49 	bl	801b244 <WM_GetFirstChild>
 80195b2:	2800      	cmp	r0, #0
 80195b4:	f000 80c7 	beq.w	8019746 <WM_InvalidateWindowAndDescsEx+0x29a>
 80195b8:	46ab      	mov	fp, r5
 80195ba:	4680      	mov	r8, r0
 80195bc:	4640      	mov	r0, r8
 80195be:	f7f7 fb9f 	bl	8010d00 <GUI_ALLOC_LockH>
 80195c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80195c4:	9009      	str	r0, [sp, #36]	; 0x24
 80195c6:	079d      	lsls	r5, r3, #30
 80195c8:	f140 80e7 	bpl.w	801979a <WM_InvalidateWindowAndDescsEx+0x2ee>
 80195cc:	4602      	mov	r2, r0
 80195ce:	a914      	add	r1, sp, #80	; 0x50
 80195d0:	a816      	add	r0, sp, #88	; 0x58
 80195d2:	f7fa fbb5 	bl	8013d40 <GUI__IntersectRects>
 80195d6:	2800      	cmp	r0, #0
 80195d8:	f000 80df 	beq.w	801979a <WM_InvalidateWindowAndDescsEx+0x2ee>
 80195dc:	a809      	add	r0, sp, #36	; 0x24
 80195de:	f7f7 fba1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80195e2:	4640      	mov	r0, r8
 80195e4:	4652      	mov	r2, sl
 80195e6:	a916      	add	r1, sp, #88	; 0x58
 80195e8:	f7ff fc5c 	bl	8018ea4 <_Invalidate1Abs>
 80195ec:	4640      	mov	r0, r8
 80195ee:	f001 fe29 	bl	801b244 <WM_GetFirstChild>
 80195f2:	2800      	cmp	r0, #0
 80195f4:	f000 809d 	beq.w	8019732 <WM_InvalidateWindowAndDescsEx+0x286>
 80195f8:	4681      	mov	r9, r0
 80195fa:	4648      	mov	r0, r9
 80195fc:	f7f7 fb80 	bl	8010d00 <GUI_ALLOC_LockH>
 8019600:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019602:	900a      	str	r0, [sp, #40]	; 0x28
 8019604:	079c      	lsls	r4, r3, #30
 8019606:	f140 80d5 	bpl.w	80197b4 <WM_InvalidateWindowAndDescsEx+0x308>
 801960a:	4602      	mov	r2, r0
 801960c:	a916      	add	r1, sp, #88	; 0x58
 801960e:	a818      	add	r0, sp, #96	; 0x60
 8019610:	f7fa fb96 	bl	8013d40 <GUI__IntersectRects>
 8019614:	2800      	cmp	r0, #0
 8019616:	f000 80cd 	beq.w	80197b4 <WM_InvalidateWindowAndDescsEx+0x308>
 801961a:	a80a      	add	r0, sp, #40	; 0x28
 801961c:	f7f7 fb82 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019620:	4652      	mov	r2, sl
 8019622:	a918      	add	r1, sp, #96	; 0x60
 8019624:	4648      	mov	r0, r9
 8019626:	f7ff fc3d 	bl	8018ea4 <_Invalidate1Abs>
 801962a:	4648      	mov	r0, r9
 801962c:	f001 fe0a 	bl	801b244 <WM_GetFirstChild>
 8019630:	4605      	mov	r5, r0
 8019632:	2800      	cmp	r0, #0
 8019634:	d074      	beq.n	8019720 <WM_InvalidateWindowAndDescsEx+0x274>
 8019636:	4628      	mov	r0, r5
 8019638:	f7f7 fb62 	bl	8010d00 <GUI_ALLOC_LockH>
 801963c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801963e:	900b      	str	r0, [sp, #44]	; 0x2c
 8019640:	0799      	lsls	r1, r3, #30
 8019642:	f140 80c4 	bpl.w	80197ce <WM_InvalidateWindowAndDescsEx+0x322>
 8019646:	4602      	mov	r2, r0
 8019648:	a918      	add	r1, sp, #96	; 0x60
 801964a:	a81a      	add	r0, sp, #104	; 0x68
 801964c:	f7fa fb78 	bl	8013d40 <GUI__IntersectRects>
 8019650:	2800      	cmp	r0, #0
 8019652:	f000 80bc 	beq.w	80197ce <WM_InvalidateWindowAndDescsEx+0x322>
 8019656:	a80b      	add	r0, sp, #44	; 0x2c
 8019658:	f7f7 fb64 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801965c:	4652      	mov	r2, sl
 801965e:	a91a      	add	r1, sp, #104	; 0x68
 8019660:	4628      	mov	r0, r5
 8019662:	f7ff fc1f 	bl	8018ea4 <_Invalidate1Abs>
 8019666:	4628      	mov	r0, r5
 8019668:	f001 fdec 	bl	801b244 <WM_GetFirstChild>
 801966c:	4606      	mov	r6, r0
 801966e:	2800      	cmp	r0, #0
 8019670:	d050      	beq.n	8019714 <WM_InvalidateWindowAndDescsEx+0x268>
 8019672:	4630      	mov	r0, r6
 8019674:	f7f7 fb44 	bl	8010d00 <GUI_ALLOC_LockH>
 8019678:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801967a:	900c      	str	r0, [sp, #48]	; 0x30
 801967c:	079a      	lsls	r2, r3, #30
 801967e:	f140 80b1 	bpl.w	80197e4 <WM_InvalidateWindowAndDescsEx+0x338>
 8019682:	4602      	mov	r2, r0
 8019684:	a91a      	add	r1, sp, #104	; 0x68
 8019686:	a81c      	add	r0, sp, #112	; 0x70
 8019688:	f7fa fb5a 	bl	8013d40 <GUI__IntersectRects>
 801968c:	2800      	cmp	r0, #0
 801968e:	f000 80a9 	beq.w	80197e4 <WM_InvalidateWindowAndDescsEx+0x338>
 8019692:	a80c      	add	r0, sp, #48	; 0x30
 8019694:	f7f7 fb46 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019698:	4652      	mov	r2, sl
 801969a:	a91c      	add	r1, sp, #112	; 0x70
 801969c:	4630      	mov	r0, r6
 801969e:	f7ff fc01 	bl	8018ea4 <_Invalidate1Abs>
 80196a2:	4630      	mov	r0, r6
 80196a4:	f001 fdce 	bl	801b244 <WM_GetFirstChild>
 80196a8:	4607      	mov	r7, r0
 80196aa:	b368      	cbz	r0, 8019708 <WM_InvalidateWindowAndDescsEx+0x25c>
 80196ac:	4638      	mov	r0, r7
 80196ae:	f7f7 fb27 	bl	8010d00 <GUI_ALLOC_LockH>
 80196b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80196b4:	900d      	str	r0, [sp, #52]	; 0x34
 80196b6:	079b      	lsls	r3, r3, #30
 80196b8:	f140 809f 	bpl.w	80197fa <WM_InvalidateWindowAndDescsEx+0x34e>
 80196bc:	4602      	mov	r2, r0
 80196be:	a91c      	add	r1, sp, #112	; 0x70
 80196c0:	a81e      	add	r0, sp, #120	; 0x78
 80196c2:	f7fa fb3d 	bl	8013d40 <GUI__IntersectRects>
 80196c6:	2800      	cmp	r0, #0
 80196c8:	f000 8097 	beq.w	80197fa <WM_InvalidateWindowAndDescsEx+0x34e>
 80196cc:	a80d      	add	r0, sp, #52	; 0x34
 80196ce:	f7f7 fb29 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80196d2:	4652      	mov	r2, sl
 80196d4:	a91e      	add	r1, sp, #120	; 0x78
 80196d6:	4638      	mov	r0, r7
 80196d8:	f7ff fbe4 	bl	8018ea4 <_Invalidate1Abs>
 80196dc:	4638      	mov	r0, r7
 80196de:	f001 fdb1 	bl	801b244 <WM_GetFirstChild>
 80196e2:	4604      	mov	r4, r0
 80196e4:	b150      	cbz	r0, 80196fc <WM_InvalidateWindowAndDescsEx+0x250>
 80196e6:	4620      	mov	r0, r4
 80196e8:	4652      	mov	r2, sl
 80196ea:	a91e      	add	r1, sp, #120	; 0x78
 80196ec:	f7ff fede 	bl	80194ac <WM_InvalidateWindowAndDescsEx>
 80196f0:	4620      	mov	r0, r4
 80196f2:	f7f7 fafb 	bl	8010cec <GUI_ALLOC_h2p>
 80196f6:	6a04      	ldr	r4, [r0, #32]
 80196f8:	2c00      	cmp	r4, #0
 80196fa:	d1f4      	bne.n	80196e6 <WM_InvalidateWindowAndDescsEx+0x23a>
 80196fc:	4638      	mov	r0, r7
 80196fe:	f7f7 faf5 	bl	8010cec <GUI_ALLOC_h2p>
 8019702:	6a07      	ldr	r7, [r0, #32]
 8019704:	2f00      	cmp	r7, #0
 8019706:	d1d1      	bne.n	80196ac <WM_InvalidateWindowAndDescsEx+0x200>
 8019708:	4630      	mov	r0, r6
 801970a:	f7f7 faef 	bl	8010cec <GUI_ALLOC_h2p>
 801970e:	6a06      	ldr	r6, [r0, #32]
 8019710:	2e00      	cmp	r6, #0
 8019712:	d1ae      	bne.n	8019672 <WM_InvalidateWindowAndDescsEx+0x1c6>
 8019714:	4628      	mov	r0, r5
 8019716:	f7f7 fae9 	bl	8010cec <GUI_ALLOC_h2p>
 801971a:	6a05      	ldr	r5, [r0, #32]
 801971c:	2d00      	cmp	r5, #0
 801971e:	d18a      	bne.n	8019636 <WM_InvalidateWindowAndDescsEx+0x18a>
 8019720:	4648      	mov	r0, r9
 8019722:	f7f7 fae3 	bl	8010cec <GUI_ALLOC_h2p>
 8019726:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801972a:	f1b9 0f00 	cmp.w	r9, #0
 801972e:	f47f af64 	bne.w	80195fa <WM_InvalidateWindowAndDescsEx+0x14e>
 8019732:	4640      	mov	r0, r8
 8019734:	f7f7 fada 	bl	8010cec <GUI_ALLOC_h2p>
 8019738:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801973c:	f1b8 0f00 	cmp.w	r8, #0
 8019740:	f47f af3c 	bne.w	80195bc <WM_InvalidateWindowAndDescsEx+0x110>
 8019744:	465d      	mov	r5, fp
 8019746:	4628      	mov	r0, r5
 8019748:	f7f7 fad0 	bl	8010cec <GUI_ALLOC_h2p>
 801974c:	6a05      	ldr	r5, [r0, #32]
 801974e:	2d00      	cmp	r5, #0
 8019750:	f47f af14 	bne.w	801957c <WM_InvalidateWindowAndDescsEx+0xd0>
 8019754:	9d03      	ldr	r5, [sp, #12]
 8019756:	4628      	mov	r0, r5
 8019758:	f7f7 fac8 	bl	8010cec <GUI_ALLOC_h2p>
 801975c:	6a05      	ldr	r5, [r0, #32]
 801975e:	2d00      	cmp	r5, #0
 8019760:	f47f aeea 	bne.w	8019538 <WM_InvalidateWindowAndDescsEx+0x8c>
 8019764:	9c02      	ldr	r4, [sp, #8]
 8019766:	4620      	mov	r0, r4
 8019768:	f7f7 fac0 	bl	8010cec <GUI_ALLOC_h2p>
 801976c:	6a04      	ldr	r4, [r0, #32]
 801976e:	2c00      	cmp	r4, #0
 8019770:	f47f aec2 	bne.w	80194f8 <WM_InvalidateWindowAndDescsEx+0x4c>
 8019774:	e002      	b.n	801977c <WM_InvalidateWindowAndDescsEx+0x2d0>
 8019776:	a805      	add	r0, sp, #20
 8019778:	f7f7 fad4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801977c:	b021      	add	sp, #132	; 0x84
 801977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019782:	a806      	add	r0, sp, #24
 8019784:	f7f7 face 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019788:	e7ed      	b.n	8019766 <WM_InvalidateWindowAndDescsEx+0x2ba>
 801978a:	a807      	add	r0, sp, #28
 801978c:	f7f7 faca 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019790:	e7e1      	b.n	8019756 <WM_InvalidateWindowAndDescsEx+0x2aa>
 8019792:	a808      	add	r0, sp, #32
 8019794:	f7f7 fac6 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019798:	e7d5      	b.n	8019746 <WM_InvalidateWindowAndDescsEx+0x29a>
 801979a:	a809      	add	r0, sp, #36	; 0x24
 801979c:	f7f7 fac2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80197a0:	4640      	mov	r0, r8
 80197a2:	f7f7 faa3 	bl	8010cec <GUI_ALLOC_h2p>
 80197a6:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80197aa:	f1b8 0f00 	cmp.w	r8, #0
 80197ae:	f47f af05 	bne.w	80195bc <WM_InvalidateWindowAndDescsEx+0x110>
 80197b2:	e7c7      	b.n	8019744 <WM_InvalidateWindowAndDescsEx+0x298>
 80197b4:	a80a      	add	r0, sp, #40	; 0x28
 80197b6:	f7f7 fab5 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80197ba:	4648      	mov	r0, r9
 80197bc:	f7f7 fa96 	bl	8010cec <GUI_ALLOC_h2p>
 80197c0:	f8d0 9020 	ldr.w	r9, [r0, #32]
 80197c4:	f1b9 0f00 	cmp.w	r9, #0
 80197c8:	f47f af17 	bne.w	80195fa <WM_InvalidateWindowAndDescsEx+0x14e>
 80197cc:	e7b1      	b.n	8019732 <WM_InvalidateWindowAndDescsEx+0x286>
 80197ce:	a80b      	add	r0, sp, #44	; 0x2c
 80197d0:	f7f7 faa8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80197d4:	4628      	mov	r0, r5
 80197d6:	f7f7 fa89 	bl	8010cec <GUI_ALLOC_h2p>
 80197da:	6a05      	ldr	r5, [r0, #32]
 80197dc:	2d00      	cmp	r5, #0
 80197de:	f47f af2a 	bne.w	8019636 <WM_InvalidateWindowAndDescsEx+0x18a>
 80197e2:	e79d      	b.n	8019720 <WM_InvalidateWindowAndDescsEx+0x274>
 80197e4:	a80c      	add	r0, sp, #48	; 0x30
 80197e6:	f7f7 fa9d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80197ea:	4630      	mov	r0, r6
 80197ec:	f7f7 fa7e 	bl	8010cec <GUI_ALLOC_h2p>
 80197f0:	6a06      	ldr	r6, [r0, #32]
 80197f2:	2e00      	cmp	r6, #0
 80197f4:	f47f af3d 	bne.w	8019672 <WM_InvalidateWindowAndDescsEx+0x1c6>
 80197f8:	e78c      	b.n	8019714 <WM_InvalidateWindowAndDescsEx+0x268>
 80197fa:	a80d      	add	r0, sp, #52	; 0x34
 80197fc:	f7f7 fa92 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019800:	4638      	mov	r0, r7
 8019802:	f7f7 fa73 	bl	8010cec <GUI_ALLOC_h2p>
 8019806:	6a07      	ldr	r7, [r0, #32]
 8019808:	2f00      	cmp	r7, #0
 801980a:	f47f af4f 	bne.w	80196ac <WM_InvalidateWindowAndDescsEx+0x200>
 801980e:	e77b      	b.n	8019708 <WM_InvalidateWindowAndDescsEx+0x25c>

08019810 <WM__InvalidateRect>:
 8019810:	b901      	cbnz	r1, 8019814 <WM__InvalidateRect+0x4>
 8019812:	4770      	bx	lr
 8019814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019818:	4605      	mov	r5, r0
 801981a:	b086      	sub	sp, #24
 801981c:	4608      	mov	r0, r1
 801981e:	460c      	mov	r4, r1
 8019820:	461e      	mov	r6, r3
 8019822:	4617      	mov	r7, r2
 8019824:	f7f7 fa6c 	bl	8010d00 <GUI_ALLOC_LockH>
 8019828:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801982c:	9000      	str	r0, [sp, #0]
 801982e:	f018 0f02 	tst.w	r8, #2
 8019832:	d042      	beq.n	80198ba <WM__InvalidateRect+0xaa>
 8019834:	4602      	mov	r2, r0
 8019836:	4629      	mov	r1, r5
 8019838:	a802      	add	r0, sp, #8
 801983a:	f7fa fa81 	bl	8013d40 <GUI__IntersectRects>
 801983e:	2800      	cmp	r0, #0
 8019840:	d03b      	beq.n	80198ba <WM__InvalidateRect+0xaa>
 8019842:	f640 0301 	movw	r3, #2049	; 0x801
 8019846:	ea08 0303 	and.w	r3, r8, r3
 801984a:	2b01      	cmp	r3, #1
 801984c:	d03f      	beq.n	80198ce <WM__InvalidateRect+0xbe>
 801984e:	4620      	mov	r0, r4
 8019850:	4632      	mov	r2, r6
 8019852:	a902      	add	r1, sp, #8
 8019854:	f7ff fb26 	bl	8018ea4 <_Invalidate1Abs>
 8019858:	9b00      	ldr	r3, [sp, #0]
 801985a:	69dc      	ldr	r4, [r3, #28]
 801985c:	b36c      	cbz	r4, 80198ba <WM__InvalidateRect+0xaa>
 801985e:	42bc      	cmp	r4, r7
 8019860:	d02b      	beq.n	80198ba <WM__InvalidateRect+0xaa>
 8019862:	4620      	mov	r0, r4
 8019864:	f7f7 fa4c 	bl	8010d00 <GUI_ALLOC_LockH>
 8019868:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801986a:	9001      	str	r0, [sp, #4]
 801986c:	079b      	lsls	r3, r3, #30
 801986e:	d52a      	bpl.n	80198c6 <WM__InvalidateRect+0xb6>
 8019870:	4602      	mov	r2, r0
 8019872:	a902      	add	r1, sp, #8
 8019874:	a804      	add	r0, sp, #16
 8019876:	f7fa fa63 	bl	8013d40 <GUI__IntersectRects>
 801987a:	b320      	cbz	r0, 80198c6 <WM__InvalidateRect+0xb6>
 801987c:	a801      	add	r0, sp, #4
 801987e:	f7f7 fa51 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019882:	4632      	mov	r2, r6
 8019884:	a904      	add	r1, sp, #16
 8019886:	4620      	mov	r0, r4
 8019888:	f7ff fb0c 	bl	8018ea4 <_Invalidate1Abs>
 801988c:	4620      	mov	r0, r4
 801988e:	f001 fcd9 	bl	801b244 <WM_GetFirstChild>
 8019892:	4605      	mov	r5, r0
 8019894:	b150      	cbz	r0, 80198ac <WM__InvalidateRect+0x9c>
 8019896:	4628      	mov	r0, r5
 8019898:	4632      	mov	r2, r6
 801989a:	a904      	add	r1, sp, #16
 801989c:	f7ff fe06 	bl	80194ac <WM_InvalidateWindowAndDescsEx>
 80198a0:	4628      	mov	r0, r5
 80198a2:	f7f7 fa23 	bl	8010cec <GUI_ALLOC_h2p>
 80198a6:	6a05      	ldr	r5, [r0, #32]
 80198a8:	2d00      	cmp	r5, #0
 80198aa:	d1f4      	bne.n	8019896 <WM__InvalidateRect+0x86>
 80198ac:	4620      	mov	r0, r4
 80198ae:	f7f7 fa1d 	bl	8010cec <GUI_ALLOC_h2p>
 80198b2:	6a04      	ldr	r4, [r0, #32]
 80198b4:	b10c      	cbz	r4, 80198ba <WM__InvalidateRect+0xaa>
 80198b6:	42a7      	cmp	r7, r4
 80198b8:	d1d3      	bne.n	8019862 <WM__InvalidateRect+0x52>
 80198ba:	4668      	mov	r0, sp
 80198bc:	f7f7 fa32 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80198c0:	b006      	add	sp, #24
 80198c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198c6:	a801      	add	r0, sp, #4
 80198c8:	f7f7 fa2c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80198cc:	e7ee      	b.n	80198ac <WM__InvalidateRect+0x9c>
 80198ce:	9900      	ldr	r1, [sp, #0]
 80198d0:	4633      	mov	r3, r6
 80198d2:	6a0a      	ldr	r2, [r1, #32]
 80198d4:	6989      	ldr	r1, [r1, #24]
 80198d6:	a802      	add	r0, sp, #8
 80198d8:	f7ff ff9a 	bl	8019810 <WM__InvalidateRect>
 80198dc:	e7bc      	b.n	8019858 <WM__InvalidateRect+0x48>
 80198de:	bf00      	nop

080198e0 <WM_InvalidateRect.part.2>:
 80198e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198e4:	4607      	mov	r7, r0
 80198e6:	b086      	sub	sp, #24
 80198e8:	460c      	mov	r4, r1
 80198ea:	f7f9 f9f1 	bl	8012cd0 <GUI_Lock>
 80198ee:	4638      	mov	r0, r7
 80198f0:	f7f7 fa06 	bl	8010d00 <GUI_ALLOC_LockH>
 80198f4:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80198f8:	9000      	str	r0, [sp, #0]
 80198fa:	f018 0f02 	tst.w	r8, #2
 80198fe:	d02f      	beq.n	8019960 <WM_InvalidateRect.part.2+0x80>
 8019900:	c803      	ldmia	r0, {r0, r1}
 8019902:	ae04      	add	r6, sp, #16
 8019904:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 8019908:	e886 0003 	stmia.w	r6, {r0, r1}
 801990c:	d145      	bne.n	801999a <WM_InvalidateRect.part.2+0xba>
 801990e:	b17c      	cbz	r4, 8019930 <WM_InvalidateRect.part.2+0x50>
 8019910:	6820      	ldr	r0, [r4, #0]
 8019912:	6861      	ldr	r1, [r4, #4]
 8019914:	9c00      	ldr	r4, [sp, #0]
 8019916:	ab02      	add	r3, sp, #8
 8019918:	c303      	stmia	r3!, {r0, r1}
 801991a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801991e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019922:	a802      	add	r0, sp, #8
 8019924:	f7f7 fe4c 	bl	80115c0 <GUI_MoveRect>
 8019928:	a902      	add	r1, sp, #8
 801992a:	4630      	mov	r0, r6
 801992c:	f7fa f9ea 	bl	8013d04 <GUI__IntersectRect>
 8019930:	463d      	mov	r5, r7
 8019932:	e008      	b.n	8019946 <WM_InvalidateRect.part.2+0x66>
 8019934:	f7fa f9e6 	bl	8013d04 <GUI__IntersectRect>
 8019938:	9b01      	ldr	r3, [sp, #4]
 801993a:	699c      	ldr	r4, [r3, #24]
 801993c:	a801      	add	r0, sp, #4
 801993e:	b1bc      	cbz	r4, 8019970 <WM_InvalidateRect.part.2+0x90>
 8019940:	f7f7 f9f0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019944:	4625      	mov	r5, r4
 8019946:	4628      	mov	r0, r5
 8019948:	f7f7 f9da 	bl	8010d00 <GUI_ALLOC_LockH>
 801994c:	4603      	mov	r3, r0
 801994e:	9301      	str	r3, [sp, #4]
 8019950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019952:	0793      	lsls	r3, r2, #30
 8019954:	4601      	mov	r1, r0
 8019956:	4630      	mov	r0, r6
 8019958:	d4ec      	bmi.n	8019934 <WM_InvalidateRect.part.2+0x54>
 801995a:	a801      	add	r0, sp, #4
 801995c:	f7f7 f9e2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019960:	4668      	mov	r0, sp
 8019962:	f7f7 f9df 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019966:	f7f9 f9a9 	bl	8012cbc <GUI_Unlock>
 801996a:	b006      	add	sp, #24
 801996c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019970:	f7f7 f9d8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019974:	4b10      	ldr	r3, [pc, #64]	; (80199b8 <WM_InvalidateRect.part.2+0xd8>)
 8019976:	681a      	ldr	r2, [r3, #0]
 8019978:	42aa      	cmp	r2, r5
 801997a:	d002      	beq.n	8019982 <WM_InvalidateRect.part.2+0xa2>
 801997c:	685b      	ldr	r3, [r3, #4]
 801997e:	429d      	cmp	r5, r3
 8019980:	d1ee      	bne.n	8019960 <WM_InvalidateRect.part.2+0x80>
 8019982:	f640 0301 	movw	r3, #2049	; 0x801
 8019986:	ea08 0303 	and.w	r3, r8, r3
 801998a:	2b01      	cmp	r3, #1
 801998c:	d00b      	beq.n	80199a6 <WM_InvalidateRect.part.2+0xc6>
 801998e:	4631      	mov	r1, r6
 8019990:	4638      	mov	r0, r7
 8019992:	2220      	movs	r2, #32
 8019994:	f7ff fa86 	bl	8018ea4 <_Invalidate1Abs>
 8019998:	e7e2      	b.n	8019960 <WM_InvalidateRect.part.2+0x80>
 801999a:	4638      	mov	r0, r7
 801999c:	f7ff fc34 	bl	8019208 <WM__InvalidateDrawAndDescs>
 80199a0:	2c00      	cmp	r4, #0
 80199a2:	d1b5      	bne.n	8019910 <WM_InvalidateRect.part.2+0x30>
 80199a4:	e7c4      	b.n	8019930 <WM_InvalidateRect.part.2+0x50>
 80199a6:	9b00      	ldr	r3, [sp, #0]
 80199a8:	4630      	mov	r0, r6
 80199aa:	6a1a      	ldr	r2, [r3, #32]
 80199ac:	6999      	ldr	r1, [r3, #24]
 80199ae:	2320      	movs	r3, #32
 80199b0:	f7ff ff2e 	bl	8019810 <WM__InvalidateRect>
 80199b4:	e7d4      	b.n	8019960 <WM_InvalidateRect.part.2+0x80>
 80199b6:	bf00      	nop
 80199b8:	20035e80 	.word	0x20035e80

080199bc <_cbBackWin>:
 80199bc:	6803      	ldr	r3, [r0, #0]
 80199be:	2b0e      	cmp	r3, #14
 80199c0:	d034      	beq.n	8019a2c <_cbBackWin+0x70>
 80199c2:	2b0f      	cmp	r3, #15
 80199c4:	b510      	push	{r4, lr}
 80199c6:	4604      	mov	r4, r0
 80199c8:	d116      	bne.n	80199f8 <_cbBackWin+0x3c>
 80199ca:	4a26      	ldr	r2, [pc, #152]	; (8019a64 <_cbBackWin+0xa8>)
 80199cc:	6843      	ldr	r3, [r0, #4]
 80199ce:	6811      	ldr	r1, [r2, #0]
 80199d0:	428b      	cmp	r3, r1
 80199d2:	d045      	beq.n	8019a60 <_cbBackWin+0xa4>
 80199d4:	6852      	ldr	r2, [r2, #4]
 80199d6:	4293      	cmp	r3, r2
 80199d8:	bf14      	ite	ne
 80199da:	f04f 33ff 	movne.w	r3, #4294967295
 80199de:	2301      	moveq	r3, #1
 80199e0:	4a21      	ldr	r2, [pc, #132]	; (8019a68 <_cbBackWin+0xac>)
 80199e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80199e6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80199ea:	4298      	cmp	r0, r3
 80199ec:	d01b      	beq.n	8019a26 <_cbBackWin+0x6a>
 80199ee:	f7f7 fed9 	bl	80117a4 <GUI_SetBkColor>
 80199f2:	f7f8 f827 	bl	8011a44 <GUI_Clear>
 80199f6:	6823      	ldr	r3, [r4, #0]
 80199f8:	6860      	ldr	r0, [r4, #4]
 80199fa:	3b0e      	subs	r3, #14
 80199fc:	2b1a      	cmp	r3, #26
 80199fe:	d812      	bhi.n	8019a26 <_cbBackWin+0x6a>
 8019a00:	e8df f003 	tbb	[pc, r3]
 8019a04:	11111119 	.word	0x11111119
 8019a08:	110e1111 	.word	0x110e1111
 8019a0c:	11111e11 	.word	0x11111e11
 8019a10:	11111111 	.word	0x11111111
 8019a14:	11111111 	.word	0x11111111
 8019a18:	11111120 	.word	0x11111120
 8019a1c:	1111      	.short	0x1111
 8019a1e:	24          	.byte	0x24
 8019a1f:	00          	.byte	0x00
 8019a20:	68e1      	ldr	r1, [r4, #12]
 8019a22:	f002 fff3 	bl	801ca0c <WM__GetClientRectEx>
 8019a26:	2300      	movs	r3, #0
 8019a28:	60e3      	str	r3, [r4, #12]
 8019a2a:	bd10      	pop	{r4, pc}
 8019a2c:	68c3      	ldr	r3, [r0, #12]
 8019a2e:	685a      	ldr	r2, [r3, #4]
 8019a30:	2a01      	cmp	r2, #1
 8019a32:	d012      	beq.n	8019a5a <_cbBackWin+0x9e>
 8019a34:	4770      	bx	lr
 8019a36:	4621      	mov	r1, r4
 8019a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a3c:	f001 bd90 	b.w	801b560 <WM_SendToParent>
 8019a40:	60e0      	str	r0, [r4, #12]
 8019a42:	bd10      	pop	{r4, pc}
 8019a44:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8019a48:	60e3      	str	r3, [r4, #12]
 8019a4a:	bd10      	pop	{r4, pc}
 8019a4c:	2800      	cmp	r0, #0
 8019a4e:	d0ec      	beq.n	8019a2a <_cbBackWin+0x6e>
 8019a50:	2100      	movs	r1, #0
 8019a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a56:	f7ff bf43 	b.w	80198e0 <WM_InvalidateRect.part.2>
 8019a5a:	6818      	ldr	r0, [r3, #0]
 8019a5c:	f7f8 bfba 	b.w	80129d4 <GUI_StoreKey>
 8019a60:	2300      	movs	r3, #0
 8019a62:	e7bd      	b.n	80199e0 <_cbBackWin+0x24>
 8019a64:	20035e80 	.word	0x20035e80
 8019a68:	20035e30 	.word	0x20035e30

08019a6c <WM_DeleteWindow.part.3>:
 8019a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a70:	4e81      	ldr	r6, [pc, #516]	; (8019c78 <WM_DeleteWindow.part.3+0x20c>)
 8019a72:	b086      	sub	sp, #24
 8019a74:	4604      	mov	r4, r0
 8019a76:	f7f9 f92b 	bl	8012cd0 <GUI_Lock>
 8019a7a:	6830      	ldr	r0, [r6, #0]
 8019a7c:	b148      	cbz	r0, 8019a92 <WM_DeleteWindow.part.3+0x26>
 8019a7e:	42a0      	cmp	r0, r4
 8019a80:	d102      	bne.n	8019a88 <WM_DeleteWindow.part.3+0x1c>
 8019a82:	e00b      	b.n	8019a9c <WM_DeleteWindow.part.3+0x30>
 8019a84:	4284      	cmp	r4, r0
 8019a86:	d009      	beq.n	8019a9c <WM_DeleteWindow.part.3+0x30>
 8019a88:	f7f7 f930 	bl	8010cec <GUI_ALLOC_h2p>
 8019a8c:	6940      	ldr	r0, [r0, #20]
 8019a8e:	2800      	cmp	r0, #0
 8019a90:	d1f8      	bne.n	8019a84 <WM_DeleteWindow.part.3+0x18>
 8019a92:	f7f9 f913 	bl	8012cbc <GUI_Unlock>
 8019a96:	b006      	add	sp, #24
 8019a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a9c:	4625      	mov	r5, r4
 8019a9e:	e000      	b.n	8019aa2 <WM_DeleteWindow.part.3+0x36>
 8019aa0:	461d      	mov	r5, r3
 8019aa2:	4628      	mov	r0, r5
 8019aa4:	f7f7 f922 	bl	8010cec <GUI_ALLOC_h2p>
 8019aa8:	6983      	ldr	r3, [r0, #24]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d1f8      	bne.n	8019aa0 <WM_DeleteWindow.part.3+0x34>
 8019aae:	4f73      	ldr	r7, [pc, #460]	; (8019c7c <WM_DeleteWindow.part.3+0x210>)
 8019ab0:	683a      	ldr	r2, [r7, #0]
 8019ab2:	4295      	cmp	r5, r2
 8019ab4:	f000 80d8 	beq.w	8019c68 <WM_DeleteWindow.part.3+0x1fc>
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	429d      	cmp	r5, r3
 8019abc:	bf14      	ite	ne
 8019abe:	f04f 35ff 	movne.w	r5, #4294967295
 8019ac2:	2501      	moveq	r5, #1
 8019ac4:	f10d 0818 	add.w	r8, sp, #24
 8019ac8:	230b      	movs	r3, #11
 8019aca:	f848 3d10 	str.w	r3, [r8, #-16]!
 8019ace:	4620      	mov	r0, r4
 8019ad0:	4641      	mov	r1, r8
 8019ad2:	9403      	str	r4, [sp, #12]
 8019ad4:	f002 fe9c 	bl	801c810 <WM__SendMessage>
 8019ad8:	4620      	mov	r0, r4
 8019ada:	f002 f9bd 	bl	801be58 <WM__DeleteAssocTimer>
 8019ade:	4620      	mov	r0, r4
 8019ae0:	f7f7 f90e 	bl	8010d00 <GUI_ALLOC_LockH>
 8019ae4:	9001      	str	r0, [sp, #4]
 8019ae6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019ae8:	2800      	cmp	r0, #0
 8019aea:	f040 80a1 	bne.w	8019c30 <WM_DeleteWindow.part.3+0x1c4>
 8019aee:	4b64      	ldr	r3, [pc, #400]	; (8019c80 <WM_DeleteWindow.part.3+0x214>)
 8019af0:	4a64      	ldr	r2, [pc, #400]	; (8019c84 <WM_DeleteWindow.part.3+0x218>)
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	4864      	ldr	r0, [pc, #400]	; (8019c88 <WM_DeleteWindow.part.3+0x21c>)
 8019af6:	2100      	movs	r1, #0
 8019af8:	6081      	str	r1, [r0, #8]
 8019afa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019afe:	4284      	cmp	r4, r0
 8019b00:	bf08      	it	eq
 8019b02:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8019b06:	4a61      	ldr	r2, [pc, #388]	; (8019c8c <WM_DeleteWindow.part.3+0x220>)
 8019b08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8019b0c:	428c      	cmp	r4, r1
 8019b0e:	bf04      	itt	eq
 8019b10:	2100      	moveq	r1, #0
 8019b12:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8019b16:	4b5e      	ldr	r3, [pc, #376]	; (8019c90 <WM_DeleteWindow.part.3+0x224>)
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	2100      	movs	r1, #0
 8019b1c:	b133      	cbz	r3, 8019b2c <WM_DeleteWindow.part.3+0xc0>
 8019b1e:	685a      	ldr	r2, [r3, #4]
 8019b20:	4294      	cmp	r4, r2
 8019b22:	bf08      	it	eq
 8019b24:	6059      	streq	r1, [r3, #4]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d1f8      	bne.n	8019b1e <WM_DeleteWindow.part.3+0xb2>
 8019b2c:	4620      	mov	r0, r4
 8019b2e:	2107      	movs	r1, #7
 8019b30:	f001 fc9c 	bl	801b46c <WM_NotifyParent>
 8019b34:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019b38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8019b3c:	2800      	cmp	r0, #0
 8019b3e:	d15d      	bne.n	8019bfc <WM_DeleteWindow.part.3+0x190>
 8019b40:	4620      	mov	r0, r4
 8019b42:	f7f7 f8dd 	bl	8010d00 <GUI_ALLOC_LockH>
 8019b46:	6981      	ldr	r1, [r0, #24]
 8019b48:	9002      	str	r0, [sp, #8]
 8019b4a:	2900      	cmp	r1, #0
 8019b4c:	d162      	bne.n	8019c14 <WM_DeleteWindow.part.3+0x1a8>
 8019b4e:	4640      	mov	r0, r8
 8019b50:	f7f7 f8e8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019b54:	6830      	ldr	r0, [r6, #0]
 8019b56:	b158      	cbz	r0, 8019b70 <WM_DeleteWindow.part.3+0x104>
 8019b58:	f7f7 f8c8 	bl	8010cec <GUI_ALLOC_h2p>
 8019b5c:	4680      	mov	r8, r0
 8019b5e:	6940      	ldr	r0, [r0, #20]
 8019b60:	4284      	cmp	r4, r0
 8019b62:	d1f8      	bne.n	8019b56 <WM_DeleteWindow.part.3+0xea>
 8019b64:	4620      	mov	r0, r4
 8019b66:	f7f7 f8c1 	bl	8010cec <GUI_ALLOC_h2p>
 8019b6a:	6943      	ldr	r3, [r0, #20]
 8019b6c:	f8c8 3014 	str.w	r3, [r8, #20]
 8019b70:	9b01      	ldr	r3, [sp, #4]
 8019b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b74:	07d9      	lsls	r1, r3, #31
 8019b76:	d503      	bpl.n	8019b80 <WM_DeleteWindow.part.3+0x114>
 8019b78:	4946      	ldr	r1, [pc, #280]	; (8019c94 <WM_DeleteWindow.part.3+0x228>)
 8019b7a:	680a      	ldr	r2, [r1, #0]
 8019b7c:	3a01      	subs	r2, #1
 8019b7e:	600a      	str	r2, [r1, #0]
 8019b80:	069a      	lsls	r2, r3, #26
 8019b82:	d442      	bmi.n	8019c0a <WM_DeleteWindow.part.3+0x19e>
 8019b84:	a801      	add	r0, sp, #4
 8019b86:	f7f7 f8cd 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019b8a:	4a43      	ldr	r2, [pc, #268]	; (8019c98 <WM_DeleteWindow.part.3+0x22c>)
 8019b8c:	8813      	ldrh	r3, [r2, #0]
 8019b8e:	4620      	mov	r0, r4
 8019b90:	3b01      	subs	r3, #1
 8019b92:	8013      	strh	r3, [r2, #0]
 8019b94:	f7f7 fa4a 	bl	801102c <GUI_ALLOC_Free>
 8019b98:	1c6b      	adds	r3, r5, #1
 8019b9a:	f43f af7a 	beq.w	8019a92 <WM_DeleteWindow.part.3+0x26>
 8019b9e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8019ba2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8019ca0 <WM_DeleteWindow.part.3+0x234>
 8019ba6:	f7f9 f893 	bl	8012cd0 <GUI_Lock>
 8019baa:	f8d8 3000 	ldr.w	r3, [r8]
 8019bae:	b905      	cbnz	r5, 8019bb2 <WM_DeleteWindow.part.3+0x146>
 8019bb0:	6835      	ldr	r5, [r6, #0]
 8019bb2:	649d      	str	r5, [r3, #72]	; 0x48
 8019bb4:	462c      	mov	r4, r5
 8019bb6:	e000      	b.n	8019bba <WM_DeleteWindow.part.3+0x14e>
 8019bb8:	461c      	mov	r4, r3
 8019bba:	4620      	mov	r0, r4
 8019bbc:	f7f7 f896 	bl	8010cec <GUI_ALLOC_h2p>
 8019bc0:	6983      	ldr	r3, [r0, #24]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d1f8      	bne.n	8019bb8 <WM_DeleteWindow.part.3+0x14c>
 8019bc6:	6839      	ldr	r1, [r7, #0]
 8019bc8:	4a2c      	ldr	r2, [pc, #176]	; (8019c7c <WM_DeleteWindow.part.3+0x210>)
 8019bca:	428c      	cmp	r4, r1
 8019bcc:	d04e      	beq.n	8019c6c <WM_DeleteWindow.part.3+0x200>
 8019bce:	6853      	ldr	r3, [r2, #4]
 8019bd0:	429c      	cmp	r4, r3
 8019bd2:	d04f      	beq.n	8019c74 <WM_DeleteWindow.part.3+0x208>
 8019bd4:	f7fa fec4 	bl	8014960 <LCD_SetClipRectMax>
 8019bd8:	4628      	mov	r0, r5
 8019bda:	f7f7 f887 	bl	8010cec <GUI_ALLOC_h2p>
 8019bde:	f8d8 3000 	ldr.w	r3, [r8]
 8019be2:	f9b0 1000 	ldrsh.w	r1, [r0]
 8019be6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019bea:	651a      	str	r2, [r3, #80]	; 0x50
 8019bec:	64d9      	str	r1, [r3, #76]	; 0x4c
 8019bee:	f7f9 f865 	bl	8012cbc <GUI_Unlock>
 8019bf2:	f7f9 f863 	bl	8012cbc <GUI_Unlock>
 8019bf6:	b006      	add	sp, #24
 8019bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bfc:	f7ff ff36 	bl	8019a6c <WM_DeleteWindow.part.3>
 8019c00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8019c04:	2800      	cmp	r0, #0
 8019c06:	d199      	bne.n	8019b3c <WM_DeleteWindow.part.3+0xd0>
 8019c08:	e79a      	b.n	8019b40 <WM_DeleteWindow.part.3+0xd4>
 8019c0a:	4a24      	ldr	r2, [pc, #144]	; (8019c9c <WM_DeleteWindow.part.3+0x230>)
 8019c0c:	8813      	ldrh	r3, [r2, #0]
 8019c0e:	3b01      	subs	r3, #1
 8019c10:	8013      	strh	r3, [r2, #0]
 8019c12:	e7b7      	b.n	8019b84 <WM_DeleteWindow.part.3+0x118>
 8019c14:	6a02      	ldr	r2, [r0, #32]
 8019c16:	2320      	movs	r3, #32
 8019c18:	f7ff fdfa 	bl	8019810 <WM__InvalidateRect>
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	f7f7 f865 	bl	8010cec <GUI_ALLOC_h2p>
 8019c22:	4681      	mov	r9, r0
 8019c24:	6980      	ldr	r0, [r0, #24]
 8019c26:	b930      	cbnz	r0, 8019c36 <WM_DeleteWindow.part.3+0x1ca>
 8019c28:	9b02      	ldr	r3, [sp, #8]
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	619a      	str	r2, [r3, #24]
 8019c2e:	e78e      	b.n	8019b4e <WM_DeleteWindow.part.3+0xe2>
 8019c30:	f006 fdc6 	bl	80207c0 <GUI_MEMDEV_Delete>
 8019c34:	e75b      	b.n	8019aee <WM_DeleteWindow.part.3+0x82>
 8019c36:	f7f7 f859 	bl	8010cec <GUI_ALLOC_h2p>
 8019c3a:	69c3      	ldr	r3, [r0, #28]
 8019c3c:	429c      	cmp	r4, r3
 8019c3e:	4682      	mov	sl, r0
 8019c40:	d00b      	beq.n	8019c5a <WM_DeleteWindow.part.3+0x1ee>
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d0f0      	beq.n	8019c28 <WM_DeleteWindow.part.3+0x1bc>
 8019c46:	4618      	mov	r0, r3
 8019c48:	f7f7 f850 	bl	8010cec <GUI_ALLOC_h2p>
 8019c4c:	6a03      	ldr	r3, [r0, #32]
 8019c4e:	429c      	cmp	r4, r3
 8019c50:	d1f7      	bne.n	8019c42 <WM_DeleteWindow.part.3+0x1d6>
 8019c52:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8019c56:	6203      	str	r3, [r0, #32]
 8019c58:	e7e6      	b.n	8019c28 <WM_DeleteWindow.part.3+0x1bc>
 8019c5a:	4620      	mov	r0, r4
 8019c5c:	f7f7 f846 	bl	8010cec <GUI_ALLOC_h2p>
 8019c60:	6a03      	ldr	r3, [r0, #32]
 8019c62:	f8ca 301c 	str.w	r3, [sl, #28]
 8019c66:	e7df      	b.n	8019c28 <WM_DeleteWindow.part.3+0x1bc>
 8019c68:	461d      	mov	r5, r3
 8019c6a:	e72b      	b.n	8019ac4 <WM_DeleteWindow.part.3+0x58>
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	f7f8 ffb3 	bl	8012bd8 <GUI_SelectLayer>
 8019c72:	e7af      	b.n	8019bd4 <WM_DeleteWindow.part.3+0x168>
 8019c74:	2001      	movs	r0, #1
 8019c76:	e7fa      	b.n	8019c6e <WM_DeleteWindow.part.3+0x202>
 8019c78:	20035e38 	.word	0x20035e38
 8019c7c:	20035e80 	.word	0x20035e80
 8019c80:	20035e4c 	.word	0x20035e4c
 8019c84:	20035e68 	.word	0x20035e68
 8019c88:	20000854 	.word	0x20000854
 8019c8c:	20035e58 	.word	0x20035e58
 8019c90:	20035e60 	.word	0x20035e60
 8019c94:	20035e7c 	.word	0x20035e7c
 8019c98:	20035e40 	.word	0x20035e40
 8019c9c:	20035e78 	.word	0x20035e78
 8019ca0:	20000014 	.word	0x20000014

08019ca4 <_Exec1Input>:
 8019ca4:	b570      	push	{r4, r5, r6, lr}
 8019ca6:	4e1f      	ldr	r6, [pc, #124]	; (8019d24 <_Exec1Input+0x80>)
 8019ca8:	6873      	ldr	r3, [r6, #4]
 8019caa:	b082      	sub	sp, #8
 8019cac:	b9cb      	cbnz	r3, 8019ce2 <_Exec1Input+0x3e>
 8019cae:	4b1e      	ldr	r3, [pc, #120]	; (8019d28 <_Exec1Input+0x84>)
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	b103      	cbz	r3, 8019cb6 <_Exec1Input+0x12>
 8019cb4:	4798      	blx	r3
 8019cb6:	4b1d      	ldr	r3, [pc, #116]	; (8019d2c <_Exec1Input+0x88>)
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	b10b      	cbz	r3, 8019cc0 <_Exec1Input+0x1c>
 8019cbc:	4798      	blx	r3
 8019cbe:	b968      	cbnz	r0, 8019cdc <_Exec1Input+0x38>
 8019cc0:	4b1b      	ldr	r3, [pc, #108]	; (8019d30 <_Exec1Input+0x8c>)
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8019cc8:	b908      	cbnz	r0, 8019cce <_Exec1Input+0x2a>
 8019cca:	b002      	add	sp, #8
 8019ccc:	bd70      	pop	{r4, r5, r6, pc}
 8019cce:	f7f8 fe89 	bl	80129e4 <GUI_PollKeyMsg>
 8019cd2:	3000      	adds	r0, #0
 8019cd4:	bf18      	it	ne
 8019cd6:	2001      	movne	r0, #1
 8019cd8:	b002      	add	sp, #8
 8019cda:	bd70      	pop	{r4, r5, r6, pc}
 8019cdc:	2001      	movs	r0, #1
 8019cde:	b002      	add	sp, #8
 8019ce0:	bd70      	pop	{r4, r5, r6, pc}
 8019ce2:	f7f8 fff5 	bl	8012cd0 <GUI_Lock>
 8019ce6:	4b13      	ldr	r3, [pc, #76]	; (8019d34 <_Exec1Input+0x90>)
 8019ce8:	681c      	ldr	r4, [r3, #0]
 8019cea:	b18c      	cbz	r4, 8019d10 <_Exec1Input+0x6c>
 8019cec:	4620      	mov	r0, r4
 8019cee:	f7f7 f807 	bl	8010d00 <GUI_ALLOC_LockH>
 8019cf2:	4603      	mov	r3, r0
 8019cf4:	9301      	str	r3, [sp, #4]
 8019cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019cf8:	0412      	lsls	r2, r2, #16
 8019cfa:	a801      	add	r0, sp, #4
 8019cfc:	d50d      	bpl.n	8019d1a <_Exec1Input+0x76>
 8019cfe:	695d      	ldr	r5, [r3, #20]
 8019d00:	f7f7 f810 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019d04:	4620      	mov	r0, r4
 8019d06:	462c      	mov	r4, r5
 8019d08:	f7ff feb0 	bl	8019a6c <WM_DeleteWindow.part.3>
 8019d0c:	2c00      	cmp	r4, #0
 8019d0e:	d1ed      	bne.n	8019cec <_Exec1Input+0x48>
 8019d10:	2300      	movs	r3, #0
 8019d12:	6073      	str	r3, [r6, #4]
 8019d14:	f7f8 ffd2 	bl	8012cbc <GUI_Unlock>
 8019d18:	e7c9      	b.n	8019cae <_Exec1Input+0xa>
 8019d1a:	a801      	add	r0, sp, #4
 8019d1c:	695c      	ldr	r4, [r3, #20]
 8019d1e:	f7f7 f801 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019d22:	e7e2      	b.n	8019cea <_Exec1Input+0x46>
 8019d24:	20000854 	.word	0x20000854
 8019d28:	20035e3c 	.word	0x20035e3c
 8019d2c:	20035de0 	.word	0x20035de0
 8019d30:	20000014 	.word	0x20000014
 8019d34:	20035e38 	.word	0x20035e38

08019d38 <WM__InvalidateParent>:
 8019d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d3c:	4605      	mov	r5, r0
 8019d3e:	b086      	sub	sp, #24
 8019d40:	4608      	mov	r0, r1
 8019d42:	460c      	mov	r4, r1
 8019d44:	4617      	mov	r7, r2
 8019d46:	f7f6 ffd1 	bl	8010cec <GUI_ALLOC_h2p>
 8019d4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019d4c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8019d50:	bf14      	ite	ne
 8019d52:	f44f 4680 	movne.w	r6, #16384	; 0x4000
 8019d56:	2620      	moveq	r6, #32
 8019d58:	b914      	cbnz	r4, 8019d60 <WM__InvalidateParent+0x28>
 8019d5a:	b006      	add	sp, #24
 8019d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d60:	4620      	mov	r0, r4
 8019d62:	f7f6 ffcd 	bl	8010d00 <GUI_ALLOC_LockH>
 8019d66:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8019d6a:	9000      	str	r0, [sp, #0]
 8019d6c:	f018 0f02 	tst.w	r8, #2
 8019d70:	d041      	beq.n	8019df6 <WM__InvalidateParent+0xbe>
 8019d72:	4602      	mov	r2, r0
 8019d74:	4629      	mov	r1, r5
 8019d76:	a802      	add	r0, sp, #8
 8019d78:	f7f9 ffe2 	bl	8013d40 <GUI__IntersectRects>
 8019d7c:	2800      	cmp	r0, #0
 8019d7e:	d03a      	beq.n	8019df6 <WM__InvalidateParent+0xbe>
 8019d80:	f640 0301 	movw	r3, #2049	; 0x801
 8019d84:	ea08 0303 	and.w	r3, r8, r3
 8019d88:	2b01      	cmp	r3, #1
 8019d8a:	d044      	beq.n	8019e16 <WM__InvalidateParent+0xde>
 8019d8c:	4620      	mov	r0, r4
 8019d8e:	4632      	mov	r2, r6
 8019d90:	a902      	add	r1, sp, #8
 8019d92:	f7ff f887 	bl	8018ea4 <_Invalidate1Abs>
 8019d96:	9b00      	ldr	r3, [sp, #0]
 8019d98:	69dc      	ldr	r4, [r3, #28]
 8019d9a:	b364      	cbz	r4, 8019df6 <WM__InvalidateParent+0xbe>
 8019d9c:	42a7      	cmp	r7, r4
 8019d9e:	d02a      	beq.n	8019df6 <WM__InvalidateParent+0xbe>
 8019da0:	4620      	mov	r0, r4
 8019da2:	f7f6 ffad 	bl	8010d00 <GUI_ALLOC_LockH>
 8019da6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019da8:	9001      	str	r0, [sp, #4]
 8019daa:	079b      	lsls	r3, r3, #30
 8019dac:	d529      	bpl.n	8019e02 <WM__InvalidateParent+0xca>
 8019dae:	4602      	mov	r2, r0
 8019db0:	a902      	add	r1, sp, #8
 8019db2:	a804      	add	r0, sp, #16
 8019db4:	f7f9 ffc4 	bl	8013d40 <GUI__IntersectRects>
 8019db8:	b318      	cbz	r0, 8019e02 <WM__InvalidateParent+0xca>
 8019dba:	a801      	add	r0, sp, #4
 8019dbc:	f7f6 ffb2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019dc0:	4632      	mov	r2, r6
 8019dc2:	a904      	add	r1, sp, #16
 8019dc4:	4620      	mov	r0, r4
 8019dc6:	f7ff f86d 	bl	8018ea4 <_Invalidate1Abs>
 8019dca:	4620      	mov	r0, r4
 8019dcc:	f001 fa3a 	bl	801b244 <WM_GetFirstChild>
 8019dd0:	4605      	mov	r5, r0
 8019dd2:	b150      	cbz	r0, 8019dea <WM__InvalidateParent+0xb2>
 8019dd4:	4628      	mov	r0, r5
 8019dd6:	4632      	mov	r2, r6
 8019dd8:	a904      	add	r1, sp, #16
 8019dda:	f7ff fb67 	bl	80194ac <WM_InvalidateWindowAndDescsEx>
 8019dde:	4628      	mov	r0, r5
 8019de0:	f7f6 ff84 	bl	8010cec <GUI_ALLOC_h2p>
 8019de4:	6a05      	ldr	r5, [r0, #32]
 8019de6:	2d00      	cmp	r5, #0
 8019de8:	d1f4      	bne.n	8019dd4 <WM__InvalidateParent+0x9c>
 8019dea:	4620      	mov	r0, r4
 8019dec:	f7f6 ff7e 	bl	8010cec <GUI_ALLOC_h2p>
 8019df0:	6a04      	ldr	r4, [r0, #32]
 8019df2:	2c00      	cmp	r4, #0
 8019df4:	d1d2      	bne.n	8019d9c <WM__InvalidateParent+0x64>
 8019df6:	4668      	mov	r0, sp
 8019df8:	f7f6 ff94 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019dfc:	b006      	add	sp, #24
 8019dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e02:	a801      	add	r0, sp, #4
 8019e04:	f7f6 ff8e 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019e08:	4620      	mov	r0, r4
 8019e0a:	f7f6 ff6f 	bl	8010cec <GUI_ALLOC_h2p>
 8019e0e:	6a04      	ldr	r4, [r0, #32]
 8019e10:	2c00      	cmp	r4, #0
 8019e12:	d1c3      	bne.n	8019d9c <WM__InvalidateParent+0x64>
 8019e14:	e7ef      	b.n	8019df6 <WM__InvalidateParent+0xbe>
 8019e16:	9900      	ldr	r1, [sp, #0]
 8019e18:	4633      	mov	r3, r6
 8019e1a:	6a0a      	ldr	r2, [r1, #32]
 8019e1c:	6989      	ldr	r1, [r1, #24]
 8019e1e:	a802      	add	r0, sp, #8
 8019e20:	f7ff fcf6 	bl	8019810 <WM__InvalidateRect>
 8019e24:	e7b7      	b.n	8019d96 <WM__InvalidateParent+0x5e>
 8019e26:	bf00      	nop

08019e28 <WM__InvalidateRectEx>:
 8019e28:	b901      	cbnz	r1, 8019e2c <WM__InvalidateRectEx+0x4>
 8019e2a:	4770      	bx	lr
 8019e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e2e:	4605      	mov	r5, r0
 8019e30:	b087      	sub	sp, #28
 8019e32:	4608      	mov	r0, r1
 8019e34:	4616      	mov	r6, r2
 8019e36:	460c      	mov	r4, r1
 8019e38:	f7f6 ff62 	bl	8010d00 <GUI_ALLOC_LockH>
 8019e3c:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8019e3e:	9000      	str	r0, [sp, #0]
 8019e40:	07ba      	lsls	r2, r7, #30
 8019e42:	d540      	bpl.n	8019ec6 <WM__InvalidateRectEx+0x9e>
 8019e44:	4602      	mov	r2, r0
 8019e46:	4629      	mov	r1, r5
 8019e48:	a802      	add	r0, sp, #8
 8019e4a:	f7f9 ff79 	bl	8013d40 <GUI__IntersectRects>
 8019e4e:	2800      	cmp	r0, #0
 8019e50:	d039      	beq.n	8019ec6 <WM__InvalidateRectEx+0x9e>
 8019e52:	f640 0301 	movw	r3, #2049	; 0x801
 8019e56:	403b      	ands	r3, r7
 8019e58:	2b01      	cmp	r3, #1
 8019e5a:	d043      	beq.n	8019ee4 <WM__InvalidateRectEx+0xbc>
 8019e5c:	4620      	mov	r0, r4
 8019e5e:	2220      	movs	r2, #32
 8019e60:	a902      	add	r1, sp, #8
 8019e62:	f7ff f81f 	bl	8018ea4 <_Invalidate1Abs>
 8019e66:	9b00      	ldr	r3, [sp, #0]
 8019e68:	69dc      	ldr	r4, [r3, #28]
 8019e6a:	b364      	cbz	r4, 8019ec6 <WM__InvalidateRectEx+0x9e>
 8019e6c:	42a6      	cmp	r6, r4
 8019e6e:	d02a      	beq.n	8019ec6 <WM__InvalidateRectEx+0x9e>
 8019e70:	4620      	mov	r0, r4
 8019e72:	f7f6 ff45 	bl	8010d00 <GUI_ALLOC_LockH>
 8019e76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019e78:	9001      	str	r0, [sp, #4]
 8019e7a:	079b      	lsls	r3, r3, #30
 8019e7c:	d528      	bpl.n	8019ed0 <WM__InvalidateRectEx+0xa8>
 8019e7e:	4602      	mov	r2, r0
 8019e80:	a902      	add	r1, sp, #8
 8019e82:	a804      	add	r0, sp, #16
 8019e84:	f7f9 ff5c 	bl	8013d40 <GUI__IntersectRects>
 8019e88:	b310      	cbz	r0, 8019ed0 <WM__InvalidateRectEx+0xa8>
 8019e8a:	a801      	add	r0, sp, #4
 8019e8c:	f7f6 ff4a 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019e90:	2220      	movs	r2, #32
 8019e92:	a904      	add	r1, sp, #16
 8019e94:	4620      	mov	r0, r4
 8019e96:	f7ff f805 	bl	8018ea4 <_Invalidate1Abs>
 8019e9a:	4620      	mov	r0, r4
 8019e9c:	f001 f9d2 	bl	801b244 <WM_GetFirstChild>
 8019ea0:	4605      	mov	r5, r0
 8019ea2:	b150      	cbz	r0, 8019eba <WM__InvalidateRectEx+0x92>
 8019ea4:	4628      	mov	r0, r5
 8019ea6:	2220      	movs	r2, #32
 8019ea8:	a904      	add	r1, sp, #16
 8019eaa:	f7ff faff 	bl	80194ac <WM_InvalidateWindowAndDescsEx>
 8019eae:	4628      	mov	r0, r5
 8019eb0:	f7f6 ff1c 	bl	8010cec <GUI_ALLOC_h2p>
 8019eb4:	6a05      	ldr	r5, [r0, #32]
 8019eb6:	2d00      	cmp	r5, #0
 8019eb8:	d1f4      	bne.n	8019ea4 <WM__InvalidateRectEx+0x7c>
 8019eba:	4620      	mov	r0, r4
 8019ebc:	f7f6 ff16 	bl	8010cec <GUI_ALLOC_h2p>
 8019ec0:	6a04      	ldr	r4, [r0, #32]
 8019ec2:	2c00      	cmp	r4, #0
 8019ec4:	d1d2      	bne.n	8019e6c <WM__InvalidateRectEx+0x44>
 8019ec6:	4668      	mov	r0, sp
 8019ec8:	f7f6 ff2c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019ecc:	b007      	add	sp, #28
 8019ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ed0:	a801      	add	r0, sp, #4
 8019ed2:	f7f6 ff27 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019ed6:	4620      	mov	r0, r4
 8019ed8:	f7f6 ff08 	bl	8010cec <GUI_ALLOC_h2p>
 8019edc:	6a04      	ldr	r4, [r0, #32]
 8019ede:	2c00      	cmp	r4, #0
 8019ee0:	d1c4      	bne.n	8019e6c <WM__InvalidateRectEx+0x44>
 8019ee2:	e7f0      	b.n	8019ec6 <WM__InvalidateRectEx+0x9e>
 8019ee4:	9900      	ldr	r1, [sp, #0]
 8019ee6:	2320      	movs	r3, #32
 8019ee8:	6a0a      	ldr	r2, [r1, #32]
 8019eea:	6989      	ldr	r1, [r1, #24]
 8019eec:	a802      	add	r0, sp, #8
 8019eee:	f7ff fc8f 	bl	8019810 <WM__InvalidateRect>
 8019ef2:	e7b8      	b.n	8019e66 <WM__InvalidateRectEx+0x3e>

08019ef4 <WM_SendMessage>:
 8019ef4:	b900      	cbnz	r0, 8019ef8 <WM_SendMessage+0x4>
 8019ef6:	4770      	bx	lr
 8019ef8:	b538      	push	{r3, r4, r5, lr}
 8019efa:	4604      	mov	r4, r0
 8019efc:	460d      	mov	r5, r1
 8019efe:	f7f8 fee7 	bl	8012cd0 <GUI_Lock>
 8019f02:	4629      	mov	r1, r5
 8019f04:	4620      	mov	r0, r4
 8019f06:	f002 fc83 	bl	801c810 <WM__SendMessage>
 8019f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f0e:	f7f8 bed5 	b.w	8012cbc <GUI_Unlock>
 8019f12:	bf00      	nop

08019f14 <WM__SendMsgNoData>:
 8019f14:	b500      	push	{lr}
 8019f16:	b085      	sub	sp, #20
 8019f18:	ab04      	add	r3, sp, #16
 8019f1a:	9001      	str	r0, [sp, #4]
 8019f1c:	f843 1d10 	str.w	r1, [r3, #-16]!
 8019f20:	4619      	mov	r1, r3
 8019f22:	f002 fc75 	bl	801c810 <WM__SendMessage>
 8019f26:	b005      	add	sp, #20
 8019f28:	f85d fb04 	ldr.w	pc, [sp], #4

08019f2c <WM__GetClientRectWin>:
 8019f2c:	b430      	push	{r4, r5}
 8019f2e:	2300      	movs	r3, #0
 8019f30:	800b      	strh	r3, [r1, #0]
 8019f32:	804b      	strh	r3, [r1, #2]
 8019f34:	8805      	ldrh	r5, [r0, #0]
 8019f36:	8844      	ldrh	r4, [r0, #2]
 8019f38:	8882      	ldrh	r2, [r0, #4]
 8019f3a:	88c3      	ldrh	r3, [r0, #6]
 8019f3c:	1b52      	subs	r2, r2, r5
 8019f3e:	1b1b      	subs	r3, r3, r4
 8019f40:	808a      	strh	r2, [r1, #4]
 8019f42:	80cb      	strh	r3, [r1, #6]
 8019f44:	bc30      	pop	{r4, r5}
 8019f46:	4770      	bx	lr

08019f48 <WM_InvalidateRect>:
 8019f48:	b900      	cbnz	r0, 8019f4c <WM_InvalidateRect+0x4>
 8019f4a:	4770      	bx	lr
 8019f4c:	f7ff bcc8 	b.w	80198e0 <WM_InvalidateRect.part.2>

08019f50 <WM_InvalidateWindow>:
 8019f50:	b900      	cbnz	r0, 8019f54 <WM_InvalidateWindow+0x4>
 8019f52:	4770      	bx	lr
 8019f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f58:	4607      	mov	r7, r0
 8019f5a:	b084      	sub	sp, #16
 8019f5c:	f7f8 feb8 	bl	8012cd0 <GUI_Lock>
 8019f60:	4638      	mov	r0, r7
 8019f62:	f7f6 fecd 	bl	8010d00 <GUI_ALLOC_LockH>
 8019f66:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8019f6a:	9000      	str	r0, [sp, #0]
 8019f6c:	f018 0f02 	tst.w	r8, #2
 8019f70:	d01e      	beq.n	8019fb0 <WM_InvalidateWindow+0x60>
 8019f72:	c803      	ldmia	r0, {r0, r1}
 8019f74:	ae02      	add	r6, sp, #8
 8019f76:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 8019f7a:	e886 0003 	stmia.w	r6, {r0, r1}
 8019f7e:	d11f      	bne.n	8019fc0 <WM_InvalidateWindow+0x70>
 8019f80:	463d      	mov	r5, r7
 8019f82:	e008      	b.n	8019f96 <WM_InvalidateWindow+0x46>
 8019f84:	f7f9 febe 	bl	8013d04 <GUI__IntersectRect>
 8019f88:	9b01      	ldr	r3, [sp, #4]
 8019f8a:	699c      	ldr	r4, [r3, #24]
 8019f8c:	a801      	add	r0, sp, #4
 8019f8e:	b1dc      	cbz	r4, 8019fc8 <WM_InvalidateWindow+0x78>
 8019f90:	f7f6 fec8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019f94:	4625      	mov	r5, r4
 8019f96:	4628      	mov	r0, r5
 8019f98:	f7f6 feb2 	bl	8010d00 <GUI_ALLOC_LockH>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	9301      	str	r3, [sp, #4]
 8019fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019fa2:	0793      	lsls	r3, r2, #30
 8019fa4:	4601      	mov	r1, r0
 8019fa6:	4630      	mov	r0, r6
 8019fa8:	d4ec      	bmi.n	8019f84 <WM_InvalidateWindow+0x34>
 8019faa:	a801      	add	r0, sp, #4
 8019fac:	f7f6 feba 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019fb0:	4668      	mov	r0, sp
 8019fb2:	f7f6 feb7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019fb6:	f7f8 fe81 	bl	8012cbc <GUI_Unlock>
 8019fba:	b004      	add	sp, #16
 8019fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fc0:	4638      	mov	r0, r7
 8019fc2:	f7ff f921 	bl	8019208 <WM__InvalidateDrawAndDescs>
 8019fc6:	e7db      	b.n	8019f80 <WM_InvalidateWindow+0x30>
 8019fc8:	f7f6 feac 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8019fcc:	4b0d      	ldr	r3, [pc, #52]	; (801a004 <WM_InvalidateWindow+0xb4>)
 8019fce:	681a      	ldr	r2, [r3, #0]
 8019fd0:	4295      	cmp	r5, r2
 8019fd2:	d002      	beq.n	8019fda <WM_InvalidateWindow+0x8a>
 8019fd4:	685b      	ldr	r3, [r3, #4]
 8019fd6:	429d      	cmp	r5, r3
 8019fd8:	d1ea      	bne.n	8019fb0 <WM_InvalidateWindow+0x60>
 8019fda:	f640 0301 	movw	r3, #2049	; 0x801
 8019fde:	ea08 0303 	and.w	r3, r8, r3
 8019fe2:	2b01      	cmp	r3, #1
 8019fe4:	d005      	beq.n	8019ff2 <WM_InvalidateWindow+0xa2>
 8019fe6:	4631      	mov	r1, r6
 8019fe8:	4638      	mov	r0, r7
 8019fea:	2220      	movs	r2, #32
 8019fec:	f7fe ff5a 	bl	8018ea4 <_Invalidate1Abs>
 8019ff0:	e7de      	b.n	8019fb0 <WM_InvalidateWindow+0x60>
 8019ff2:	9b00      	ldr	r3, [sp, #0]
 8019ff4:	4630      	mov	r0, r6
 8019ff6:	6a1a      	ldr	r2, [r3, #32]
 8019ff8:	6999      	ldr	r1, [r3, #24]
 8019ffa:	2320      	movs	r3, #32
 8019ffc:	f7ff fc08 	bl	8019810 <WM__InvalidateRect>
 801a000:	e7d6      	b.n	8019fb0 <WM_InvalidateWindow+0x60>
 801a002:	bf00      	nop
 801a004:	20035e80 	.word	0x20035e80

0801a008 <WM_CreateWindowAsChild>:
 801a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a00c:	b087      	sub	sp, #28
 801a00e:	461e      	mov	r6, r3
 801a010:	4680      	mov	r8, r0
 801a012:	4689      	mov	r9, r1
 801a014:	4615      	mov	r5, r2
 801a016:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a018:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a01a:	f7f8 fe59 	bl	8012cd0 <GUI_Lock>
 801a01e:	4b6a      	ldr	r3, [pc, #424]	; (801a1c8 <WM_CreateWindowAsChild+0x1c0>)
 801a020:	f8d3 a000 	ldr.w	sl, [r3]
 801a024:	b97f      	cbnz	r7, 801a046 <WM_CreateWindowAsChild+0x3e>
 801a026:	4b69      	ldr	r3, [pc, #420]	; (801a1cc <WM_CreateWindowAsChild+0x1c4>)
 801a028:	881b      	ldrh	r3, [r3, #0]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d170      	bne.n	801a110 <WM_CreateWindowAsChild+0x108>
 801a02e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801a032:	f7f7 f8bb 	bl	80111ac <GUI_ALLOC_AllocZero>
 801a036:	4604      	mov	r4, r0
 801a038:	bb28      	cbnz	r0, 801a086 <WM_CreateWindowAsChild+0x7e>
 801a03a:	f7f8 fe3f 	bl	8012cbc <GUI_Unlock>
 801a03e:	4620      	mov	r0, r4
 801a040:	b007      	add	sp, #28
 801a042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a046:	1c7b      	adds	r3, r7, #1
 801a048:	d06d      	beq.n	801a126 <WM_CreateWindowAsChild+0x11e>
 801a04a:	4638      	mov	r0, r7
 801a04c:	f7f6 fe58 	bl	8010d00 <GUI_ALLOC_LockH>
 801a050:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a054:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a058:	9001      	str	r0, [sp, #4]
 801a05a:	4490      	add	r8, r2
 801a05c:	4499      	add	r9, r3
 801a05e:	b91d      	cbnz	r5, 801a068 <WM_CreateWindowAsChild+0x60>
 801a060:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801a064:	1aad      	subs	r5, r5, r2
 801a066:	3501      	adds	r5, #1
 801a068:	b91e      	cbnz	r6, 801a072 <WM_CreateWindowAsChild+0x6a>
 801a06a:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 801a06e:	1af6      	subs	r6, r6, r3
 801a070:	3601      	adds	r6, #1
 801a072:	a801      	add	r0, sp, #4
 801a074:	f7f6 fe56 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a078:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801a07c:	f7f7 f896 	bl	80111ac <GUI_ALLOC_AllocZero>
 801a080:	4604      	mov	r4, r0
 801a082:	2800      	cmp	r0, #0
 801a084:	d0d9      	beq.n	801a03a <WM_CreateWindowAsChild+0x32>
 801a086:	4a51      	ldr	r2, [pc, #324]	; (801a1cc <WM_CreateWindowAsChild+0x1c4>)
 801a088:	8813      	ldrh	r3, [r2, #0]
 801a08a:	3301      	adds	r3, #1
 801a08c:	8013      	strh	r3, [r2, #0]
 801a08e:	f7f6 fe37 	bl	8010d00 <GUI_ALLOC_LockH>
 801a092:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a094:	4b4e      	ldr	r3, [pc, #312]	; (801a1d0 <WM_CreateWindowAsChild+0x1c8>)
 801a096:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801a098:	f10d 0b18 	add.w	fp, sp, #24
 801a09c:	ea4a 0a01 	orr.w	sl, sl, r1
 801a0a0:	f84b 0d18 	str.w	r0, [fp, #-24]!
 801a0a4:	4445      	add	r5, r8
 801a0a6:	444e      	add	r6, r9
 801a0a8:	ea0a 0303 	and.w	r3, sl, r3
 801a0ac:	4313      	orrs	r3, r2
 801a0ae:	3d01      	subs	r5, #1
 801a0b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0b2:	6283      	str	r3, [r0, #40]	; 0x28
 801a0b4:	3e01      	subs	r6, #1
 801a0b6:	8085      	strh	r5, [r0, #4]
 801a0b8:	80c6      	strh	r6, [r0, #6]
 801a0ba:	6102      	str	r2, [r0, #16]
 801a0bc:	f8a0 8000 	strh.w	r8, [r0]
 801a0c0:	f8a0 9002 	strh.w	r9, [r0, #2]
 801a0c4:	4658      	mov	r0, fp
 801a0c6:	f7f6 fe2d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a0ca:	4b42      	ldr	r3, [pc, #264]	; (801a1d4 <WM_CreateWindowAsChild+0x1cc>)
 801a0cc:	6818      	ldr	r0, [r3, #0]
 801a0ce:	2800      	cmp	r0, #0
 801a0d0:	d15b      	bne.n	801a18a <WM_CreateWindowAsChild+0x182>
 801a0d2:	601c      	str	r4, [r3, #0]
 801a0d4:	4639      	mov	r1, r7
 801a0d6:	4620      	mov	r0, r4
 801a0d8:	f7fe ffee 	bl	80190b8 <WM__InsertWindowIntoList>
 801a0dc:	f01a 0f20 	tst.w	sl, #32
 801a0e0:	d12f      	bne.n	801a142 <WM_CreateWindowAsChild+0x13a>
 801a0e2:	f01a 0f01 	tst.w	sl, #1
 801a0e6:	d120      	bne.n	801a12a <WM_CreateWindowAsChild+0x122>
 801a0e8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801a0ec:	d125      	bne.n	801a13a <WM_CreateWindowAsChild+0x132>
 801a0ee:	f01a 0f02 	tst.w	sl, #2
 801a0f2:	d158      	bne.n	801a1a6 <WM_CreateWindowAsChild+0x19e>
 801a0f4:	a906      	add	r1, sp, #24
 801a0f6:	2301      	movs	r3, #1
 801a0f8:	4620      	mov	r0, r4
 801a0fa:	f841 3d10 	str.w	r3, [r1, #-16]!
 801a0fe:	9403      	str	r4, [sp, #12]
 801a100:	f002 fb86 	bl	801c810 <WM__SendMessage>
 801a104:	f7f8 fdda 	bl	8012cbc <GUI_Unlock>
 801a108:	4620      	mov	r0, r4
 801a10a:	b007      	add	sp, #28
 801a10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a110:	4a31      	ldr	r2, [pc, #196]	; (801a1d8 <WM_CreateWindowAsChild+0x1d0>)
 801a112:	4b32      	ldr	r3, [pc, #200]	; (801a1dc <WM_CreateWindowAsChild+0x1d4>)
 801a114:	6812      	ldr	r2, [r2, #0]
 801a116:	7c52      	ldrb	r2, [r2, #17]
 801a118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a11c:	1c5a      	adds	r2, r3, #1
 801a11e:	2a01      	cmp	r2, #1
 801a120:	d985      	bls.n	801a02e <WM_CreateWindowAsChild+0x26>
 801a122:	461f      	mov	r7, r3
 801a124:	e791      	b.n	801a04a <WM_CreateWindowAsChild+0x42>
 801a126:	2700      	movs	r7, #0
 801a128:	e781      	b.n	801a02e <WM_CreateWindowAsChild+0x26>
 801a12a:	4a2d      	ldr	r2, [pc, #180]	; (801a1e0 <WM_CreateWindowAsChild+0x1d8>)
 801a12c:	6813      	ldr	r3, [r2, #0]
 801a12e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801a132:	f103 0301 	add.w	r3, r3, #1
 801a136:	6013      	str	r3, [r2, #0]
 801a138:	d0d9      	beq.n	801a0ee <WM_CreateWindowAsChild+0xe6>
 801a13a:	4620      	mov	r0, r4
 801a13c:	f000 ffcc 	bl	801b0d8 <WM_BringToBottom>
 801a140:	e7d5      	b.n	801a0ee <WM_CreateWindowAsChild+0xe6>
 801a142:	4e25      	ldr	r6, [pc, #148]	; (801a1d8 <WM_CreateWindowAsChild+0x1d0>)
 801a144:	f7f8 fdc4 	bl	8012cd0 <GUI_Lock>
 801a148:	6833      	ldr	r3, [r6, #0]
 801a14a:	4625      	mov	r5, r4
 801a14c:	649c      	str	r4, [r3, #72]	; 0x48
 801a14e:	e000      	b.n	801a152 <WM_CreateWindowAsChild+0x14a>
 801a150:	4605      	mov	r5, r0
 801a152:	4628      	mov	r0, r5
 801a154:	f7f6 fdca 	bl	8010cec <GUI_ALLOC_h2p>
 801a158:	6980      	ldr	r0, [r0, #24]
 801a15a:	2800      	cmp	r0, #0
 801a15c:	d1f8      	bne.n	801a150 <WM_CreateWindowAsChild+0x148>
 801a15e:	4b1f      	ldr	r3, [pc, #124]	; (801a1dc <WM_CreateWindowAsChild+0x1d4>)
 801a160:	681a      	ldr	r2, [r3, #0]
 801a162:	4295      	cmp	r5, r2
 801a164:	d01c      	beq.n	801a1a0 <WM_CreateWindowAsChild+0x198>
 801a166:	685b      	ldr	r3, [r3, #4]
 801a168:	429d      	cmp	r5, r3
 801a16a:	d018      	beq.n	801a19e <WM_CreateWindowAsChild+0x196>
 801a16c:	f7fa fbf8 	bl	8014960 <LCD_SetClipRectMax>
 801a170:	4620      	mov	r0, r4
 801a172:	f7f6 fdbb 	bl	8010cec <GUI_ALLOC_h2p>
 801a176:	6833      	ldr	r3, [r6, #0]
 801a178:	f9b0 1000 	ldrsh.w	r1, [r0]
 801a17c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a180:	651a      	str	r2, [r3, #80]	; 0x50
 801a182:	64d9      	str	r1, [r3, #76]	; 0x4c
 801a184:	f7f8 fd9a 	bl	8012cbc <GUI_Unlock>
 801a188:	e7ab      	b.n	801a0e2 <WM_CreateWindowAsChild+0xda>
 801a18a:	f7f6 fdaf 	bl	8010cec <GUI_ALLOC_h2p>
 801a18e:	4605      	mov	r5, r0
 801a190:	4620      	mov	r0, r4
 801a192:	f7f6 fdab 	bl	8010cec <GUI_ALLOC_h2p>
 801a196:	696b      	ldr	r3, [r5, #20]
 801a198:	6143      	str	r3, [r0, #20]
 801a19a:	616c      	str	r4, [r5, #20]
 801a19c:	e79a      	b.n	801a0d4 <WM_CreateWindowAsChild+0xcc>
 801a19e:	2001      	movs	r0, #1
 801a1a0:	f7f8 fd1a 	bl	8012bd8 <GUI_SelectLayer>
 801a1a4:	e7e2      	b.n	801a16c <WM_CreateWindowAsChild+0x164>
 801a1a6:	4620      	mov	r0, r4
 801a1a8:	f7f6 fdaa 	bl	8010d00 <GUI_ALLOC_LockH>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	4658      	mov	r0, fp
 801a1b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a1b2:	9300      	str	r3, [sp, #0]
 801a1b4:	f042 0202 	orr.w	r2, r2, #2
 801a1b8:	629a      	str	r2, [r3, #40]	; 0x28
 801a1ba:	f7f6 fdb3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a1be:	2100      	movs	r1, #0
 801a1c0:	4620      	mov	r0, r4
 801a1c2:	f7ff fb8d 	bl	80198e0 <WM_InvalidateRect.part.2>
 801a1c6:	e795      	b.n	801a0f4 <WM_CreateWindowAsChild+0xec>
 801a1c8:	20035e74 	.word	0x20035e74
 801a1cc:	20035e40 	.word	0x20035e40
 801a1d0:	003f3f9f 	.word	0x003f3f9f
 801a1d4:	20035e38 	.word	0x20035e38
 801a1d8:	20000014 	.word	0x20000014
 801a1dc:	20035e80 	.word	0x20035e80
 801a1e0:	20035e7c 	.word	0x20035e7c

0801a1e4 <WM_DeleteWindow>:
 801a1e4:	b900      	cbnz	r0, 801a1e8 <WM_DeleteWindow+0x4>
 801a1e6:	4770      	bx	lr
 801a1e8:	f7ff bc40 	b.w	8019a6c <WM_DeleteWindow.part.3>

0801a1ec <WM__GetTopLevelLayer>:
 801a1ec:	b510      	push	{r4, lr}
 801a1ee:	4604      	mov	r4, r0
 801a1f0:	e000      	b.n	801a1f4 <WM__GetTopLevelLayer+0x8>
 801a1f2:	461c      	mov	r4, r3
 801a1f4:	4620      	mov	r0, r4
 801a1f6:	f7f6 fd79 	bl	8010cec <GUI_ALLOC_h2p>
 801a1fa:	6983      	ldr	r3, [r0, #24]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d1f8      	bne.n	801a1f2 <WM__GetTopLevelLayer+0x6>
 801a200:	4a06      	ldr	r2, [pc, #24]	; (801a21c <WM__GetTopLevelLayer+0x30>)
 801a202:	6811      	ldr	r1, [r2, #0]
 801a204:	428c      	cmp	r4, r1
 801a206:	d006      	beq.n	801a216 <WM__GetTopLevelLayer+0x2a>
 801a208:	6853      	ldr	r3, [r2, #4]
 801a20a:	429c      	cmp	r4, r3
 801a20c:	bf0c      	ite	eq
 801a20e:	2001      	moveq	r0, #1
 801a210:	f04f 30ff 	movne.w	r0, #4294967295
 801a214:	bd10      	pop	{r4, pc}
 801a216:	4618      	mov	r0, r3
 801a218:	bd10      	pop	{r4, pc}
 801a21a:	bf00      	nop
 801a21c:	20035e80 	.word	0x20035e80

0801a220 <WM_GetActiveWindow>:
 801a220:	4b01      	ldr	r3, [pc, #4]	; (801a228 <WM_GetActiveWindow+0x8>)
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801a226:	4770      	bx	lr
 801a228:	20000014 	.word	0x20000014

0801a22c <WM__GetNextIVR>:
 801a22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a230:	f8df 8240 	ldr.w	r8, [pc, #576]	; 801a474 <WM__GetNextIVR+0x248>
 801a234:	f8d8 3000 	ldr.w	r3, [r8]
 801a238:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 801a23c:	b087      	sub	sp, #28
 801a23e:	b130      	cbz	r0, 801a24e <WM__GetNextIVR+0x22>
 801a240:	4e8b      	ldr	r6, [pc, #556]	; (801a470 <WM__GetNextIVR+0x244>)
 801a242:	6a33      	ldr	r3, [r6, #32]
 801a244:	2b01      	cmp	r3, #1
 801a246:	dd05      	ble.n	801a254 <WM__GetNextIVR+0x28>
 801a248:	3b01      	subs	r3, #1
 801a24a:	6233      	str	r3, [r6, #32]
 801a24c:	2000      	movs	r0, #0
 801a24e:	b007      	add	sp, #28
 801a250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a254:	f106 0714 	add.w	r7, r6, #20
 801a258:	69f3      	ldr	r3, [r6, #28]
 801a25a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a25e:	ad02      	add	r5, sp, #8
 801a260:	3301      	adds	r3, #1
 801a262:	e885 0003 	stmia.w	r5, {r0, r1}
 801a266:	61f3      	str	r3, [r6, #28]
 801a268:	b953      	cbnz	r3, 801a280 <WM__GetNextIVR+0x54>
 801a26a:	68f3      	ldr	r3, [r6, #12]
 801a26c:	9302      	str	r3, [sp, #8]
 801a26e:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 801a272:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 801a276:	4c7e      	ldr	r4, [pc, #504]	; (801a470 <WM__GetNextIVR+0x244>)
 801a278:	429a      	cmp	r2, r3
 801a27a:	da17      	bge.n	801a2ac <WM__GetNextIVR+0x80>
 801a27c:	6a33      	ldr	r3, [r6, #32]
 801a27e:	e7e3      	b.n	801a248 <WM__GetNextIVR+0x1c>
 801a280:	8b32      	ldrh	r2, [r6, #24]
 801a282:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 801a286:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 801a28a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a28e:	3201      	adds	r2, #1
 801a290:	b212      	sxth	r2, r2
 801a292:	4291      	cmp	r1, r2
 801a294:	f8ad 2008 	strh.w	r2, [sp, #8]
 801a298:	daeb      	bge.n	801a272 <WM__GetNextIVR+0x46>
 801a29a:	8b73      	ldrh	r3, [r6, #26]
 801a29c:	89b2      	ldrh	r2, [r6, #12]
 801a29e:	f8ad 2008 	strh.w	r2, [sp, #8]
 801a2a2:	3301      	adds	r3, #1
 801a2a4:	b21b      	sxth	r3, r3
 801a2a6:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a2aa:	e7e2      	b.n	801a272 <WM__GetNextIVR+0x46>
 801a2ac:	f8d8 3000 	ldr.w	r3, [r8]
 801a2b0:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 801a474 <WM__GetNextIVR+0x248>
 801a2b4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801a2b6:	f7f6 fd23 	bl	8010d00 <GUI_ALLOC_LockH>
 801a2ba:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a2be:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801a2c2:	9000      	str	r0, [sp, #0]
 801a2c4:	4299      	cmp	r1, r3
 801a2c6:	4602      	mov	r2, r0
 801a2c8:	f000 80b9 	beq.w	801a43e <WM__GetNextIVR+0x212>
 801a2cc:	f8d8 2000 	ldr.w	r2, [r8]
 801a2d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a2d4:	6c90      	ldr	r0, [r2, #72]	; 0x48
 801a2d6:	b910      	cbnz	r0, 801a2de <WM__GetNextIVR+0xb2>
 801a2d8:	e00d      	b.n	801a2f6 <WM__GetNextIVR+0xca>
 801a2da:	69a0      	ldr	r0, [r4, #24]
 801a2dc:	b158      	cbz	r0, 801a2f6 <WM__GetNextIVR+0xca>
 801a2de:	f7f6 fd05 	bl	8010cec <GUI_ALLOC_h2p>
 801a2e2:	4629      	mov	r1, r5
 801a2e4:	4604      	mov	r4, r0
 801a2e6:	6a00      	ldr	r0, [r0, #32]
 801a2e8:	f7fe fcba 	bl	8018c60 <_Findx0.constprop.10>
 801a2ec:	2800      	cmp	r0, #0
 801a2ee:	d0f4      	beq.n	801a2da <WM__GetNextIVR+0xae>
 801a2f0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a2f4:	e7ea      	b.n	801a2cc <WM__GetNextIVR+0xa0>
 801a2f6:	9b00      	ldr	r3, [sp, #0]
 801a2f8:	4629      	mov	r1, r5
 801a2fa:	69d8      	ldr	r0, [r3, #28]
 801a2fc:	f7fe fcb0 	bl	8018c60 <_Findx0.constprop.10>
 801a300:	2800      	cmp	r0, #0
 801a302:	d1f5      	bne.n	801a2f0 <WM__GetNextIVR+0xc4>
 801a304:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 801a308:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801a30c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a310:	429a      	cmp	r2, r3
 801a312:	f300 808c 	bgt.w	801a42e <WM__GetNextIVR+0x202>
 801a316:	f8d8 3000 	ldr.w	r3, [r8]
 801a31a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801a31c:	f10d 0810 	add.w	r8, sp, #16
 801a320:	b368      	cbz	r0, 801a37e <WM__GetNextIVR+0x152>
 801a322:	f7f6 fce3 	bl	8010cec <GUI_ALLOC_h2p>
 801a326:	6a04      	ldr	r4, [r0, #32]
 801a328:	4681      	mov	r9, r0
 801a32a:	b96c      	cbnz	r4, 801a348 <WM__GetNextIVR+0x11c>
 801a32c:	e023      	b.n	801a376 <WM__GetNextIVR+0x14a>
 801a32e:	07e1      	lsls	r1, r4, #31
 801a330:	d44b      	bmi.n	801a3ca <WM__GetNextIVR+0x19e>
 801a332:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a336:	9801      	ldr	r0, [sp, #4]
 801a338:	3b01      	subs	r3, #1
 801a33a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a33e:	6a04      	ldr	r4, [r0, #32]
 801a340:	a801      	add	r0, sp, #4
 801a342:	f7f6 fcef 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a346:	b1b4      	cbz	r4, 801a376 <WM__GetNextIVR+0x14a>
 801a348:	4620      	mov	r0, r4
 801a34a:	f7f6 fcd9 	bl	8010d00 <GUI_ALLOC_LockH>
 801a34e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a350:	9001      	str	r0, [sp, #4]
 801a352:	07a3      	lsls	r3, r4, #30
 801a354:	d5f3      	bpl.n	801a33e <WM__GetNextIVR+0x112>
 801a356:	c803      	ldmia	r0, {r0, r1}
 801a358:	e888 0003 	stmia.w	r8, {r0, r1}
 801a35c:	4641      	mov	r1, r8
 801a35e:	4628      	mov	r0, r5
 801a360:	f7f7 f9e0 	bl	8011724 <GUI_RectsIntersect>
 801a364:	2800      	cmp	r0, #0
 801a366:	d1e2      	bne.n	801a32e <WM__GetNextIVR+0x102>
 801a368:	9801      	ldr	r0, [sp, #4]
 801a36a:	6a04      	ldr	r4, [r0, #32]
 801a36c:	a801      	add	r0, sp, #4
 801a36e:	f7f6 fcd9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a372:	2c00      	cmp	r4, #0
 801a374:	d1e8      	bne.n	801a348 <WM__GetNextIVR+0x11c>
 801a376:	f8d9 0018 	ldr.w	r0, [r9, #24]
 801a37a:	2800      	cmp	r0, #0
 801a37c:	d1d1      	bne.n	801a322 <WM__GetNextIVR+0xf6>
 801a37e:	9b00      	ldr	r3, [sp, #0]
 801a380:	69dc      	ldr	r4, [r3, #28]
 801a382:	f10d 0810 	add.w	r8, sp, #16
 801a386:	b974      	cbnz	r4, 801a3a6 <WM__GetNextIVR+0x17a>
 801a388:	e040      	b.n	801a40c <WM__GetNextIVR+0x1e0>
 801a38a:	07e3      	lsls	r3, r4, #31
 801a38c:	d42e      	bmi.n	801a3ec <WM__GetNextIVR+0x1c0>
 801a38e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a392:	9801      	ldr	r0, [sp, #4]
 801a394:	3b01      	subs	r3, #1
 801a396:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a39a:	6a04      	ldr	r4, [r0, #32]
 801a39c:	a801      	add	r0, sp, #4
 801a39e:	f7f6 fcc1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a3a2:	2c00      	cmp	r4, #0
 801a3a4:	d032      	beq.n	801a40c <WM__GetNextIVR+0x1e0>
 801a3a6:	4620      	mov	r0, r4
 801a3a8:	f7f6 fcaa 	bl	8010d00 <GUI_ALLOC_LockH>
 801a3ac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a3ae:	9001      	str	r0, [sp, #4]
 801a3b0:	07a2      	lsls	r2, r4, #30
 801a3b2:	d5f2      	bpl.n	801a39a <WM__GetNextIVR+0x16e>
 801a3b4:	c803      	ldmia	r0, {r0, r1}
 801a3b6:	e888 0003 	stmia.w	r8, {r0, r1}
 801a3ba:	4641      	mov	r1, r8
 801a3bc:	4628      	mov	r0, r5
 801a3be:	f7f7 f9b1 	bl	8011724 <GUI_RectsIntersect>
 801a3c2:	2800      	cmp	r0, #0
 801a3c4:	d1e1      	bne.n	801a38a <WM__GetNextIVR+0x15e>
 801a3c6:	9801      	ldr	r0, [sp, #4]
 801a3c8:	e7e7      	b.n	801a39a <WM__GetNextIVR+0x16e>
 801a3ca:	9801      	ldr	r0, [sp, #4]
 801a3cc:	69c4      	ldr	r4, [r0, #28]
 801a3ce:	2c00      	cmp	r4, #0
 801a3d0:	d0b5      	beq.n	801a33e <WM__GetNextIVR+0x112>
 801a3d2:	4620      	mov	r0, r4
 801a3d4:	4642      	mov	r2, r8
 801a3d6:	4629      	mov	r1, r5
 801a3d8:	f7fe fb30 	bl	8018a3c <_Findx1>
 801a3dc:	4620      	mov	r0, r4
 801a3de:	f7f6 fc85 	bl	8010cec <GUI_ALLOC_h2p>
 801a3e2:	6a04      	ldr	r4, [r0, #32]
 801a3e4:	2c00      	cmp	r4, #0
 801a3e6:	d1f4      	bne.n	801a3d2 <WM__GetNextIVR+0x1a6>
 801a3e8:	9801      	ldr	r0, [sp, #4]
 801a3ea:	e7be      	b.n	801a36a <WM__GetNextIVR+0x13e>
 801a3ec:	9801      	ldr	r0, [sp, #4]
 801a3ee:	69c4      	ldr	r4, [r0, #28]
 801a3f0:	2c00      	cmp	r4, #0
 801a3f2:	d0d2      	beq.n	801a39a <WM__GetNextIVR+0x16e>
 801a3f4:	4620      	mov	r0, r4
 801a3f6:	4642      	mov	r2, r8
 801a3f8:	4629      	mov	r1, r5
 801a3fa:	f7fe fb1f 	bl	8018a3c <_Findx1>
 801a3fe:	4620      	mov	r0, r4
 801a400:	f7f6 fc74 	bl	8010cec <GUI_ALLOC_h2p>
 801a404:	6a04      	ldr	r4, [r0, #32]
 801a406:	2c00      	cmp	r4, #0
 801a408:	d1f4      	bne.n	801a3f4 <WM__GetNextIVR+0x1c8>
 801a40a:	e7dc      	b.n	801a3c6 <WM__GetNextIVR+0x19a>
 801a40c:	4668      	mov	r0, sp
 801a40e:	f7f6 fc89 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a412:	69f2      	ldr	r2, [r6, #28]
 801a414:	f644 6320 	movw	r3, #20000	; 0x4e20
 801a418:	429a      	cmp	r2, r3
 801a41a:	f73f af2f 	bgt.w	801a27c <WM__GetNextIVR+0x50>
 801a41e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a422:	e887 0003 	stmia.w	r7, {r0, r1}
 801a426:	f7fe fdb3 	bl	8018f90 <WM__ActivateClipRect>
 801a42a:	2001      	movs	r0, #1
 801a42c:	e70f      	b.n	801a24e <WM__GetNextIVR+0x22>
 801a42e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a432:	e887 0003 	stmia.w	r7, {r0, r1}
 801a436:	4668      	mov	r0, sp
 801a438:	f7f6 fc74 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a43c:	e72d      	b.n	801a29a <WM__GetNextIVR+0x6e>
 801a43e:	f8d9 1000 	ldr.w	r1, [r9]
 801a442:	6923      	ldr	r3, [r4, #16]
 801a444:	6c88      	ldr	r0, [r1, #72]	; 0x48
 801a446:	9303      	str	r3, [sp, #12]
 801a448:	b150      	cbz	r0, 801a460 <WM__GetNextIVR+0x234>
 801a44a:	f7f6 fc4f 	bl	8010cec <GUI_ALLOC_h2p>
 801a44e:	4604      	mov	r4, r0
 801a450:	4629      	mov	r1, r5
 801a452:	6a00      	ldr	r0, [r0, #32]
 801a454:	f7fe fc4a 	bl	8018cec <_Findy1.constprop.11>
 801a458:	69a0      	ldr	r0, [r4, #24]
 801a45a:	2800      	cmp	r0, #0
 801a45c:	d1f5      	bne.n	801a44a <WM__GetNextIVR+0x21e>
 801a45e:	9a00      	ldr	r2, [sp, #0]
 801a460:	69d0      	ldr	r0, [r2, #28]
 801a462:	4629      	mov	r1, r5
 801a464:	f7fe fc42 	bl	8018cec <_Findy1.constprop.11>
 801a468:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a46c:	e72e      	b.n	801a2cc <WM__GetNextIVR+0xa0>
 801a46e:	bf00      	nop
 801a470:	20000854 	.word	0x20000854
 801a474:	20000014 	.word	0x20000014

0801a478 <WM__InitIVRSearch>:
 801a478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a47c:	4c5e      	ldr	r4, [pc, #376]	; (801a5f8 <WM__InitIVRSearch+0x180>)
 801a47e:	6822      	ldr	r2, [r4, #0]
 801a480:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 801a484:	b089      	sub	sp, #36	; 0x24
 801a486:	b14b      	cbz	r3, 801a49c <WM__InitIVRSearch+0x24>
 801a488:	4d5c      	ldr	r5, [pc, #368]	; (801a5fc <WM__InitIVRSearch+0x184>)
 801a48a:	6a2b      	ldr	r3, [r5, #32]
 801a48c:	3301      	adds	r3, #1
 801a48e:	2b01      	cmp	r3, #1
 801a490:	622b      	str	r3, [r5, #32]
 801a492:	dd09      	ble.n	801a4a8 <WM__InitIVRSearch+0x30>
 801a494:	2001      	movs	r0, #1
 801a496:	b009      	add	sp, #36	; 0x24
 801a498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a49c:	f7fe fd78 	bl	8018f90 <WM__ActivateClipRect>
 801a4a0:	2001      	movs	r0, #1
 801a4a2:	b009      	add	sp, #36	; 0x24
 801a4a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a4a8:	4607      	mov	r7, r0
 801a4aa:	6c90      	ldr	r0, [r2, #72]	; 0x48
 801a4ac:	f7f6 fc28 	bl	8010d00 <GUI_ALLOC_LockH>
 801a4b0:	4b53      	ldr	r3, [pc, #332]	; (801a600 <WM__InitIVRSearch+0x188>)
 801a4b2:	9001      	str	r0, [sp, #4]
 801a4b4:	781b      	ldrb	r3, [r3, #0]
 801a4b6:	f04f 32ff 	mov.w	r2, #4294967295
 801a4ba:	61ea      	str	r2, [r5, #28]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d061      	beq.n	801a584 <WM__InitIVRSearch+0x10c>
 801a4c0:	3008      	adds	r0, #8
 801a4c2:	c803      	ldmia	r0, {r0, r1}
 801a4c4:	ae04      	add	r6, sp, #16
 801a4c6:	e886 0003 	stmia.w	r6, {r0, r1}
 801a4ca:	b11f      	cbz	r7, 801a4d4 <WM__InitIVRSearch+0x5c>
 801a4cc:	4639      	mov	r1, r7
 801a4ce:	4630      	mov	r0, r6
 801a4d0:	f7f9 fc18 	bl	8013d04 <GUI__IntersectRect>
 801a4d4:	6823      	ldr	r3, [r4, #0]
 801a4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	f000 8087 	beq.w	801a5ec <WM__InitIVRSearch+0x174>
 801a4de:	4f49      	ldr	r7, [pc, #292]	; (801a604 <WM__InitIVRSearch+0x18c>)
 801a4e0:	6818      	ldr	r0, [r3, #0]
 801a4e2:	6859      	ldr	r1, [r3, #4]
 801a4e4:	683a      	ldr	r2, [r7, #0]
 801a4e6:	ab06      	add	r3, sp, #24
 801a4e8:	c303      	stmia	r3!, {r0, r1}
 801a4ea:	9801      	ldr	r0, [sp, #4]
 801a4ec:	9002      	str	r0, [sp, #8]
 801a4ee:	f10d 0808 	add.w	r8, sp, #8
 801a4f2:	2a00      	cmp	r2, #0
 801a4f4:	d160      	bne.n	801a5b8 <WM__InitIVRSearch+0x140>
 801a4f6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a4fa:	f9b0 1000 	ldrsh.w	r1, [r0]
 801a4fe:	a806      	add	r0, sp, #24
 801a500:	f7f7 f85e 	bl	80115c0 <GUI_MoveRect>
 801a504:	4630      	mov	r0, r6
 801a506:	a906      	add	r1, sp, #24
 801a508:	f7f9 fbfc 	bl	8013d04 <GUI__IntersectRect>
 801a50c:	4640      	mov	r0, r8
 801a50e:	f7f6 fc09 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a512:	f8d7 9000 	ldr.w	r9, [r7]
 801a516:	f10d 080c 	add.w	r8, sp, #12
 801a51a:	f1b9 0f00 	cmp.w	r9, #0
 801a51e:	d126      	bne.n	801a56e <WM__InitIVRSearch+0xf6>
 801a520:	6823      	ldr	r3, [r4, #0]
 801a522:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 801a524:	e008      	b.n	801a538 <WM__InitIVRSearch+0xc0>
 801a526:	f7f9 fbed 	bl	8013d04 <GUI__IntersectRect>
 801a52a:	9b03      	ldr	r3, [sp, #12]
 801a52c:	699c      	ldr	r4, [r3, #24]
 801a52e:	4640      	mov	r0, r8
 801a530:	b38c      	cbz	r4, 801a596 <WM__InitIVRSearch+0x11e>
 801a532:	f7f6 fbf7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a536:	4627      	mov	r7, r4
 801a538:	4638      	mov	r0, r7
 801a53a:	f7f6 fbe1 	bl	8010d00 <GUI_ALLOC_LockH>
 801a53e:	4603      	mov	r3, r0
 801a540:	4601      	mov	r1, r0
 801a542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a544:	9303      	str	r3, [sp, #12]
 801a546:	0793      	lsls	r3, r2, #30
 801a548:	4630      	mov	r0, r6
 801a54a:	d4ec      	bmi.n	801a526 <WM__InitIVRSearch+0xae>
 801a54c:	4640      	mov	r0, r8
 801a54e:	f7f6 fbe9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a552:	6a2b      	ldr	r3, [r5, #32]
 801a554:	3b01      	subs	r3, #1
 801a556:	622b      	str	r3, [r5, #32]
 801a558:	2000      	movs	r0, #0
 801a55a:	e79c      	b.n	801a496 <WM__InitIVRSearch+0x1e>
 801a55c:	f7f9 fbd2 	bl	8013d04 <GUI__IntersectRect>
 801a560:	9b03      	ldr	r3, [sp, #12]
 801a562:	699f      	ldr	r7, [r3, #24]
 801a564:	4640      	mov	r0, r8
 801a566:	b37f      	cbz	r7, 801a5c8 <WM__InitIVRSearch+0x150>
 801a568:	f7f6 fbdc 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a56c:	46b9      	mov	r9, r7
 801a56e:	4648      	mov	r0, r9
 801a570:	f7f6 fbc6 	bl	8010d00 <GUI_ALLOC_LockH>
 801a574:	4603      	mov	r3, r0
 801a576:	4601      	mov	r1, r0
 801a578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a57a:	9303      	str	r3, [sp, #12]
 801a57c:	0792      	lsls	r2, r2, #30
 801a57e:	4630      	mov	r0, r6
 801a580:	d5e4      	bpl.n	801a54c <WM__InitIVRSearch+0xd4>
 801a582:	e7eb      	b.n	801a55c <WM__InitIVRSearch+0xe4>
 801a584:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a586:	f013 0602 	ands.w	r6, r3, #2
 801a58a:	d027      	beq.n	801a5dc <WM__InitIVRSearch+0x164>
 801a58c:	c803      	ldmia	r0, {r0, r1}
 801a58e:	ae04      	add	r6, sp, #16
 801a590:	e886 0003 	stmia.w	r6, {r0, r1}
 801a594:	e799      	b.n	801a4ca <WM__InitIVRSearch+0x52>
 801a596:	f7f6 fbc5 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a59a:	4b1b      	ldr	r3, [pc, #108]	; (801a608 <WM__InitIVRSearch+0x190>)
 801a59c:	681a      	ldr	r2, [r3, #0]
 801a59e:	4297      	cmp	r7, r2
 801a5a0:	d002      	beq.n	801a5a8 <WM__InitIVRSearch+0x130>
 801a5a2:	685b      	ldr	r3, [r3, #4]
 801a5a4:	429f      	cmp	r7, r3
 801a5a6:	d1d4      	bne.n	801a552 <WM__InitIVRSearch+0xda>
 801a5a8:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a5ac:	4b17      	ldr	r3, [pc, #92]	; (801a60c <WM__InitIVRSearch+0x194>)
 801a5ae:	e883 0003 	stmia.w	r3, {r0, r1}
 801a5b2:	f7ff fe3b 	bl	801a22c <WM__GetNextIVR>
 801a5b6:	e76e      	b.n	801a496 <WM__InitIVRSearch+0x1e>
 801a5b8:	4640      	mov	r0, r8
 801a5ba:	f7f6 fbb3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a5be:	6838      	ldr	r0, [r7, #0]
 801a5c0:	f7f6 fb9e 	bl	8010d00 <GUI_ALLOC_LockH>
 801a5c4:	9002      	str	r0, [sp, #8]
 801a5c6:	e796      	b.n	801a4f6 <WM__InitIVRSearch+0x7e>
 801a5c8:	f7f6 fbac 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a5cc:	4b0e      	ldr	r3, [pc, #56]	; (801a608 <WM__InitIVRSearch+0x190>)
 801a5ce:	681a      	ldr	r2, [r3, #0]
 801a5d0:	4591      	cmp	r9, r2
 801a5d2:	d0a5      	beq.n	801a520 <WM__InitIVRSearch+0xa8>
 801a5d4:	685b      	ldr	r3, [r3, #4]
 801a5d6:	4599      	cmp	r9, r3
 801a5d8:	d0a2      	beq.n	801a520 <WM__InitIVRSearch+0xa8>
 801a5da:	e7ba      	b.n	801a552 <WM__InitIVRSearch+0xda>
 801a5dc:	6a2b      	ldr	r3, [r5, #32]
 801a5de:	a801      	add	r0, sp, #4
 801a5e0:	3b01      	subs	r3, #1
 801a5e2:	622b      	str	r3, [r5, #32]
 801a5e4:	f7f6 fb9e 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a5e8:	4630      	mov	r0, r6
 801a5ea:	e754      	b.n	801a496 <WM__InitIVRSearch+0x1e>
 801a5ec:	a801      	add	r0, sp, #4
 801a5ee:	f7f6 fb99 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a5f2:	4f04      	ldr	r7, [pc, #16]	; (801a604 <WM__InitIVRSearch+0x18c>)
 801a5f4:	e78d      	b.n	801a512 <WM__InitIVRSearch+0x9a>
 801a5f6:	bf00      	nop
 801a5f8:	20000014 	.word	0x20000014
 801a5fc:	20000854 	.word	0x20000854
 801a600:	20035e70 	.word	0x20035e70
 801a604:	20035e48 	.word	0x20035e48
 801a608:	20035e80 	.word	0x20035e80
 801a60c:	20000860 	.word	0x20000860

0801a610 <WM__Paint1>:
 801a610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a614:	b089      	sub	sp, #36	; 0x24
 801a616:	4606      	mov	r6, r0
 801a618:	f7f6 fb72 	bl	8010d00 <GUI_ALLOC_LockH>
 801a61c:	f100 0208 	add.w	r2, r0, #8
 801a620:	4603      	mov	r3, r0
 801a622:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a626:	ac02      	add	r4, sp, #8
 801a628:	691f      	ldr	r7, [r3, #16]
 801a62a:	9301      	str	r3, [sp, #4]
 801a62c:	e884 0003 	stmia.w	r4, {r0, r1}
 801a630:	a801      	add	r0, sp, #4
 801a632:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801a634:	f7f6 fb76 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a638:	b10f      	cbz	r7, 801a63e <WM__Paint1+0x2e>
 801a63a:	07ab      	lsls	r3, r5, #30
 801a63c:	d402      	bmi.n	801a644 <WM__Paint1+0x34>
 801a63e:	b009      	add	sp, #36	; 0x24
 801a640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a644:	4f1e      	ldr	r7, [pc, #120]	; (801a6c0 <WM__Paint1+0xb0>)
 801a646:	212e      	movs	r1, #46	; 0x2e
 801a648:	4630      	mov	r0, r6
 801a64a:	f000 ff7b 	bl	801b544 <WM_SendMessageNoPara>
 801a64e:	783b      	ldrb	r3, [r7, #0]
 801a650:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 801a654:	f103 0301 	add.w	r3, r3, #1
 801a658:	703b      	strb	r3, [r7, #0]
 801a65a:	d119      	bne.n	801a690 <WM__Paint1+0x80>
 801a65c:	4620      	mov	r0, r4
 801a65e:	f7ff ff0b 	bl	801a478 <WM__InitIVRSearch>
 801a662:	b318      	cbz	r0, 801a6ac <WM__Paint1+0x9c>
 801a664:	f8df 905c 	ldr.w	r9, [pc, #92]	; 801a6c4 <WM__Paint1+0xb4>
 801a668:	f04f 080f 	mov.w	r8, #15
 801a66c:	9605      	str	r6, [sp, #20]
 801a66e:	f8cd 8010 	str.w	r8, [sp, #16]
 801a672:	9407      	str	r4, [sp, #28]
 801a674:	f7f7 f8ae 	bl	80117d4 <GL_SetDefault>
 801a678:	f8d9 3000 	ldr.w	r3, [r9]
 801a67c:	a904      	add	r1, sp, #16
 801a67e:	645d      	str	r5, [r3, #68]	; 0x44
 801a680:	4630      	mov	r0, r6
 801a682:	f002 f8c5 	bl	801c810 <WM__SendMessage>
 801a686:	f7ff fdd1 	bl	801a22c <WM__GetNextIVR>
 801a68a:	2800      	cmp	r0, #0
 801a68c:	d1ee      	bne.n	801a66c <WM__Paint1+0x5c>
 801a68e:	e00d      	b.n	801a6ac <WM__Paint1+0x9c>
 801a690:	230f      	movs	r3, #15
 801a692:	9304      	str	r3, [sp, #16]
 801a694:	9605      	str	r6, [sp, #20]
 801a696:	9407      	str	r4, [sp, #28]
 801a698:	f7f7 f89c 	bl	80117d4 <GL_SetDefault>
 801a69c:	4b09      	ldr	r3, [pc, #36]	; (801a6c4 <WM__Paint1+0xb4>)
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	2200      	movs	r2, #0
 801a6a2:	645a      	str	r2, [r3, #68]	; 0x44
 801a6a4:	a904      	add	r1, sp, #16
 801a6a6:	4630      	mov	r0, r6
 801a6a8:	f002 f8b2 	bl	801c810 <WM__SendMessage>
 801a6ac:	783b      	ldrb	r3, [r7, #0]
 801a6ae:	4630      	mov	r0, r6
 801a6b0:	3b01      	subs	r3, #1
 801a6b2:	212f      	movs	r1, #47	; 0x2f
 801a6b4:	703b      	strb	r3, [r7, #0]
 801a6b6:	f000 ff45 	bl	801b544 <WM_SendMessageNoPara>
 801a6ba:	b009      	add	sp, #36	; 0x24
 801a6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6c0:	20035e70 	.word	0x20035e70
 801a6c4:	20000014 	.word	0x20000014

0801a6c8 <WM__Paint>:
 801a6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6cc:	b088      	sub	sp, #32
 801a6ce:	ad06      	add	r5, sp, #24
 801a6d0:	9003      	str	r0, [sp, #12]
 801a6d2:	f7f6 fb15 	bl	8010d00 <GUI_ALLOC_LockH>
 801a6d6:	f100 0208 	add.w	r2, r0, #8
 801a6da:	4603      	mov	r3, r0
 801a6dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a6e0:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801a6e2:	9304      	str	r3, [sp, #16]
 801a6e4:	e885 0003 	stmia.w	r5, {r0, r1}
 801a6e8:	a804      	add	r0, sp, #16
 801a6ea:	699f      	ldr	r7, [r3, #24]
 801a6ec:	691c      	ldr	r4, [r3, #16]
 801a6ee:	f7f6 fb19 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a6f2:	f244 0320 	movw	r3, #16416	; 0x4020
 801a6f6:	4033      	ands	r3, r6
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d079      	beq.n	801a7f0 <WM__Paint+0x128>
 801a6fc:	2c00      	cmp	r4, #0
 801a6fe:	d075      	beq.n	801a7ec <WM__Paint+0x124>
 801a700:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801a704:	e008      	b.n	801a718 <WM__Paint+0x50>
 801a706:	f7f9 fafd 	bl	8013d04 <GUI__IntersectRect>
 801a70a:	9b05      	ldr	r3, [sp, #20]
 801a70c:	699c      	ldr	r4, [r3, #24]
 801a70e:	a805      	add	r0, sp, #20
 801a710:	b34c      	cbz	r4, 801a766 <WM__Paint+0x9e>
 801a712:	f7f6 fb07 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a716:	46a0      	mov	r8, r4
 801a718:	4640      	mov	r0, r8
 801a71a:	f7f6 faf1 	bl	8010d00 <GUI_ALLOC_LockH>
 801a71e:	4602      	mov	r2, r0
 801a720:	4601      	mov	r1, r0
 801a722:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801a724:	9205      	str	r2, [sp, #20]
 801a726:	f013 0402 	ands.w	r4, r3, #2
 801a72a:	4628      	mov	r0, r5
 801a72c:	d1eb      	bne.n	801a706 <WM__Paint+0x3e>
 801a72e:	a805      	add	r0, sp, #20
 801a730:	f7f6 faf8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a734:	9803      	ldr	r0, [sp, #12]
 801a736:	f7f6 fae3 	bl	8010d00 <GUI_ALLOC_LockH>
 801a73a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801a73c:	9004      	str	r0, [sp, #16]
 801a73e:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 801a742:	f023 0320 	bic.w	r3, r3, #32
 801a746:	0492      	lsls	r2, r2, #18
 801a748:	bf48      	it	mi
 801a74a:	f043 0304 	orrmi.w	r3, r3, #4
 801a74e:	6283      	str	r3, [r0, #40]	; 0x28
 801a750:	a804      	add	r0, sp, #16
 801a752:	f7f6 fae7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a756:	4a32      	ldr	r2, [pc, #200]	; (801a820 <WM__Paint+0x158>)
 801a758:	8813      	ldrh	r3, [r2, #0]
 801a75a:	4620      	mov	r0, r4
 801a75c:	3b01      	subs	r3, #1
 801a75e:	8013      	strh	r3, [r2, #0]
 801a760:	b008      	add	sp, #32
 801a762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a766:	4c2f      	ldr	r4, [pc, #188]	; (801a824 <WM__Paint+0x15c>)
 801a768:	f7f6 fadc 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a76c:	6823      	ldr	r3, [r4, #0]
 801a76e:	4598      	cmp	r8, r3
 801a770:	d143      	bne.n	801a7fa <WM__Paint+0x132>
 801a772:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801a776:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 801a830 <WM__Paint+0x168>
 801a77a:	f7f8 faa9 	bl	8012cd0 <GUI_Lock>
 801a77e:	f8d9 3000 	ldr.w	r3, [r9]
 801a782:	f1b8 0f00 	cmp.w	r8, #0
 801a786:	d102      	bne.n	801a78e <WM__Paint+0xc6>
 801a788:	4a27      	ldr	r2, [pc, #156]	; (801a828 <WM__Paint+0x160>)
 801a78a:	f8d2 8000 	ldr.w	r8, [r2]
 801a78e:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
 801a792:	46c2      	mov	sl, r8
 801a794:	e000      	b.n	801a798 <WM__Paint+0xd0>
 801a796:	469a      	mov	sl, r3
 801a798:	4650      	mov	r0, sl
 801a79a:	f7f6 faa7 	bl	8010cec <GUI_ALLOC_h2p>
 801a79e:	6983      	ldr	r3, [r0, #24]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d1f8      	bne.n	801a796 <WM__Paint+0xce>
 801a7a4:	6822      	ldr	r2, [r4, #0]
 801a7a6:	491f      	ldr	r1, [pc, #124]	; (801a824 <WM__Paint+0x15c>)
 801a7a8:	4592      	cmp	sl, r2
 801a7aa:	d036      	beq.n	801a81a <WM__Paint+0x152>
 801a7ac:	684b      	ldr	r3, [r1, #4]
 801a7ae:	459a      	cmp	sl, r3
 801a7b0:	d02f      	beq.n	801a812 <WM__Paint+0x14a>
 801a7b2:	f7fa f8d5 	bl	8014960 <LCD_SetClipRectMax>
 801a7b6:	4640      	mov	r0, r8
 801a7b8:	f7f6 fa98 	bl	8010cec <GUI_ALLOC_h2p>
 801a7bc:	f8d9 3000 	ldr.w	r3, [r9]
 801a7c0:	f9b0 1000 	ldrsh.w	r1, [r0]
 801a7c4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a7c8:	651a      	str	r2, [r3, #80]	; 0x50
 801a7ca:	64d9      	str	r1, [r3, #76]	; 0x4c
 801a7cc:	f7f8 fa76 	bl	8012cbc <GUI_Unlock>
 801a7d0:	0771      	lsls	r1, r6, #29
 801a7d2:	d519      	bpl.n	801a808 <WM__Paint+0x140>
 801a7d4:	b1b7      	cbz	r7, 801a804 <WM__Paint+0x13c>
 801a7d6:	f006 0301 	and.w	r3, r6, #1
 801a7da:	f083 0301 	eor.w	r3, r3, #1
 801a7de:	9300      	str	r3, [sp, #0]
 801a7e0:	4628      	mov	r0, r5
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	aa03      	add	r2, sp, #12
 801a7e6:	4911      	ldr	r1, [pc, #68]	; (801a82c <WM__Paint+0x164>)
 801a7e8:	f006 ff44 	bl	8021674 <GUI_MEMDEV_Draw>
 801a7ec:	2400      	movs	r4, #0
 801a7ee:	e7a1      	b.n	801a734 <WM__Paint+0x6c>
 801a7f0:	461c      	mov	r4, r3
 801a7f2:	4620      	mov	r0, r4
 801a7f4:	b008      	add	sp, #32
 801a7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7fa:	6863      	ldr	r3, [r4, #4]
 801a7fc:	4598      	cmp	r8, r3
 801a7fe:	d0b8      	beq.n	801a772 <WM__Paint+0xaa>
 801a800:	2400      	movs	r4, #0
 801a802:	e797      	b.n	801a734 <WM__Paint+0x6c>
 801a804:	2301      	movs	r3, #1
 801a806:	e7ea      	b.n	801a7de <WM__Paint+0x116>
 801a808:	9803      	ldr	r0, [sp, #12]
 801a80a:	f7fe fac3 	bl	8018d94 <WM__PaintWinAndOverlays>
 801a80e:	2401      	movs	r4, #1
 801a810:	e790      	b.n	801a734 <WM__Paint+0x6c>
 801a812:	2001      	movs	r0, #1
 801a814:	f7f8 f9e0 	bl	8012bd8 <GUI_SelectLayer>
 801a818:	e7cb      	b.n	801a7b2 <WM__Paint+0xea>
 801a81a:	4618      	mov	r0, r3
 801a81c:	e7fa      	b.n	801a814 <WM__Paint+0x14c>
 801a81e:	bf00      	nop
 801a820:	20035e78 	.word	0x20035e78
 801a824:	20035e80 	.word	0x20035e80
 801a828:	20035e38 	.word	0x20035e38
 801a82c:	08018e35 	.word	0x08018e35
 801a830:	20000014 	.word	0x20000014

0801a834 <WM__DeleteSecure>:
 801a834:	b508      	push	{r3, lr}
 801a836:	f7f6 fa59 	bl	8010cec <GUI_ALLOC_h2p>
 801a83a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a83c:	4a03      	ldr	r2, [pc, #12]	; (801a84c <WM__DeleteSecure+0x18>)
 801a83e:	2101      	movs	r1, #1
 801a840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a844:	6283      	str	r3, [r0, #40]	; 0x28
 801a846:	6051      	str	r1, [r2, #4]
 801a848:	bd08      	pop	{r3, pc}
 801a84a:	bf00      	nop
 801a84c:	20000854 	.word	0x20000854

0801a850 <WM_Exec>:
 801a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a854:	b0ab      	sub	sp, #172	; 0xac
 801a856:	f7f8 fa3b 	bl	8012cd0 <GUI_Lock>
 801a85a:	4b9b      	ldr	r3, [pc, #620]	; (801aac8 <WM_Exec+0x278>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	b103      	cbz	r3, 801a862 <WM_Exec+0x12>
 801a860:	4798      	blx	r3
 801a862:	2300      	movs	r3, #0
 801a864:	461c      	mov	r4, r3
 801a866:	e000      	b.n	801a86a <WM_Exec+0x1a>
 801a868:	2401      	movs	r4, #1
 801a86a:	f7ff fa1b 	bl	8019ca4 <_Exec1Input>
 801a86e:	2800      	cmp	r0, #0
 801a870:	d1fa      	bne.n	801a868 <WM_Exec+0x18>
 801a872:	f8df b264 	ldr.w	fp, [pc, #612]	; 801aad8 <WM_Exec+0x288>
 801a876:	9406      	str	r4, [sp, #24]
 801a878:	f8db 3000 	ldr.w	r3, [fp]
 801a87c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801a880:	b123      	cbz	r3, 801a88c <WM_Exec+0x3c>
 801a882:	4b92      	ldr	r3, [pc, #584]	; (801aacc <WM_Exec+0x27c>)
 801a884:	881b      	ldrh	r3, [r3, #0]
 801a886:	2b00      	cmp	r3, #0
 801a888:	f040 809a 	bne.w	801a9c0 <WM_Exec+0x170>
 801a88c:	9307      	str	r3, [sp, #28]
 801a88e:	f8df a250 	ldr.w	sl, [pc, #592]	; 801aae0 <WM_Exec+0x290>
 801a892:	f7f8 fa13 	bl	8012cbc <GUI_Unlock>
 801a896:	e021      	b.n	801a8dc <WM_Exec+0x8c>
 801a898:	aa0d      	add	r2, sp, #52	; 0x34
 801a89a:	4b8d      	ldr	r3, [pc, #564]	; (801aad0 <WM_Exec+0x280>)
 801a89c:	9205      	str	r2, [sp, #20]
 801a89e:	4610      	mov	r0, r2
 801a8a0:	681e      	ldr	r6, [r3, #0]
 801a8a2:	f7f6 ff5d 	bl	8011760 <GUI_SaveContext_W>
 801a8a6:	6823      	ldr	r3, [r4, #0]
 801a8a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8ac:	9203      	str	r2, [sp, #12]
 801a8ae:	9304      	str	r3, [sp, #16]
 801a8b0:	2e00      	cmp	r6, #0
 801a8b2:	d132      	bne.n	801a91a <WM_Exec+0xca>
 801a8b4:	4b87      	ldr	r3, [pc, #540]	; (801aad4 <WM_Exec+0x284>)
 801a8b6:	9803      	ldr	r0, [sp, #12]
 801a8b8:	609e      	str	r6, [r3, #8]
 801a8ba:	f7f6 ff7f 	bl	80117bc <GUI_SetColor>
 801a8be:	9804      	ldr	r0, [sp, #16]
 801a8c0:	f7f6 ff70 	bl	80117a4 <GUI_SetBkColor>
 801a8c4:	9805      	ldr	r0, [sp, #20]
 801a8c6:	f7f6 ff55 	bl	8011774 <GUI_RestoreContext>
 801a8ca:	f7f8 f9f7 	bl	8012cbc <GUI_Unlock>
 801a8ce:	f8b8 3000 	ldrh.w	r3, [r8]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	f000 80d2 	beq.w	801aa7c <WM_Exec+0x22c>
 801a8d8:	2301      	movs	r3, #1
 801a8da:	9306      	str	r3, [sp, #24]
 801a8dc:	f8db 3000 	ldr.w	r3, [fp]
 801a8e0:	4c7d      	ldr	r4, [pc, #500]	; (801aad8 <WM_Exec+0x288>)
 801a8e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	f000 80c8 	beq.w	801aa7c <WM_Exec+0x22c>
 801a8ec:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 801aacc <WM_Exec+0x27c>
 801a8f0:	f8b8 3000 	ldrh.w	r3, [r8]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	f000 80c1 	beq.w	801aa7c <WM_Exec+0x22c>
 801a8fa:	f7f8 f9e9 	bl	8012cd0 <GUI_Lock>
 801a8fe:	4b75      	ldr	r3, [pc, #468]	; (801aad4 <WM_Exec+0x284>)
 801a900:	689e      	ldr	r6, [r3, #8]
 801a902:	2e00      	cmp	r6, #0
 801a904:	d0c8      	beq.n	801a898 <WM_Exec+0x48>
 801a906:	ab0d      	add	r3, sp, #52	; 0x34
 801a908:	4618      	mov	r0, r3
 801a90a:	9305      	str	r3, [sp, #20]
 801a90c:	f7f6 ff28 	bl	8011760 <GUI_SaveContext_W>
 801a910:	6823      	ldr	r3, [r4, #0]
 801a912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a916:	9203      	str	r2, [sp, #12]
 801a918:	9304      	str	r3, [sp, #16]
 801a91a:	ad0b      	add	r5, sp, #44	; 0x2c
 801a91c:	4630      	mov	r0, r6
 801a91e:	9608      	str	r6, [sp, #32]
 801a920:	f7f6 f9ee 	bl	8010d00 <GUI_ALLOC_LockH>
 801a924:	f100 0208 	add.w	r2, r0, #8
 801a928:	4603      	mov	r3, r0
 801a92a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a92e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a930:	9309      	str	r3, [sp, #36]	; 0x24
 801a932:	e885 0003 	stmia.w	r5, {r0, r1}
 801a936:	a809      	add	r0, sp, #36	; 0x24
 801a938:	4617      	mov	r7, r2
 801a93a:	f8d3 9018 	ldr.w	r9, [r3, #24]
 801a93e:	691c      	ldr	r4, [r3, #16]
 801a940:	9202      	str	r2, [sp, #8]
 801a942:	f7f6 f9ef 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a946:	f244 0320 	movw	r3, #16416	; 0x4020
 801a94a:	403b      	ands	r3, r7
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d040      	beq.n	801a9d2 <WM_Exec+0x182>
 801a950:	b1d4      	cbz	r4, 801a988 <WM_Exec+0x138>
 801a952:	9c08      	ldr	r4, [sp, #32]
 801a954:	e009      	b.n	801a96a <WM_Exec+0x11a>
 801a956:	f7f9 f9d5 	bl	8013d04 <GUI__IntersectRect>
 801a95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a95c:	699f      	ldr	r7, [r3, #24]
 801a95e:	a80a      	add	r0, sp, #40	; 0x28
 801a960:	2f00      	cmp	r7, #0
 801a962:	d03d      	beq.n	801a9e0 <WM_Exec+0x190>
 801a964:	f7f6 f9de 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a968:	463c      	mov	r4, r7
 801a96a:	4620      	mov	r0, r4
 801a96c:	f7f6 f9c8 	bl	8010d00 <GUI_ALLOC_LockH>
 801a970:	4603      	mov	r3, r0
 801a972:	4601      	mov	r1, r0
 801a974:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 801a976:	930a      	str	r3, [sp, #40]	; 0x28
 801a978:	f017 0702 	ands.w	r7, r7, #2
 801a97c:	4628      	mov	r0, r5
 801a97e:	d1ea      	bne.n	801a956 <WM_Exec+0x106>
 801a980:	a80a      	add	r0, sp, #40	; 0x28
 801a982:	f7f6 f9cf 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a986:	463c      	mov	r4, r7
 801a988:	9808      	ldr	r0, [sp, #32]
 801a98a:	f7f6 f9b9 	bl	8010d00 <GUI_ALLOC_LockH>
 801a98e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801a990:	9009      	str	r0, [sp, #36]	; 0x24
 801a992:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 801a996:	f023 0320 	bic.w	r3, r3, #32
 801a99a:	0492      	lsls	r2, r2, #18
 801a99c:	bf48      	it	mi
 801a99e:	f043 0304 	orrmi.w	r3, r3, #4
 801a9a2:	6283      	str	r3, [r0, #40]	; 0x28
 801a9a4:	a809      	add	r0, sp, #36	; 0x24
 801a9a6:	f7f6 f9bd 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a9aa:	f8b8 3000 	ldrh.w	r3, [r8]
 801a9ae:	3b01      	subs	r3, #1
 801a9b0:	f8a8 3000 	strh.w	r3, [r8]
 801a9b4:	b16c      	cbz	r4, 801a9d2 <WM_Exec+0x182>
 801a9b6:	4630      	mov	r0, r6
 801a9b8:	f7f6 f998 	bl	8010cec <GUI_ALLOC_h2p>
 801a9bc:	6946      	ldr	r6, [r0, #20]
 801a9be:	e779      	b.n	801a8b4 <WM_Exec+0x64>
 801a9c0:	4b46      	ldr	r3, [pc, #280]	; (801aadc <WM_Exec+0x28c>)
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d071      	beq.n	801aaac <WM_Exec+0x25c>
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	4798      	blx	r3
 801a9cc:	2301      	movs	r3, #1
 801a9ce:	9307      	str	r3, [sp, #28]
 801a9d0:	e75d      	b.n	801a88e <WM_Exec+0x3e>
 801a9d2:	4630      	mov	r0, r6
 801a9d4:	f7f6 f98a 	bl	8010cec <GUI_ALLOC_h2p>
 801a9d8:	6946      	ldr	r6, [r0, #20]
 801a9da:	2e00      	cmp	r6, #0
 801a9dc:	d19e      	bne.n	801a91c <WM_Exec+0xcc>
 801a9de:	e769      	b.n	801a8b4 <WM_Exec+0x64>
 801a9e0:	f7f6 f9a0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801a9e4:	f8da 2000 	ldr.w	r2, [sl]
 801a9e8:	42a2      	cmp	r2, r4
 801a9ea:	d005      	beq.n	801a9f8 <WM_Exec+0x1a8>
 801a9ec:	4b3c      	ldr	r3, [pc, #240]	; (801aae0 <WM_Exec+0x290>)
 801a9ee:	685a      	ldr	r2, [r3, #4]
 801a9f0:	4294      	cmp	r4, r2
 801a9f2:	d001      	beq.n	801a9f8 <WM_Exec+0x1a8>
 801a9f4:	2400      	movs	r4, #0
 801a9f6:	e7c7      	b.n	801a988 <WM_Exec+0x138>
 801a9f8:	9c08      	ldr	r4, [sp, #32]
 801a9fa:	f7f8 f969 	bl	8012cd0 <GUI_Lock>
 801a9fe:	f8db 3000 	ldr.w	r3, [fp]
 801aa02:	b90c      	cbnz	r4, 801aa08 <WM_Exec+0x1b8>
 801aa04:	4a32      	ldr	r2, [pc, #200]	; (801aad0 <WM_Exec+0x280>)
 801aa06:	6814      	ldr	r4, [r2, #0]
 801aa08:	649c      	str	r4, [r3, #72]	; 0x48
 801aa0a:	4627      	mov	r7, r4
 801aa0c:	e000      	b.n	801aa10 <WM_Exec+0x1c0>
 801aa0e:	461f      	mov	r7, r3
 801aa10:	4638      	mov	r0, r7
 801aa12:	f7f6 f96b 	bl	8010cec <GUI_ALLOC_h2p>
 801aa16:	6983      	ldr	r3, [r0, #24]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d1f8      	bne.n	801aa0e <WM_Exec+0x1be>
 801aa1c:	f8da 1000 	ldr.w	r1, [sl]
 801aa20:	428f      	cmp	r7, r1
 801aa22:	d03d      	beq.n	801aaa0 <WM_Exec+0x250>
 801aa24:	f8da 3004 	ldr.w	r3, [sl, #4]
 801aa28:	429f      	cmp	r7, r3
 801aa2a:	d03d      	beq.n	801aaa8 <WM_Exec+0x258>
 801aa2c:	f7f9 ff98 	bl	8014960 <LCD_SetClipRectMax>
 801aa30:	4620      	mov	r0, r4
 801aa32:	f7f6 f95b 	bl	8010cec <GUI_ALLOC_h2p>
 801aa36:	f8db 3000 	ldr.w	r3, [fp]
 801aa3a:	f9b0 1000 	ldrsh.w	r1, [r0]
 801aa3e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801aa42:	651a      	str	r2, [r3, #80]	; 0x50
 801aa44:	64d9      	str	r1, [r3, #76]	; 0x4c
 801aa46:	f7f8 f939 	bl	8012cbc <GUI_Unlock>
 801aa4a:	9a02      	ldr	r2, [sp, #8]
 801aa4c:	0751      	lsls	r1, r2, #29
 801aa4e:	d510      	bpl.n	801aa72 <WM_Exec+0x222>
 801aa50:	f1b9 0f00 	cmp.w	r9, #0
 801aa54:	d00b      	beq.n	801aa6e <WM_Exec+0x21e>
 801aa56:	f002 0301 	and.w	r3, r2, #1
 801aa5a:	f083 0301 	eor.w	r3, r3, #1
 801aa5e:	9300      	str	r3, [sp, #0]
 801aa60:	aa08      	add	r2, sp, #32
 801aa62:	2300      	movs	r3, #0
 801aa64:	491f      	ldr	r1, [pc, #124]	; (801aae4 <WM_Exec+0x294>)
 801aa66:	4628      	mov	r0, r5
 801aa68:	f006 fe04 	bl	8021674 <GUI_MEMDEV_Draw>
 801aa6c:	e7c2      	b.n	801a9f4 <WM_Exec+0x1a4>
 801aa6e:	2301      	movs	r3, #1
 801aa70:	e7f5      	b.n	801aa5e <WM_Exec+0x20e>
 801aa72:	9808      	ldr	r0, [sp, #32]
 801aa74:	f7fe f98e 	bl	8018d94 <WM__PaintWinAndOverlays>
 801aa78:	2401      	movs	r4, #1
 801aa7a:	e785      	b.n	801a988 <WM_Exec+0x138>
 801aa7c:	f7f8 f928 	bl	8012cd0 <GUI_Lock>
 801aa80:	9b07      	ldr	r3, [sp, #28]
 801aa82:	b13b      	cbz	r3, 801aa94 <WM_Exec+0x244>
 801aa84:	4b15      	ldr	r3, [pc, #84]	; (801aadc <WM_Exec+0x28c>)
 801aa86:	6818      	ldr	r0, [r3, #0]
 801aa88:	b1b0      	cbz	r0, 801aab8 <WM_Exec+0x268>
 801aa8a:	6843      	ldr	r3, [r0, #4]
 801aa8c:	4798      	blx	r3
 801aa8e:	4b16      	ldr	r3, [pc, #88]	; (801aae8 <WM_Exec+0x298>)
 801aa90:	2200      	movs	r2, #0
 801aa92:	601a      	str	r2, [r3, #0]
 801aa94:	f7f8 f912 	bl	8012cbc <GUI_Unlock>
 801aa98:	9806      	ldr	r0, [sp, #24]
 801aa9a:	b02b      	add	sp, #172	; 0xac
 801aa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	f7f8 f899 	bl	8012bd8 <GUI_SelectLayer>
 801aaa6:	e7c1      	b.n	801aa2c <WM_Exec+0x1dc>
 801aaa8:	2001      	movs	r0, #1
 801aaaa:	e7fa      	b.n	801aaa2 <WM_Exec+0x252>
 801aaac:	2001      	movs	r0, #1
 801aaae:	f005 fc9d 	bl	80203ec <GUI__ManageCache>
 801aab2:	2301      	movs	r3, #1
 801aab4:	9307      	str	r3, [sp, #28]
 801aab6:	e6ea      	b.n	801a88e <WM_Exec+0x3e>
 801aab8:	f005 fc98 	bl	80203ec <GUI__ManageCache>
 801aabc:	f7f8 f8fe 	bl	8012cbc <GUI_Unlock>
 801aac0:	9806      	ldr	r0, [sp, #24]
 801aac2:	b02b      	add	sp, #172	; 0xac
 801aac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aac8:	20035e64 	.word	0x20035e64
 801aacc:	20035e78 	.word	0x20035e78
 801aad0:	20035e38 	.word	0x20035e38
 801aad4:	20000854 	.word	0x20000854
 801aad8:	20000014 	.word	0x20000014
 801aadc:	20035e54 	.word	0x20035e54
 801aae0:	20035e80 	.word	0x20035e80
 801aae4:	08018e35 	.word	0x08018e35
 801aae8:	20035e44 	.word	0x20035e44

0801aaec <WM_Activate>:
 801aaec:	4b02      	ldr	r3, [pc, #8]	; (801aaf8 <WM_Activate+0xc>)
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	2201      	movs	r2, #1
 801aaf2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801aaf6:	4770      	bx	lr
 801aaf8:	20000014 	.word	0x20000014

0801aafc <WM_Deactivate>:
 801aafc:	b508      	push	{r3, lr}
 801aafe:	4b06      	ldr	r3, [pc, #24]	; (801ab18 <WM_Deactivate+0x1c>)
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	2200      	movs	r2, #0
 801ab04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801ab08:	f7f8 f8e2 	bl	8012cd0 <GUI_Lock>
 801ab0c:	f7f9 ff28 	bl	8014960 <LCD_SetClipRectMax>
 801ab10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ab14:	f7f8 b8d2 	b.w	8012cbc <GUI_Unlock>
 801ab18:	20000014 	.word	0x20000014

0801ab1c <WM_DefaultProc>:
 801ab1c:	6803      	ldr	r3, [r0, #0]
 801ab1e:	3b0e      	subs	r3, #14
 801ab20:	b510      	push	{r4, lr}
 801ab22:	4604      	mov	r4, r0
 801ab24:	6840      	ldr	r0, [r0, #4]
 801ab26:	2b1a      	cmp	r3, #26
 801ab28:	d812      	bhi.n	801ab50 <WM_DefaultProc+0x34>
 801ab2a:	e8df f003 	tbb	[pc, r3]
 801ab2e:	111b      	.short	0x111b
 801ab30:	11111111 	.word	0x11111111
 801ab34:	2011110e 	.word	0x2011110e
 801ab38:	11111111 	.word	0x11111111
 801ab3c:	11111111 	.word	0x11111111
 801ab40:	11221111 	.word	0x11221111
 801ab44:	11111111 	.word	0x11111111
 801ab48:	14          	.byte	0x14
 801ab49:	00          	.byte	0x00
 801ab4a:	68e1      	ldr	r1, [r4, #12]
 801ab4c:	f001 ff5e 	bl	801ca0c <WM__GetClientRectEx>
 801ab50:	2300      	movs	r3, #0
 801ab52:	60e3      	str	r3, [r4, #12]
 801ab54:	bd10      	pop	{r4, pc}
 801ab56:	2800      	cmp	r0, #0
 801ab58:	d0fc      	beq.n	801ab54 <WM_DefaultProc+0x38>
 801ab5a:	2100      	movs	r1, #0
 801ab5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab60:	f7fe bebe 	b.w	80198e0 <WM_InvalidateRect.part.2>
 801ab64:	4621      	mov	r1, r4
 801ab66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab6a:	f000 bcf9 	b.w	801b560 <WM_SendToParent>
 801ab6e:	60e0      	str	r0, [r4, #12]
 801ab70:	bd10      	pop	{r4, pc}
 801ab72:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801ab76:	60e3      	str	r3, [r4, #12]
 801ab78:	bd10      	pop	{r4, pc}
 801ab7a:	bf00      	nop

0801ab7c <WM_Init>:
 801ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab80:	4d45      	ldr	r5, [pc, #276]	; (801ac98 <WM_Init+0x11c>)
 801ab82:	782b      	ldrb	r3, [r5, #0]
 801ab84:	b085      	sub	sp, #20
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d17b      	bne.n	801ac82 <WM_Init+0x106>
 801ab8a:	4f44      	ldr	r7, [pc, #272]	; (801ac9c <WM_Init+0x120>)
 801ab8c:	f8df 9140 	ldr.w	r9, [pc, #320]	; 801acd0 <WM_Init+0x154>
 801ab90:	6838      	ldr	r0, [r7, #0]
 801ab92:	4943      	ldr	r1, [pc, #268]	; (801aca0 <WM_Init+0x124>)
 801ab94:	4a43      	ldr	r2, [pc, #268]	; (801aca4 <WM_Init+0x128>)
 801ab96:	f8df 812c 	ldr.w	r8, [pc, #300]	; 801acc4 <WM_Init+0x148>
 801ab9a:	f8df a138 	ldr.w	sl, [pc, #312]	; 801acd4 <WM_Init+0x158>
 801ab9e:	4e42      	ldr	r6, [pc, #264]	; (801aca8 <WM_Init+0x12c>)
 801aba0:	60ab      	str	r3, [r5, #8]
 801aba2:	6443      	str	r3, [r0, #68]	; 0x44
 801aba4:	461c      	mov	r4, r3
 801aba6:	f8c9 3000 	str.w	r3, [r9]
 801abaa:	800b      	strh	r3, [r1, #0]
 801abac:	8013      	strh	r3, [r2, #0]
 801abae:	469b      	mov	fp, r3
 801abb0:	4620      	mov	r0, r4
 801abb2:	f7f7 f859 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 801abb6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 801abba:	2100      	movs	r1, #0
 801abbc:	f04f 0c02 	mov.w	ip, #2
 801abc0:	f04f 3eff 	mov.w	lr, #4294967295
 801abc4:	461a      	mov	r2, r3
 801abc6:	b190      	cbz	r0, 801abee <WM_Init+0x72>
 801abc8:	f8cd b00c 	str.w	fp, [sp, #12]
 801abcc:	f8cd a008 	str.w	sl, [sp, #8]
 801abd0:	f8cd c004 	str.w	ip, [sp, #4]
 801abd4:	f8cd e000 	str.w	lr, [sp]
 801abd8:	4608      	mov	r0, r1
 801abda:	f7ff fa15 	bl	801a008 <WM_CreateWindowAsChild>
 801abde:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 801abe2:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
 801abe6:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
 801abea:	2800      	cmp	r0, #0
 801abec:	d150      	bne.n	801ac90 <WM_Init+0x114>
 801abee:	3401      	adds	r4, #1
 801abf0:	2c02      	cmp	r4, #2
 801abf2:	d1dd      	bne.n	801abb0 <WM_Init+0x34>
 801abf4:	482d      	ldr	r0, [pc, #180]	; (801acac <WM_Init+0x130>)
 801abf6:	f001 fee1 	bl	801c9bc <WM__AddCriticalHandle>
 801abfa:	482d      	ldr	r0, [pc, #180]	; (801acb0 <WM_Init+0x134>)
 801abfc:	f001 fede 	bl	801c9bc <WM__AddCriticalHandle>
 801ac00:	482c      	ldr	r0, [pc, #176]	; (801acb4 <WM_Init+0x138>)
 801ac02:	f001 fedb 	bl	801c9bc <WM__AddCriticalHandle>
 801ac06:	482c      	ldr	r0, [pc, #176]	; (801acb8 <WM_Init+0x13c>)
 801ac08:	f001 fed8 	bl	801c9bc <WM__AddCriticalHandle>
 801ac0c:	482b      	ldr	r0, [pc, #172]	; (801acbc <WM_Init+0x140>)
 801ac0e:	f001 fed5 	bl	801c9bc <WM__AddCriticalHandle>
 801ac12:	482b      	ldr	r0, [pc, #172]	; (801acc0 <WM_Init+0x144>)
 801ac14:	f001 fed2 	bl	801c9bc <WM__AddCriticalHandle>
 801ac18:	f8d8 6000 	ldr.w	r6, [r8]
 801ac1c:	f7f8 f858 	bl	8012cd0 <GUI_Lock>
 801ac20:	683b      	ldr	r3, [r7, #0]
 801ac22:	b90e      	cbnz	r6, 801ac28 <WM_Init+0xac>
 801ac24:	f8d9 6000 	ldr.w	r6, [r9]
 801ac28:	649e      	str	r6, [r3, #72]	; 0x48
 801ac2a:	4634      	mov	r4, r6
 801ac2c:	e000      	b.n	801ac30 <WM_Init+0xb4>
 801ac2e:	4604      	mov	r4, r0
 801ac30:	4620      	mov	r0, r4
 801ac32:	f7f6 f85b 	bl	8010cec <GUI_ALLOC_h2p>
 801ac36:	6980      	ldr	r0, [r0, #24]
 801ac38:	2800      	cmp	r0, #0
 801ac3a:	d1f8      	bne.n	801ac2e <WM_Init+0xb2>
 801ac3c:	f8d8 3000 	ldr.w	r3, [r8]
 801ac40:	4a20      	ldr	r2, [pc, #128]	; (801acc4 <WM_Init+0x148>)
 801ac42:	429c      	cmp	r4, r3
 801ac44:	d021      	beq.n	801ac8a <WM_Init+0x10e>
 801ac46:	6853      	ldr	r3, [r2, #4]
 801ac48:	429c      	cmp	r4, r3
 801ac4a:	d01d      	beq.n	801ac88 <WM_Init+0x10c>
 801ac4c:	f7f9 fe88 	bl	8014960 <LCD_SetClipRectMax>
 801ac50:	4630      	mov	r0, r6
 801ac52:	f7f6 f84b 	bl	8010cec <GUI_ALLOC_h2p>
 801ac56:	683b      	ldr	r3, [r7, #0]
 801ac58:	f9b0 1000 	ldrsh.w	r1, [r0]
 801ac5c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ac60:	651a      	str	r2, [r3, #80]	; 0x50
 801ac62:	64d9      	str	r1, [r3, #76]	; 0x4c
 801ac64:	f7f8 f82a 	bl	8012cbc <GUI_Unlock>
 801ac68:	683a      	ldr	r2, [r7, #0]
 801ac6a:	4b17      	ldr	r3, [pc, #92]	; (801acc8 <WM_Init+0x14c>)
 801ac6c:	4817      	ldr	r0, [pc, #92]	; (801accc <WM_Init+0x150>)
 801ac6e:	626b      	str	r3, [r5, #36]	; 0x24
 801ac70:	2301      	movs	r3, #1
 801ac72:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
 801ac76:	702b      	strb	r3, [r5, #0]
 801ac78:	b005      	add	sp, #20
 801ac7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac7e:	f7f6 bfdf 	b.w	8011c40 <GUI__RegisterExit>
 801ac82:	b005      	add	sp, #20
 801ac84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac88:	2001      	movs	r0, #1
 801ac8a:	f7f7 ffa5 	bl	8012bd8 <GUI_SelectLayer>
 801ac8e:	e7dd      	b.n	801ac4c <WM_Init+0xd0>
 801ac90:	2100      	movs	r1, #0
 801ac92:	f7fe fe25 	bl	80198e0 <WM_InvalidateRect.part.2>
 801ac96:	e7aa      	b.n	801abee <WM_Init+0x72>
 801ac98:	20000854 	.word	0x20000854
 801ac9c:	20000014 	.word	0x20000014
 801aca0:	20035e78 	.word	0x20035e78
 801aca4:	20035e40 	.word	0x20035e40
 801aca8:	20035e30 	.word	0x20035e30
 801acac:	20035e98 	.word	0x20035e98
 801acb0:	20035ea8 	.word	0x20035ea8
 801acb4:	20035e88 	.word	0x20035e88
 801acb8:	20035ea0 	.word	0x20035ea0
 801acbc:	20035eb0 	.word	0x20035eb0
 801acc0:	20035e90 	.word	0x20035e90
 801acc4:	20035e80 	.word	0x20035e80
 801acc8:	0801881d 	.word	0x0801881d
 801accc:	20000878 	.word	0x20000878
 801acd0:	20035e38 	.word	0x20035e38
 801acd4:	080199bd 	.word	0x080199bd

0801acd8 <WM_ResizeWindow.part.11>:
 801acd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acdc:	4606      	mov	r6, r0
 801acde:	b08a      	sub	sp, #40	; 0x28
 801ace0:	4688      	mov	r8, r1
 801ace2:	4617      	mov	r7, r2
 801ace4:	f7f7 fff4 	bl	8012cd0 <GUI_Lock>
 801ace8:	4630      	mov	r0, r6
 801acea:	f7f6 f809 	bl	8010d00 <GUI_ALLOC_LockH>
 801acee:	4603      	mov	r3, r0
 801acf0:	c803      	ldmia	r0, {r0, r1}
 801acf2:	ac04      	add	r4, sp, #16
 801acf4:	ad06      	add	r5, sp, #24
 801acf6:	e884 0003 	stmia.w	r4, {r0, r1}
 801acfa:	9303      	str	r3, [sp, #12]
 801acfc:	e885 0003 	stmia.w	r5, {r0, r1}
 801ad00:	f1b8 0f00 	cmp.w	r8, #0
 801ad04:	d009      	beq.n	801ad1a <WM_ResizeWindow.part.11+0x42>
 801ad06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ad08:	f402 7220 	and.w	r2, r2, #640	; 0x280
 801ad0c:	2a80      	cmp	r2, #128	; 0x80
 801ad0e:	d057      	beq.n	801adc0 <WM_ResizeWindow.part.11+0xe8>
 801ad10:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801ad14:	4490      	add	r8, r2
 801ad16:	f8ad 801c 	strh.w	r8, [sp, #28]
 801ad1a:	b157      	cbz	r7, 801ad32 <WM_ResizeWindow.part.11+0x5a>
 801ad1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ad1e:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801ad22:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801ad26:	d052      	beq.n	801adce <WM_ResizeWindow.part.11+0xf6>
 801ad28:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801ad2c:	4417      	add	r7, r2
 801ad2e:	f8ad 701e 	strh.w	r7, [sp, #30]
 801ad32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ad34:	03d1      	lsls	r1, r2, #15
 801ad36:	d43d      	bmi.n	801adb4 <WM_ResizeWindow.part.11+0xdc>
 801ad38:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ad3c:	0792      	lsls	r2, r2, #30
 801ad3e:	e883 0003 	stmia.w	r3, {r0, r1}
 801ad42:	d50b      	bpl.n	801ad5c <WM_ResizeWindow.part.11+0x84>
 801ad44:	462a      	mov	r2, r5
 801ad46:	4621      	mov	r1, r4
 801ad48:	a808      	add	r0, sp, #32
 801ad4a:	f7f6 fc0b 	bl	8011564 <GUI_MergeRect>
 801ad4e:	9b03      	ldr	r3, [sp, #12]
 801ad50:	a808      	add	r0, sp, #32
 801ad52:	6a1a      	ldr	r2, [r3, #32]
 801ad54:	6999      	ldr	r1, [r3, #24]
 801ad56:	f7ff f867 	bl	8019e28 <WM__InvalidateRectEx>
 801ad5a:	9b03      	ldr	r3, [sp, #12]
 801ad5c:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 801ad60:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 801ad64:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 801ad68:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801ad6c:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 801ad70:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801ad74:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 801ad78:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801ad7c:	1b04      	subs	r4, r0, r4
 801ad7e:	9400      	str	r4, [sp, #0]
 801ad80:	ac0a      	add	r4, sp, #40	; 0x28
 801ad82:	1aba      	subs	r2, r7, r2
 801ad84:	4618      	mov	r0, r3
 801ad86:	1a69      	subs	r1, r5, r1
 801ad88:	ebce 030c 	rsb	r3, lr, ip
 801ad8c:	f001 fd96 	bl	801c8bc <WM__UpdateChildPositions>
 801ad90:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 801ad94:	f101 0008 	add.w	r0, r1, #8
 801ad98:	f7f8 ffb4 	bl	8013d04 <GUI__IntersectRect>
 801ad9c:	2105      	movs	r1, #5
 801ad9e:	4630      	mov	r0, r6
 801ada0:	f7ff f8b8 	bl	8019f14 <WM__SendMsgNoData>
 801ada4:	4620      	mov	r0, r4
 801ada6:	f7f5 ffbd 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801adaa:	f7f7 ff87 	bl	8012cbc <GUI_Unlock>
 801adae:	b00a      	add	sp, #40	; 0x28
 801adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adb4:	4630      	mov	r0, r6
 801adb6:	f7fe fa27 	bl	8019208 <WM__InvalidateDrawAndDescs>
 801adba:	9b03      	ldr	r3, [sp, #12]
 801adbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801adbe:	e7bb      	b.n	801ad38 <WM_ResizeWindow.part.11+0x60>
 801adc0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801adc4:	ebc8 0802 	rsb	r8, r8, r2
 801adc8:	f8ad 8018 	strh.w	r8, [sp, #24]
 801adcc:	e7a5      	b.n	801ad1a <WM_ResizeWindow.part.11+0x42>
 801adce:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801add2:	1bd7      	subs	r7, r2, r7
 801add4:	f8ad 701a 	strh.w	r7, [sp, #26]
 801add8:	e7ab      	b.n	801ad32 <WM_ResizeWindow.part.11+0x5a>
 801adda:	bf00      	nop

0801addc <_GetDialogItem.part.4>:
 801addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ade0:	b087      	sub	sp, #28
 801ade2:	460d      	mov	r5, r1
 801ade4:	f7f5 ff82 	bl	8010cec <GUI_ALLOC_h2p>
 801ade8:	69c3      	ldr	r3, [r0, #28]
 801adea:	9301      	str	r3, [sp, #4]
 801adec:	2b00      	cmp	r3, #0
 801adee:	d04f      	beq.n	801ae90 <_GetDialogItem.part.4+0xb4>
 801adf0:	2400      	movs	r4, #0
 801adf2:	9801      	ldr	r0, [sp, #4]
 801adf4:	f7f5 ff7a 	bl	8010cec <GUI_ALLOC_h2p>
 801adf8:	69c6      	ldr	r6, [r0, #28]
 801adfa:	2e00      	cmp	r6, #0
 801adfc:	d04d      	beq.n	801ae9a <_GetDialogItem.part.4+0xbe>
 801adfe:	f10d 0a08 	add.w	sl, sp, #8
 801ae02:	2715      	movs	r7, #21
 801ae04:	e004      	b.n	801ae10 <_GetDialogItem.part.4+0x34>
 801ae06:	f7f5 ff71 	bl	8010cec <GUI_ALLOC_h2p>
 801ae0a:	6a06      	ldr	r6, [r0, #32]
 801ae0c:	2e00      	cmp	r6, #0
 801ae0e:	d044      	beq.n	801ae9a <_GetDialogItem.part.4+0xbe>
 801ae10:	4630      	mov	r0, r6
 801ae12:	4651      	mov	r1, sl
 801ae14:	f8ca 4000 	str.w	r4, [sl]
 801ae18:	f8ca 4004 	str.w	r4, [sl, #4]
 801ae1c:	f8ca 4008 	str.w	r4, [sl, #8]
 801ae20:	f8ca 400c 	str.w	r4, [sl, #12]
 801ae24:	9702      	str	r7, [sp, #8]
 801ae26:	f7ff f865 	bl	8019ef4 <WM_SendMessage>
 801ae2a:	9b05      	ldr	r3, [sp, #20]
 801ae2c:	429d      	cmp	r5, r3
 801ae2e:	4630      	mov	r0, r6
 801ae30:	d1e9      	bne.n	801ae06 <_GetDialogItem.part.4+0x2a>
 801ae32:	e02e      	b.n	801ae92 <_GetDialogItem.part.4+0xb6>
 801ae34:	4629      	mov	r1, r5
 801ae36:	4650      	mov	r0, sl
 801ae38:	f7ff ffd0 	bl	801addc <_GetDialogItem.part.4>
 801ae3c:	2800      	cmp	r0, #0
 801ae3e:	d179      	bne.n	801af34 <_GetDialogItem.part.4+0x158>
 801ae40:	4650      	mov	r0, sl
 801ae42:	f7f5 ff53 	bl	8010cec <GUI_ALLOC_h2p>
 801ae46:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801ae4a:	f1ba 0f00 	cmp.w	sl, #0
 801ae4e:	f040 80a3 	bne.w	801af98 <_GetDialogItem.part.4+0x1bc>
 801ae52:	4640      	mov	r0, r8
 801ae54:	f7f5 ff4a 	bl	8010cec <GUI_ALLOC_h2p>
 801ae58:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801ae5c:	f1b8 0f00 	cmp.w	r8, #0
 801ae60:	d172      	bne.n	801af48 <_GetDialogItem.part.4+0x16c>
 801ae62:	4648      	mov	r0, r9
 801ae64:	f7f5 ff42 	bl	8010cec <GUI_ALLOC_h2p>
 801ae68:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801ae6c:	f1b9 0f00 	cmp.w	r9, #0
 801ae70:	d141      	bne.n	801aef6 <_GetDialogItem.part.4+0x11a>
 801ae72:	4658      	mov	r0, fp
 801ae74:	f7f5 ff3a 	bl	8010cec <GUI_ALLOC_h2p>
 801ae78:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801ae7c:	f1bb 0f00 	cmp.w	fp, #0
 801ae80:	d113      	bne.n	801aeaa <_GetDialogItem.part.4+0xce>
 801ae82:	9801      	ldr	r0, [sp, #4]
 801ae84:	f7f5 ff32 	bl	8010cec <GUI_ALLOC_h2p>
 801ae88:	6a03      	ldr	r3, [r0, #32]
 801ae8a:	9301      	str	r3, [sp, #4]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d1b0      	bne.n	801adf2 <_GetDialogItem.part.4+0x16>
 801ae90:	2600      	movs	r6, #0
 801ae92:	4630      	mov	r0, r6
 801ae94:	b007      	add	sp, #28
 801ae96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae9a:	9801      	ldr	r0, [sp, #4]
 801ae9c:	f7f5 ff26 	bl	8010cec <GUI_ALLOC_h2p>
 801aea0:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801aea4:	f1bb 0f00 	cmp.w	fp, #0
 801aea8:	d0eb      	beq.n	801ae82 <_GetDialogItem.part.4+0xa6>
 801aeaa:	4658      	mov	r0, fp
 801aeac:	f7f5 ff1e 	bl	8010cec <GUI_ALLOC_h2p>
 801aeb0:	69c6      	ldr	r6, [r0, #28]
 801aeb2:	b1c6      	cbz	r6, 801aee6 <_GetDialogItem.part.4+0x10a>
 801aeb4:	f10d 0a08 	add.w	sl, sp, #8
 801aeb8:	2715      	movs	r7, #21
 801aeba:	4630      	mov	r0, r6
 801aebc:	4651      	mov	r1, sl
 801aebe:	f8ca 4000 	str.w	r4, [sl]
 801aec2:	f8ca 4004 	str.w	r4, [sl, #4]
 801aec6:	f8ca 4008 	str.w	r4, [sl, #8]
 801aeca:	f8ca 400c 	str.w	r4, [sl, #12]
 801aece:	9702      	str	r7, [sp, #8]
 801aed0:	f7ff f810 	bl	8019ef4 <WM_SendMessage>
 801aed4:	9b05      	ldr	r3, [sp, #20]
 801aed6:	429d      	cmp	r5, r3
 801aed8:	4630      	mov	r0, r6
 801aeda:	d0da      	beq.n	801ae92 <_GetDialogItem.part.4+0xb6>
 801aedc:	f7f5 ff06 	bl	8010cec <GUI_ALLOC_h2p>
 801aee0:	6a06      	ldr	r6, [r0, #32]
 801aee2:	2e00      	cmp	r6, #0
 801aee4:	d1e9      	bne.n	801aeba <_GetDialogItem.part.4+0xde>
 801aee6:	4658      	mov	r0, fp
 801aee8:	f7f5 ff00 	bl	8010cec <GUI_ALLOC_h2p>
 801aeec:	f8d0 901c 	ldr.w	r9, [r0, #28]
 801aef0:	f1b9 0f00 	cmp.w	r9, #0
 801aef4:	d0bd      	beq.n	801ae72 <_GetDialogItem.part.4+0x96>
 801aef6:	4648      	mov	r0, r9
 801aef8:	f7f5 fef8 	bl	8010cec <GUI_ALLOC_h2p>
 801aefc:	69c6      	ldr	r6, [r0, #28]
 801aefe:	b1de      	cbz	r6, 801af38 <_GetDialogItem.part.4+0x15c>
 801af00:	f10d 0a08 	add.w	sl, sp, #8
 801af04:	2715      	movs	r7, #21
 801af06:	e003      	b.n	801af10 <_GetDialogItem.part.4+0x134>
 801af08:	f7f5 fef0 	bl	8010cec <GUI_ALLOC_h2p>
 801af0c:	6a06      	ldr	r6, [r0, #32]
 801af0e:	b19e      	cbz	r6, 801af38 <_GetDialogItem.part.4+0x15c>
 801af10:	4630      	mov	r0, r6
 801af12:	4651      	mov	r1, sl
 801af14:	f8ca 4000 	str.w	r4, [sl]
 801af18:	f8ca 4004 	str.w	r4, [sl, #4]
 801af1c:	f8ca 4008 	str.w	r4, [sl, #8]
 801af20:	f8ca 400c 	str.w	r4, [sl, #12]
 801af24:	9702      	str	r7, [sp, #8]
 801af26:	f7fe ffe5 	bl	8019ef4 <WM_SendMessage>
 801af2a:	9b05      	ldr	r3, [sp, #20]
 801af2c:	429d      	cmp	r5, r3
 801af2e:	4630      	mov	r0, r6
 801af30:	d1ea      	bne.n	801af08 <_GetDialogItem.part.4+0x12c>
 801af32:	4630      	mov	r0, r6
 801af34:	4606      	mov	r6, r0
 801af36:	e7ac      	b.n	801ae92 <_GetDialogItem.part.4+0xb6>
 801af38:	4648      	mov	r0, r9
 801af3a:	f7f5 fed7 	bl	8010cec <GUI_ALLOC_h2p>
 801af3e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801af42:	f1b8 0f00 	cmp.w	r8, #0
 801af46:	d08c      	beq.n	801ae62 <_GetDialogItem.part.4+0x86>
 801af48:	4640      	mov	r0, r8
 801af4a:	f7f5 fecf 	bl	8010cec <GUI_ALLOC_h2p>
 801af4e:	69c6      	ldr	r6, [r0, #28]
 801af50:	b1ce      	cbz	r6, 801af86 <_GetDialogItem.part.4+0x1aa>
 801af52:	f10d 0a08 	add.w	sl, sp, #8
 801af56:	2715      	movs	r7, #21
 801af58:	e003      	b.n	801af62 <_GetDialogItem.part.4+0x186>
 801af5a:	f7f5 fec7 	bl	8010cec <GUI_ALLOC_h2p>
 801af5e:	6a06      	ldr	r6, [r0, #32]
 801af60:	b18e      	cbz	r6, 801af86 <_GetDialogItem.part.4+0x1aa>
 801af62:	4630      	mov	r0, r6
 801af64:	4651      	mov	r1, sl
 801af66:	f8ca 4000 	str.w	r4, [sl]
 801af6a:	f8ca 4004 	str.w	r4, [sl, #4]
 801af6e:	f8ca 4008 	str.w	r4, [sl, #8]
 801af72:	f8ca 400c 	str.w	r4, [sl, #12]
 801af76:	9702      	str	r7, [sp, #8]
 801af78:	f7fe ffbc 	bl	8019ef4 <WM_SendMessage>
 801af7c:	9b05      	ldr	r3, [sp, #20]
 801af7e:	429d      	cmp	r5, r3
 801af80:	4630      	mov	r0, r6
 801af82:	d1ea      	bne.n	801af5a <_GetDialogItem.part.4+0x17e>
 801af84:	e7d5      	b.n	801af32 <_GetDialogItem.part.4+0x156>
 801af86:	4640      	mov	r0, r8
 801af88:	f7f5 feb0 	bl	8010cec <GUI_ALLOC_h2p>
 801af8c:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 801af90:	f1ba 0f00 	cmp.w	sl, #0
 801af94:	f43f af5d 	beq.w	801ae52 <_GetDialogItem.part.4+0x76>
 801af98:	4650      	mov	r0, sl
 801af9a:	f7f5 fea7 	bl	8010cec <GUI_ALLOC_h2p>
 801af9e:	69c7      	ldr	r7, [r0, #28]
 801afa0:	2615      	movs	r6, #21
 801afa2:	b937      	cbnz	r7, 801afb2 <_GetDialogItem.part.4+0x1d6>
 801afa4:	e746      	b.n	801ae34 <_GetDialogItem.part.4+0x58>
 801afa6:	f7f5 fea1 	bl	8010cec <GUI_ALLOC_h2p>
 801afaa:	6a07      	ldr	r7, [r0, #32]
 801afac:	2f00      	cmp	r7, #0
 801afae:	f43f af41 	beq.w	801ae34 <_GetDialogItem.part.4+0x58>
 801afb2:	4638      	mov	r0, r7
 801afb4:	a902      	add	r1, sp, #8
 801afb6:	9403      	str	r4, [sp, #12]
 801afb8:	9404      	str	r4, [sp, #16]
 801afba:	9405      	str	r4, [sp, #20]
 801afbc:	9602      	str	r6, [sp, #8]
 801afbe:	f7fe ff99 	bl	8019ef4 <WM_SendMessage>
 801afc2:	9a05      	ldr	r2, [sp, #20]
 801afc4:	4295      	cmp	r5, r2
 801afc6:	4638      	mov	r0, r7
 801afc8:	d1ed      	bne.n	801afa6 <_GetDialogItem.part.4+0x1ca>
 801afca:	4638      	mov	r0, r7
 801afcc:	4606      	mov	r6, r0
 801afce:	e760      	b.n	801ae92 <_GetDialogItem.part.4+0xb6>

0801afd0 <_GetDialogItem>:
 801afd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afd4:	b084      	sub	sp, #16
 801afd6:	460e      	mov	r6, r1
 801afd8:	4680      	mov	r8, r0
 801afda:	f7f5 fe87 	bl	8010cec <GUI_ALLOC_h2p>
 801afde:	69c4      	ldr	r4, [r0, #28]
 801afe0:	b1b4      	cbz	r4, 801b010 <_GetDialogItem+0x40>
 801afe2:	2500      	movs	r5, #0
 801afe4:	2715      	movs	r7, #21
 801afe6:	e003      	b.n	801aff0 <_GetDialogItem+0x20>
 801afe8:	f7f5 fe80 	bl	8010cec <GUI_ALLOC_h2p>
 801afec:	6a04      	ldr	r4, [r0, #32]
 801afee:	b17c      	cbz	r4, 801b010 <_GetDialogItem+0x40>
 801aff0:	4620      	mov	r0, r4
 801aff2:	4669      	mov	r1, sp
 801aff4:	9501      	str	r5, [sp, #4]
 801aff6:	9502      	str	r5, [sp, #8]
 801aff8:	9503      	str	r5, [sp, #12]
 801affa:	9700      	str	r7, [sp, #0]
 801affc:	f7fe ff7a 	bl	8019ef4 <WM_SendMessage>
 801b000:	9b03      	ldr	r3, [sp, #12]
 801b002:	429e      	cmp	r6, r3
 801b004:	4620      	mov	r0, r4
 801b006:	d1ef      	bne.n	801afe8 <_GetDialogItem+0x18>
 801b008:	4620      	mov	r0, r4
 801b00a:	b004      	add	sp, #16
 801b00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b010:	4631      	mov	r1, r6
 801b012:	4640      	mov	r0, r8
 801b014:	f7ff fee2 	bl	801addc <_GetDialogItem.part.4>
 801b018:	b004      	add	sp, #16
 801b01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b01e:	bf00      	nop

0801b020 <WM_ForEachDesc>:
 801b020:	b570      	push	{r4, r5, r6, lr}
 801b022:	4604      	mov	r4, r0
 801b024:	460d      	mov	r5, r1
 801b026:	4616      	mov	r6, r2
 801b028:	f7f7 fe52 	bl	8012cd0 <GUI_Lock>
 801b02c:	4632      	mov	r2, r6
 801b02e:	4629      	mov	r1, r5
 801b030:	4620      	mov	r0, r4
 801b032:	f001 faa1 	bl	801c578 <WM__ForEachDesc>
 801b036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b03a:	f7f7 be3f 	b.w	8012cbc <GUI_Unlock>
 801b03e:	bf00      	nop

0801b040 <WM_GetClientRectEx>:
 801b040:	b538      	push	{r3, r4, r5, lr}
 801b042:	4604      	mov	r4, r0
 801b044:	460d      	mov	r5, r1
 801b046:	f7f7 fe43 	bl	8012cd0 <GUI_Lock>
 801b04a:	4629      	mov	r1, r5
 801b04c:	4620      	mov	r0, r4
 801b04e:	f001 fcdd 	bl	801ca0c <WM__GetClientRectEx>
 801b052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b056:	f7f7 be31 	b.w	8012cbc <GUI_Unlock>
 801b05a:	bf00      	nop

0801b05c <WM_GetClientRect>:
 801b05c:	b538      	push	{r3, r4, r5, lr}
 801b05e:	4605      	mov	r5, r0
 801b060:	f7f7 fe36 	bl	8012cd0 <GUI_Lock>
 801b064:	4b08      	ldr	r3, [pc, #32]	; (801b088 <WM_GetClientRect+0x2c>)
 801b066:	681c      	ldr	r4, [r3, #0]
 801b068:	b914      	cbnz	r4, 801b070 <WM_GetClientRect+0x14>
 801b06a:	4b08      	ldr	r3, [pc, #32]	; (801b08c <WM_GetClientRect+0x30>)
 801b06c:	681b      	ldr	r3, [r3, #0]
 801b06e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 801b070:	f7f7 fe2e 	bl	8012cd0 <GUI_Lock>
 801b074:	4629      	mov	r1, r5
 801b076:	4620      	mov	r0, r4
 801b078:	f001 fcc8 	bl	801ca0c <WM__GetClientRectEx>
 801b07c:	f7f7 fe1e 	bl	8012cbc <GUI_Unlock>
 801b080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b084:	f7f7 be1a 	b.w	8012cbc <GUI_Unlock>
 801b088:	20035e48 	.word	0x20035e48
 801b08c:	20000014 	.word	0x20000014

0801b090 <WM_GetClientWindow>:
 801b090:	b500      	push	{lr}
 801b092:	b085      	sub	sp, #20
 801b094:	a904      	add	r1, sp, #16
 801b096:	2317      	movs	r3, #23
 801b098:	f841 3d10 	str.w	r3, [r1, #-16]!
 801b09c:	2300      	movs	r3, #0
 801b09e:	9303      	str	r3, [sp, #12]
 801b0a0:	f7fe ff28 	bl	8019ef4 <WM_SendMessage>
 801b0a4:	9803      	ldr	r0, [sp, #12]
 801b0a6:	b005      	add	sp, #20
 801b0a8:	f85d fb04 	ldr.w	pc, [sp], #4

0801b0ac <WM_GetDesktopWindow>:
 801b0ac:	4a03      	ldr	r2, [pc, #12]	; (801b0bc <WM_GetDesktopWindow+0x10>)
 801b0ae:	4b04      	ldr	r3, [pc, #16]	; (801b0c0 <WM_GetDesktopWindow+0x14>)
 801b0b0:	6812      	ldr	r2, [r2, #0]
 801b0b2:	7c52      	ldrb	r2, [r2, #17]
 801b0b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b0b8:	4770      	bx	lr
 801b0ba:	bf00      	nop
 801b0bc:	20000014 	.word	0x20000014
 801b0c0:	20035e80 	.word	0x20035e80

0801b0c4 <WM_GetDesktopWindowEx>:
 801b0c4:	2801      	cmp	r0, #1
 801b0c6:	bf9a      	itte	ls
 801b0c8:	4b02      	ldrls	r3, [pc, #8]	; (801b0d4 <WM_GetDesktopWindowEx+0x10>)
 801b0ca:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801b0ce:	2000      	movhi	r0, #0
 801b0d0:	4770      	bx	lr
 801b0d2:	bf00      	nop
 801b0d4:	20035e80 	.word	0x20035e80

0801b0d8 <WM_BringToBottom>:
 801b0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b0dc:	4604      	mov	r4, r0
 801b0de:	b087      	sub	sp, #28
 801b0e0:	f7f7 fdf6 	bl	8012cd0 <GUI_Lock>
 801b0e4:	b924      	cbnz	r4, 801b0f0 <WM_BringToBottom+0x18>
 801b0e6:	f7f7 fde9 	bl	8012cbc <GUI_Unlock>
 801b0ea:	b007      	add	sp, #28
 801b0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0f0:	4620      	mov	r0, r4
 801b0f2:	f7f5 fe05 	bl	8010d00 <GUI_ALLOC_LockH>
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	c803      	ldmia	r0, {r0, r1}
 801b0fa:	ad04      	add	r5, sp, #16
 801b0fc:	e885 0003 	stmia.w	r5, {r0, r1}
 801b100:	a801      	add	r0, sp, #4
 801b102:	9301      	str	r3, [sp, #4]
 801b104:	6a1f      	ldr	r7, [r3, #32]
 801b106:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 801b10a:	f7f5 fe0b 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801b10e:	4620      	mov	r0, r4
 801b110:	f001 fb30 	bl	801c774 <WM__GetPrevSibling>
 801b114:	4606      	mov	r6, r0
 801b116:	2800      	cmp	r0, #0
 801b118:	d0e5      	beq.n	801b0e6 <WM_BringToBottom+0xe>
 801b11a:	f7f7 fdd9 	bl	8012cd0 <GUI_Lock>
 801b11e:	4620      	mov	r0, r4
 801b120:	f7f5 fde4 	bl	8010cec <GUI_ALLOC_h2p>
 801b124:	f8d0 9018 	ldr.w	r9, [r0, #24]
 801b128:	f7f7 fdc8 	bl	8012cbc <GUI_Unlock>
 801b12c:	f018 0f02 	tst.w	r8, #2
 801b130:	d120      	bne.n	801b174 <WM_BringToBottom+0x9c>
 801b132:	4620      	mov	r0, r4
 801b134:	f7f5 fde4 	bl	8010d00 <GUI_ALLOC_LockH>
 801b138:	9001      	str	r0, [sp, #4]
 801b13a:	4648      	mov	r0, r9
 801b13c:	f7f5 fde0 	bl	8010d00 <GUI_ALLOC_LockH>
 801b140:	9003      	str	r0, [sp, #12]
 801b142:	4630      	mov	r0, r6
 801b144:	f7f5 fddc 	bl	8010d00 <GUI_ALLOC_LockH>
 801b148:	9a03      	ldr	r2, [sp, #12]
 801b14a:	9901      	ldr	r1, [sp, #4]
 801b14c:	69d5      	ldr	r5, [r2, #28]
 801b14e:	6207      	str	r7, [r0, #32]
 801b150:	4603      	mov	r3, r0
 801b152:	620d      	str	r5, [r1, #32]
 801b154:	a801      	add	r0, sp, #4
 801b156:	61d4      	str	r4, [r2, #28]
 801b158:	9302      	str	r3, [sp, #8]
 801b15a:	f7f5 fde3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801b15e:	a803      	add	r0, sp, #12
 801b160:	f7f5 fde0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801b164:	a802      	add	r0, sp, #8
 801b166:	f7f5 fddd 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801b16a:	f7f7 fda7 	bl	8012cbc <GUI_Unlock>
 801b16e:	b007      	add	sp, #28
 801b170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b174:	4628      	mov	r0, r5
 801b176:	463a      	mov	r2, r7
 801b178:	4649      	mov	r1, r9
 801b17a:	f7fe fe55 	bl	8019e28 <WM__InvalidateRectEx>
 801b17e:	e7d8      	b.n	801b132 <WM_BringToBottom+0x5a>

0801b180 <WM_GetDialogItem>:
 801b180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b184:	4680      	mov	r8, r0
 801b186:	b086      	sub	sp, #24
 801b188:	b918      	cbnz	r0, 801b192 <WM_GetDialogItem+0x12>
 801b18a:	4640      	mov	r0, r8
 801b18c:	b006      	add	sp, #24
 801b18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b192:	460e      	mov	r6, r1
 801b194:	f7f7 fd9c 	bl	8012cd0 <GUI_Lock>
 801b198:	4640      	mov	r0, r8
 801b19a:	f7f5 fdb1 	bl	8010d00 <GUI_ALLOC_LockH>
 801b19e:	ab06      	add	r3, sp, #24
 801b1a0:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801b1a4:	f843 0d14 	str.w	r0, [r3, #-20]!
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	f7f5 fdbb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801b1ae:	f1b8 0f00 	cmp.w	r8, #0
 801b1b2:	d044      	beq.n	801b23e <WM_GetDialogItem+0xbe>
 801b1b4:	2500      	movs	r5, #0
 801b1b6:	2715      	movs	r7, #21
 801b1b8:	a902      	add	r1, sp, #8
 801b1ba:	4640      	mov	r0, r8
 801b1bc:	9503      	str	r5, [sp, #12]
 801b1be:	9504      	str	r5, [sp, #16]
 801b1c0:	9505      	str	r5, [sp, #20]
 801b1c2:	9702      	str	r7, [sp, #8]
 801b1c4:	f7fe fe96 	bl	8019ef4 <WM_SendMessage>
 801b1c8:	9b05      	ldr	r3, [sp, #20]
 801b1ca:	429e      	cmp	r6, r3
 801b1cc:	d016      	beq.n	801b1fc <WM_GetDialogItem+0x7c>
 801b1ce:	4640      	mov	r0, r8
 801b1d0:	f7f5 fd8c 	bl	8010cec <GUI_ALLOC_h2p>
 801b1d4:	69c4      	ldr	r4, [r0, #28]
 801b1d6:	b924      	cbnz	r4, 801b1e2 <WM_GetDialogItem+0x62>
 801b1d8:	e016      	b.n	801b208 <WM_GetDialogItem+0x88>
 801b1da:	f7f5 fd87 	bl	8010cec <GUI_ALLOC_h2p>
 801b1de:	6a04      	ldr	r4, [r0, #32]
 801b1e0:	b194      	cbz	r4, 801b208 <WM_GetDialogItem+0x88>
 801b1e2:	4620      	mov	r0, r4
 801b1e4:	a902      	add	r1, sp, #8
 801b1e6:	9503      	str	r5, [sp, #12]
 801b1e8:	9504      	str	r5, [sp, #16]
 801b1ea:	9505      	str	r5, [sp, #20]
 801b1ec:	9702      	str	r7, [sp, #8]
 801b1ee:	f7fe fe81 	bl	8019ef4 <WM_SendMessage>
 801b1f2:	9b05      	ldr	r3, [sp, #20]
 801b1f4:	429e      	cmp	r6, r3
 801b1f6:	4620      	mov	r0, r4
 801b1f8:	d1ef      	bne.n	801b1da <WM_GetDialogItem+0x5a>
 801b1fa:	46a0      	mov	r8, r4
 801b1fc:	f7f7 fd5e 	bl	8012cbc <GUI_Unlock>
 801b200:	4640      	mov	r0, r8
 801b202:	b006      	add	sp, #24
 801b204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b208:	4640      	mov	r0, r8
 801b20a:	f7f5 fd6f 	bl	8010cec <GUI_ALLOC_h2p>
 801b20e:	69c4      	ldr	r4, [r0, #28]
 801b210:	b92c      	cbnz	r4, 801b21e <WM_GetDialogItem+0x9e>
 801b212:	e00c      	b.n	801b22e <WM_GetDialogItem+0xae>
 801b214:	4620      	mov	r0, r4
 801b216:	f7f5 fd69 	bl	8010cec <GUI_ALLOC_h2p>
 801b21a:	6a04      	ldr	r4, [r0, #32]
 801b21c:	b13c      	cbz	r4, 801b22e <WM_GetDialogItem+0xae>
 801b21e:	4631      	mov	r1, r6
 801b220:	4620      	mov	r0, r4
 801b222:	f7ff fed5 	bl	801afd0 <_GetDialogItem>
 801b226:	2800      	cmp	r0, #0
 801b228:	d0f4      	beq.n	801b214 <WM_GetDialogItem+0x94>
 801b22a:	4680      	mov	r8, r0
 801b22c:	e7e6      	b.n	801b1fc <WM_GetDialogItem+0x7c>
 801b22e:	4640      	mov	r0, r8
 801b230:	f7f5 fd5c 	bl	8010cec <GUI_ALLOC_h2p>
 801b234:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801b238:	f1b8 0f00 	cmp.w	r8, #0
 801b23c:	d1bc      	bne.n	801b1b8 <WM_GetDialogItem+0x38>
 801b23e:	f04f 0800 	mov.w	r8, #0
 801b242:	e7db      	b.n	801b1fc <WM_GetDialogItem+0x7c>

0801b244 <WM_GetFirstChild>:
 801b244:	b510      	push	{r4, lr}
 801b246:	4604      	mov	r4, r0
 801b248:	b138      	cbz	r0, 801b25a <WM_GetFirstChild+0x16>
 801b24a:	f7f7 fd41 	bl	8012cd0 <GUI_Lock>
 801b24e:	4620      	mov	r0, r4
 801b250:	f7f5 fd4c 	bl	8010cec <GUI_ALLOC_h2p>
 801b254:	69c4      	ldr	r4, [r0, #28]
 801b256:	f7f7 fd31 	bl	8012cbc <GUI_Unlock>
 801b25a:	4620      	mov	r0, r4
 801b25c:	bd10      	pop	{r4, pc}
 801b25e:	bf00      	nop

0801b260 <WM_GetFocusedWindow>:
 801b260:	b510      	push	{r4, lr}
 801b262:	f7f7 fd35 	bl	8012cd0 <GUI_Lock>
 801b266:	4a04      	ldr	r2, [pc, #16]	; (801b278 <WM_GetFocusedWindow+0x18>)
 801b268:	4b04      	ldr	r3, [pc, #16]	; (801b27c <WM_GetFocusedWindow+0x1c>)
 801b26a:	6812      	ldr	r2, [r2, #0]
 801b26c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801b270:	f7f7 fd24 	bl	8012cbc <GUI_Unlock>
 801b274:	4620      	mov	r0, r4
 801b276:	bd10      	pop	{r4, pc}
 801b278:	20035e4c 	.word	0x20035e4c
 801b27c:	20035e68 	.word	0x20035e68

0801b280 <WM_GetId>:
 801b280:	b500      	push	{lr}
 801b282:	b085      	sub	sp, #20
 801b284:	2300      	movs	r3, #0
 801b286:	2215      	movs	r2, #21
 801b288:	4669      	mov	r1, sp
 801b28a:	9301      	str	r3, [sp, #4]
 801b28c:	9302      	str	r3, [sp, #8]
 801b28e:	9303      	str	r3, [sp, #12]
 801b290:	9200      	str	r2, [sp, #0]
 801b292:	f7fe fe2f 	bl	8019ef4 <WM_SendMessage>
 801b296:	9803      	ldr	r0, [sp, #12]
 801b298:	b005      	add	sp, #20
 801b29a:	f85d fb04 	ldr.w	pc, [sp], #4
 801b29e:	bf00      	nop

0801b2a0 <WM_GetNextSibling>:
 801b2a0:	b510      	push	{r4, lr}
 801b2a2:	4604      	mov	r4, r0
 801b2a4:	f7f7 fd14 	bl	8012cd0 <GUI_Lock>
 801b2a8:	b11c      	cbz	r4, 801b2b2 <WM_GetNextSibling+0x12>
 801b2aa:	4620      	mov	r0, r4
 801b2ac:	f7f5 fd1e 	bl	8010cec <GUI_ALLOC_h2p>
 801b2b0:	6a04      	ldr	r4, [r0, #32]
 801b2b2:	f7f7 fd03 	bl	8012cbc <GUI_Unlock>
 801b2b6:	4620      	mov	r0, r4
 801b2b8:	bd10      	pop	{r4, pc}
 801b2ba:	bf00      	nop

0801b2bc <WM_GetWindowOrgX>:
 801b2bc:	b510      	push	{r4, lr}
 801b2be:	4604      	mov	r4, r0
 801b2c0:	b140      	cbz	r0, 801b2d4 <WM_GetWindowOrgX+0x18>
 801b2c2:	f7f7 fd05 	bl	8012cd0 <GUI_Lock>
 801b2c6:	4620      	mov	r0, r4
 801b2c8:	f7f5 fd10 	bl	8010cec <GUI_ALLOC_h2p>
 801b2cc:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b2d0:	f7f7 fcf4 	bl	8012cbc <GUI_Unlock>
 801b2d4:	4620      	mov	r0, r4
 801b2d6:	bd10      	pop	{r4, pc}

0801b2d8 <WM_GetWindowOrgY>:
 801b2d8:	b510      	push	{r4, lr}
 801b2da:	4604      	mov	r4, r0
 801b2dc:	b140      	cbz	r0, 801b2f0 <WM_GetWindowOrgY+0x18>
 801b2de:	f7f7 fcf7 	bl	8012cd0 <GUI_Lock>
 801b2e2:	4620      	mov	r0, r4
 801b2e4:	f7f5 fd02 	bl	8010cec <GUI_ALLOC_h2p>
 801b2e8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801b2ec:	f7f7 fce6 	bl	8012cbc <GUI_Unlock>
 801b2f0:	4620      	mov	r0, r4
 801b2f2:	bd10      	pop	{r4, pc}

0801b2f4 <WM_GetParent>:
 801b2f4:	b510      	push	{r4, lr}
 801b2f6:	4604      	mov	r4, r0
 801b2f8:	b138      	cbz	r0, 801b30a <WM_GetParent+0x16>
 801b2fa:	f7f7 fce9 	bl	8012cd0 <GUI_Lock>
 801b2fe:	4620      	mov	r0, r4
 801b300:	f7f5 fcf4 	bl	8010cec <GUI_ALLOC_h2p>
 801b304:	6984      	ldr	r4, [r0, #24]
 801b306:	f7f7 fcd9 	bl	8012cbc <GUI_Unlock>
 801b30a:	4620      	mov	r0, r4
 801b30c:	bd10      	pop	{r4, pc}
 801b30e:	bf00      	nop

0801b310 <WM_GetScrollbarH>:
 801b310:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b312:	b085      	sub	sp, #20
 801b314:	b918      	cbnz	r0, 801b31e <WM_GetScrollbarH+0xe>
 801b316:	4604      	mov	r4, r0
 801b318:	4620      	mov	r0, r4
 801b31a:	b005      	add	sp, #20
 801b31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b31e:	4607      	mov	r7, r0
 801b320:	f7f7 fcd6 	bl	8012cd0 <GUI_Lock>
 801b324:	4638      	mov	r0, r7
 801b326:	f7f5 fce1 	bl	8010cec <GUI_ALLOC_h2p>
 801b32a:	69c4      	ldr	r4, [r0, #28]
 801b32c:	b1bc      	cbz	r4, 801b35e <WM_GetScrollbarH+0x4e>
 801b32e:	2500      	movs	r5, #0
 801b330:	2615      	movs	r6, #21
 801b332:	e003      	b.n	801b33c <WM_GetScrollbarH+0x2c>
 801b334:	f7f5 fcda 	bl	8010cec <GUI_ALLOC_h2p>
 801b338:	6a04      	ldr	r4, [r0, #32]
 801b33a:	b184      	cbz	r4, 801b35e <WM_GetScrollbarH+0x4e>
 801b33c:	4620      	mov	r0, r4
 801b33e:	4669      	mov	r1, sp
 801b340:	9501      	str	r5, [sp, #4]
 801b342:	9502      	str	r5, [sp, #8]
 801b344:	9503      	str	r5, [sp, #12]
 801b346:	9600      	str	r6, [sp, #0]
 801b348:	f7fe fdd4 	bl	8019ef4 <WM_SendMessage>
 801b34c:	9b03      	ldr	r3, [sp, #12]
 801b34e:	2bff      	cmp	r3, #255	; 0xff
 801b350:	4620      	mov	r0, r4
 801b352:	d1ef      	bne.n	801b334 <WM_GetScrollbarH+0x24>
 801b354:	f7f7 fcb2 	bl	8012cbc <GUI_Unlock>
 801b358:	4620      	mov	r0, r4
 801b35a:	b005      	add	sp, #20
 801b35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b35e:	4638      	mov	r0, r7
 801b360:	21ff      	movs	r1, #255	; 0xff
 801b362:	f7ff fd3b 	bl	801addc <_GetDialogItem.part.4>
 801b366:	4604      	mov	r4, r0
 801b368:	f7f7 fca8 	bl	8012cbc <GUI_Unlock>
 801b36c:	e7f4      	b.n	801b358 <WM_GetScrollbarH+0x48>
 801b36e:	bf00      	nop

0801b370 <WM_GetScrollbarV>:
 801b370:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b372:	b085      	sub	sp, #20
 801b374:	b918      	cbnz	r0, 801b37e <WM_GetScrollbarV+0xe>
 801b376:	4604      	mov	r4, r0
 801b378:	4620      	mov	r0, r4
 801b37a:	b005      	add	sp, #20
 801b37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b37e:	4607      	mov	r7, r0
 801b380:	f7f7 fca6 	bl	8012cd0 <GUI_Lock>
 801b384:	4638      	mov	r0, r7
 801b386:	f7f5 fcb1 	bl	8010cec <GUI_ALLOC_h2p>
 801b38a:	69c4      	ldr	r4, [r0, #28]
 801b38c:	b1bc      	cbz	r4, 801b3be <WM_GetScrollbarV+0x4e>
 801b38e:	2500      	movs	r5, #0
 801b390:	2615      	movs	r6, #21
 801b392:	e003      	b.n	801b39c <WM_GetScrollbarV+0x2c>
 801b394:	f7f5 fcaa 	bl	8010cec <GUI_ALLOC_h2p>
 801b398:	6a04      	ldr	r4, [r0, #32]
 801b39a:	b184      	cbz	r4, 801b3be <WM_GetScrollbarV+0x4e>
 801b39c:	4620      	mov	r0, r4
 801b39e:	4669      	mov	r1, sp
 801b3a0:	9501      	str	r5, [sp, #4]
 801b3a2:	9502      	str	r5, [sp, #8]
 801b3a4:	9503      	str	r5, [sp, #12]
 801b3a6:	9600      	str	r6, [sp, #0]
 801b3a8:	f7fe fda4 	bl	8019ef4 <WM_SendMessage>
 801b3ac:	9b03      	ldr	r3, [sp, #12]
 801b3ae:	2bfe      	cmp	r3, #254	; 0xfe
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	d1ef      	bne.n	801b394 <WM_GetScrollbarV+0x24>
 801b3b4:	f7f7 fc82 	bl	8012cbc <GUI_Unlock>
 801b3b8:	4620      	mov	r0, r4
 801b3ba:	b005      	add	sp, #20
 801b3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3be:	4638      	mov	r0, r7
 801b3c0:	21fe      	movs	r1, #254	; 0xfe
 801b3c2:	f7ff fd0b 	bl	801addc <_GetDialogItem.part.4>
 801b3c6:	4604      	mov	r4, r0
 801b3c8:	f7f7 fc78 	bl	8012cbc <GUI_Unlock>
 801b3cc:	e7f4      	b.n	801b3b8 <WM_GetScrollbarV+0x48>
 801b3ce:	bf00      	nop

0801b3d0 <WM_GetWindowRectEx>:
 801b3d0:	b180      	cbz	r0, 801b3f4 <WM_GetWindowRectEx+0x24>
 801b3d2:	b179      	cbz	r1, 801b3f4 <WM_GetWindowRectEx+0x24>
 801b3d4:	b538      	push	{r3, r4, r5, lr}
 801b3d6:	4605      	mov	r5, r0
 801b3d8:	460c      	mov	r4, r1
 801b3da:	f7f7 fc79 	bl	8012cd0 <GUI_Lock>
 801b3de:	4628      	mov	r0, r5
 801b3e0:	f7f5 fc84 	bl	8010cec <GUI_ALLOC_h2p>
 801b3e4:	4603      	mov	r3, r0
 801b3e6:	cb03      	ldmia	r3!, {r0, r1}
 801b3e8:	6020      	str	r0, [r4, #0]
 801b3ea:	6061      	str	r1, [r4, #4]
 801b3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3f0:	f7f7 bc64 	b.w	8012cbc <GUI_Unlock>
 801b3f4:	4770      	bx	lr
 801b3f6:	bf00      	nop

0801b3f8 <WM_HasFocus>:
 801b3f8:	4a04      	ldr	r2, [pc, #16]	; (801b40c <WM_HasFocus+0x14>)
 801b3fa:	4b05      	ldr	r3, [pc, #20]	; (801b410 <WM_HasFocus+0x18>)
 801b3fc:	6812      	ldr	r2, [r2, #0]
 801b3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b402:	1a18      	subs	r0, r3, r0
 801b404:	fab0 f080 	clz	r0, r0
 801b408:	0940      	lsrs	r0, r0, #5
 801b40a:	4770      	bx	lr
 801b40c:	20035e4c 	.word	0x20035e4c
 801b410:	20035e68 	.word	0x20035e68

0801b414 <WM_IsFocusable>:
 801b414:	b908      	cbnz	r0, 801b41a <WM_IsFocusable+0x6>
 801b416:	2000      	movs	r0, #0
 801b418:	4770      	bx	lr
 801b41a:	b530      	push	{r4, r5, lr}
 801b41c:	4604      	mov	r4, r0
 801b41e:	b085      	sub	sp, #20
 801b420:	f7f7 fc56 	bl	8012cd0 <GUI_Lock>
 801b424:	4620      	mov	r0, r4
 801b426:	f7f5 fc61 	bl	8010cec <GUI_ALLOC_h2p>
 801b42a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 801b42c:	f7f7 fc46 	bl	8012cbc <GUI_Unlock>
 801b430:	07ab      	lsls	r3, r5, #30
 801b432:	d502      	bpl.n	801b43a <WM_IsFocusable+0x26>
 801b434:	f015 0510 	ands.w	r5, r5, #16
 801b438:	d002      	beq.n	801b440 <WM_IsFocusable+0x2c>
 801b43a:	2000      	movs	r0, #0
 801b43c:	b005      	add	sp, #20
 801b43e:	bd30      	pop	{r4, r5, pc}
 801b440:	a904      	add	r1, sp, #16
 801b442:	231f      	movs	r3, #31
 801b444:	4620      	mov	r0, r4
 801b446:	f841 3d10 	str.w	r3, [r1, #-16]!
 801b44a:	9503      	str	r5, [sp, #12]
 801b44c:	f7fe fd52 	bl	8019ef4 <WM_SendMessage>
 801b450:	9803      	ldr	r0, [sp, #12]
 801b452:	e7f3      	b.n	801b43c <WM_IsFocusable+0x28>

0801b454 <WM_IsWindow>:
 801b454:	b510      	push	{r4, lr}
 801b456:	4604      	mov	r4, r0
 801b458:	f7f7 fc3a 	bl	8012cd0 <GUI_Lock>
 801b45c:	4620      	mov	r0, r4
 801b45e:	f7fd febb 	bl	80191d8 <WM__IsWindow>
 801b462:	4604      	mov	r4, r0
 801b464:	f7f7 fc2a 	bl	8012cbc <GUI_Unlock>
 801b468:	4620      	mov	r0, r4
 801b46a:	bd10      	pop	{r4, pc}

0801b46c <WM_NotifyParent>:
 801b46c:	b530      	push	{r4, r5, lr}
 801b46e:	b085      	sub	sp, #20
 801b470:	4604      	mov	r4, r0
 801b472:	2326      	movs	r3, #38	; 0x26
 801b474:	9103      	str	r1, [sp, #12]
 801b476:	9300      	str	r3, [sp, #0]
 801b478:	f7f7 fc2a 	bl	8012cd0 <GUI_Lock>
 801b47c:	b91c      	cbnz	r4, 801b486 <WM_NotifyParent+0x1a>
 801b47e:	f7f7 fc1d 	bl	8012cbc <GUI_Unlock>
 801b482:	b005      	add	sp, #20
 801b484:	bd30      	pop	{r4, r5, pc}
 801b486:	f7f7 fc23 	bl	8012cd0 <GUI_Lock>
 801b48a:	4620      	mov	r0, r4
 801b48c:	f7f5 fc2e 	bl	8010cec <GUI_ALLOC_h2p>
 801b490:	6985      	ldr	r5, [r0, #24]
 801b492:	f7f7 fc13 	bl	8012cbc <GUI_Unlock>
 801b496:	2d00      	cmp	r5, #0
 801b498:	d0f1      	beq.n	801b47e <WM_NotifyParent+0x12>
 801b49a:	4628      	mov	r0, r5
 801b49c:	4669      	mov	r1, sp
 801b49e:	9402      	str	r4, [sp, #8]
 801b4a0:	f001 f9b6 	bl	801c810 <WM__SendMessage>
 801b4a4:	f7f7 fc0a 	bl	8012cbc <GUI_Unlock>
 801b4a8:	b005      	add	sp, #20
 801b4aa:	bd30      	pop	{r4, r5, pc}

0801b4ac <WM_OnKey>:
 801b4ac:	b530      	push	{r4, r5, lr}
 801b4ae:	b087      	sub	sp, #28
 801b4b0:	4605      	mov	r5, r0
 801b4b2:	460c      	mov	r4, r1
 801b4b4:	f7f7 fc0c 	bl	8012cd0 <GUI_Lock>
 801b4b8:	4a0d      	ldr	r2, [pc, #52]	; (801b4f0 <WM_OnKey+0x44>)
 801b4ba:	4b0e      	ldr	r3, [pc, #56]	; (801b4f4 <WM_OnKey+0x48>)
 801b4bc:	6812      	ldr	r2, [r2, #0]
 801b4be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b4c2:	b928      	cbnz	r0, 801b4d0 <WM_OnKey+0x24>
 801b4c4:	4604      	mov	r4, r0
 801b4c6:	f7f7 fbf9 	bl	8012cbc <GUI_Unlock>
 801b4ca:	4620      	mov	r0, r4
 801b4cc:	b007      	add	sp, #28
 801b4ce:	bd30      	pop	{r4, r5, pc}
 801b4d0:	230e      	movs	r3, #14
 801b4d2:	a902      	add	r1, sp, #8
 801b4d4:	9401      	str	r4, [sp, #4]
 801b4d6:	9302      	str	r3, [sp, #8]
 801b4d8:	9500      	str	r5, [sp, #0]
 801b4da:	f8cd d014 	str.w	sp, [sp, #20]
 801b4de:	f001 f997 	bl	801c810 <WM__SendMessage>
 801b4e2:	f7f7 fbeb 	bl	8012cbc <GUI_Unlock>
 801b4e6:	2401      	movs	r4, #1
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	b007      	add	sp, #28
 801b4ec:	bd30      	pop	{r4, r5, pc}
 801b4ee:	bf00      	nop
 801b4f0:	20035e4c 	.word	0x20035e4c
 801b4f4:	20035e68 	.word	0x20035e68

0801b4f8 <WM_Update>:
 801b4f8:	b900      	cbnz	r0, 801b4fc <WM_Update+0x4>
 801b4fa:	4770      	bx	lr
 801b4fc:	b510      	push	{r4, lr}
 801b4fe:	b09e      	sub	sp, #120	; 0x78
 801b500:	4604      	mov	r4, r0
 801b502:	f7f7 fbe5 	bl	8012cd0 <GUI_Lock>
 801b506:	a801      	add	r0, sp, #4
 801b508:	f7f6 f92a 	bl	8011760 <GUI_SaveContext_W>
 801b50c:	4620      	mov	r0, r4
 801b50e:	f7ff f8db 	bl	801a6c8 <WM__Paint>
 801b512:	a801      	add	r0, sp, #4
 801b514:	f7f6 f92e 	bl	8011774 <GUI_RestoreContext>
 801b518:	f7f7 fbd0 	bl	8012cbc <GUI_Unlock>
 801b51c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b51e:	f7f9 faef 	bl	8014b00 <LCD_SetColor>
 801b522:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b524:	f7f9 fae6 	bl	8014af4 <LCD_SetBkColor>
 801b528:	b01e      	add	sp, #120	; 0x78
 801b52a:	bd10      	pop	{r4, pc}

0801b52c <WM_ResizeWindow>:
 801b52c:	b500      	push	{lr}
 801b52e:	ea51 0e02 	orrs.w	lr, r1, r2
 801b532:	d000      	beq.n	801b536 <WM_ResizeWindow+0xa>
 801b534:	b908      	cbnz	r0, 801b53a <WM_ResizeWindow+0xe>
 801b536:	f85d fb04 	ldr.w	pc, [sp], #4
 801b53a:	f85d eb04 	ldr.w	lr, [sp], #4
 801b53e:	f7ff bbcb 	b.w	801acd8 <WM_ResizeWindow.part.11>
 801b542:	bf00      	nop

0801b544 <WM_SendMessageNoPara>:
 801b544:	b538      	push	{r3, r4, r5, lr}
 801b546:	4604      	mov	r4, r0
 801b548:	460d      	mov	r5, r1
 801b54a:	f7f7 fbc1 	bl	8012cd0 <GUI_Lock>
 801b54e:	4629      	mov	r1, r5
 801b550:	4620      	mov	r0, r4
 801b552:	f001 f99f 	bl	801c894 <WM__SendMessageNoPara>
 801b556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b55a:	f7f7 bbaf 	b.w	8012cbc <GUI_Unlock>
 801b55e:	bf00      	nop

0801b560 <WM_SendToParent>:
 801b560:	b1e1      	cbz	r1, 801b59c <WM_SendToParent+0x3c>
 801b562:	b570      	push	{r4, r5, r6, lr}
 801b564:	4605      	mov	r5, r0
 801b566:	460c      	mov	r4, r1
 801b568:	f7f7 fbb2 	bl	8012cd0 <GUI_Lock>
 801b56c:	b91d      	cbnz	r5, 801b576 <WM_SendToParent+0x16>
 801b56e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b572:	f7f7 bba3 	b.w	8012cbc <GUI_Unlock>
 801b576:	f7f7 fbab 	bl	8012cd0 <GUI_Lock>
 801b57a:	4628      	mov	r0, r5
 801b57c:	f7f5 fbb6 	bl	8010cec <GUI_ALLOC_h2p>
 801b580:	6986      	ldr	r6, [r0, #24]
 801b582:	f7f7 fb9b 	bl	8012cbc <GUI_Unlock>
 801b586:	2e00      	cmp	r6, #0
 801b588:	d0f1      	beq.n	801b56e <WM_SendToParent+0xe>
 801b58a:	60a5      	str	r5, [r4, #8]
 801b58c:	4621      	mov	r1, r4
 801b58e:	4630      	mov	r0, r6
 801b590:	f001 f93e 	bl	801c810 <WM__SendMessage>
 801b594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b598:	f7f7 bb90 	b.w	8012cbc <GUI_Unlock>
 801b59c:	4770      	bx	lr
 801b59e:	bf00      	nop

0801b5a0 <WM_SetCallback>:
 801b5a0:	b570      	push	{r4, r5, r6, lr}
 801b5a2:	b082      	sub	sp, #8
 801b5a4:	b1b0      	cbz	r0, 801b5d4 <WM_SetCallback+0x34>
 801b5a6:	4604      	mov	r4, r0
 801b5a8:	460d      	mov	r5, r1
 801b5aa:	f7f7 fb91 	bl	8012cd0 <GUI_Lock>
 801b5ae:	4620      	mov	r0, r4
 801b5b0:	f7f5 fba6 	bl	8010d00 <GUI_ALLOC_LockH>
 801b5b4:	ab02      	add	r3, sp, #8
 801b5b6:	6906      	ldr	r6, [r0, #16]
 801b5b8:	f843 0d04 	str.w	r0, [r3, #-4]!
 801b5bc:	6105      	str	r5, [r0, #16]
 801b5be:	4618      	mov	r0, r3
 801b5c0:	f7f5 fbb0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801b5c4:	4620      	mov	r0, r4
 801b5c6:	f7fe fcc3 	bl	8019f50 <WM_InvalidateWindow>
 801b5ca:	f7f7 fb77 	bl	8012cbc <GUI_Unlock>
 801b5ce:	4630      	mov	r0, r6
 801b5d0:	b002      	add	sp, #8
 801b5d2:	bd70      	pop	{r4, r5, r6, pc}
 801b5d4:	4606      	mov	r6, r0
 801b5d6:	4630      	mov	r0, r6
 801b5d8:	b002      	add	sp, #8
 801b5da:	bd70      	pop	{r4, r5, r6, pc}

0801b5dc <WM_SetFocus>:
 801b5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5e0:	b086      	sub	sp, #24
 801b5e2:	2500      	movs	r5, #0
 801b5e4:	4604      	mov	r4, r0
 801b5e6:	9503      	str	r5, [sp, #12]
 801b5e8:	9502      	str	r5, [sp, #8]
 801b5ea:	9504      	str	r5, [sp, #16]
 801b5ec:	9505      	str	r5, [sp, #20]
 801b5ee:	f7f7 fb6f 	bl	8012cd0 <GUI_Lock>
 801b5f2:	2c00      	cmp	r4, #0
 801b5f4:	d04e      	beq.n	801b694 <WM_SetFocus+0xb8>
 801b5f6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801b6b0 <WM_SetFocus+0xd4>
 801b5fa:	4f2c      	ldr	r7, [pc, #176]	; (801b6ac <WM_SetFocus+0xd0>)
 801b5fc:	f8d8 3000 	ldr.w	r3, [r8]
 801b600:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 801b604:	4284      	cmp	r4, r0
 801b606:	d045      	beq.n	801b694 <WM_SetFocus+0xb8>
 801b608:	231e      	movs	r3, #30
 801b60a:	e88d 0011 	stmia.w	sp, {r0, r4}
 801b60e:	9505      	str	r5, [sp, #20]
 801b610:	9302      	str	r3, [sp, #8]
 801b612:	2800      	cmp	r0, #0
 801b614:	d145      	bne.n	801b6a2 <WM_SetFocus+0xc6>
 801b616:	2301      	movs	r3, #1
 801b618:	a902      	add	r1, sp, #8
 801b61a:	4620      	mov	r0, r4
 801b61c:	9305      	str	r3, [sp, #20]
 801b61e:	f001 f8f7 	bl	801c810 <WM__SendMessage>
 801b622:	9e05      	ldr	r6, [sp, #20]
 801b624:	2e00      	cmp	r6, #0
 801b626:	d136      	bne.n	801b696 <WM_SetFocus+0xba>
 801b628:	f8d8 3000 	ldr.w	r3, [r8]
 801b62c:	2520      	movs	r5, #32
 801b62e:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
 801b632:	e004      	b.n	801b63e <WM_SetFocus+0x62>
 801b634:	9502      	str	r5, [sp, #8]
 801b636:	f8cd d014 	str.w	sp, [sp, #20]
 801b63a:	f001 f8e9 	bl	801c810 <WM__SendMessage>
 801b63e:	f7f7 fb47 	bl	8012cd0 <GUI_Lock>
 801b642:	4620      	mov	r0, r4
 801b644:	f7f5 fb52 	bl	8010cec <GUI_ALLOC_h2p>
 801b648:	6984      	ldr	r4, [r0, #24]
 801b64a:	f7f7 fb37 	bl	8012cbc <GUI_Unlock>
 801b64e:	a902      	add	r1, sp, #8
 801b650:	4620      	mov	r0, r4
 801b652:	2c00      	cmp	r4, #0
 801b654:	d1ee      	bne.n	801b634 <WM_SetFocus+0x58>
 801b656:	9c00      	ldr	r4, [sp, #0]
 801b658:	f7f7 fb3a 	bl	8012cd0 <GUI_Lock>
 801b65c:	4620      	mov	r0, r4
 801b65e:	f7fd fdbb 	bl	80191d8 <WM__IsWindow>
 801b662:	4605      	mov	r5, r0
 801b664:	f7f7 fb2a 	bl	8012cbc <GUI_Unlock>
 801b668:	b1ad      	cbz	r5, 801b696 <WM_SetFocus+0xba>
 801b66a:	b1a4      	cbz	r4, 801b696 <WM_SetFocus+0xba>
 801b66c:	2520      	movs	r5, #32
 801b66e:	e004      	b.n	801b67a <WM_SetFocus+0x9e>
 801b670:	9502      	str	r5, [sp, #8]
 801b672:	f8cd d014 	str.w	sp, [sp, #20]
 801b676:	f001 f8cb 	bl	801c810 <WM__SendMessage>
 801b67a:	f7f7 fb29 	bl	8012cd0 <GUI_Lock>
 801b67e:	4620      	mov	r0, r4
 801b680:	f7f5 fb34 	bl	8010cec <GUI_ALLOC_h2p>
 801b684:	6984      	ldr	r4, [r0, #24]
 801b686:	f7f7 fb19 	bl	8012cbc <GUI_Unlock>
 801b68a:	a902      	add	r1, sp, #8
 801b68c:	4620      	mov	r0, r4
 801b68e:	2c00      	cmp	r4, #0
 801b690:	d1ee      	bne.n	801b670 <WM_SetFocus+0x94>
 801b692:	e000      	b.n	801b696 <WM_SetFocus+0xba>
 801b694:	2601      	movs	r6, #1
 801b696:	f7f7 fb11 	bl	8012cbc <GUI_Unlock>
 801b69a:	4630      	mov	r0, r6
 801b69c:	b006      	add	sp, #24
 801b69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6a2:	a902      	add	r1, sp, #8
 801b6a4:	f001 f8b4 	bl	801c810 <WM__SendMessage>
 801b6a8:	e7b5      	b.n	801b616 <WM_SetFocus+0x3a>
 801b6aa:	bf00      	nop
 801b6ac:	20035e68 	.word	0x20035e68
 801b6b0:	20035e4c 	.word	0x20035e4c

0801b6b4 <WM_SetSize>:
 801b6b4:	b900      	cbnz	r0, 801b6b8 <WM_SetSize+0x4>
 801b6b6:	4770      	bx	lr
 801b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6bc:	4604      	mov	r4, r0
 801b6be:	b082      	sub	sp, #8
 801b6c0:	4617      	mov	r7, r2
 801b6c2:	4688      	mov	r8, r1
 801b6c4:	f7f7 fb04 	bl	8012cd0 <GUI_Lock>
 801b6c8:	4620      	mov	r0, r4
 801b6ca:	f7f5 fb19 	bl	8010d00 <GUI_ALLOC_LockH>
 801b6ce:	f10d 0e08 	add.w	lr, sp, #8
 801b6d2:	f9b0 1000 	ldrsh.w	r1, [r0]
 801b6d6:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 801b6da:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b6de:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801b6e2:	f84e 0d04 	str.w	r0, [lr, #-4]!
 801b6e6:	1a76      	subs	r6, r6, r1
 801b6e8:	1aeb      	subs	r3, r5, r3
 801b6ea:	3301      	adds	r3, #1
 801b6ec:	1c75      	adds	r5, r6, #1
 801b6ee:	ebc5 0508 	rsb	r5, r5, r8
 801b6f2:	1afe      	subs	r6, r7, r3
 801b6f4:	4670      	mov	r0, lr
 801b6f6:	f7f5 fb15 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801b6fa:	ea55 0306 	orrs.w	r3, r5, r6
 801b6fe:	d104      	bne.n	801b70a <WM_SetSize+0x56>
 801b700:	f7f7 fadc 	bl	8012cbc <GUI_Unlock>
 801b704:	b002      	add	sp, #8
 801b706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b70a:	4632      	mov	r2, r6
 801b70c:	4629      	mov	r1, r5
 801b70e:	4620      	mov	r0, r4
 801b710:	f7ff fae2 	bl	801acd8 <WM_ResizeWindow.part.11>
 801b714:	e7f4      	b.n	801b700 <WM_SetSize+0x4c>
 801b716:	bf00      	nop

0801b718 <WM_SetUserClipRect>:
 801b718:	b538      	push	{r3, r4, r5, lr}
 801b71a:	4605      	mov	r5, r0
 801b71c:	f7f7 fad8 	bl	8012cd0 <GUI_Lock>
 801b720:	4b04      	ldr	r3, [pc, #16]	; (801b734 <WM_SetUserClipRect+0x1c>)
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 801b726:	645d      	str	r5, [r3, #68]	; 0x44
 801b728:	f7fd fc32 	bl	8018f90 <WM__ActivateClipRect>
 801b72c:	f7f7 fac6 	bl	8012cbc <GUI_Unlock>
 801b730:	4620      	mov	r0, r4
 801b732:	bd38      	pop	{r3, r4, r5, pc}
 801b734:	20000014 	.word	0x20000014

0801b738 <WM_SetWindowPos>:
 801b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b73c:	460d      	mov	r5, r1
 801b73e:	b082      	sub	sp, #8
 801b740:	4616      	mov	r6, r2
 801b742:	4604      	mov	r4, r0
 801b744:	b938      	cbnz	r0, 801b756 <WM_SetWindowPos+0x1e>
 801b746:	4632      	mov	r2, r6
 801b748:	4629      	mov	r1, r5
 801b74a:	4620      	mov	r0, r4
 801b74c:	f000 fb30 	bl	801bdb0 <WM_MoveTo>
 801b750:	b002      	add	sp, #8
 801b752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b756:	4698      	mov	r8, r3
 801b758:	f7f7 faba 	bl	8012cd0 <GUI_Lock>
 801b75c:	4620      	mov	r0, r4
 801b75e:	f7f5 facf 	bl	8010d00 <GUI_ALLOC_LockH>
 801b762:	f10d 0e08 	add.w	lr, sp, #8
 801b766:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 801b76a:	f9b0 1000 	ldrsh.w	r1, [r0]
 801b76e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b772:	f84e 0d04 	str.w	r0, [lr, #-4]!
 801b776:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801b77a:	9b08      	ldr	r3, [sp, #32]
 801b77c:	1a79      	subs	r1, r7, r1
 801b77e:	1a12      	subs	r2, r2, r0
 801b780:	3101      	adds	r1, #1
 801b782:	3201      	adds	r2, #1
 801b784:	ebc1 0808 	rsb	r8, r1, r8
 801b788:	1a9f      	subs	r7, r3, r2
 801b78a:	4670      	mov	r0, lr
 801b78c:	f7f5 faca 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801b790:	ea58 0307 	orrs.w	r3, r8, r7
 801b794:	d102      	bne.n	801b79c <WM_SetWindowPos+0x64>
 801b796:	f7f7 fa91 	bl	8012cbc <GUI_Unlock>
 801b79a:	e7d4      	b.n	801b746 <WM_SetWindowPos+0xe>
 801b79c:	463a      	mov	r2, r7
 801b79e:	4641      	mov	r1, r8
 801b7a0:	4620      	mov	r0, r4
 801b7a2:	f7ff fa99 	bl	801acd8 <WM_ResizeWindow.part.11>
 801b7a6:	e7f6      	b.n	801b796 <WM_SetWindowPos+0x5e>

0801b7a8 <WM_InvalidateWindowAndDescs>:
 801b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7ac:	4604      	mov	r4, r0
 801b7ae:	b083      	sub	sp, #12
 801b7b0:	f7f7 fa8e 	bl	8012cd0 <GUI_Lock>
 801b7b4:	b924      	cbnz	r4, 801b7c0 <WM_InvalidateWindowAndDescs+0x18>
 801b7b6:	b003      	add	sp, #12
 801b7b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7bc:	f7f7 ba7e 	b.w	8012cbc <GUI_Unlock>
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	f7fe fbc5 	bl	8019f50 <WM_InvalidateWindow>
 801b7c6:	f7f7 fa83 	bl	8012cd0 <GUI_Lock>
 801b7ca:	4620      	mov	r0, r4
 801b7cc:	f7f5 fa8e 	bl	8010cec <GUI_ALLOC_h2p>
 801b7d0:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801b7d4:	f7f7 fa72 	bl	8012cbc <GUI_Unlock>
 801b7d8:	f1b8 0f00 	cmp.w	r8, #0
 801b7dc:	d0eb      	beq.n	801b7b6 <WM_InvalidateWindowAndDescs+0xe>
 801b7de:	f7f7 fa77 	bl	8012cd0 <GUI_Lock>
 801b7e2:	4640      	mov	r0, r8
 801b7e4:	f7fe fbb4 	bl	8019f50 <WM_InvalidateWindow>
 801b7e8:	f7f7 fa72 	bl	8012cd0 <GUI_Lock>
 801b7ec:	4640      	mov	r0, r8
 801b7ee:	f7f5 fa7d 	bl	8010cec <GUI_ALLOC_h2p>
 801b7f2:	f8d0 901c 	ldr.w	r9, [r0, #28]
 801b7f6:	f7f7 fa61 	bl	8012cbc <GUI_Unlock>
 801b7fa:	f1b9 0f00 	cmp.w	r9, #0
 801b7fe:	f000 80b8 	beq.w	801b972 <WM_InvalidateWindowAndDescs+0x1ca>
 801b802:	f7f7 fa65 	bl	8012cd0 <GUI_Lock>
 801b806:	4648      	mov	r0, r9
 801b808:	f7fe fba2 	bl	8019f50 <WM_InvalidateWindow>
 801b80c:	f7f7 fa60 	bl	8012cd0 <GUI_Lock>
 801b810:	4648      	mov	r0, r9
 801b812:	f7f5 fa6b 	bl	8010cec <GUI_ALLOC_h2p>
 801b816:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 801b81a:	f7f7 fa4f 	bl	8012cbc <GUI_Unlock>
 801b81e:	f1ba 0f00 	cmp.w	sl, #0
 801b822:	f000 809b 	beq.w	801b95c <WM_InvalidateWindowAndDescs+0x1b4>
 801b826:	f7f7 fa53 	bl	8012cd0 <GUI_Lock>
 801b82a:	4650      	mov	r0, sl
 801b82c:	f7fe fb90 	bl	8019f50 <WM_InvalidateWindow>
 801b830:	f7f7 fa4e 	bl	8012cd0 <GUI_Lock>
 801b834:	4650      	mov	r0, sl
 801b836:	f7f5 fa59 	bl	8010cec <GUI_ALLOC_h2p>
 801b83a:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801b83e:	f7f7 fa3d 	bl	8012cbc <GUI_Unlock>
 801b842:	f1bb 0f00 	cmp.w	fp, #0
 801b846:	d07e      	beq.n	801b946 <WM_InvalidateWindowAndDescs+0x19e>
 801b848:	f7f7 fa42 	bl	8012cd0 <GUI_Lock>
 801b84c:	4658      	mov	r0, fp
 801b84e:	f7fe fb7f 	bl	8019f50 <WM_InvalidateWindow>
 801b852:	f7f7 fa3d 	bl	8012cd0 <GUI_Lock>
 801b856:	4658      	mov	r0, fp
 801b858:	f7f5 fa48 	bl	8010cec <GUI_ALLOC_h2p>
 801b85c:	69c3      	ldr	r3, [r0, #28]
 801b85e:	9301      	str	r3, [sp, #4]
 801b860:	461c      	mov	r4, r3
 801b862:	f7f7 fa2b 	bl	8012cbc <GUI_Unlock>
 801b866:	2c00      	cmp	r4, #0
 801b868:	d063      	beq.n	801b932 <WM_InvalidateWindowAndDescs+0x18a>
 801b86a:	f7f7 fa31 	bl	8012cd0 <GUI_Lock>
 801b86e:	9c01      	ldr	r4, [sp, #4]
 801b870:	4620      	mov	r0, r4
 801b872:	f7fe fb6d 	bl	8019f50 <WM_InvalidateWindow>
 801b876:	f7f7 fa2b 	bl	8012cd0 <GUI_Lock>
 801b87a:	4620      	mov	r0, r4
 801b87c:	f7f5 fa36 	bl	8010cec <GUI_ALLOC_h2p>
 801b880:	69c6      	ldr	r6, [r0, #28]
 801b882:	f7f7 fa1b 	bl	8012cbc <GUI_Unlock>
 801b886:	2e00      	cmp	r6, #0
 801b888:	d04a      	beq.n	801b920 <WM_InvalidateWindowAndDescs+0x178>
 801b88a:	f7f7 fa21 	bl	8012cd0 <GUI_Lock>
 801b88e:	4630      	mov	r0, r6
 801b890:	f7fe fb5e 	bl	8019f50 <WM_InvalidateWindow>
 801b894:	f7f7 fa1c 	bl	8012cd0 <GUI_Lock>
 801b898:	4630      	mov	r0, r6
 801b89a:	f7f5 fa27 	bl	8010cec <GUI_ALLOC_h2p>
 801b89e:	69c5      	ldr	r5, [r0, #28]
 801b8a0:	f7f7 fa0c 	bl	8012cbc <GUI_Unlock>
 801b8a4:	b3a5      	cbz	r5, 801b910 <WM_InvalidateWindowAndDescs+0x168>
 801b8a6:	f7f7 fa13 	bl	8012cd0 <GUI_Lock>
 801b8aa:	4628      	mov	r0, r5
 801b8ac:	f7fe fb50 	bl	8019f50 <WM_InvalidateWindow>
 801b8b0:	f7f7 fa0e 	bl	8012cd0 <GUI_Lock>
 801b8b4:	4628      	mov	r0, r5
 801b8b6:	f7f5 fa19 	bl	8010cec <GUI_ALLOC_h2p>
 801b8ba:	69c4      	ldr	r4, [r0, #28]
 801b8bc:	f7f7 f9fe 	bl	8012cbc <GUI_Unlock>
 801b8c0:	b1f4      	cbz	r4, 801b900 <WM_InvalidateWindowAndDescs+0x158>
 801b8c2:	f7f7 fa05 	bl	8012cd0 <GUI_Lock>
 801b8c6:	4620      	mov	r0, r4
 801b8c8:	f7fe fb42 	bl	8019f50 <WM_InvalidateWindow>
 801b8cc:	f7f7 fa00 	bl	8012cd0 <GUI_Lock>
 801b8d0:	4620      	mov	r0, r4
 801b8d2:	f7f5 fa0b 	bl	8010cec <GUI_ALLOC_h2p>
 801b8d6:	69c7      	ldr	r7, [r0, #28]
 801b8d8:	f7f7 f9f0 	bl	8012cbc <GUI_Unlock>
 801b8dc:	b147      	cbz	r7, 801b8f0 <WM_InvalidateWindowAndDescs+0x148>
 801b8de:	4638      	mov	r0, r7
 801b8e0:	f7ff ff62 	bl	801b7a8 <WM_InvalidateWindowAndDescs>
 801b8e4:	4638      	mov	r0, r7
 801b8e6:	f7f5 fa01 	bl	8010cec <GUI_ALLOC_h2p>
 801b8ea:	6a07      	ldr	r7, [r0, #32]
 801b8ec:	2f00      	cmp	r7, #0
 801b8ee:	d1f6      	bne.n	801b8de <WM_InvalidateWindowAndDescs+0x136>
 801b8f0:	f7f7 f9e4 	bl	8012cbc <GUI_Unlock>
 801b8f4:	4620      	mov	r0, r4
 801b8f6:	f7f5 f9f9 	bl	8010cec <GUI_ALLOC_h2p>
 801b8fa:	6a04      	ldr	r4, [r0, #32]
 801b8fc:	2c00      	cmp	r4, #0
 801b8fe:	d1e0      	bne.n	801b8c2 <WM_InvalidateWindowAndDescs+0x11a>
 801b900:	f7f7 f9dc 	bl	8012cbc <GUI_Unlock>
 801b904:	4628      	mov	r0, r5
 801b906:	f7f5 f9f1 	bl	8010cec <GUI_ALLOC_h2p>
 801b90a:	6a05      	ldr	r5, [r0, #32]
 801b90c:	2d00      	cmp	r5, #0
 801b90e:	d1ca      	bne.n	801b8a6 <WM_InvalidateWindowAndDescs+0xfe>
 801b910:	f7f7 f9d4 	bl	8012cbc <GUI_Unlock>
 801b914:	4630      	mov	r0, r6
 801b916:	f7f5 f9e9 	bl	8010cec <GUI_ALLOC_h2p>
 801b91a:	6a06      	ldr	r6, [r0, #32]
 801b91c:	2e00      	cmp	r6, #0
 801b91e:	d1b4      	bne.n	801b88a <WM_InvalidateWindowAndDescs+0xe2>
 801b920:	f7f7 f9cc 	bl	8012cbc <GUI_Unlock>
 801b924:	9801      	ldr	r0, [sp, #4]
 801b926:	f7f5 f9e1 	bl	8010cec <GUI_ALLOC_h2p>
 801b92a:	6a03      	ldr	r3, [r0, #32]
 801b92c:	9301      	str	r3, [sp, #4]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d19b      	bne.n	801b86a <WM_InvalidateWindowAndDescs+0xc2>
 801b932:	f7f7 f9c3 	bl	8012cbc <GUI_Unlock>
 801b936:	4658      	mov	r0, fp
 801b938:	f7f5 f9d8 	bl	8010cec <GUI_ALLOC_h2p>
 801b93c:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801b940:	f1bb 0f00 	cmp.w	fp, #0
 801b944:	d180      	bne.n	801b848 <WM_InvalidateWindowAndDescs+0xa0>
 801b946:	f7f7 f9b9 	bl	8012cbc <GUI_Unlock>
 801b94a:	4650      	mov	r0, sl
 801b94c:	f7f5 f9ce 	bl	8010cec <GUI_ALLOC_h2p>
 801b950:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801b954:	f1ba 0f00 	cmp.w	sl, #0
 801b958:	f47f af65 	bne.w	801b826 <WM_InvalidateWindowAndDescs+0x7e>
 801b95c:	f7f7 f9ae 	bl	8012cbc <GUI_Unlock>
 801b960:	4648      	mov	r0, r9
 801b962:	f7f5 f9c3 	bl	8010cec <GUI_ALLOC_h2p>
 801b966:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801b96a:	f1b9 0f00 	cmp.w	r9, #0
 801b96e:	f47f af48 	bne.w	801b802 <WM_InvalidateWindowAndDescs+0x5a>
 801b972:	f7f7 f9a3 	bl	8012cbc <GUI_Unlock>
 801b976:	4640      	mov	r0, r8
 801b978:	f7f5 f9b8 	bl	8010cec <GUI_ALLOC_h2p>
 801b97c:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801b980:	f1b8 0f00 	cmp.w	r8, #0
 801b984:	f47f af2b 	bne.w	801b7de <WM_InvalidateWindowAndDescs+0x36>
 801b988:	e715      	b.n	801b7b6 <WM_InvalidateWindowAndDescs+0xe>
 801b98a:	bf00      	nop

0801b98c <WM_ShowWindow>:
 801b98c:	b900      	cbnz	r0, 801b990 <WM_ShowWindow+0x4>
 801b98e:	4770      	bx	lr
 801b990:	b510      	push	{r4, lr}
 801b992:	4604      	mov	r4, r0
 801b994:	b082      	sub	sp, #8
 801b996:	f7f7 f99b 	bl	8012cd0 <GUI_Lock>
 801b99a:	4620      	mov	r0, r4
 801b99c:	f7f5 f9b0 	bl	8010d00 <GUI_ALLOC_LockH>
 801b9a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b9a2:	9001      	str	r0, [sp, #4]
 801b9a4:	079a      	lsls	r2, r3, #30
 801b9a6:	d506      	bpl.n	801b9b6 <WM_ShowWindow+0x2a>
 801b9a8:	a801      	add	r0, sp, #4
 801b9aa:	f7f5 f9bb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801b9ae:	f7f7 f985 	bl	8012cbc <GUI_Unlock>
 801b9b2:	b002      	add	sp, #8
 801b9b4:	bd10      	pop	{r4, pc}
 801b9b6:	f043 0302 	orr.w	r3, r3, #2
 801b9ba:	6283      	str	r3, [r0, #40]	; 0x28
 801b9bc:	4620      	mov	r0, r4
 801b9be:	f7ff fef3 	bl	801b7a8 <WM_InvalidateWindowAndDescs>
 801b9c2:	e7f1      	b.n	801b9a8 <WM_ShowWindow+0x1c>

0801b9c4 <WM_ValidateWindow>:
 801b9c4:	b510      	push	{r4, lr}
 801b9c6:	4604      	mov	r4, r0
 801b9c8:	b082      	sub	sp, #8
 801b9ca:	f7f7 f981 	bl	8012cd0 <GUI_Lock>
 801b9ce:	b91c      	cbnz	r4, 801b9d8 <WM_ValidateWindow+0x14>
 801b9d0:	f7f7 f974 	bl	8012cbc <GUI_Unlock>
 801b9d4:	b002      	add	sp, #8
 801b9d6:	bd10      	pop	{r4, pc}
 801b9d8:	4620      	mov	r0, r4
 801b9da:	f7f5 f991 	bl	8010d00 <GUI_ALLOC_LockH>
 801b9de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b9e0:	9001      	str	r0, [sp, #4]
 801b9e2:	069a      	lsls	r2, r3, #26
 801b9e4:	d506      	bpl.n	801b9f4 <WM_ValidateWindow+0x30>
 801b9e6:	4907      	ldr	r1, [pc, #28]	; (801ba04 <WM_ValidateWindow+0x40>)
 801b9e8:	880a      	ldrh	r2, [r1, #0]
 801b9ea:	f023 0320 	bic.w	r3, r3, #32
 801b9ee:	3a01      	subs	r2, #1
 801b9f0:	6283      	str	r3, [r0, #40]	; 0x28
 801b9f2:	800a      	strh	r2, [r1, #0]
 801b9f4:	a801      	add	r0, sp, #4
 801b9f6:	f7f5 f995 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801b9fa:	f7f7 f95f 	bl	8012cbc <GUI_Unlock>
 801b9fe:	b002      	add	sp, #8
 801ba00:	bd10      	pop	{r4, pc}
 801ba02:	bf00      	nop
 801ba04:	20035e78 	.word	0x20035e78

0801ba08 <_MoveDescendents>:
 801ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba0c:	b0b5      	sub	sp, #212	; 0xd4
 801ba0e:	2300      	movs	r3, #0
 801ba10:	931d      	str	r3, [sp, #116]	; 0x74
 801ba12:	931c      	str	r3, [sp, #112]	; 0x70
 801ba14:	931e      	str	r3, [sp, #120]	; 0x78
 801ba16:	931f      	str	r3, [sp, #124]	; 0x7c
 801ba18:	9006      	str	r0, [sp, #24]
 801ba1a:	2800      	cmp	r0, #0
 801ba1c:	f000 8117 	beq.w	801bc4e <_MoveDescendents+0x246>
 801ba20:	468a      	mov	sl, r1
 801ba22:	4691      	mov	r9, r2
 801ba24:	f04f 0b03 	mov.w	fp, #3
 801ba28:	9806      	ldr	r0, [sp, #24]
 801ba2a:	f7f5 f969 	bl	8010d00 <GUI_ALLOC_LockH>
 801ba2e:	464a      	mov	r2, r9
 801ba30:	4651      	mov	r1, sl
 801ba32:	900a      	str	r0, [sp, #40]	; 0x28
 801ba34:	f7f5 fdc4 	bl	80115c0 <GUI_MoveRect>
 801ba38:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ba3a:	464a      	mov	r2, r9
 801ba3c:	3008      	adds	r0, #8
 801ba3e:	4651      	mov	r1, sl
 801ba40:	f7f5 fdbe 	bl	80115c0 <GUI_MoveRect>
 801ba44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba46:	69da      	ldr	r2, [r3, #28]
 801ba48:	6a1b      	ldr	r3, [r3, #32]
 801ba4a:	9307      	str	r3, [sp, #28]
 801ba4c:	a80a      	add	r0, sp, #40	; 0x28
 801ba4e:	4614      	mov	r4, r2
 801ba50:	9205      	str	r2, [sp, #20]
 801ba52:	f7f5 f967 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801ba56:	2300      	movs	r3, #0
 801ba58:	9320      	str	r3, [sp, #128]	; 0x80
 801ba5a:	9321      	str	r3, [sp, #132]	; 0x84
 801ba5c:	9322      	str	r3, [sp, #136]	; 0x88
 801ba5e:	9323      	str	r3, [sp, #140]	; 0x8c
 801ba60:	2c00      	cmp	r4, #0
 801ba62:	f000 80e3 	beq.w	801bc2c <_MoveDescendents+0x224>
 801ba66:	9805      	ldr	r0, [sp, #20]
 801ba68:	f7f5 f94a 	bl	8010d00 <GUI_ALLOC_LockH>
 801ba6c:	464a      	mov	r2, r9
 801ba6e:	4651      	mov	r1, sl
 801ba70:	900b      	str	r0, [sp, #44]	; 0x2c
 801ba72:	f7f5 fda5 	bl	80115c0 <GUI_MoveRect>
 801ba76:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ba78:	464a      	mov	r2, r9
 801ba7a:	3008      	adds	r0, #8
 801ba7c:	4651      	mov	r1, sl
 801ba7e:	f7f5 fd9f 	bl	80115c0 <GUI_MoveRect>
 801ba82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba84:	69da      	ldr	r2, [r3, #28]
 801ba86:	6a1b      	ldr	r3, [r3, #32]
 801ba88:	9308      	str	r3, [sp, #32]
 801ba8a:	a80b      	add	r0, sp, #44	; 0x2c
 801ba8c:	4614      	mov	r4, r2
 801ba8e:	9204      	str	r2, [sp, #16]
 801ba90:	f7f5 f948 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801ba94:	2300      	movs	r3, #0
 801ba96:	9324      	str	r3, [sp, #144]	; 0x90
 801ba98:	9325      	str	r3, [sp, #148]	; 0x94
 801ba9a:	9326      	str	r3, [sp, #152]	; 0x98
 801ba9c:	9327      	str	r3, [sp, #156]	; 0x9c
 801ba9e:	2c00      	cmp	r4, #0
 801baa0:	f000 80b3 	beq.w	801bc0a <_MoveDescendents+0x202>
 801baa4:	9804      	ldr	r0, [sp, #16]
 801baa6:	f7f5 f92b 	bl	8010d00 <GUI_ALLOC_LockH>
 801baaa:	464a      	mov	r2, r9
 801baac:	4651      	mov	r1, sl
 801baae:	900c      	str	r0, [sp, #48]	; 0x30
 801bab0:	f7f5 fd86 	bl	80115c0 <GUI_MoveRect>
 801bab4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801bab6:	464a      	mov	r2, r9
 801bab8:	3008      	adds	r0, #8
 801baba:	4651      	mov	r1, sl
 801babc:	f7f5 fd80 	bl	80115c0 <GUI_MoveRect>
 801bac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bac2:	69da      	ldr	r2, [r3, #28]
 801bac4:	6a1b      	ldr	r3, [r3, #32]
 801bac6:	9309      	str	r3, [sp, #36]	; 0x24
 801bac8:	a80c      	add	r0, sp, #48	; 0x30
 801baca:	4614      	mov	r4, r2
 801bacc:	9202      	str	r2, [sp, #8]
 801bace:	f7f5 f929 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bad2:	2300      	movs	r3, #0
 801bad4:	9328      	str	r3, [sp, #160]	; 0xa0
 801bad6:	9329      	str	r3, [sp, #164]	; 0xa4
 801bad8:	932a      	str	r3, [sp, #168]	; 0xa8
 801bada:	932b      	str	r3, [sp, #172]	; 0xac
 801badc:	2c00      	cmp	r4, #0
 801bade:	f000 8083 	beq.w	801bbe8 <_MoveDescendents+0x1e0>
 801bae2:	4654      	mov	r4, sl
 801bae4:	464d      	mov	r5, r9
 801bae6:	9802      	ldr	r0, [sp, #8]
 801bae8:	f7f5 f90a 	bl	8010d00 <GUI_ALLOC_LockH>
 801baec:	462a      	mov	r2, r5
 801baee:	4621      	mov	r1, r4
 801baf0:	900d      	str	r0, [sp, #52]	; 0x34
 801baf2:	f7f5 fd65 	bl	80115c0 <GUI_MoveRect>
 801baf6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801baf8:	462a      	mov	r2, r5
 801bafa:	3008      	adds	r0, #8
 801bafc:	4621      	mov	r1, r4
 801bafe:	f7f5 fd5f 	bl	80115c0 <GUI_MoveRect>
 801bb02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb04:	a80d      	add	r0, sp, #52	; 0x34
 801bb06:	f8d3 901c 	ldr.w	r9, [r3, #28]
 801bb0a:	6a1b      	ldr	r3, [r3, #32]
 801bb0c:	9303      	str	r3, [sp, #12]
 801bb0e:	f7f5 f909 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bb12:	2300      	movs	r3, #0
 801bb14:	932c      	str	r3, [sp, #176]	; 0xb0
 801bb16:	932d      	str	r3, [sp, #180]	; 0xb4
 801bb18:	932e      	str	r3, [sp, #184]	; 0xb8
 801bb1a:	932f      	str	r3, [sp, #188]	; 0xbc
 801bb1c:	f1b9 0f00 	cmp.w	r9, #0
 801bb20:	d052      	beq.n	801bbc8 <_MoveDescendents+0x1c0>
 801bb22:	9301      	str	r3, [sp, #4]
 801bb24:	4648      	mov	r0, r9
 801bb26:	f7f5 f8eb 	bl	8010d00 <GUI_ALLOC_LockH>
 801bb2a:	462a      	mov	r2, r5
 801bb2c:	4621      	mov	r1, r4
 801bb2e:	900e      	str	r0, [sp, #56]	; 0x38
 801bb30:	f7f5 fd46 	bl	80115c0 <GUI_MoveRect>
 801bb34:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bb36:	462a      	mov	r2, r5
 801bb38:	3008      	adds	r0, #8
 801bb3a:	4621      	mov	r1, r4
 801bb3c:	f7f5 fd40 	bl	80115c0 <GUI_MoveRect>
 801bb40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb42:	a80e      	add	r0, sp, #56	; 0x38
 801bb44:	69de      	ldr	r6, [r3, #28]
 801bb46:	6a1b      	ldr	r3, [r3, #32]
 801bb48:	9300      	str	r3, [sp, #0]
 801bb4a:	f7f5 f8eb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bb4e:	9b01      	ldr	r3, [sp, #4]
 801bb50:	9330      	str	r3, [sp, #192]	; 0xc0
 801bb52:	9331      	str	r3, [sp, #196]	; 0xc4
 801bb54:	9332      	str	r3, [sp, #200]	; 0xc8
 801bb56:	9333      	str	r3, [sp, #204]	; 0xcc
 801bb58:	af1a      	add	r7, sp, #104	; 0x68
 801bb5a:	b336      	cbz	r6, 801bbaa <_MoveDescendents+0x1a2>
 801bb5c:	4630      	mov	r0, r6
 801bb5e:	f7f5 f8cf 	bl	8010d00 <GUI_ALLOC_LockH>
 801bb62:	462a      	mov	r2, r5
 801bb64:	4621      	mov	r1, r4
 801bb66:	900f      	str	r0, [sp, #60]	; 0x3c
 801bb68:	f7f5 fd2a 	bl	80115c0 <GUI_MoveRect>
 801bb6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bb6e:	462a      	mov	r2, r5
 801bb70:	4621      	mov	r1, r4
 801bb72:	3008      	adds	r0, #8
 801bb74:	f7f5 fd24 	bl	80115c0 <GUI_MoveRect>
 801bb78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb7a:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 801bb7e:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801bb82:	a80f      	add	r0, sp, #60	; 0x3c
 801bb84:	f7f5 f8ce 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bb88:	4621      	mov	r1, r4
 801bb8a:	4650      	mov	r0, sl
 801bb8c:	462a      	mov	r2, r5
 801bb8e:	f7ff ff3b 	bl	801ba08 <_MoveDescendents>
 801bb92:	4630      	mov	r0, r6
 801bb94:	a930      	add	r1, sp, #192	; 0xc0
 801bb96:	4646      	mov	r6, r8
 801bb98:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 801bb9c:	9733      	str	r7, [sp, #204]	; 0xcc
 801bb9e:	941a      	str	r4, [sp, #104]	; 0x68
 801bba0:	951b      	str	r5, [sp, #108]	; 0x6c
 801bba2:	f000 fe35 	bl	801c810 <WM__SendMessage>
 801bba6:	2e00      	cmp	r6, #0
 801bba8:	d1d8      	bne.n	801bb5c <_MoveDescendents+0x154>
 801bbaa:	4648      	mov	r0, r9
 801bbac:	ab18      	add	r3, sp, #96	; 0x60
 801bbae:	a92c      	add	r1, sp, #176	; 0xb0
 801bbb0:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
 801bbb4:	932f      	str	r3, [sp, #188]	; 0xbc
 801bbb6:	9418      	str	r4, [sp, #96]	; 0x60
 801bbb8:	9519      	str	r5, [sp, #100]	; 0x64
 801bbba:	f000 fe29 	bl	801c810 <WM__SendMessage>
 801bbbe:	f8dd 9000 	ldr.w	r9, [sp]
 801bbc2:	f1b9 0f00 	cmp.w	r9, #0
 801bbc6:	d1ad      	bne.n	801bb24 <_MoveDescendents+0x11c>
 801bbc8:	ab16      	add	r3, sp, #88	; 0x58
 801bbca:	9802      	ldr	r0, [sp, #8]
 801bbcc:	932b      	str	r3, [sp, #172]	; 0xac
 801bbce:	a928      	add	r1, sp, #160	; 0xa0
 801bbd0:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 801bbd4:	9416      	str	r4, [sp, #88]	; 0x58
 801bbd6:	9517      	str	r5, [sp, #92]	; 0x5c
 801bbd8:	f000 fe1a 	bl	801c810 <WM__SendMessage>
 801bbdc:	9b03      	ldr	r3, [sp, #12]
 801bbde:	9302      	str	r3, [sp, #8]
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d180      	bne.n	801bae6 <_MoveDescendents+0xde>
 801bbe4:	46a2      	mov	sl, r4
 801bbe6:	46a9      	mov	r9, r5
 801bbe8:	ab14      	add	r3, sp, #80	; 0x50
 801bbea:	9804      	ldr	r0, [sp, #16]
 801bbec:	9327      	str	r3, [sp, #156]	; 0x9c
 801bbee:	a924      	add	r1, sp, #144	; 0x90
 801bbf0:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 801bbf4:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 801bbf8:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 801bbfc:	f000 fe08 	bl	801c810 <WM__SendMessage>
 801bc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc02:	9304      	str	r3, [sp, #16]
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	f47f af4d 	bne.w	801baa4 <_MoveDescendents+0x9c>
 801bc0a:	ab12      	add	r3, sp, #72	; 0x48
 801bc0c:	9805      	ldr	r0, [sp, #20]
 801bc0e:	9323      	str	r3, [sp, #140]	; 0x8c
 801bc10:	a920      	add	r1, sp, #128	; 0x80
 801bc12:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 801bc16:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 801bc1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801bc1e:	f000 fdf7 	bl	801c810 <WM__SendMessage>
 801bc22:	9b08      	ldr	r3, [sp, #32]
 801bc24:	9305      	str	r3, [sp, #20]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	f47f af1d 	bne.w	801ba66 <_MoveDescendents+0x5e>
 801bc2c:	2303      	movs	r3, #3
 801bc2e:	931c      	str	r3, [sp, #112]	; 0x70
 801bc30:	9806      	ldr	r0, [sp, #24]
 801bc32:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 801bc36:	ab10      	add	r3, sp, #64	; 0x40
 801bc38:	a91c      	add	r1, sp, #112	; 0x70
 801bc3a:	931f      	str	r3, [sp, #124]	; 0x7c
 801bc3c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 801bc40:	f000 fde6 	bl	801c810 <WM__SendMessage>
 801bc44:	9b07      	ldr	r3, [sp, #28]
 801bc46:	9306      	str	r3, [sp, #24]
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	f47f aeed 	bne.w	801ba28 <_MoveDescendents+0x20>
 801bc4e:	b035      	add	sp, #212	; 0xd4
 801bc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc54 <WM__MoveWindow>:
 801bc54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc58:	b08b      	sub	sp, #44	; 0x2c
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	9307      	str	r3, [sp, #28]
 801bc5e:	9306      	str	r3, [sp, #24]
 801bc60:	9308      	str	r3, [sp, #32]
 801bc62:	9309      	str	r3, [sp, #36]	; 0x24
 801bc64:	2800      	cmp	r0, #0
 801bc66:	d03c      	beq.n	801bce2 <WM__MoveWindow+0x8e>
 801bc68:	b909      	cbnz	r1, 801bc6e <WM__MoveWindow+0x1a>
 801bc6a:	2a00      	cmp	r2, #0
 801bc6c:	d039      	beq.n	801bce2 <WM__MoveWindow+0x8e>
 801bc6e:	460c      	mov	r4, r1
 801bc70:	4617      	mov	r7, r2
 801bc72:	4606      	mov	r6, r0
 801bc74:	f7f5 f844 	bl	8010d00 <GUI_ALLOC_LockH>
 801bc78:	4603      	mov	r3, r0
 801bc7a:	c803      	ldmia	r0, {r0, r1}
 801bc7c:	f10d 0808 	add.w	r8, sp, #8
 801bc80:	e888 0003 	stmia.w	r8, {r0, r1}
 801bc84:	463a      	mov	r2, r7
 801bc86:	4618      	mov	r0, r3
 801bc88:	4621      	mov	r1, r4
 801bc8a:	9301      	str	r3, [sp, #4]
 801bc8c:	f7f5 fc98 	bl	80115c0 <GUI_MoveRect>
 801bc90:	9801      	ldr	r0, [sp, #4]
 801bc92:	ad0a      	add	r5, sp, #40	; 0x28
 801bc94:	463a      	mov	r2, r7
 801bc96:	4621      	mov	r1, r4
 801bc98:	3008      	adds	r0, #8
 801bc9a:	f7f5 fc91 	bl	80115c0 <GUI_MoveRect>
 801bc9e:	f855 3d24 	ldr.w	r3, [r5, #-36]!
 801bca2:	f8d3 901c 	ldr.w	r9, [r3, #28]
 801bca6:	4628      	mov	r0, r5
 801bca8:	f7f5 f83c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bcac:	463a      	mov	r2, r7
 801bcae:	4621      	mov	r1, r4
 801bcb0:	4648      	mov	r0, r9
 801bcb2:	f7ff fea9 	bl	801ba08 <_MoveDescendents>
 801bcb6:	4630      	mov	r0, r6
 801bcb8:	f7f5 f822 	bl	8010d00 <GUI_ALLOC_LockH>
 801bcbc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801bcbe:	9001      	str	r0, [sp, #4]
 801bcc0:	0792      	lsls	r2, r2, #30
 801bcc2:	d501      	bpl.n	801bcc8 <WM__MoveWindow+0x74>
 801bcc4:	6981      	ldr	r1, [r0, #24]
 801bcc6:	b979      	cbnz	r1, 801bce8 <WM__MoveWindow+0x94>
 801bcc8:	4628      	mov	r0, r5
 801bcca:	f7f5 f82b 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bcce:	2203      	movs	r2, #3
 801bcd0:	ab04      	add	r3, sp, #16
 801bcd2:	a906      	add	r1, sp, #24
 801bcd4:	4630      	mov	r0, r6
 801bcd6:	9404      	str	r4, [sp, #16]
 801bcd8:	9705      	str	r7, [sp, #20]
 801bcda:	9206      	str	r2, [sp, #24]
 801bcdc:	9309      	str	r3, [sp, #36]	; 0x24
 801bcde:	f000 fd97 	bl	801c810 <WM__SendMessage>
 801bce2:	b00b      	add	sp, #44	; 0x2c
 801bce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bce8:	6a02      	ldr	r2, [r0, #32]
 801bcea:	f7fe f825 	bl	8019d38 <WM__InvalidateParent>
 801bcee:	9b01      	ldr	r3, [sp, #4]
 801bcf0:	4640      	mov	r0, r8
 801bcf2:	6a1a      	ldr	r2, [r3, #32]
 801bcf4:	6999      	ldr	r1, [r3, #24]
 801bcf6:	f7fe f81f 	bl	8019d38 <WM__InvalidateParent>
 801bcfa:	e7e5      	b.n	801bcc8 <WM__MoveWindow+0x74>

0801bcfc <WM_MoveWindow>:
 801bcfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd00:	b08b      	sub	sp, #44	; 0x2c
 801bd02:	4605      	mov	r5, r0
 801bd04:	460c      	mov	r4, r1
 801bd06:	4616      	mov	r6, r2
 801bd08:	f7f6 ffe2 	bl	8012cd0 <GUI_Lock>
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	9307      	str	r3, [sp, #28]
 801bd10:	9306      	str	r3, [sp, #24]
 801bd12:	9308      	str	r3, [sp, #32]
 801bd14:	9309      	str	r3, [sp, #36]	; 0x24
 801bd16:	2d00      	cmp	r5, #0
 801bd18:	d03a      	beq.n	801bd90 <WM_MoveWindow+0x94>
 801bd1a:	b90c      	cbnz	r4, 801bd20 <WM_MoveWindow+0x24>
 801bd1c:	2e00      	cmp	r6, #0
 801bd1e:	d037      	beq.n	801bd90 <WM_MoveWindow+0x94>
 801bd20:	4628      	mov	r0, r5
 801bd22:	f7f4 ffed 	bl	8010d00 <GUI_ALLOC_LockH>
 801bd26:	4603      	mov	r3, r0
 801bd28:	c803      	ldmia	r0, {r0, r1}
 801bd2a:	f10d 0808 	add.w	r8, sp, #8
 801bd2e:	e888 0003 	stmia.w	r8, {r0, r1}
 801bd32:	4632      	mov	r2, r6
 801bd34:	4618      	mov	r0, r3
 801bd36:	4621      	mov	r1, r4
 801bd38:	9301      	str	r3, [sp, #4]
 801bd3a:	f7f5 fc41 	bl	80115c0 <GUI_MoveRect>
 801bd3e:	9801      	ldr	r0, [sp, #4]
 801bd40:	af0a      	add	r7, sp, #40	; 0x28
 801bd42:	4632      	mov	r2, r6
 801bd44:	4621      	mov	r1, r4
 801bd46:	3008      	adds	r0, #8
 801bd48:	f7f5 fc3a 	bl	80115c0 <GUI_MoveRect>
 801bd4c:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 801bd50:	f8d3 901c 	ldr.w	r9, [r3, #28]
 801bd54:	4638      	mov	r0, r7
 801bd56:	f7f4 ffe5 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bd5a:	4632      	mov	r2, r6
 801bd5c:	4621      	mov	r1, r4
 801bd5e:	4648      	mov	r0, r9
 801bd60:	f7ff fe52 	bl	801ba08 <_MoveDescendents>
 801bd64:	4628      	mov	r0, r5
 801bd66:	f7f4 ffcb 	bl	8010d00 <GUI_ALLOC_LockH>
 801bd6a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801bd6c:	9001      	str	r0, [sp, #4]
 801bd6e:	0792      	lsls	r2, r2, #30
 801bd70:	d501      	bpl.n	801bd76 <WM_MoveWindow+0x7a>
 801bd72:	6981      	ldr	r1, [r0, #24]
 801bd74:	b989      	cbnz	r1, 801bd9a <WM_MoveWindow+0x9e>
 801bd76:	4638      	mov	r0, r7
 801bd78:	f7f4 ffd4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bd7c:	2203      	movs	r2, #3
 801bd7e:	ab04      	add	r3, sp, #16
 801bd80:	a906      	add	r1, sp, #24
 801bd82:	4628      	mov	r0, r5
 801bd84:	9404      	str	r4, [sp, #16]
 801bd86:	9605      	str	r6, [sp, #20]
 801bd88:	9206      	str	r2, [sp, #24]
 801bd8a:	9309      	str	r3, [sp, #36]	; 0x24
 801bd8c:	f000 fd40 	bl	801c810 <WM__SendMessage>
 801bd90:	f7f6 ff94 	bl	8012cbc <GUI_Unlock>
 801bd94:	b00b      	add	sp, #44	; 0x2c
 801bd96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd9a:	6a02      	ldr	r2, [r0, #32]
 801bd9c:	f7fd ffcc 	bl	8019d38 <WM__InvalidateParent>
 801bda0:	9b01      	ldr	r3, [sp, #4]
 801bda2:	4640      	mov	r0, r8
 801bda4:	6a1a      	ldr	r2, [r3, #32]
 801bda6:	6999      	ldr	r1, [r3, #24]
 801bda8:	f7fd ffc6 	bl	8019d38 <WM__InvalidateParent>
 801bdac:	e7e3      	b.n	801bd76 <WM_MoveWindow+0x7a>
 801bdae:	bf00      	nop

0801bdb0 <WM_MoveTo>:
 801bdb0:	b570      	push	{r4, r5, r6, lr}
 801bdb2:	4604      	mov	r4, r0
 801bdb4:	b082      	sub	sp, #8
 801bdb6:	460d      	mov	r5, r1
 801bdb8:	4616      	mov	r6, r2
 801bdba:	f7f6 ff89 	bl	8012cd0 <GUI_Lock>
 801bdbe:	b19c      	cbz	r4, 801bde8 <WM_MoveTo+0x38>
 801bdc0:	4620      	mov	r0, r4
 801bdc2:	f7f4 ff9d 	bl	8010d00 <GUI_ALLOC_LockH>
 801bdc6:	ab02      	add	r3, sp, #8
 801bdc8:	f9b0 1000 	ldrsh.w	r1, [r0]
 801bdcc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801bdd0:	f843 0d04 	str.w	r0, [r3, #-4]!
 801bdd4:	1a6d      	subs	r5, r5, r1
 801bdd6:	1ab6      	subs	r6, r6, r2
 801bdd8:	4618      	mov	r0, r3
 801bdda:	f7f4 ffa3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bdde:	4632      	mov	r2, r6
 801bde0:	4629      	mov	r1, r5
 801bde2:	4620      	mov	r0, r4
 801bde4:	f7ff ff36 	bl	801bc54 <WM__MoveWindow>
 801bde8:	f7f6 ff68 	bl	8012cbc <GUI_Unlock>
 801bdec:	b002      	add	sp, #8
 801bdee:	bd70      	pop	{r4, r5, r6, pc}

0801bdf0 <WM_ReleaseCapture>:
 801bdf0:	b530      	push	{r4, r5, lr}
 801bdf2:	4d0b      	ldr	r5, [pc, #44]	; (801be20 <WM_ReleaseCapture+0x30>)
 801bdf4:	4c0b      	ldr	r4, [pc, #44]	; (801be24 <WM_ReleaseCapture+0x34>)
 801bdf6:	b085      	sub	sp, #20
 801bdf8:	f7f6 ff6a 	bl	8012cd0 <GUI_Lock>
 801bdfc:	682b      	ldr	r3, [r5, #0]
 801bdfe:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801be02:	b148      	cbz	r0, 801be18 <WM_ReleaseCapture+0x28>
 801be04:	a904      	add	r1, sp, #16
 801be06:	2318      	movs	r3, #24
 801be08:	f841 3d10 	str.w	r3, [r1, #-16]!
 801be0c:	f000 fd00 	bl	801c810 <WM__SendMessage>
 801be10:	682b      	ldr	r3, [r5, #0]
 801be12:	2200      	movs	r2, #0
 801be14:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 801be18:	f7f6 ff50 	bl	8012cbc <GUI_Unlock>
 801be1c:	b005      	add	sp, #20
 801be1e:	bd30      	pop	{r4, r5, pc}
 801be20:	20035e4c 	.word	0x20035e4c
 801be24:	20035e58 	.word	0x20035e58

0801be28 <_cbTimer>:
 801be28:	b510      	push	{r4, lr}
 801be2a:	6842      	ldr	r2, [r0, #4]
 801be2c:	b084      	sub	sp, #16
 801be2e:	2300      	movs	r3, #0
 801be30:	9301      	str	r3, [sp, #4]
 801be32:	9300      	str	r3, [sp, #0]
 801be34:	9302      	str	r3, [sp, #8]
 801be36:	9303      	str	r3, [sp, #12]
 801be38:	b162      	cbz	r2, 801be54 <_cbTimer+0x2c>
 801be3a:	4604      	mov	r4, r0
 801be3c:	4610      	mov	r0, r2
 801be3e:	f7f4 ff55 	bl	8010cec <GUI_ALLOC_h2p>
 801be42:	6863      	ldr	r3, [r4, #4]
 801be44:	6840      	ldr	r0, [r0, #4]
 801be46:	9303      	str	r3, [sp, #12]
 801be48:	4669      	mov	r1, sp
 801be4a:	f240 1313 	movw	r3, #275	; 0x113
 801be4e:	9300      	str	r3, [sp, #0]
 801be50:	f7fe f850 	bl	8019ef4 <WM_SendMessage>
 801be54:	b004      	add	sp, #16
 801be56:	bd10      	pop	{r4, pc}

0801be58 <WM__DeleteAssocTimer>:
 801be58:	b570      	push	{r4, r5, r6, lr}
 801be5a:	b082      	sub	sp, #8
 801be5c:	4605      	mov	r5, r0
 801be5e:	f7f6 ff37 	bl	8012cd0 <GUI_Lock>
 801be62:	4668      	mov	r0, sp
 801be64:	f7f7 f8ec 	bl	8013040 <GUI_TIMER__GetFirstTimer>
 801be68:	4604      	mov	r4, r0
 801be6a:	b168      	cbz	r0, 801be88 <WM__DeleteAssocTimer+0x30>
 801be6c:	2101      	movs	r1, #1
 801be6e:	4620      	mov	r0, r4
 801be70:	f7f7 fa2e 	bl	80132d0 <GUI_TIMER_GetFlag>
 801be74:	9b00      	ldr	r3, [sp, #0]
 801be76:	b103      	cbz	r3, 801be7a <WM__DeleteAssocTimer+0x22>
 801be78:	b950      	cbnz	r0, 801be90 <WM__DeleteAssocTimer+0x38>
 801be7a:	4620      	mov	r0, r4
 801be7c:	4669      	mov	r1, sp
 801be7e:	f7f7 f8f7 	bl	8013070 <GUI_TIMER__GetNextTimerLin>
 801be82:	4604      	mov	r4, r0
 801be84:	2c00      	cmp	r4, #0
 801be86:	d1f1      	bne.n	801be6c <WM__DeleteAssocTimer+0x14>
 801be88:	f7f6 ff18 	bl	8012cbc <GUI_Unlock>
 801be8c:	b002      	add	sp, #8
 801be8e:	bd70      	pop	{r4, r5, r6, pc}
 801be90:	4618      	mov	r0, r3
 801be92:	f7f4 ff2b 	bl	8010cec <GUI_ALLOC_h2p>
 801be96:	6843      	ldr	r3, [r0, #4]
 801be98:	42ab      	cmp	r3, r5
 801be9a:	4669      	mov	r1, sp
 801be9c:	4620      	mov	r0, r4
 801be9e:	d1ee      	bne.n	801be7e <WM__DeleteAssocTimer+0x26>
 801bea0:	9e00      	ldr	r6, [sp, #0]
 801bea2:	f7f7 f8e5 	bl	8013070 <GUI_TIMER__GetNextTimerLin>
 801bea6:	4604      	mov	r4, r0
 801bea8:	2e00      	cmp	r6, #0
 801beaa:	d0eb      	beq.n	801be84 <WM__DeleteAssocTimer+0x2c>
 801beac:	f7f6 ff10 	bl	8012cd0 <GUI_Lock>
 801beb0:	4630      	mov	r0, r6
 801beb2:	f7f4 ff25 	bl	8010d00 <GUI_ALLOC_LockH>
 801beb6:	9001      	str	r0, [sp, #4]
 801beb8:	6800      	ldr	r0, [r0, #0]
 801beba:	f7f7 f949 	bl	8013150 <GUI_TIMER_Delete>
 801bebe:	a801      	add	r0, sp, #4
 801bec0:	f7f4 ff30 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bec4:	4630      	mov	r0, r6
 801bec6:	f7f5 f8b1 	bl	801102c <GUI_ALLOC_Free>
 801beca:	f7f6 fef7 	bl	8012cbc <GUI_Unlock>
 801bece:	2c00      	cmp	r4, #0
 801bed0:	d1cc      	bne.n	801be6c <WM__DeleteAssocTimer+0x14>
 801bed2:	e7d9      	b.n	801be88 <WM__DeleteAssocTimer+0x30>

0801bed4 <WM_DeleteTimer>:
 801bed4:	b900      	cbnz	r0, 801bed8 <WM_DeleteTimer+0x4>
 801bed6:	4770      	bx	lr
 801bed8:	b530      	push	{r4, r5, lr}
 801beda:	4604      	mov	r4, r0
 801bedc:	b083      	sub	sp, #12
 801bede:	f7f6 fef7 	bl	8012cd0 <GUI_Lock>
 801bee2:	4620      	mov	r0, r4
 801bee4:	f7f4 ff0c 	bl	8010d00 <GUI_ALLOC_LockH>
 801bee8:	ad02      	add	r5, sp, #8
 801beea:	4603      	mov	r3, r0
 801beec:	6800      	ldr	r0, [r0, #0]
 801beee:	f845 3d04 	str.w	r3, [r5, #-4]!
 801bef2:	f7f7 f92d 	bl	8013150 <GUI_TIMER_Delete>
 801bef6:	4628      	mov	r0, r5
 801bef8:	f7f4 ff14 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801befc:	4620      	mov	r0, r4
 801befe:	f7f5 f895 	bl	801102c <GUI_ALLOC_Free>
 801bf02:	f7f6 fedb 	bl	8012cbc <GUI_Unlock>
 801bf06:	b003      	add	sp, #12
 801bf08:	bd30      	pop	{r4, r5, pc}
 801bf0a:	bf00      	nop

0801bf0c <WM_CreateTimer>:
 801bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf10:	b082      	sub	sp, #8
 801bf12:	4680      	mov	r8, r0
 801bf14:	460f      	mov	r7, r1
 801bf16:	4615      	mov	r5, r2
 801bf18:	f7f6 feda 	bl	8012cd0 <GUI_Lock>
 801bf1c:	200c      	movs	r0, #12
 801bf1e:	f7f5 f945 	bl	80111ac <GUI_ALLOC_AllocZero>
 801bf22:	4604      	mov	r4, r0
 801bf24:	b928      	cbnz	r0, 801bf32 <WM_CreateTimer+0x26>
 801bf26:	f7f6 fec9 	bl	8012cbc <GUI_Unlock>
 801bf2a:	4620      	mov	r0, r4
 801bf2c:	b002      	add	sp, #8
 801bf2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf32:	f7f6 ffa9 	bl	8012e88 <GUI_GetTime>
 801bf36:	2301      	movs	r3, #1
 801bf38:	1941      	adds	r1, r0, r5
 801bf3a:	4622      	mov	r2, r4
 801bf3c:	4812      	ldr	r0, [pc, #72]	; (801bf88 <WM_CreateTimer+0x7c>)
 801bf3e:	f7f7 f8b7 	bl	80130b0 <GUI_TIMER_Create>
 801bf42:	4606      	mov	r6, r0
 801bf44:	4620      	mov	r0, r4
 801bf46:	b946      	cbnz	r6, 801bf5a <WM_CreateTimer+0x4e>
 801bf48:	f7f5 f870 	bl	801102c <GUI_ALLOC_Free>
 801bf4c:	f7f6 feb6 	bl	8012cbc <GUI_Unlock>
 801bf50:	4634      	mov	r4, r6
 801bf52:	4620      	mov	r0, r4
 801bf54:	b002      	add	sp, #8
 801bf56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf5a:	f7f4 fed1 	bl	8010d00 <GUI_ALLOC_LockH>
 801bf5e:	4603      	mov	r3, r0
 801bf60:	a802      	add	r0, sp, #8
 801bf62:	f8c3 8004 	str.w	r8, [r3, #4]
 801bf66:	f840 3d04 	str.w	r3, [r0, #-4]!
 801bf6a:	609f      	str	r7, [r3, #8]
 801bf6c:	601e      	str	r6, [r3, #0]
 801bf6e:	f7f4 fed9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bf72:	4630      	mov	r0, r6
 801bf74:	4629      	mov	r1, r5
 801bf76:	f7f7 f953 	bl	8013220 <GUI_TIMER_SetPeriod>
 801bf7a:	f7f6 fe9f 	bl	8012cbc <GUI_Unlock>
 801bf7e:	4620      	mov	r0, r4
 801bf80:	b002      	add	sp, #8
 801bf82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf86:	bf00      	nop
 801bf88:	0801be29 	.word	0x0801be29

0801bf8c <WM_RestartTimer>:
 801bf8c:	b900      	cbnz	r0, 801bf90 <WM_RestartTimer+0x4>
 801bf8e:	4770      	bx	lr
 801bf90:	b530      	push	{r4, r5, lr}
 801bf92:	4604      	mov	r4, r0
 801bf94:	b083      	sub	sp, #12
 801bf96:	460d      	mov	r5, r1
 801bf98:	f7f6 fe9a 	bl	8012cd0 <GUI_Lock>
 801bf9c:	4620      	mov	r0, r4
 801bf9e:	f7f4 feaf 	bl	8010d00 <GUI_ALLOC_LockH>
 801bfa2:	9001      	str	r0, [sp, #4]
 801bfa4:	b94d      	cbnz	r5, 801bfba <WM_RestartTimer+0x2e>
 801bfa6:	6800      	ldr	r0, [r0, #0]
 801bfa8:	f7f7 f950 	bl	801324c <GUI_TIMER_Restart>
 801bfac:	a801      	add	r0, sp, #4
 801bfae:	f7f4 feb9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bfb2:	f7f6 fe83 	bl	8012cbc <GUI_Unlock>
 801bfb6:	b003      	add	sp, #12
 801bfb8:	bd30      	pop	{r4, r5, pc}
 801bfba:	6800      	ldr	r0, [r0, #0]
 801bfbc:	4629      	mov	r1, r5
 801bfbe:	f7f7 f92f 	bl	8013220 <GUI_TIMER_SetPeriod>
 801bfc2:	9801      	ldr	r0, [sp, #4]
 801bfc4:	e7ef      	b.n	801bfa6 <WM_RestartTimer+0x1a>
 801bfc6:	bf00      	nop

0801bfc8 <WM__SendTouchMessage>:
 801bfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfca:	68cc      	ldr	r4, [r1, #12]
 801bfcc:	b087      	sub	sp, #28
 801bfce:	460d      	mov	r5, r1
 801bfd0:	4607      	mov	r7, r0
 801bfd2:	b194      	cbz	r4, 801bffa <WM__SendTouchMessage+0x32>
 801bfd4:	f7f4 fe94 	bl	8010d00 <GUI_ALLOC_LockH>
 801bfd8:	aa06      	add	r2, sp, #24
 801bfda:	f9b0 e000 	ldrsh.w	lr, [r0]
 801bfde:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801bfe2:	6821      	ldr	r1, [r4, #0]
 801bfe4:	6863      	ldr	r3, [r4, #4]
 801bfe6:	f842 0d14 	str.w	r0, [r2, #-20]!
 801bfea:	ebce 0101 	rsb	r1, lr, r1
 801bfee:	1b9b      	subs	r3, r3, r6
 801bff0:	6021      	str	r1, [r4, #0]
 801bff2:	4610      	mov	r0, r2
 801bff4:	6063      	str	r3, [r4, #4]
 801bff6:	f7f4 fe95 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801bffa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801bffe:	ae02      	add	r6, sp, #8
 801c000:	f04f 0e0d 	mov.w	lr, #13
 801c004:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801c008:	463c      	mov	r4, r7
 801c00a:	9704      	str	r7, [sp, #16]
 801c00c:	f8cd e008 	str.w	lr, [sp, #8]
 801c010:	4620      	mov	r0, r4
 801c012:	f7ff fa1f 	bl	801b454 <WM_IsWindow>
 801c016:	b170      	cbz	r0, 801c036 <WM__SendTouchMessage+0x6e>
 801c018:	4620      	mov	r0, r4
 801c01a:	f7ff f96b 	bl	801b2f4 <WM_GetParent>
 801c01e:	4604      	mov	r4, r0
 801c020:	2800      	cmp	r0, #0
 801c022:	d0f5      	beq.n	801c010 <WM__SendTouchMessage+0x48>
 801c024:	4631      	mov	r1, r6
 801c026:	9505      	str	r5, [sp, #20]
 801c028:	f000 fc10 	bl	801c84c <WM__SendMessageIfEnabled>
 801c02c:	4620      	mov	r0, r4
 801c02e:	f7ff fa11 	bl	801b454 <WM_IsWindow>
 801c032:	2800      	cmp	r0, #0
 801c034:	d1f0      	bne.n	801c018 <WM__SendTouchMessage+0x50>
 801c036:	4629      	mov	r1, r5
 801c038:	4638      	mov	r0, r7
 801c03a:	f000 fc07 	bl	801c84c <WM__SendMessageIfEnabled>
 801c03e:	b007      	add	sp, #28
 801c040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c042:	bf00      	nop

0801c044 <WM_HandlePID>:
 801c044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c048:	b099      	sub	sp, #100	; 0x64
 801c04a:	ad08      	add	r5, sp, #32
 801c04c:	2300      	movs	r3, #0
 801c04e:	606b      	str	r3, [r5, #4]
 801c050:	9308      	str	r3, [sp, #32]
 801c052:	60ab      	str	r3, [r5, #8]
 801c054:	f7f6 fd98 	bl	8012b88 <GUI_PID_IsEmpty>
 801c058:	b120      	cbz	r0, 801c064 <WM_HandlePID+0x20>
 801c05a:	2400      	movs	r4, #0
 801c05c:	4620      	mov	r0, r4
 801c05e:	b019      	add	sp, #100	; 0x64
 801c060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c064:	af0b      	add	r7, sp, #44	; 0x2c
 801c066:	4604      	mov	r4, r0
 801c068:	4638      	mov	r0, r7
 801c06a:	f7f6 fce9 	bl	8012a40 <GUI_PID_GetState>
 801c06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c070:	3301      	adds	r3, #1
 801c072:	f000 80e3 	beq.w	801c23c <WM_HandlePID+0x1f8>
 801c076:	4eb8      	ldr	r6, [pc, #736]	; (801c358 <WM_HandlePID+0x314>)
 801c078:	f7f6 fe2a 	bl	8012cd0 <GUI_Lock>
 801c07c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c07e:	2b00      	cmp	r3, #0
 801c080:	f2c0 8157 	blt.w	801c332 <WM_HandlePID+0x2ee>
 801c084:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c086:	2a00      	cmp	r2, #0
 801c088:	db09      	blt.n	801c09e <WM_HandlePID+0x5a>
 801c08a:	48b4      	ldr	r0, [pc, #720]	; (801c35c <WM_HandlePID+0x318>)
 801c08c:	49b4      	ldr	r1, [pc, #720]	; (801c360 <WM_HandlePID+0x31c>)
 801c08e:	f9b0 0000 	ldrsh.w	r0, [r0]
 801c092:	f9b1 1000 	ldrsh.w	r1, [r1]
 801c096:	4403      	add	r3, r0
 801c098:	440a      	add	r2, r1
 801c09a:	930b      	str	r3, [sp, #44]	; 0x2c
 801c09c:	920c      	str	r2, [sp, #48]	; 0x30
 801c09e:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
 801c0a2:	2801      	cmp	r0, #1
 801c0a4:	bf8c      	ite	hi
 801c0a6:	6830      	ldrhi	r0, [r6, #0]
 801c0a8:	6030      	strls	r0, [r6, #0]
 801c0aa:	f7f5 fddd 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 801c0ae:	2800      	cmp	r0, #0
 801c0b0:	f000 80be 	beq.w	801c230 <WM_HandlePID+0x1ec>
 801c0b4:	aa04      	add	r2, sp, #16
 801c0b6:	a903      	add	r1, sp, #12
 801c0b8:	6830      	ldr	r0, [r6, #0]
 801c0ba:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 801c374 <WM_HandlePID+0x330>
 801c0be:	f7f6 fd77 	bl	8012bb0 <GUI_GetLayerPosEx>
 801c0c2:	a806      	add	r0, sp, #24
 801c0c4:	f000 fc7a 	bl	801c9bc <WM__AddCriticalHandle>
 801c0c8:	6834      	ldr	r4, [r6, #0]
 801c0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c0cc:	9803      	ldr	r0, [sp, #12]
 801c0ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c0d0:	9904      	ldr	r1, [sp, #16]
 801c0d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c0d6:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 801c0da:	1a18      	subs	r0, r3, r0
 801c0dc:	6923      	ldr	r3, [r4, #16]
 801c0de:	900b      	str	r0, [sp, #44]	; 0x2c
 801c0e0:	1a51      	subs	r1, r2, r1
 801c0e2:	4298      	cmp	r0, r3
 801c0e4:	910c      	str	r1, [sp, #48]	; 0x30
 801c0e6:	d103      	bne.n	801c0f0 <WM_HandlePID+0xac>
 801c0e8:	6963      	ldr	r3, [r4, #20]
 801c0ea:	4299      	cmp	r1, r3
 801c0ec:	f000 815f 	beq.w	801c3ae <WM_HandlePID+0x36a>
 801c0f0:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 801c0f4:	f002 ff2e 	bl	801ef54 <GUI_CURSOR_SetPositionEx>
 801c0f8:	f8d8 3000 	ldr.w	r3, [r8]
 801c0fc:	b113      	cbz	r3, 801c104 <WM_HandlePID+0xc0>
 801c0fe:	2100      	movs	r1, #0
 801c100:	4638      	mov	r0, r7
 801c102:	4798      	blx	r3
 801c104:	4b97      	ldr	r3, [pc, #604]	; (801c364 <WM_HandlePID+0x320>)
 801c106:	6832      	ldr	r2, [r6, #0]
 801c108:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c10c:	2800      	cmp	r0, #0
 801c10e:	f000 8137 	beq.w	801c380 <WM_HandlePID+0x33c>
 801c112:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c116:	9007      	str	r0, [sp, #28]
 801c118:	b113      	cbz	r3, 801c120 <WM_HandlePID+0xdc>
 801c11a:	9907      	ldr	r1, [sp, #28]
 801c11c:	4638      	mov	r0, r7
 801c11e:	4798      	blx	r3
 801c120:	6833      	ldr	r3, [r6, #0]
 801c122:	4c91      	ldr	r4, [pc, #580]	; (801c368 <WM_HandlePID+0x324>)
 801c124:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801c358 <WM_HandlePID+0x314>
 801c128:	00db      	lsls	r3, r3, #3
 801c12a:	18e1      	adds	r1, r4, r3
 801c12c:	684a      	ldr	r2, [r1, #4]
 801c12e:	9807      	ldr	r0, [sp, #28]
 801c130:	2a00      	cmp	r2, #0
 801c132:	d042      	beq.n	801c1ba <WM_HandlePID+0x176>
 801c134:	4282      	cmp	r2, r0
 801c136:	d040      	beq.n	801c1ba <WM_HandlePID+0x176>
 801c138:	f8d1 a004 	ldr.w	sl, [r1, #4]
 801c13c:	f1ba 0f00 	cmp.w	sl, #0
 801c140:	d03b      	beq.n	801c1ba <WM_HandlePID+0x176>
 801c142:	4a8a      	ldr	r2, [pc, #552]	; (801c36c <WM_HandlePID+0x328>)
 801c144:	6812      	ldr	r2, [r2, #0]
 801c146:	2a00      	cmp	r2, #0
 801c148:	db09      	blt.n	801c15e <WM_HandlePID+0x11a>
 801c14a:	4b89      	ldr	r3, [pc, #548]	; (801c370 <WM_HandlePID+0x32c>)
 801c14c:	4650      	mov	r0, sl
 801c14e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c152:	f000 fb2b 	bl	801c7ac <WM__IsAncestor>
 801c156:	b380      	cbz	r0, 801c1ba <WM_HandlePID+0x176>
 801c158:	f8d9 3000 	ldr.w	r3, [r9]
 801c15c:	00db      	lsls	r3, r3, #3
 801c15e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801c37c <WM_HandlePID+0x338>
 801c162:	444b      	add	r3, r9
 801c164:	4650      	mov	r0, sl
 801c166:	6859      	ldr	r1, [r3, #4]
 801c168:	f000 fb20 	bl	801c7ac <WM__IsAncestor>
 801c16c:	6833      	ldr	r3, [r6, #0]
 801c16e:	00db      	lsls	r3, r3, #3
 801c170:	4499      	add	r9, r3
 801c172:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801c176:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c17a:	b112      	cbz	r2, 801c182 <WM_HandlePID+0x13e>
 801c17c:	b908      	cbnz	r0, 801c182 <WM_HandlePID+0x13e>
 801c17e:	458a      	cmp	sl, r1
 801c180:	d11b      	bne.n	801c1ba <WM_HandlePID+0x176>
 801c182:	4423      	add	r3, r4
 801c184:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 801c368 <WM_HandlePID+0x324>
 801c188:	6858      	ldr	r0, [r3, #4]
 801c18a:	f000 fb37 	bl	801c7fc <WM__IsEnabled>
 801c18e:	b1a0      	cbz	r0, 801c1ba <WM_HandlePID+0x176>
 801c190:	6833      	ldr	r3, [r6, #0]
 801c192:	9517      	str	r5, [sp, #92]	; 0x5c
 801c194:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801c198:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 801c19c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801c1a0:	f8d3 e004 	ldr.w	lr, [r3, #4]
 801c1a4:	a914      	add	r1, sp, #80	; 0x50
 801c1a6:	2312      	movs	r3, #18
 801c1a8:	4670      	mov	r0, lr
 801c1aa:	9314      	str	r3, [sp, #80]	; 0x50
 801c1ac:	f7ff ff0c 	bl	801bfc8 <WM__SendTouchMessage>
 801c1b0:	6833      	ldr	r3, [r6, #0]
 801c1b2:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 801c1b6:	2200      	movs	r2, #0
 801c1b8:	605a      	str	r2, [r3, #4]
 801c1ba:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801c1be:	f1b9 0f00 	cmp.w	r9, #0
 801c1c2:	f000 80b3 	beq.w	801c32c <WM_HandlePID+0x2e8>
 801c1c6:	4b69      	ldr	r3, [pc, #420]	; (801c36c <WM_HandlePID+0x328>)
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	db08      	blt.n	801c1e0 <WM_HandlePID+0x19c>
 801c1ce:	4a68      	ldr	r2, [pc, #416]	; (801c370 <WM_HandlePID+0x32c>)
 801c1d0:	4648      	mov	r0, r9
 801c1d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801c1d6:	f000 fae9 	bl	801c7ac <WM__IsAncestor>
 801c1da:	2800      	cmp	r0, #0
 801c1dc:	f000 80a6 	beq.w	801c32c <WM_HandlePID+0x2e8>
 801c1e0:	6833      	ldr	r3, [r6, #0]
 801c1e2:	f8df a198 	ldr.w	sl, [pc, #408]	; 801c37c <WM_HandlePID+0x338>
 801c1e6:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801c1ea:	4648      	mov	r0, r9
 801c1ec:	6859      	ldr	r1, [r3, #4]
 801c1ee:	f000 fadd 	bl	801c7ac <WM__IsAncestor>
 801c1f2:	f8d6 e000 	ldr.w	lr, [r6]
 801c1f6:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 801c1fa:	44e2      	add	sl, ip
 801c1fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 801c200:	f8da 2004 	ldr.w	r2, [sl, #4]
 801c204:	b363      	cbz	r3, 801c260 <WM_HandlePID+0x21c>
 801c206:	bb58      	cbnz	r0, 801c260 <WM_HandlePID+0x21c>
 801c208:	4591      	cmp	r9, r2
 801c20a:	d029      	beq.n	801c260 <WM_HandlePID+0x21c>
 801c20c:	2400      	movs	r4, #0
 801c20e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801c212:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801c216:	4473      	add	r3, lr
 801c218:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801c21c:	3310      	adds	r3, #16
 801c21e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801c222:	4671      	mov	r1, lr
 801c224:	4638      	mov	r0, r7
 801c226:	f005 fee3 	bl	8021ff0 <WM_PID__SetPrevState>
 801c22a:	a806      	add	r0, sp, #24
 801c22c:	f000 fbce 	bl	801c9cc <WM__RemoveCriticalHandle>
 801c230:	f7f6 fd44 	bl	8012cbc <GUI_Unlock>
 801c234:	4620      	mov	r0, r4
 801c236:	b019      	add	sp, #100	; 0x64
 801c238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c23c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c23e:	4e46      	ldr	r6, [pc, #280]	; (801c358 <WM_HandlePID+0x314>)
 801c240:	3301      	adds	r3, #1
 801c242:	f47f af19 	bne.w	801c078 <WM_HandlePID+0x34>
 801c246:	6833      	ldr	r3, [r6, #0]
 801c248:	4a4a      	ldr	r2, [pc, #296]	; (801c374 <WM_HandlePID+0x330>)
 801c24a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 801c24e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c252:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c256:	7e1b      	ldrb	r3, [r3, #24]
 801c258:	428b      	cmp	r3, r1
 801c25a:	f47f af0d 	bne.w	801c078 <WM_HandlePID+0x34>
 801c25e:	e6fc      	b.n	801c05a <WM_HandlePID+0x16>
 801c260:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801c264:	eb03 020e 	add.w	r2, r3, lr
 801c268:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 801c26c:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 801c270:	7e12      	ldrb	r2, [r2, #24]
 801c272:	9907      	ldr	r1, [sp, #28]
 801c274:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 801c374 <WM_HandlePID+0x330>
 801c278:	4464      	add	r4, ip
 801c27a:	4552      	cmp	r2, sl
 801c27c:	6061      	str	r1, [r4, #4]
 801c27e:	d003      	beq.n	801c288 <WM_HandlePID+0x244>
 801c280:	9907      	ldr	r1, [sp, #28]
 801c282:	2900      	cmp	r1, #0
 801c284:	f040 809b 	bne.w	801c3be <WM_HandlePID+0x37a>
 801c288:	ea52 090a 	orrs.w	r9, r2, sl
 801c28c:	d07d      	beq.n	801c38a <WM_HandlePID+0x346>
 801c28e:	4c3a      	ldr	r4, [pc, #232]	; (801c378 <WM_HandlePID+0x334>)
 801c290:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 801c294:	eb04 020c 	add.w	r2, r4, ip
 801c298:	f44f 7910 	mov.w	r9, #576	; 0x240
 801c29c:	6850      	ldr	r0, [r2, #4]
 801c29e:	9907      	ldr	r1, [sp, #28]
 801c2a0:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 801c2a4:	4288      	cmp	r0, r1
 801c2a6:	d022      	beq.n	801c2ee <WM_HandlePID+0x2aa>
 801c2a8:	6852      	ldr	r2, [r2, #4]
 801c2aa:	b302      	cbz	r2, 801c2ee <WM_HandlePID+0x2aa>
 801c2ac:	f1ba 0f00 	cmp.w	sl, #0
 801c2b0:	f040 8113 	bne.w	801c4da <WM_HandlePID+0x496>
 801c2b4:	4473      	add	r3, lr
 801c2b6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801c2ba:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 801c2be:	691a      	ldr	r2, [r3, #16]
 801c2c0:	695b      	ldr	r3, [r3, #20]
 801c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 801c2c4:	9208      	str	r2, [sp, #32]
 801c2c6:	462b      	mov	r3, r5
 801c2c8:	44a4      	add	ip, r4
 801c2ca:	a914      	add	r1, sp, #80	; 0x50
 801c2cc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801c2d0:	9317      	str	r3, [sp, #92]	; 0x5c
 801c2d2:	f7ff fe79 	bl	801bfc8 <WM__SendTouchMessage>
 801c2d6:	f8d6 e000 	ldr.w	lr, [r6]
 801c2da:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 801c2de:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 801c2e2:	eb04 030c 	add.w	r3, r4, ip
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	605a      	str	r2, [r3, #4]
 801c2ea:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801c2ee:	eb03 020e 	add.w	r2, r3, lr
 801c2f2:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 801c2f6:	9907      	ldr	r1, [sp, #28]
 801c2f8:	f882 a018 	strb.w	sl, [r2, #24]
 801c2fc:	2900      	cmp	r1, #0
 801c2fe:	d054      	beq.n	801c3aa <WM_HandlePID+0x366>
 801c300:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801c304:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801c308:	f1ba 0f00 	cmp.w	sl, #0
 801c30c:	f000 80c5 	beq.w	801c49a <WM_HandlePID+0x456>
 801c310:	4464      	add	r4, ip
 801c312:	9b07      	ldr	r3, [sp, #28]
 801c314:	6063      	str	r3, [r4, #4]
 801c316:	9807      	ldr	r0, [sp, #28]
 801c318:	9517      	str	r5, [sp, #92]	; 0x5c
 801c31a:	a914      	add	r1, sp, #80	; 0x50
 801c31c:	f7ff fe54 	bl	801bfc8 <WM__SendTouchMessage>
 801c320:	f8d6 e000 	ldr.w	lr, [r6]
 801c324:	2401      	movs	r4, #1
 801c326:	fa0e f304 	lsl.w	r3, lr, r4
 801c32a:	e772      	b.n	801c212 <WM_HandlePID+0x1ce>
 801c32c:	f8d6 e000 	ldr.w	lr, [r6]
 801c330:	e76c      	b.n	801c20c <WM_HandlePID+0x1c8>
 801c332:	3301      	adds	r3, #1
 801c334:	f47f aeb3 	bne.w	801c09e <WM_HandlePID+0x5a>
 801c338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c33a:	3301      	adds	r3, #1
 801c33c:	f47f aeaf 	bne.w	801c09e <WM_HandlePID+0x5a>
 801c340:	6833      	ldr	r3, [r6, #0]
 801c342:	4a0c      	ldr	r2, [pc, #48]	; (801c374 <WM_HandlePID+0x330>)
 801c344:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c348:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c34c:	691a      	ldr	r2, [r3, #16]
 801c34e:	695b      	ldr	r3, [r3, #20]
 801c350:	920b      	str	r2, [sp, #44]	; 0x2c
 801c352:	930c      	str	r3, [sp, #48]	; 0x30
 801c354:	e6a3      	b.n	801c09e <WM_HandlePID+0x5a>
 801c356:	bf00      	nop
 801c358:	20035e4c 	.word	0x20035e4c
 801c35c:	20035dde 	.word	0x20035dde
 801c360:	20035e10 	.word	0x20035e10
 801c364:	20035e58 	.word	0x20035e58
 801c368:	20035e88 	.word	0x20035e88
 801c36c:	2000007c 	.word	0x2000007c
 801c370:	20035e80 	.word	0x20035e80
 801c374:	20000884 	.word	0x20000884
 801c378:	20035ea8 	.word	0x20035ea8
 801c37c:	20035e98 	.word	0x20035e98
 801c380:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c382:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c384:	f006 f87a 	bl	802247c <WM_Screen2hWin>
 801c388:	e6c3      	b.n	801c112 <WM_HandlePID+0xce>
 801c38a:	9c07      	ldr	r4, [sp, #28]
 801c38c:	2c00      	cmp	r4, #0
 801c38e:	f43f af40 	beq.w	801c212 <WM_HandlePID+0x1ce>
 801c392:	9807      	ldr	r0, [sp, #28]
 801c394:	f000 fa32 	bl	801c7fc <WM__IsEnabled>
 801c398:	2800      	cmp	r0, #0
 801c39a:	f040 80b0 	bne.w	801c4fe <WM_HandlePID+0x4ba>
 801c39e:	f8d6 e000 	ldr.w	lr, [r6]
 801c3a2:	4604      	mov	r4, r0
 801c3a4:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801c3a8:	e733      	b.n	801c212 <WM_HandlePID+0x1ce>
 801c3aa:	2401      	movs	r4, #1
 801c3ac:	e731      	b.n	801c212 <WM_HandlePID+0x1ce>
 801c3ae:	7e22      	ldrb	r2, [r4, #24]
 801c3b0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 801c3b4:	429a      	cmp	r2, r3
 801c3b6:	f47f ae9b 	bne.w	801c0f0 <WM_HandlePID+0xac>
 801c3ba:	2400      	movs	r4, #0
 801c3bc:	e735      	b.n	801c22a <WM_HandlePID+0x1e6>
 801c3be:	9807      	ldr	r0, [sp, #28]
 801c3c0:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 801c570 <WM_HandlePID+0x52c>
 801c3c4:	f7f4 fc9c 	bl	8010d00 <GUI_ALLOC_LockH>
 801c3c8:	6833      	ldr	r3, [r6, #0]
 801c3ca:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801c3ce:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 801c3d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3d6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801c3da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c3dc:	7e1b      	ldrb	r3, [r3, #24]
 801c3de:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 801c3e2:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c3e6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801c3ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c3ec:	9005      	str	r0, [sp, #20]
 801c3ee:	1b12      	subs	r2, r2, r4
 801c3f0:	1a5b      	subs	r3, r3, r1
 801c3f2:	a805      	add	r0, sp, #20
 801c3f4:	9211      	str	r2, [sp, #68]	; 0x44
 801c3f6:	9312      	str	r3, [sp, #72]	; 0x48
 801c3f8:	f7f4 fc94 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801c3fc:	f8d6 e000 	ldr.w	lr, [r6]
 801c400:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
 801c404:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 801c408:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801c40c:	f103 0210 	add.w	r2, r3, #16
 801c410:	ca07      	ldmia	r2, {r0, r1, r2}
 801c412:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801c416:	761c      	strb	r4, [r3, #24]
 801c418:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801c41c:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 801c420:	a911      	add	r1, sp, #68	; 0x44
 801c422:	2211      	movs	r2, #17
 801c424:	9117      	str	r1, [sp, #92]	; 0x5c
 801c426:	9214      	str	r2, [sp, #80]	; 0x50
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d03e      	beq.n	801c4aa <WM_HandlePID+0x466>
 801c42c:	4c4e      	ldr	r4, [pc, #312]	; (801c568 <WM_HandlePID+0x524>)
 801c42e:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 801c432:	a914      	add	r1, sp, #80	; 0x50
 801c434:	f8de 9004 	ldr.w	r9, [lr, #4]
 801c438:	9b07      	ldr	r3, [sp, #28]
 801c43a:	f8ce 3004 	str.w	r3, [lr, #4]
 801c43e:	f8de 3004 	ldr.w	r3, [lr, #4]
 801c442:	9807      	ldr	r0, [sp, #28]
 801c444:	9300      	str	r3, [sp, #0]
 801c446:	f000 fa01 	bl	801c84c <WM__SendMessageIfEnabled>
 801c44a:	f8db e000 	ldr.w	lr, [fp]
 801c44e:	9b00      	ldr	r3, [sp, #0]
 801c450:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 801c454:	eb04 020c 	add.w	r2, r4, ip
 801c458:	6852      	ldr	r2, [r2, #4]
 801c45a:	4293      	cmp	r3, r2
 801c45c:	d003      	beq.n	801c466 <WM_HandlePID+0x422>
 801c45e:	44a4      	add	ip, r4
 801c460:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801c464:	9307      	str	r3, [sp, #28]
 801c466:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 801c46a:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 801c46e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801c472:	3310      	adds	r3, #16
 801c474:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801c478:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 801c574 <WM_HandlePID+0x530>
 801c47c:	f1b9 0f00 	cmp.w	r9, #0
 801c480:	d12d      	bne.n	801c4de <WM_HandlePID+0x49a>
 801c482:	f8d6 e000 	ldr.w	lr, [r6]
 801c486:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 801c48a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801c48e:	eb03 020e 	add.w	r2, r3, lr
 801c492:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 801c496:	7e12      	ldrb	r2, [r2, #24]
 801c498:	e6f6      	b.n	801c288 <WM_HandlePID+0x244>
 801c49a:	4b34      	ldr	r3, [pc, #208]	; (801c56c <WM_HandlePID+0x528>)
 801c49c:	781b      	ldrb	r3, [r3, #0]
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d13f      	bne.n	801c522 <WM_HandlePID+0x4de>
 801c4a2:	4464      	add	r4, ip
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	6063      	str	r3, [r4, #4]
 801c4a8:	e735      	b.n	801c316 <WM_HandlePID+0x2d2>
 801c4aa:	4c2f      	ldr	r4, [pc, #188]	; (801c568 <WM_HandlePID+0x524>)
 801c4ac:	9301      	str	r3, [sp, #4]
 801c4ae:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 801c4b2:	a914      	add	r1, sp, #80	; 0x50
 801c4b4:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c4b8:	9807      	ldr	r0, [sp, #28]
 801c4ba:	9200      	str	r2, [sp, #0]
 801c4bc:	f000 f9c6 	bl	801c84c <WM__SendMessageIfEnabled>
 801c4c0:	f8db e000 	ldr.w	lr, [fp]
 801c4c4:	9a00      	ldr	r2, [sp, #0]
 801c4c6:	9b01      	ldr	r3, [sp, #4]
 801c4c8:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 801c4cc:	eb04 010c 	add.w	r1, r4, ip
 801c4d0:	6849      	ldr	r1, [r1, #4]
 801c4d2:	428a      	cmp	r2, r1
 801c4d4:	d036      	beq.n	801c544 <WM_HandlePID+0x500>
 801c4d6:	4699      	mov	r9, r3
 801c4d8:	e7c1      	b.n	801c45e <WM_HandlePID+0x41a>
 801c4da:	2300      	movs	r3, #0
 801c4dc:	e6f4      	b.n	801c2c8 <WM_HandlePID+0x284>
 801c4de:	4648      	mov	r0, r9
 801c4e0:	f7fe ffb8 	bl	801b454 <WM_IsWindow>
 801c4e4:	f8d6 e000 	ldr.w	lr, [r6]
 801c4e8:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 801c4ec:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801c4f0:	b9f0      	cbnz	r0, 801c530 <WM_HandlePID+0x4ec>
 801c4f2:	eb03 020e 	add.w	r2, r3, lr
 801c4f6:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 801c4fa:	7e12      	ldrb	r2, [r2, #24]
 801c4fc:	e6c4      	b.n	801c288 <WM_HandlePID+0x244>
 801c4fe:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801c502:	9c07      	ldr	r4, [sp, #28]
 801c504:	9517      	str	r5, [sp, #92]	; 0x5c
 801c506:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801c50a:	2310      	movs	r3, #16
 801c50c:	4620      	mov	r0, r4
 801c50e:	a914      	add	r1, sp, #80	; 0x50
 801c510:	9314      	str	r3, [sp, #80]	; 0x50
 801c512:	f7ff fd59 	bl	801bfc8 <WM__SendTouchMessage>
 801c516:	f8d6 e000 	ldr.w	lr, [r6]
 801c51a:	464c      	mov	r4, r9
 801c51c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801c520:	e677      	b.n	801c212 <WM_HandlePID+0x1ce>
 801c522:	f7ff fc65 	bl	801bdf0 <WM_ReleaseCapture>
 801c526:	f8d6 e000 	ldr.w	lr, [r6]
 801c52a:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 801c52e:	e7b8      	b.n	801c4a2 <WM_HandlePID+0x45e>
 801c530:	eb04 04ce 	add.w	r4, r4, lr, lsl #3
 801c534:	eb03 020e 	add.w	r2, r3, lr
 801c538:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 801c53c:	f8c4 9004 	str.w	r9, [r4, #4]
 801c540:	7e12      	ldrb	r2, [r2, #24]
 801c542:	e6a1      	b.n	801c288 <WM_HandlePID+0x244>
 801c544:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 801c548:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801c54c:	eb03 040e 	add.w	r4, r3, lr
 801c550:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 801c554:	f109 0410 	add.w	r4, r9, #16
 801c558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c55c:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 801c560:	f899 2018 	ldrb.w	r2, [r9, #24]
 801c564:	e690      	b.n	801c288 <WM_HandlePID+0x244>
 801c566:	bf00      	nop
 801c568:	20035ea8 	.word	0x20035ea8
 801c56c:	20035e50 	.word	0x20035e50
 801c570:	20035e4c 	.word	0x20035e4c
 801c574:	20000884 	.word	0x20000884

0801c578 <WM__ForEachDesc>:
 801c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c57c:	b085      	sub	sp, #20
 801c57e:	460d      	mov	r5, r1
 801c580:	4614      	mov	r4, r2
 801c582:	f7f4 fbb3 	bl	8010cec <GUI_ALLOC_h2p>
 801c586:	69c3      	ldr	r3, [r0, #28]
 801c588:	9302      	str	r3, [sp, #8]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	f000 809e 	beq.w	801c6cc <WM__ForEachDesc+0x154>
 801c590:	9e02      	ldr	r6, [sp, #8]
 801c592:	4621      	mov	r1, r4
 801c594:	4630      	mov	r0, r6
 801c596:	47a8      	blx	r5
 801c598:	4630      	mov	r0, r6
 801c59a:	f7f4 fba7 	bl	8010cec <GUI_ALLOC_h2p>
 801c59e:	69c3      	ldr	r3, [r0, #28]
 801c5a0:	9303      	str	r3, [sp, #12]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	f000 808a 	beq.w	801c6bc <WM__ForEachDesc+0x144>
 801c5a8:	9e03      	ldr	r6, [sp, #12]
 801c5aa:	4621      	mov	r1, r4
 801c5ac:	4630      	mov	r0, r6
 801c5ae:	47a8      	blx	r5
 801c5b0:	4630      	mov	r0, r6
 801c5b2:	f7f4 fb9b 	bl	8010cec <GUI_ALLOC_h2p>
 801c5b6:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801c5ba:	f1b8 0f00 	cmp.w	r8, #0
 801c5be:	d075      	beq.n	801c6ac <WM__ForEachDesc+0x134>
 801c5c0:	4621      	mov	r1, r4
 801c5c2:	4640      	mov	r0, r8
 801c5c4:	47a8      	blx	r5
 801c5c6:	4640      	mov	r0, r8
 801c5c8:	f7f4 fb90 	bl	8010cec <GUI_ALLOC_h2p>
 801c5cc:	f8d0 901c 	ldr.w	r9, [r0, #28]
 801c5d0:	f1b9 0f00 	cmp.w	r9, #0
 801c5d4:	d062      	beq.n	801c69c <WM__ForEachDesc+0x124>
 801c5d6:	4621      	mov	r1, r4
 801c5d8:	4648      	mov	r0, r9
 801c5da:	47a8      	blx	r5
 801c5dc:	4648      	mov	r0, r9
 801c5de:	f7f4 fb85 	bl	8010cec <GUI_ALLOC_h2p>
 801c5e2:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 801c5e6:	f1ba 0f00 	cmp.w	sl, #0
 801c5ea:	d04f      	beq.n	801c68c <WM__ForEachDesc+0x114>
 801c5ec:	4621      	mov	r1, r4
 801c5ee:	4650      	mov	r0, sl
 801c5f0:	47a8      	blx	r5
 801c5f2:	4650      	mov	r0, sl
 801c5f4:	f7f4 fb7a 	bl	8010cec <GUI_ALLOC_h2p>
 801c5f8:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801c5fc:	f1bb 0f00 	cmp.w	fp, #0
 801c600:	d03c      	beq.n	801c67c <WM__ForEachDesc+0x104>
 801c602:	4621      	mov	r1, r4
 801c604:	4658      	mov	r0, fp
 801c606:	47a8      	blx	r5
 801c608:	4658      	mov	r0, fp
 801c60a:	f7f4 fb6f 	bl	8010cec <GUI_ALLOC_h2p>
 801c60e:	69c3      	ldr	r3, [r0, #28]
 801c610:	9301      	str	r3, [sp, #4]
 801c612:	b35b      	cbz	r3, 801c66c <WM__ForEachDesc+0xf4>
 801c614:	9e01      	ldr	r6, [sp, #4]
 801c616:	4621      	mov	r1, r4
 801c618:	4630      	mov	r0, r6
 801c61a:	47a8      	blx	r5
 801c61c:	4630      	mov	r0, r6
 801c61e:	f7f4 fb65 	bl	8010cec <GUI_ALLOC_h2p>
 801c622:	69c6      	ldr	r6, [r0, #28]
 801c624:	b1de      	cbz	r6, 801c65e <WM__ForEachDesc+0xe6>
 801c626:	4621      	mov	r1, r4
 801c628:	4630      	mov	r0, r6
 801c62a:	47a8      	blx	r5
 801c62c:	4630      	mov	r0, r6
 801c62e:	f7f4 fb5d 	bl	8010cec <GUI_ALLOC_h2p>
 801c632:	69c7      	ldr	r7, [r0, #28]
 801c634:	b16f      	cbz	r7, 801c652 <WM__ForEachDesc+0xda>
 801c636:	4638      	mov	r0, r7
 801c638:	4621      	mov	r1, r4
 801c63a:	47a8      	blx	r5
 801c63c:	4638      	mov	r0, r7
 801c63e:	4622      	mov	r2, r4
 801c640:	4629      	mov	r1, r5
 801c642:	f7ff ff99 	bl	801c578 <WM__ForEachDesc>
 801c646:	4638      	mov	r0, r7
 801c648:	f7f4 fb50 	bl	8010cec <GUI_ALLOC_h2p>
 801c64c:	6a07      	ldr	r7, [r0, #32]
 801c64e:	2f00      	cmp	r7, #0
 801c650:	d1f1      	bne.n	801c636 <WM__ForEachDesc+0xbe>
 801c652:	4630      	mov	r0, r6
 801c654:	f7f4 fb4a 	bl	8010cec <GUI_ALLOC_h2p>
 801c658:	6a06      	ldr	r6, [r0, #32]
 801c65a:	2e00      	cmp	r6, #0
 801c65c:	d1e3      	bne.n	801c626 <WM__ForEachDesc+0xae>
 801c65e:	9801      	ldr	r0, [sp, #4]
 801c660:	f7f4 fb44 	bl	8010cec <GUI_ALLOC_h2p>
 801c664:	6a03      	ldr	r3, [r0, #32]
 801c666:	9301      	str	r3, [sp, #4]
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d1d3      	bne.n	801c614 <WM__ForEachDesc+0x9c>
 801c66c:	4658      	mov	r0, fp
 801c66e:	f7f4 fb3d 	bl	8010cec <GUI_ALLOC_h2p>
 801c672:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801c676:	f1bb 0f00 	cmp.w	fp, #0
 801c67a:	d1c2      	bne.n	801c602 <WM__ForEachDesc+0x8a>
 801c67c:	4650      	mov	r0, sl
 801c67e:	f7f4 fb35 	bl	8010cec <GUI_ALLOC_h2p>
 801c682:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801c686:	f1ba 0f00 	cmp.w	sl, #0
 801c68a:	d1af      	bne.n	801c5ec <WM__ForEachDesc+0x74>
 801c68c:	4648      	mov	r0, r9
 801c68e:	f7f4 fb2d 	bl	8010cec <GUI_ALLOC_h2p>
 801c692:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801c696:	f1b9 0f00 	cmp.w	r9, #0
 801c69a:	d19c      	bne.n	801c5d6 <WM__ForEachDesc+0x5e>
 801c69c:	4640      	mov	r0, r8
 801c69e:	f7f4 fb25 	bl	8010cec <GUI_ALLOC_h2p>
 801c6a2:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801c6a6:	f1b8 0f00 	cmp.w	r8, #0
 801c6aa:	d189      	bne.n	801c5c0 <WM__ForEachDesc+0x48>
 801c6ac:	9803      	ldr	r0, [sp, #12]
 801c6ae:	f7f4 fb1d 	bl	8010cec <GUI_ALLOC_h2p>
 801c6b2:	6a03      	ldr	r3, [r0, #32]
 801c6b4:	9303      	str	r3, [sp, #12]
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	f47f af76 	bne.w	801c5a8 <WM__ForEachDesc+0x30>
 801c6bc:	9802      	ldr	r0, [sp, #8]
 801c6be:	f7f4 fb15 	bl	8010cec <GUI_ALLOC_h2p>
 801c6c2:	6a03      	ldr	r3, [r0, #32]
 801c6c4:	9302      	str	r3, [sp, #8]
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	f47f af62 	bne.w	801c590 <WM__ForEachDesc+0x18>
 801c6cc:	b005      	add	sp, #20
 801c6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6d2:	bf00      	nop

0801c6d4 <WM__GetFocusedChild>:
 801c6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c6d6:	4e10      	ldr	r6, [pc, #64]	; (801c718 <WM__GetFocusedChild+0x44>)
 801c6d8:	4d10      	ldr	r5, [pc, #64]	; (801c71c <WM__GetFocusedChild+0x48>)
 801c6da:	6833      	ldr	r3, [r6, #0]
 801c6dc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c6e0:	b083      	sub	sp, #12
 801c6e2:	b913      	cbnz	r3, 801c6ea <WM__GetFocusedChild+0x16>
 801c6e4:	2000      	movs	r0, #0
 801c6e6:	b003      	add	sp, #12
 801c6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6ea:	4607      	mov	r7, r0
 801c6ec:	4618      	mov	r0, r3
 801c6ee:	f7f4 fb07 	bl	8010d00 <GUI_ALLOC_LockH>
 801c6f2:	4604      	mov	r4, r0
 801c6f4:	9001      	str	r0, [sp, #4]
 801c6f6:	b150      	cbz	r0, 801c70e <WM__GetFocusedChild+0x3a>
 801c6f8:	6984      	ldr	r4, [r0, #24]
 801c6fa:	a801      	add	r0, sp, #4
 801c6fc:	f7f4 fb12 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801c700:	42a7      	cmp	r7, r4
 801c702:	d1ef      	bne.n	801c6e4 <WM__GetFocusedChild+0x10>
 801c704:	6833      	ldr	r3, [r6, #0]
 801c706:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801c70a:	b003      	add	sp, #12
 801c70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c70e:	a801      	add	r0, sp, #4
 801c710:	f7f4 fb08 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801c714:	4620      	mov	r0, r4
 801c716:	e7e6      	b.n	801c6e6 <WM__GetFocusedChild+0x12>
 801c718:	20035e4c 	.word	0x20035e4c
 801c71c:	20035e68 	.word	0x20035e68

0801c720 <WM__GetLastSibling>:
 801c720:	b510      	push	{r4, lr}
 801c722:	4604      	mov	r4, r0
 801c724:	b908      	cbnz	r0, 801c72a <WM__GetLastSibling+0xa>
 801c726:	e006      	b.n	801c736 <WM__GetLastSibling+0x16>
 801c728:	461c      	mov	r4, r3
 801c72a:	4620      	mov	r0, r4
 801c72c:	f7f4 fade 	bl	8010cec <GUI_ALLOC_h2p>
 801c730:	6a03      	ldr	r3, [r0, #32]
 801c732:	2b00      	cmp	r3, #0
 801c734:	d1f8      	bne.n	801c728 <WM__GetLastSibling+0x8>
 801c736:	4620      	mov	r0, r4
 801c738:	bd10      	pop	{r4, pc}
 801c73a:	bf00      	nop

0801c73c <WM__GetOrgX_AA>:
 801c73c:	4b05      	ldr	r3, [pc, #20]	; (801c754 <WM__GetOrgX_AA+0x18>)
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801c744:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c746:	b11a      	cbz	r2, 801c750 <WM__GetOrgX_AA+0x14>
 801c748:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801c74c:	fb03 f000 	mul.w	r0, r3, r0
 801c750:	4770      	bx	lr
 801c752:	bf00      	nop
 801c754:	20000014 	.word	0x20000014

0801c758 <WM__GetOrgY_AA>:
 801c758:	4b05      	ldr	r3, [pc, #20]	; (801c770 <WM__GetOrgY_AA+0x18>)
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801c760:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801c762:	b11a      	cbz	r2, 801c76c <WM__GetOrgY_AA+0x14>
 801c764:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801c768:	fb03 f000 	mul.w	r0, r3, r0
 801c76c:	4770      	bx	lr
 801c76e:	bf00      	nop
 801c770:	20000014 	.word	0x20000014

0801c774 <WM__GetPrevSibling>:
 801c774:	b538      	push	{r3, r4, r5, lr}
 801c776:	4605      	mov	r5, r0
 801c778:	f7fe fdbc 	bl	801b2f4 <WM_GetParent>
 801c77c:	b910      	cbnz	r0, 801c784 <WM__GetPrevSibling+0x10>
 801c77e:	2400      	movs	r4, #0
 801c780:	4620      	mov	r0, r4
 801c782:	bd38      	pop	{r3, r4, r5, pc}
 801c784:	f7f4 fab2 	bl	8010cec <GUI_ALLOC_h2p>
 801c788:	69c4      	ldr	r4, [r0, #28]
 801c78a:	2c00      	cmp	r4, #0
 801c78c:	d0f7      	beq.n	801c77e <WM__GetPrevSibling+0xa>
 801c78e:	42a5      	cmp	r5, r4
 801c790:	d103      	bne.n	801c79a <WM__GetPrevSibling+0x26>
 801c792:	e7f4      	b.n	801c77e <WM__GetPrevSibling+0xa>
 801c794:	461c      	mov	r4, r3
 801c796:	2b00      	cmp	r3, #0
 801c798:	d0f1      	beq.n	801c77e <WM__GetPrevSibling+0xa>
 801c79a:	4620      	mov	r0, r4
 801c79c:	f7f4 faa6 	bl	8010cec <GUI_ALLOC_h2p>
 801c7a0:	6a03      	ldr	r3, [r0, #32]
 801c7a2:	429d      	cmp	r5, r3
 801c7a4:	d1f6      	bne.n	801c794 <WM__GetPrevSibling+0x20>
 801c7a6:	4620      	mov	r0, r4
 801c7a8:	bd38      	pop	{r3, r4, r5, pc}
 801c7aa:	bf00      	nop

0801c7ac <WM__IsAncestor>:
 801c7ac:	b158      	cbz	r0, 801c7c6 <WM__IsAncestor+0x1a>
 801c7ae:	b510      	push	{r4, lr}
 801c7b0:	460c      	mov	r4, r1
 801c7b2:	b131      	cbz	r1, 801c7c2 <WM__IsAncestor+0x16>
 801c7b4:	f7f4 fa9a 	bl	8010cec <GUI_ALLOC_h2p>
 801c7b8:	6980      	ldr	r0, [r0, #24]
 801c7ba:	4284      	cmp	r4, r0
 801c7bc:	d005      	beq.n	801c7ca <WM__IsAncestor+0x1e>
 801c7be:	2800      	cmp	r0, #0
 801c7c0:	d1f8      	bne.n	801c7b4 <WM__IsAncestor+0x8>
 801c7c2:	2000      	movs	r0, #0
 801c7c4:	bd10      	pop	{r4, pc}
 801c7c6:	2000      	movs	r0, #0
 801c7c8:	4770      	bx	lr
 801c7ca:	2001      	movs	r0, #1
 801c7cc:	bd10      	pop	{r4, pc}
 801c7ce:	bf00      	nop

0801c7d0 <WM__IsAncestorOrSelf>:
 801c7d0:	4288      	cmp	r0, r1
 801c7d2:	d010      	beq.n	801c7f6 <WM__IsAncestorOrSelf+0x26>
 801c7d4:	b120      	cbz	r0, 801c7e0 <WM__IsAncestorOrSelf+0x10>
 801c7d6:	b510      	push	{r4, lr}
 801c7d8:	460c      	mov	r4, r1
 801c7da:	b929      	cbnz	r1, 801c7e8 <WM__IsAncestorOrSelf+0x18>
 801c7dc:	2000      	movs	r0, #0
 801c7de:	bd10      	pop	{r4, pc}
 801c7e0:	2000      	movs	r0, #0
 801c7e2:	4770      	bx	lr
 801c7e4:	2800      	cmp	r0, #0
 801c7e6:	d0f9      	beq.n	801c7dc <WM__IsAncestorOrSelf+0xc>
 801c7e8:	f7f4 fa80 	bl	8010cec <GUI_ALLOC_h2p>
 801c7ec:	6980      	ldr	r0, [r0, #24]
 801c7ee:	4284      	cmp	r4, r0
 801c7f0:	d1f8      	bne.n	801c7e4 <WM__IsAncestorOrSelf+0x14>
 801c7f2:	2001      	movs	r0, #1
 801c7f4:	bd10      	pop	{r4, pc}
 801c7f6:	2001      	movs	r0, #1
 801c7f8:	4770      	bx	lr
 801c7fa:	bf00      	nop

0801c7fc <WM__IsEnabled>:
 801c7fc:	b508      	push	{r3, lr}
 801c7fe:	f7f4 fa75 	bl	8010cec <GUI_ALLOC_h2p>
 801c802:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c804:	f080 0010 	eor.w	r0, r0, #16
 801c808:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801c80c:	bd08      	pop	{r3, pc}
 801c80e:	bf00      	nop

0801c810 <WM__SendMessage>:
 801c810:	b570      	push	{r4, r5, r6, lr}
 801c812:	4c0d      	ldr	r4, [pc, #52]	; (801c848 <WM__SendMessage+0x38>)
 801c814:	6822      	ldr	r2, [r4, #0]
 801c816:	2a13      	cmp	r2, #19
 801c818:	dd00      	ble.n	801c81c <WM__SendMessage+0xc>
 801c81a:	bd70      	pop	{r4, r5, r6, pc}
 801c81c:	4606      	mov	r6, r0
 801c81e:	460d      	mov	r5, r1
 801c820:	f7f4 fa64 	bl	8010cec <GUI_ALLOC_h2p>
 801c824:	6902      	ldr	r2, [r0, #16]
 801c826:	606e      	str	r6, [r5, #4]
 801c828:	b142      	cbz	r2, 801c83c <WM__SendMessage+0x2c>
 801c82a:	6823      	ldr	r3, [r4, #0]
 801c82c:	4628      	mov	r0, r5
 801c82e:	3301      	adds	r3, #1
 801c830:	6023      	str	r3, [r4, #0]
 801c832:	4790      	blx	r2
 801c834:	6823      	ldr	r3, [r4, #0]
 801c836:	3b01      	subs	r3, #1
 801c838:	6023      	str	r3, [r4, #0]
 801c83a:	bd70      	pop	{r4, r5, r6, pc}
 801c83c:	4628      	mov	r0, r5
 801c83e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c842:	f7fe b96b 	b.w	801ab1c <WM_DefaultProc>
 801c846:	bf00      	nop
 801c848:	200008ac 	.word	0x200008ac

0801c84c <WM__SendMessageIfEnabled>:
 801c84c:	b570      	push	{r4, r5, r6, lr}
 801c84e:	460e      	mov	r6, r1
 801c850:	4605      	mov	r5, r0
 801c852:	f7f4 fa4b 	bl	8010cec <GUI_ALLOC_h2p>
 801c856:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c858:	06db      	lsls	r3, r3, #27
 801c85a:	d403      	bmi.n	801c864 <WM__SendMessageIfEnabled+0x18>
 801c85c:	4c0c      	ldr	r4, [pc, #48]	; (801c890 <WM__SendMessageIfEnabled+0x44>)
 801c85e:	6823      	ldr	r3, [r4, #0]
 801c860:	2b13      	cmp	r3, #19
 801c862:	dd00      	ble.n	801c866 <WM__SendMessageIfEnabled+0x1a>
 801c864:	bd70      	pop	{r4, r5, r6, pc}
 801c866:	4628      	mov	r0, r5
 801c868:	f7f4 fa40 	bl	8010cec <GUI_ALLOC_h2p>
 801c86c:	6902      	ldr	r2, [r0, #16]
 801c86e:	6075      	str	r5, [r6, #4]
 801c870:	b142      	cbz	r2, 801c884 <WM__SendMessageIfEnabled+0x38>
 801c872:	6823      	ldr	r3, [r4, #0]
 801c874:	4630      	mov	r0, r6
 801c876:	3301      	adds	r3, #1
 801c878:	6023      	str	r3, [r4, #0]
 801c87a:	4790      	blx	r2
 801c87c:	6823      	ldr	r3, [r4, #0]
 801c87e:	3b01      	subs	r3, #1
 801c880:	6023      	str	r3, [r4, #0]
 801c882:	bd70      	pop	{r4, r5, r6, pc}
 801c884:	4630      	mov	r0, r6
 801c886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c88a:	f7fe b947 	b.w	801ab1c <WM_DefaultProc>
 801c88e:	bf00      	nop
 801c890:	200008ac 	.word	0x200008ac

0801c894 <WM__SendMessageNoPara>:
 801c894:	b530      	push	{r4, r5, lr}
 801c896:	b085      	sub	sp, #20
 801c898:	2300      	movs	r3, #0
 801c89a:	9301      	str	r3, [sp, #4]
 801c89c:	9300      	str	r3, [sp, #0]
 801c89e:	9302      	str	r3, [sp, #8]
 801c8a0:	9303      	str	r3, [sp, #12]
 801c8a2:	460c      	mov	r4, r1
 801c8a4:	4605      	mov	r5, r0
 801c8a6:	f7f4 fa21 	bl	8010cec <GUI_ALLOC_h2p>
 801c8aa:	6903      	ldr	r3, [r0, #16]
 801c8ac:	b11b      	cbz	r3, 801c8b6 <WM__SendMessageNoPara+0x22>
 801c8ae:	e88d 0030 	stmia.w	sp, {r4, r5}
 801c8b2:	4668      	mov	r0, sp
 801c8b4:	4798      	blx	r3
 801c8b6:	b005      	add	sp, #20
 801c8b8:	bd30      	pop	{r4, r5, pc}
 801c8ba:	bf00      	nop

0801c8bc <WM__UpdateChildPositions>:
 801c8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8c0:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801c8c4:	b08b      	sub	sp, #44	; 0x2c
 801c8c6:	f1bb 0f00 	cmp.w	fp, #0
 801c8ca:	d074      	beq.n	801c9b6 <WM__UpdateChildPositions+0xfa>
 801c8cc:	9307      	str	r3, [sp, #28]
 801c8ce:	b29b      	uxth	r3, r3
 801c8d0:	9303      	str	r3, [sp, #12]
 801c8d2:	b28b      	uxth	r3, r1
 801c8d4:	9304      	str	r3, [sp, #16]
 801c8d6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801c8da:	9202      	str	r2, [sp, #8]
 801c8dc:	9106      	str	r1, [sp, #24]
 801c8de:	9305      	str	r3, [sp, #20]
 801c8e0:	e039      	b.n	801c956 <WM__UpdateChildPositions+0x9a>
 801c8e2:	9906      	ldr	r1, [sp, #24]
 801c8e4:	eb0a 0601 	add.w	r6, sl, r1
 801c8e8:	9907      	ldr	r1, [sp, #28]
 801c8ea:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801c8ee:	eb08 0401 	add.w	r4, r8, r1
 801c8f2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801c8f6:	b236      	sxth	r6, r6
 801c8f8:	b224      	sxth	r4, r4
 801c8fa:	d04c      	beq.n	801c996 <WM__UpdateChildPositions+0xda>
 801c8fc:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 801c900:	d150      	bne.n	801c9a4 <WM__UpdateChildPositions+0xe8>
 801c902:	9a02      	ldr	r2, [sp, #8]
 801c904:	189f      	adds	r7, r3, r2
 801c906:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c908:	eb09 0502 	add.w	r5, r9, r2
 801c90c:	b23f      	sxth	r7, r7
 801c90e:	b22d      	sxth	r5, r5
 801c910:	ebb6 010a 	subs.w	r1, r6, sl
 801c914:	eba7 0203 	sub.w	r2, r7, r3
 801c918:	d100      	bne.n	801c91c <WM__UpdateChildPositions+0x60>
 801c91a:	b122      	cbz	r2, 801c926 <WM__UpdateChildPositions+0x6a>
 801c91c:	4658      	mov	r0, fp
 801c91e:	9301      	str	r3, [sp, #4]
 801c920:	f7ff f9ec 	bl	801bcfc <WM_MoveWindow>
 801c924:	9b01      	ldr	r3, [sp, #4]
 801c926:	1ba4      	subs	r4, r4, r6
 801c928:	ebca 0808 	rsb	r8, sl, r8
 801c92c:	1bed      	subs	r5, r5, r7
 801c92e:	ebc3 0909 	rsb	r9, r3, r9
 801c932:	ebb4 0108 	subs.w	r1, r4, r8
 801c936:	ebc9 0205 	rsb	r2, r9, r5
 801c93a:	d100      	bne.n	801c93e <WM__UpdateChildPositions+0x82>
 801c93c:	b112      	cbz	r2, 801c944 <WM__UpdateChildPositions+0x88>
 801c93e:	4658      	mov	r0, fp
 801c940:	f7fe fdf4 	bl	801b52c <WM_ResizeWindow>
 801c944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c946:	f8d3 b020 	ldr.w	fp, [r3, #32]
 801c94a:	a809      	add	r0, sp, #36	; 0x24
 801c94c:	f7f4 f9ea 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801c950:	f1bb 0f00 	cmp.w	fp, #0
 801c954:	d02f      	beq.n	801c9b6 <WM__UpdateChildPositions+0xfa>
 801c956:	4658      	mov	r0, fp
 801c958:	f7f4 f9d2 	bl	8010d00 <GUI_ALLOC_LockH>
 801c95c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801c95e:	9009      	str	r0, [sp, #36]	; 0x24
 801c960:	f402 7120 	and.w	r1, r2, #640	; 0x280
 801c964:	2980      	cmp	r1, #128	; 0x80
 801c966:	f9b0 a000 	ldrsh.w	sl, [r0]
 801c96a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c96e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801c972:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 801c976:	d01c      	beq.n	801c9b2 <WM__UpdateChildPositions+0xf6>
 801c978:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 801c97c:	d0b1      	beq.n	801c8e2 <WM__UpdateChildPositions+0x26>
 801c97e:	9804      	ldr	r0, [sp, #16]
 801c980:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801c984:	eb00 060a 	add.w	r6, r0, sl
 801c988:	eb00 0408 	add.w	r4, r0, r8
 801c98c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801c990:	b236      	sxth	r6, r6
 801c992:	b224      	sxth	r4, r4
 801c994:	d1b2      	bne.n	801c8fc <WM__UpdateChildPositions+0x40>
 801c996:	9a05      	ldr	r2, [sp, #20]
 801c998:	18d7      	adds	r7, r2, r3
 801c99a:	eb02 0509 	add.w	r5, r2, r9
 801c99e:	b23f      	sxth	r7, r7
 801c9a0:	b22d      	sxth	r5, r5
 801c9a2:	e7b5      	b.n	801c910 <WM__UpdateChildPositions+0x54>
 801c9a4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c9a8:	18cf      	adds	r7, r1, r3
 801c9aa:	4449      	add	r1, r9
 801c9ac:	b23f      	sxth	r7, r7
 801c9ae:	b20d      	sxth	r5, r1
 801c9b0:	e7ae      	b.n	801c910 <WM__UpdateChildPositions+0x54>
 801c9b2:	9803      	ldr	r0, [sp, #12]
 801c9b4:	e7e4      	b.n	801c980 <WM__UpdateChildPositions+0xc4>
 801c9b6:	b00b      	add	sp, #44	; 0x2c
 801c9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c9bc <WM__AddCriticalHandle>:
 801c9bc:	4b02      	ldr	r3, [pc, #8]	; (801c9c8 <WM__AddCriticalHandle+0xc>)
 801c9be:	681a      	ldr	r2, [r3, #0]
 801c9c0:	6002      	str	r2, [r0, #0]
 801c9c2:	6018      	str	r0, [r3, #0]
 801c9c4:	4770      	bx	lr
 801c9c6:	bf00      	nop
 801c9c8:	20035e60 	.word	0x20035e60

0801c9cc <WM__RemoveCriticalHandle>:
 801c9cc:	b410      	push	{r4}
 801c9ce:	4c0e      	ldr	r4, [pc, #56]	; (801ca08 <WM__RemoveCriticalHandle+0x3c>)
 801c9d0:	6821      	ldr	r1, [r4, #0]
 801c9d2:	b159      	cbz	r1, 801c9ec <WM__RemoveCriticalHandle+0x20>
 801c9d4:	4281      	cmp	r1, r0
 801c9d6:	d012      	beq.n	801c9fe <WM__RemoveCriticalHandle+0x32>
 801c9d8:	680b      	ldr	r3, [r1, #0]
 801c9da:	b90b      	cbnz	r3, 801c9e0 <WM__RemoveCriticalHandle+0x14>
 801c9dc:	e006      	b.n	801c9ec <WM__RemoveCriticalHandle+0x20>
 801c9de:	4613      	mov	r3, r2
 801c9e0:	4298      	cmp	r0, r3
 801c9e2:	d006      	beq.n	801c9f2 <WM__RemoveCriticalHandle+0x26>
 801c9e4:	681a      	ldr	r2, [r3, #0]
 801c9e6:	4619      	mov	r1, r3
 801c9e8:	2a00      	cmp	r2, #0
 801c9ea:	d1f8      	bne.n	801c9de <WM__RemoveCriticalHandle+0x12>
 801c9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9f0:	4770      	bx	lr
 801c9f2:	b129      	cbz	r1, 801ca00 <WM__RemoveCriticalHandle+0x34>
 801c9f4:	6803      	ldr	r3, [r0, #0]
 801c9f6:	600b      	str	r3, [r1, #0]
 801c9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9fc:	4770      	bx	lr
 801c9fe:	460b      	mov	r3, r1
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	6023      	str	r3, [r4, #0]
 801ca04:	e7f2      	b.n	801c9ec <WM__RemoveCriticalHandle+0x20>
 801ca06:	bf00      	nop
 801ca08:	20035e60 	.word	0x20035e60

0801ca0c <WM__GetClientRectEx>:
 801ca0c:	b180      	cbz	r0, 801ca30 <WM__GetClientRectEx+0x24>
 801ca0e:	b179      	cbz	r1, 801ca30 <WM__GetClientRectEx+0x24>
 801ca10:	b530      	push	{r4, r5, lr}
 801ca12:	b083      	sub	sp, #12
 801ca14:	460c      	mov	r4, r1
 801ca16:	f7f4 f973 	bl	8010d00 <GUI_ALLOC_LockH>
 801ca1a:	ad02      	add	r5, sp, #8
 801ca1c:	4621      	mov	r1, r4
 801ca1e:	f845 0d04 	str.w	r0, [r5, #-4]!
 801ca22:	f7fd fa83 	bl	8019f2c <WM__GetClientRectWin>
 801ca26:	4628      	mov	r0, r5
 801ca28:	f7f4 f97c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801ca2c:	b003      	add	sp, #12
 801ca2e:	bd30      	pop	{r4, r5, pc}
 801ca30:	4770      	bx	lr
 801ca32:	bf00      	nop

0801ca34 <_OnTouchDefault>:
 801ca34:	b570      	push	{r4, r5, r6, lr}
 801ca36:	b082      	sub	sp, #8
 801ca38:	460c      	mov	r4, r1
 801ca3a:	4606      	mov	r6, r0
 801ca3c:	f7f4 f960 	bl	8010d00 <GUI_ALLOC_LockH>
 801ca40:	ab02      	add	r3, sp, #8
 801ca42:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 801ca44:	f843 0d08 	str.w	r0, [r3, #-8]!
 801ca48:	4618      	mov	r0, r3
 801ca4a:	f7f4 f96b 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801ca4e:	68e3      	ldr	r3, [r4, #12]
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d037      	beq.n	801cac4 <_OnTouchDefault+0x90>
 801ca54:	7a1b      	ldrb	r3, [r3, #8]
 801ca56:	b91b      	cbnz	r3, 801ca60 <_OnTouchDefault+0x2c>
 801ca58:	05e9      	lsls	r1, r5, #23
 801ca5a:	d419      	bmi.n	801ca90 <_OnTouchDefault+0x5c>
 801ca5c:	b002      	add	sp, #8
 801ca5e:	bd70      	pop	{r4, r5, r6, pc}
 801ca60:	05ec      	lsls	r4, r5, #23
 801ca62:	d4fb      	bmi.n	801ca5c <_OnTouchDefault+0x28>
 801ca64:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ca68:	4630      	mov	r0, r6
 801ca6a:	f001 fb51 	bl	801e110 <WIDGET_OrState>
 801ca6e:	4630      	mov	r0, r6
 801ca70:	f7f4 f946 	bl	8010d00 <GUI_ALLOC_LockH>
 801ca74:	ab02      	add	r3, sp, #8
 801ca76:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ca78:	f843 0d04 	str.w	r0, [r3, #-4]!
 801ca7c:	4618      	mov	r0, r3
 801ca7e:	f7f4 f951 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801ca82:	07a0      	lsls	r0, r4, #30
 801ca84:	d5ea      	bpl.n	801ca5c <_OnTouchDefault+0x28>
 801ca86:	4630      	mov	r0, r6
 801ca88:	2101      	movs	r1, #1
 801ca8a:	f7fe fcef 	bl	801b46c <WM_NotifyParent>
 801ca8e:	e7e5      	b.n	801ca5c <_OnTouchDefault+0x28>
 801ca90:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ca94:	4630      	mov	r0, r6
 801ca96:	f001 fb57 	bl	801e148 <WIDGET_AndState>
 801ca9a:	4630      	mov	r0, r6
 801ca9c:	f7f4 f930 	bl	8010d00 <GUI_ALLOC_LockH>
 801caa0:	ab02      	add	r3, sp, #8
 801caa2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801caa4:	f843 0d04 	str.w	r0, [r3, #-4]!
 801caa8:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 801caaa:	4618      	mov	r0, r3
 801caac:	f7f4 f93a 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cab0:	4628      	mov	r0, r5
 801cab2:	f7f5 ff8f 	bl	80129d4 <GUI_StoreKey>
 801cab6:	07a2      	lsls	r2, r4, #30
 801cab8:	d5d0      	bpl.n	801ca5c <_OnTouchDefault+0x28>
 801caba:	4630      	mov	r0, r6
 801cabc:	2102      	movs	r1, #2
 801cabe:	f7fe fcd5 	bl	801b46c <WM_NotifyParent>
 801cac2:	e7cb      	b.n	801ca5c <_OnTouchDefault+0x28>
 801cac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cac8:	4630      	mov	r0, r6
 801caca:	f001 fb3d 	bl	801e148 <WIDGET_AndState>
 801cace:	4630      	mov	r0, r6
 801cad0:	f7f4 f916 	bl	8010d00 <GUI_ALLOC_LockH>
 801cad4:	ab02      	add	r3, sp, #8
 801cad6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801cad8:	f843 0d04 	str.w	r0, [r3, #-4]!
 801cadc:	4618      	mov	r0, r3
 801cade:	f7f4 f921 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cae2:	07a3      	lsls	r3, r4, #30
 801cae4:	d5ba      	bpl.n	801ca5c <_OnTouchDefault+0x28>
 801cae6:	4630      	mov	r0, r6
 801cae8:	2103      	movs	r1, #3
 801caea:	f7fe fcbf 	bl	801b46c <WM_NotifyParent>
 801caee:	e7b5      	b.n	801ca5c <_OnTouchDefault+0x28>

0801caf0 <BUTTON_Callback>:
 801caf0:	b570      	push	{r4, r5, r6, lr}
 801caf2:	6845      	ldr	r5, [r0, #4]
 801caf4:	b082      	sub	sp, #8
 801caf6:	4604      	mov	r4, r0
 801caf8:	4601      	mov	r1, r0
 801cafa:	4628      	mov	r0, r5
 801cafc:	f001 fb70 	bl	801e1e0 <WIDGET_HandleActive>
 801cb00:	b168      	cbz	r0, 801cb1e <BUTTON_Callback+0x2e>
 801cb02:	6823      	ldr	r3, [r4, #0]
 801cb04:	2b0f      	cmp	r3, #15
 801cb06:	d059      	beq.n	801cbbc <BUTTON_Callback+0xcc>
 801cb08:	dd0b      	ble.n	801cb22 <BUTTON_Callback+0x32>
 801cb0a:	2b28      	cmp	r3, #40	; 0x28
 801cb0c:	d045      	beq.n	801cb9a <BUTTON_Callback+0xaa>
 801cb0e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801cb12:	d03c      	beq.n	801cb8e <BUTTON_Callback+0x9e>
 801cb14:	2b11      	cmp	r3, #17
 801cb16:	d049      	beq.n	801cbac <BUTTON_Callback+0xbc>
 801cb18:	4620      	mov	r0, r4
 801cb1a:	f7fd ffff 	bl	801ab1c <WM_DefaultProc>
 801cb1e:	b002      	add	sp, #8
 801cb20:	bd70      	pop	{r4, r5, r6, pc}
 801cb22:	2b0b      	cmp	r3, #11
 801cb24:	d020      	beq.n	801cb68 <BUTTON_Callback+0x78>
 801cb26:	2b0e      	cmp	r3, #14
 801cb28:	d1f6      	bne.n	801cb18 <BUTTON_Callback+0x28>
 801cb2a:	68e3      	ldr	r3, [r4, #12]
 801cb2c:	681a      	ldr	r2, [r3, #0]
 801cb2e:	6859      	ldr	r1, [r3, #4]
 801cb30:	2a0d      	cmp	r2, #13
 801cb32:	d053      	beq.n	801cbdc <BUTTON_Callback+0xec>
 801cb34:	2a20      	cmp	r2, #32
 801cb36:	d131      	bne.n	801cb9c <BUTTON_Callback+0xac>
 801cb38:	2900      	cmp	r1, #0
 801cb3a:	4628      	mov	r0, r5
 801cb3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cb40:	dd7d      	ble.n	801cc3e <BUTTON_Callback+0x14e>
 801cb42:	f001 fae5 	bl	801e110 <WIDGET_OrState>
 801cb46:	4628      	mov	r0, r5
 801cb48:	f7f4 f8da 	bl	8010d00 <GUI_ALLOC_LockH>
 801cb4c:	ab02      	add	r3, sp, #8
 801cb4e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801cb50:	f843 0d04 	str.w	r0, [r3, #-4]!
 801cb54:	4618      	mov	r0, r3
 801cb56:	f7f4 f8e5 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cb5a:	07a2      	lsls	r2, r4, #30
 801cb5c:	d5df      	bpl.n	801cb1e <BUTTON_Callback+0x2e>
 801cb5e:	4628      	mov	r0, r5
 801cb60:	2101      	movs	r1, #1
 801cb62:	f7fe fc83 	bl	801b46c <WM_NotifyParent>
 801cb66:	e7da      	b.n	801cb1e <BUTTON_Callback+0x2e>
 801cb68:	4628      	mov	r0, r5
 801cb6a:	f7f4 f8c9 	bl	8010d00 <GUI_ALLOC_LockH>
 801cb6e:	ad02      	add	r5, sp, #8
 801cb70:	4603      	mov	r3, r0
 801cb72:	3068      	adds	r0, #104	; 0x68
 801cb74:	9301      	str	r3, [sp, #4]
 801cb76:	f7f4 fa79 	bl	801106c <GUI_ALLOC_FreePtr>
 801cb7a:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 801cb7e:	2103      	movs	r1, #3
 801cb80:	306c      	adds	r0, #108	; 0x6c
 801cb82:	f7f4 fa99 	bl	80110b8 <GUI_ALLOC_FreePtrArray>
 801cb86:	4628      	mov	r0, r5
 801cb88:	f7f4 f8cc 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cb8c:	e7c4      	b.n	801cb18 <BUTTON_Callback+0x28>
 801cb8e:	4b32      	ldr	r3, [pc, #200]	; (801cc58 <BUTTON_Callback+0x168>)
 801cb90:	4621      	mov	r1, r4
 801cb92:	4628      	mov	r0, r5
 801cb94:	681b      	ldr	r3, [r3, #0]
 801cb96:	4798      	blx	r3
 801cb98:	e7c1      	b.n	801cb1e <BUTTON_Callback+0x2e>
 801cb9a:	68e3      	ldr	r3, [r4, #12]
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d1bb      	bne.n	801cb18 <BUTTON_Callback+0x28>
 801cba0:	4628      	mov	r0, r5
 801cba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cba6:	f001 facf 	bl	801e148 <WIDGET_AndState>
 801cbaa:	e7b5      	b.n	801cb18 <BUTTON_Callback+0x28>
 801cbac:	4b2b      	ldr	r3, [pc, #172]	; (801cc5c <BUTTON_Callback+0x16c>)
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d0b4      	beq.n	801cb1e <BUTTON_Callback+0x2e>
 801cbb4:	4621      	mov	r1, r4
 801cbb6:	4628      	mov	r0, r5
 801cbb8:	4798      	blx	r3
 801cbba:	e7b0      	b.n	801cb1e <BUTTON_Callback+0x2e>
 801cbbc:	4628      	mov	r0, r5
 801cbbe:	f7f4 f89f 	bl	8010d00 <GUI_ALLOC_LockH>
 801cbc2:	ab02      	add	r3, sp, #8
 801cbc4:	f843 0d04 	str.w	r0, [r3, #-4]!
 801cbc8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 801cbca:	6814      	ldr	r4, [r2, #0]
 801cbcc:	4618      	mov	r0, r3
 801cbce:	f7f4 f8a9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cbd2:	2c00      	cmp	r4, #0
 801cbd4:	d0a3      	beq.n	801cb1e <BUTTON_Callback+0x2e>
 801cbd6:	4628      	mov	r0, r5
 801cbd8:	47a0      	blx	r4
 801cbda:	e7a0      	b.n	801cb1e <BUTTON_Callback+0x2e>
 801cbdc:	2900      	cmp	r1, #0
 801cbde:	dddd      	ble.n	801cb9c <BUTTON_Callback+0xac>
 801cbe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cbe4:	4628      	mov	r0, r5
 801cbe6:	f001 fa93 	bl	801e110 <WIDGET_OrState>
 801cbea:	4628      	mov	r0, r5
 801cbec:	f7f4 f888 	bl	8010d00 <GUI_ALLOC_LockH>
 801cbf0:	ac02      	add	r4, sp, #8
 801cbf2:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801cbf4:	f844 0d04 	str.w	r0, [r4, #-4]!
 801cbf8:	4620      	mov	r0, r4
 801cbfa:	f7f4 f893 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cbfe:	07b1      	lsls	r1, r6, #30
 801cc00:	d503      	bpl.n	801cc0a <BUTTON_Callback+0x11a>
 801cc02:	2101      	movs	r1, #1
 801cc04:	4628      	mov	r0, r5
 801cc06:	f7fe fc31 	bl	801b46c <WM_NotifyParent>
 801cc0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cc0e:	4628      	mov	r0, r5
 801cc10:	f001 fa9a 	bl	801e148 <WIDGET_AndState>
 801cc14:	4628      	mov	r0, r5
 801cc16:	f7f4 f873 	bl	8010d00 <GUI_ALLOC_LockH>
 801cc1a:	4603      	mov	r3, r0
 801cc1c:	4620      	mov	r0, r4
 801cc1e:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 801cc20:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801cc22:	9301      	str	r3, [sp, #4]
 801cc24:	f7f4 f87e 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cc28:	4630      	mov	r0, r6
 801cc2a:	f7f5 fed3 	bl	80129d4 <GUI_StoreKey>
 801cc2e:	07a3      	lsls	r3, r4, #30
 801cc30:	f57f af75 	bpl.w	801cb1e <BUTTON_Callback+0x2e>
 801cc34:	4628      	mov	r0, r5
 801cc36:	2102      	movs	r1, #2
 801cc38:	f7fe fc18 	bl	801b46c <WM_NotifyParent>
 801cc3c:	e76f      	b.n	801cb1e <BUTTON_Callback+0x2e>
 801cc3e:	f001 fa83 	bl	801e148 <WIDGET_AndState>
 801cc42:	4628      	mov	r0, r5
 801cc44:	f7f4 f85c 	bl	8010d00 <GUI_ALLOC_LockH>
 801cc48:	ab02      	add	r3, sp, #8
 801cc4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801cc4c:	f843 0d04 	str.w	r0, [r3, #-4]!
 801cc50:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801cc52:	4618      	mov	r0, r3
 801cc54:	e7e6      	b.n	801cc24 <BUTTON_Callback+0x134>
 801cc56:	bf00      	nop
 801cc58:	20000080 	.word	0x20000080
 801cc5c:	200008b0 	.word	0x200008b0

0801cc60 <BUTTON_CreateEx>:
 801cc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc64:	b087      	sub	sp, #28
 801cc66:	4680      	mov	r8, r0
 801cc68:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cc6a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cc6c:	4c1c      	ldr	r4, [pc, #112]	; (801cce0 <BUTTON_CreateEx+0x80>)
 801cc6e:	4689      	mov	r9, r1
 801cc70:	4692      	mov	sl, r2
 801cc72:	469b      	mov	fp, r3
 801cc74:	254c      	movs	r5, #76	; 0x4c
 801cc76:	f7f6 f82b 	bl	8012cd0 <GUI_Lock>
 801cc7a:	9601      	str	r6, [sp, #4]
 801cc7c:	9700      	str	r7, [sp, #0]
 801cc7e:	465b      	mov	r3, fp
 801cc80:	4652      	mov	r2, sl
 801cc82:	4649      	mov	r1, r9
 801cc84:	4640      	mov	r0, r8
 801cc86:	9503      	str	r5, [sp, #12]
 801cc88:	9402      	str	r4, [sp, #8]
 801cc8a:	f7fd f9bd 	bl	801a008 <WM_CreateWindowAsChild>
 801cc8e:	4606      	mov	r6, r0
 801cc90:	b300      	cbz	r0, 801ccd4 <BUTTON_CreateEx+0x74>
 801cc92:	f7f4 f835 	bl	8010d00 <GUI_ALLOC_LockH>
 801cc96:	4f13      	ldr	r7, [pc, #76]	; (801cce4 <BUTTON_CreateEx+0x84>)
 801cc98:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801cc9a:	9005      	str	r0, [sp, #20]
 801cc9c:	2210      	movs	r2, #16
 801cc9e:	1d3d      	adds	r5, r7, #4
 801cca0:	f001 fa18 	bl	801e0d4 <WIDGET__Init>
 801cca4:	f10d 0e18 	add.w	lr, sp, #24
 801cca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ccaa:	f85e cd04 	ldr.w	ip, [lr, #-4]!
 801ccae:	f10c 0434 	add.w	r4, ip, #52	; 0x34
 801ccb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ccb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ccb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ccb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801ccbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801ccc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ccc2:	f8cc 3064 	str.w	r3, [ip, #100]	; 0x64
 801ccc6:	4670      	mov	r0, lr
 801ccc8:	f7f4 f82c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ccce:	4630      	mov	r0, r6
 801ccd0:	685b      	ldr	r3, [r3, #4]
 801ccd2:	4798      	blx	r3
 801ccd4:	f7f5 fff2 	bl	8012cbc <GUI_Unlock>
 801ccd8:	4630      	mov	r0, r6
 801ccda:	b007      	add	sp, #28
 801ccdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cce0:	0801caf1 	.word	0x0801caf1
 801cce4:	20000080 	.word	0x20000080

0801cce8 <BUTTON_CreateAsChild>:
 801cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccec:	b087      	sub	sp, #28
 801ccee:	4680      	mov	r8, r0
 801ccf0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ccf2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ccf4:	4c1c      	ldr	r4, [pc, #112]	; (801cd68 <BUTTON_CreateAsChild+0x80>)
 801ccf6:	4689      	mov	r9, r1
 801ccf8:	4692      	mov	sl, r2
 801ccfa:	469b      	mov	fp, r3
 801ccfc:	254c      	movs	r5, #76	; 0x4c
 801ccfe:	f7f5 ffe7 	bl	8012cd0 <GUI_Lock>
 801cd02:	9601      	str	r6, [sp, #4]
 801cd04:	9700      	str	r7, [sp, #0]
 801cd06:	465b      	mov	r3, fp
 801cd08:	4652      	mov	r2, sl
 801cd0a:	4649      	mov	r1, r9
 801cd0c:	4640      	mov	r0, r8
 801cd0e:	9503      	str	r5, [sp, #12]
 801cd10:	9402      	str	r4, [sp, #8]
 801cd12:	f7fd f979 	bl	801a008 <WM_CreateWindowAsChild>
 801cd16:	4606      	mov	r6, r0
 801cd18:	b300      	cbz	r0, 801cd5c <BUTTON_CreateAsChild+0x74>
 801cd1a:	f7f3 fff1 	bl	8010d00 <GUI_ALLOC_LockH>
 801cd1e:	4f13      	ldr	r7, [pc, #76]	; (801cd6c <BUTTON_CreateAsChild+0x84>)
 801cd20:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cd22:	9005      	str	r0, [sp, #20]
 801cd24:	2210      	movs	r2, #16
 801cd26:	1d3d      	adds	r5, r7, #4
 801cd28:	f001 f9d4 	bl	801e0d4 <WIDGET__Init>
 801cd2c:	f10d 0e18 	add.w	lr, sp, #24
 801cd30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cd32:	f85e cd04 	ldr.w	ip, [lr, #-4]!
 801cd36:	f10c 0434 	add.w	r4, ip, #52	; 0x34
 801cd3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cd3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cd3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cd40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801cd44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801cd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd4a:	f8cc 3064 	str.w	r3, [ip, #100]	; 0x64
 801cd4e:	4670      	mov	r0, lr
 801cd50:	f7f3 ffe8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd56:	4630      	mov	r0, r6
 801cd58:	685b      	ldr	r3, [r3, #4]
 801cd5a:	4798      	blx	r3
 801cd5c:	f7f5 ffae 	bl	8012cbc <GUI_Unlock>
 801cd60:	4630      	mov	r0, r6
 801cd62:	b007      	add	sp, #28
 801cd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd68:	0801caf1 	.word	0x0801caf1
 801cd6c:	20000080 	.word	0x20000080

0801cd70 <_Create>:
 801cd70:	b530      	push	{r4, r5, lr}
 801cd72:	b08b      	sub	sp, #44	; 0x2c
 801cd74:	2100      	movs	r1, #0
 801cd76:	4604      	mov	r4, r0
 801cd78:	2224      	movs	r2, #36	; 0x24
 801cd7a:	a801      	add	r0, sp, #4
 801cd7c:	f008 faca 	bl	8025314 <memset>
 801cd80:	4620      	mov	r0, r4
 801cd82:	f7f3 ffbd 	bl	8010d00 <GUI_ALLOC_LockH>
 801cd86:	ab0a      	add	r3, sp, #40	; 0x28
 801cd88:	6e42      	ldr	r2, [r0, #100]	; 0x64
 801cd8a:	f843 0d28 	str.w	r0, [r3, #-40]!
 801cd8e:	6895      	ldr	r5, [r2, #8]
 801cd90:	4618      	mov	r0, r3
 801cd92:	f7f3 ffc7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cd96:	2200      	movs	r2, #0
 801cd98:	682b      	ldr	r3, [r5, #0]
 801cd9a:	9401      	str	r4, [sp, #4]
 801cd9c:	9202      	str	r2, [sp, #8]
 801cd9e:	a801      	add	r0, sp, #4
 801cda0:	4798      	blx	r3
 801cda2:	b00b      	add	sp, #44	; 0x2c
 801cda4:	bd30      	pop	{r4, r5, pc}
 801cda6:	bf00      	nop

0801cda8 <_Paint>:
 801cda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdac:	b08a      	sub	sp, #40	; 0x28
 801cdae:	4606      	mov	r6, r0
 801cdb0:	f7f3 ffa6 	bl	8010d00 <GUI_ALLOC_LockH>
 801cdb4:	4603      	mov	r3, r0
 801cdb6:	a80a      	add	r0, sp, #40	; 0x28
 801cdb8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801cdba:	f840 3d28 	str.w	r3, [r0, #-40]!
 801cdbe:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 801cdc0:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 801cdc4:	f7f3 ffae 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cdc8:	4630      	mov	r0, r6
 801cdca:	f005 f8d5 	bl	8021f78 <WM_GetWindowSizeX>
 801cdce:	4607      	mov	r7, r0
 801cdd0:	4630      	mov	r0, r6
 801cdd2:	f005 f8ef 	bl	8021fb4 <WM_GetWindowSizeY>
 801cdd6:	3f01      	subs	r7, #1
 801cdd8:	2300      	movs	r3, #0
 801cdda:	3801      	subs	r0, #1
 801cddc:	f015 0510 	ands.w	r5, r5, #16
 801cde0:	9008      	str	r0, [sp, #32]
 801cde2:	9707      	str	r7, [sp, #28]
 801cde4:	9601      	str	r6, [sp, #4]
 801cde6:	9306      	str	r3, [sp, #24]
 801cde8:	9305      	str	r3, [sp, #20]
 801cdea:	d11d      	bne.n	801ce28 <_Paint+0x80>
 801cdec:	f418 7f80 	tst.w	r8, #256	; 0x100
 801cdf0:	d118      	bne.n	801ce24 <_Paint+0x7c>
 801cdf2:	f018 0f01 	tst.w	r8, #1
 801cdf6:	bf14      	ite	ne
 801cdf8:	2301      	movne	r3, #1
 801cdfa:	2302      	moveq	r3, #2
 801cdfc:	9303      	str	r3, [sp, #12]
 801cdfe:	2305      	movs	r3, #5
 801ce00:	9302      	str	r3, [sp, #8]
 801ce02:	a801      	add	r0, sp, #4
 801ce04:	47a0      	blx	r4
 801ce06:	2306      	movs	r3, #6
 801ce08:	9302      	str	r3, [sp, #8]
 801ce0a:	a801      	add	r0, sp, #4
 801ce0c:	47a0      	blx	r4
 801ce0e:	2312      	movs	r3, #18
 801ce10:	9302      	str	r3, [sp, #8]
 801ce12:	a801      	add	r0, sp, #4
 801ce14:	47a0      	blx	r4
 801ce16:	230a      	movs	r3, #10
 801ce18:	a801      	add	r0, sp, #4
 801ce1a:	9302      	str	r3, [sp, #8]
 801ce1c:	47a0      	blx	r4
 801ce1e:	b00a      	add	sp, #40	; 0x28
 801ce20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce24:	9503      	str	r5, [sp, #12]
 801ce26:	e7ea      	b.n	801cdfe <_Paint+0x56>
 801ce28:	2303      	movs	r3, #3
 801ce2a:	9303      	str	r3, [sp, #12]
 801ce2c:	e7e7      	b.n	801cdfe <_Paint+0x56>
 801ce2e:	bf00      	nop

0801ce30 <BUTTON_SetDefaultSkin>:
 801ce30:	4b05      	ldr	r3, [pc, #20]	; (801ce48 <BUTTON_SetDefaultSkin+0x18>)
 801ce32:	4906      	ldr	r1, [pc, #24]	; (801ce4c <BUTTON_SetDefaultSkin+0x1c>)
 801ce34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ce36:	b410      	push	{r4}
 801ce38:	4c05      	ldr	r4, [pc, #20]	; (801ce50 <BUTTON_SetDefaultSkin+0x20>)
 801ce3a:	6258      	str	r0, [r3, #36]	; 0x24
 801ce3c:	600c      	str	r4, [r1, #0]
 801ce3e:	4610      	mov	r0, r2
 801ce40:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce44:	4770      	bx	lr
 801ce46:	bf00      	nop
 801ce48:	20000084 	.word	0x20000084
 801ce4c:	200000b4 	.word	0x200000b4
 801ce50:	200000b8 	.word	0x200000b8

0801ce54 <BUTTON_DrawSkinFlex>:
 801ce54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce56:	4a95      	ldr	r2, [pc, #596]	; (801d0ac <BUTTON_DrawSkinFlex+0x258>)
 801ce58:	6881      	ldr	r1, [r0, #8]
 801ce5a:	6843      	ldr	r3, [r0, #4]
 801ce5c:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 801ce60:	b089      	sub	sp, #36	; 0x24
 801ce62:	4604      	mov	r4, r0
 801ce64:	2b12      	cmp	r3, #18
 801ce66:	d83f      	bhi.n	801cee8 <BUTTON_DrawSkinFlex+0x94>
 801ce68:	e8df f003 	tbb	[pc, r3]
 801ce6c:	3e3e3eae 	.word	0x3e3e3eae
 801ce70:	3e960a3e 	.word	0x3e960a3e
 801ce74:	3e3e3e3e 	.word	0x3e3e3e3e
 801ce78:	3e3e3e3e 	.word	0x3e3e3e3e
 801ce7c:	3e3e      	.short	0x3e3e
 801ce7e:	41          	.byte	0x41
 801ce7f:	00          	.byte	0x00
 801ce80:	69f5      	ldr	r5, [r6, #28]
 801ce82:	2d00      	cmp	r5, #0
 801ce84:	f040 80b2 	bne.w	801cfec <BUTTON_DrawSkinFlex+0x198>
 801ce88:	1f37      	subs	r7, r6, #4
 801ce8a:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801ce8e:	f7f4 fc95 	bl	80117bc <GUI_SetColor>
 801ce92:	f104 0010 	add.w	r0, r4, #16
 801ce96:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801ce98:	1b5b      	subs	r3, r3, r5
 801ce9a:	1b52      	subs	r2, r2, r5
 801ce9c:	4429      	add	r1, r5
 801ce9e:	4428      	add	r0, r5
 801cea0:	3501      	adds	r5, #1
 801cea2:	f001 fd55 	bl	801e950 <GUI_DrawRect>
 801cea6:	2d02      	cmp	r5, #2
 801cea8:	d1ef      	bne.n	801ce8a <BUTTON_DrawSkinFlex+0x36>
 801ceaa:	6932      	ldr	r2, [r6, #16]
 801ceac:	6961      	ldr	r1, [r4, #20]
 801ceae:	69e3      	ldr	r3, [r4, #28]
 801ceb0:	9201      	str	r2, [sp, #4]
 801ceb2:	69a2      	ldr	r2, [r4, #24]
 801ceb4:	6920      	ldr	r0, [r4, #16]
 801ceb6:	68f7      	ldr	r7, [r6, #12]
 801ceb8:	9700      	str	r7, [sp, #0]
 801ceba:	440b      	add	r3, r1
 801cebc:	105b      	asrs	r3, r3, #1
 801cebe:	3102      	adds	r1, #2
 801cec0:	1b52      	subs	r2, r2, r5
 801cec2:	4428      	add	r0, r5
 801cec4:	f002 f88c 	bl	801efe0 <GUI_DrawGradientV>
 801cec8:	69e3      	ldr	r3, [r4, #28]
 801ceca:	6961      	ldr	r1, [r4, #20]
 801cecc:	69b2      	ldr	r2, [r6, #24]
 801cece:	9201      	str	r2, [sp, #4]
 801ced0:	69a2      	ldr	r2, [r4, #24]
 801ced2:	6920      	ldr	r0, [r4, #16]
 801ced4:	6974      	ldr	r4, [r6, #20]
 801ced6:	9400      	str	r4, [sp, #0]
 801ced8:	4419      	add	r1, r3
 801ceda:	1049      	asrs	r1, r1, #1
 801cedc:	3101      	adds	r1, #1
 801cede:	3b02      	subs	r3, #2
 801cee0:	1b52      	subs	r2, r2, r5
 801cee2:	4428      	add	r0, r5
 801cee4:	f002 f87c 	bl	801efe0 <GUI_DrawGradientV>
 801cee8:	2000      	movs	r0, #0
 801ceea:	b009      	add	sp, #36	; 0x24
 801ceec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ceee:	6800      	ldr	r0, [r0, #0]
 801cef0:	f7f3 ff06 	bl	8010d00 <GUI_ALLOC_LockH>
 801cef4:	6e85      	ldr	r5, [r0, #104]	; 0x68
 801cef6:	9004      	str	r0, [sp, #16]
 801cef8:	2d00      	cmp	r5, #0
 801cefa:	f000 80cf 	beq.w	801d09c <BUTTON_DrawSkinFlex+0x248>
 801cefe:	68a3      	ldr	r3, [r4, #8]
 801cf00:	f9b0 705c 	ldrsh.w	r7, [r0, #92]	; 0x5c
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	f000 80c7 	beq.w	801d098 <BUTTON_DrawSkinFlex+0x244>
 801cf0a:	2b03      	cmp	r3, #3
 801cf0c:	bf14      	ite	ne
 801cf0e:	2300      	movne	r3, #0
 801cf10:	2302      	moveq	r3, #2
 801cf12:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801cf16:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801cf18:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 801cf1a:	f7f4 fcb1 	bl	8011880 <GUI_SetFont>
 801cf1e:	4620      	mov	r0, r4
 801cf20:	f7f4 fc4c 	bl	80117bc <GUI_SetColor>
 801cf24:	ac08      	add	r4, sp, #32
 801cf26:	a806      	add	r0, sp, #24
 801cf28:	f7f4 fab0 	bl	801148c <GUI_GetClientRect>
 801cf2c:	f8b6 e01c 	ldrh.w	lr, [r6, #28]
 801cf30:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801cf34:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801cf38:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801cf3c:	f854 6d10 	ldr.w	r6, [r4, #-16]!
 801cf40:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801cf44:	4471      	add	r1, lr
 801cf46:	ebce 0202 	rsb	r2, lr, r2
 801cf4a:	3002      	adds	r0, #2
 801cf4c:	3b02      	subs	r3, #2
 801cf4e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801cf52:	f8ad 201c 	strh.w	r2, [sp, #28]
 801cf56:	f9b6 105e 	ldrsh.w	r1, [r6, #94]	; 0x5e
 801cf5a:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
 801cf5e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801cf62:	a806      	add	r0, sp, #24
 801cf64:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cf68:	f7f4 fb2a 	bl	80115c0 <GUI_MoveRect>
 801cf6c:	4620      	mov	r0, r4
 801cf6e:	f7f3 fed9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cf72:	2002      	movs	r0, #2
 801cf74:	f7f4 fcb4 	bl	80118e0 <GUI_SetTextMode>
 801cf78:	4628      	mov	r0, r5
 801cf7a:	f7f3 fec1 	bl	8010d00 <GUI_ALLOC_LockH>
 801cf7e:	ac08      	add	r4, sp, #32
 801cf80:	a906      	add	r1, sp, #24
 801cf82:	f844 0d0c 	str.w	r0, [r4, #-12]!
 801cf86:	463a      	mov	r2, r7
 801cf88:	f7f5 fab2 	bl	80124f0 <GUI_DispStringInRect>
 801cf8c:	4620      	mov	r0, r4
 801cf8e:	f7f3 fec9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cf92:	2000      	movs	r0, #0
 801cf94:	b009      	add	sp, #36	; 0x24
 801cf96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf98:	6800      	ldr	r0, [r0, #0]
 801cf9a:	f7f3 feb1 	bl	8010d00 <GUI_ALLOC_LockH>
 801cf9e:	9004      	str	r0, [sp, #16]
 801cfa0:	6820      	ldr	r0, [r4, #0]
 801cfa2:	f7ff fc2b 	bl	801c7fc <WM__IsEnabled>
 801cfa6:	b9a8      	cbnz	r0, 801cfd4 <BUTTON_DrawSkinFlex+0x180>
 801cfa8:	9b04      	ldr	r3, [sp, #16]
 801cfaa:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 801cfac:	b905      	cbnz	r5, 801cfb0 <BUTTON_DrawSkinFlex+0x15c>
 801cfae:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801cfb0:	a804      	add	r0, sp, #16
 801cfb2:	f7f3 feb7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801cfb6:	2300      	movs	r3, #0
 801cfb8:	4628      	mov	r0, r5
 801cfba:	6821      	ldr	r1, [r4, #0]
 801cfbc:	461a      	mov	r2, r3
 801cfbe:	f000 fe47 	bl	801dc50 <GUI_DRAW__Draw>
 801cfc2:	2000      	movs	r0, #0
 801cfc4:	b009      	add	sp, #36	; 0x24
 801cfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfc8:	6800      	ldr	r0, [r0, #0]
 801cfca:	f005 fb23 	bl	8022614 <WM_SetHasTrans>
 801cfce:	2000      	movs	r0, #0
 801cfd0:	b009      	add	sp, #36	; 0x24
 801cfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfd4:	68a3      	ldr	r3, [r4, #8]
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d164      	bne.n	801d0a4 <BUTTON_DrawSkinFlex+0x250>
 801cfda:	9a04      	ldr	r2, [sp, #16]
 801cfdc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	bf14      	ite	ne
 801cfe2:	236c      	movne	r3, #108	; 0x6c
 801cfe4:	2368      	moveq	r3, #104	; 0x68
 801cfe6:	4413      	add	r3, r2
 801cfe8:	685d      	ldr	r5, [r3, #4]
 801cfea:	e7e1      	b.n	801cfb0 <BUTTON_DrawSkinFlex+0x15c>
 801cfec:	68b3      	ldr	r3, [r6, #8]
 801cfee:	9303      	str	r3, [sp, #12]
 801cff0:	6873      	ldr	r3, [r6, #4]
 801cff2:	9302      	str	r3, [sp, #8]
 801cff4:	4637      	mov	r7, r6
 801cff6:	f100 0114 	add.w	r1, r0, #20
 801cffa:	f857 0904 	ldr.w	r0, [r7], #-4
 801cffe:	c90e      	ldmia	r1, {r1, r2, r3}
 801d000:	9001      	str	r0, [sp, #4]
 801d002:	6920      	ldr	r0, [r4, #16]
 801d004:	9500      	str	r5, [sp, #0]
 801d006:	f003 f8a5 	bl	8020154 <GUI__DrawTwinArc4>
 801d00a:	2500      	movs	r5, #0
 801d00c:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801d010:	f7f4 fbd4 	bl	80117bc <GUI_SetColor>
 801d014:	69f3      	ldr	r3, [r6, #28]
 801d016:	69a2      	ldr	r2, [r4, #24]
 801d018:	6921      	ldr	r1, [r4, #16]
 801d01a:	6960      	ldr	r0, [r4, #20]
 801d01c:	1ad2      	subs	r2, r2, r3
 801d01e:	4419      	add	r1, r3
 801d020:	4428      	add	r0, r5
 801d022:	f7f5 fba1 	bl	8012768 <GUI_DrawHLine>
 801d026:	69f3      	ldr	r3, [r6, #28]
 801d028:	69a2      	ldr	r2, [r4, #24]
 801d02a:	6921      	ldr	r1, [r4, #16]
 801d02c:	69e0      	ldr	r0, [r4, #28]
 801d02e:	1ad2      	subs	r2, r2, r3
 801d030:	4419      	add	r1, r3
 801d032:	1b40      	subs	r0, r0, r5
 801d034:	f7f5 fb98 	bl	8012768 <GUI_DrawHLine>
 801d038:	69f3      	ldr	r3, [r6, #28]
 801d03a:	69e2      	ldr	r2, [r4, #28]
 801d03c:	6961      	ldr	r1, [r4, #20]
 801d03e:	6920      	ldr	r0, [r4, #16]
 801d040:	1ad2      	subs	r2, r2, r3
 801d042:	4419      	add	r1, r3
 801d044:	4428      	add	r0, r5
 801d046:	f7f5 fbe5 	bl	8012814 <GUI_DrawVLine>
 801d04a:	69f3      	ldr	r3, [r6, #28]
 801d04c:	69e2      	ldr	r2, [r4, #28]
 801d04e:	6961      	ldr	r1, [r4, #20]
 801d050:	69a0      	ldr	r0, [r4, #24]
 801d052:	1ad2      	subs	r2, r2, r3
 801d054:	1b40      	subs	r0, r0, r5
 801d056:	4419      	add	r1, r3
 801d058:	3501      	adds	r5, #1
 801d05a:	f7f5 fbdb 	bl	8012814 <GUI_DrawVLine>
 801d05e:	2d02      	cmp	r5, #2
 801d060:	d1d4      	bne.n	801d00c <BUTTON_DrawSkinFlex+0x1b8>
 801d062:	68b0      	ldr	r0, [r6, #8]
 801d064:	f7f4 fbaa 	bl	80117bc <GUI_SetColor>
 801d068:	69f1      	ldr	r1, [r6, #28]
 801d06a:	6920      	ldr	r0, [r4, #16]
 801d06c:	6965      	ldr	r5, [r4, #20]
 801d06e:	69e3      	ldr	r3, [r4, #28]
 801d070:	1842      	adds	r2, r0, r1
 801d072:	1a5b      	subs	r3, r3, r1
 801d074:	3a01      	subs	r2, #1
 801d076:	4429      	add	r1, r5
 801d078:	3002      	adds	r0, #2
 801d07a:	f7f5 fbf5 	bl	8012868 <GUI_FillRect>
 801d07e:	69f1      	ldr	r1, [r6, #28]
 801d080:	69a2      	ldr	r2, [r4, #24]
 801d082:	6965      	ldr	r5, [r4, #20]
 801d084:	69e3      	ldr	r3, [r4, #28]
 801d086:	1a50      	subs	r0, r2, r1
 801d088:	1a5b      	subs	r3, r3, r1
 801d08a:	3001      	adds	r0, #1
 801d08c:	4429      	add	r1, r5
 801d08e:	3a02      	subs	r2, #2
 801d090:	f7f5 fbea 	bl	8012868 <GUI_FillRect>
 801d094:	69f5      	ldr	r5, [r6, #28]
 801d096:	e708      	b.n	801ceaa <BUTTON_DrawSkinFlex+0x56>
 801d098:	2301      	movs	r3, #1
 801d09a:	e73a      	b.n	801cf12 <BUTTON_DrawSkinFlex+0xbe>
 801d09c:	a804      	add	r0, sp, #16
 801d09e:	f7f3 fe41 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d0a2:	e721      	b.n	801cee8 <BUTTON_DrawSkinFlex+0x94>
 801d0a4:	9b04      	ldr	r3, [sp, #16]
 801d0a6:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801d0a8:	e782      	b.n	801cfb0 <BUTTON_DrawSkinFlex+0x15c>
 801d0aa:	bf00      	nop
 801d0ac:	080260dc 	.word	0x080260dc

0801d0b0 <GUI_CreateDialogBox>:
 801d0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d0b4:	4604      	mov	r4, r0
 801d0b6:	b082      	sub	sp, #8
 801d0b8:	460d      	mov	r5, r1
 801d0ba:	4616      	mov	r6, r2
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d038      	beq.n	801d132 <GUI_CreateDialogBox+0x82>
 801d0c0:	469a      	mov	sl, r3
 801d0c2:	9600      	str	r6, [sp, #0]
 801d0c4:	6826      	ldr	r6, [r4, #0]
 801d0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d0ca:	4651      	mov	r1, sl
 801d0cc:	4620      	mov	r0, r4
 801d0ce:	47b0      	blx	r6
 801d0d0:	4607      	mov	r7, r0
 801d0d2:	b918      	cbnz	r0, 801d0dc <GUI_CreateDialogBox+0x2c>
 801d0d4:	4638      	mov	r0, r7
 801d0d6:	b002      	add	sp, #8
 801d0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0dc:	f7fd ffd8 	bl	801b090 <WM_GetClientWindow>
 801d0e0:	8a61      	ldrh	r1, [r4, #18]
 801d0e2:	4680      	mov	r8, r0
 801d0e4:	4638      	mov	r0, r7
 801d0e6:	f001 f813 	bl	801e110 <WIDGET_OrState>
 801d0ea:	4638      	mov	r0, r7
 801d0ec:	f7fe fc4e 	bl	801b98c <WM_ShowWindow>
 801d0f0:	3d01      	subs	r5, #1
 801d0f2:	4640      	mov	r0, r8
 801d0f4:	f7fe fc4a 	bl	801b98c <WM_ShowWindow>
 801d0f8:	2d00      	cmp	r5, #0
 801d0fa:	bfc8      	it	gt
 801d0fc:	f04f 0900 	movgt.w	r9, #0
 801d100:	dc04      	bgt.n	801d10c <GUI_CreateDialogBox+0x5c>
 801d102:	e01a      	b.n	801d13a <GUI_CreateDialogBox+0x8a>
 801d104:	f7fe fc42 	bl	801b98c <WM_ShowWindow>
 801d108:	3d01      	subs	r5, #1
 801d10a:	d016      	beq.n	801d13a <GUI_CreateDialogBox+0x8a>
 801d10c:	f854 6f1c 	ldr.w	r6, [r4, #28]!
 801d110:	f8cd 9000 	str.w	r9, [sp]
 801d114:	2300      	movs	r3, #0
 801d116:	4620      	mov	r0, r4
 801d118:	461a      	mov	r2, r3
 801d11a:	4641      	mov	r1, r8
 801d11c:	47b0      	blx	r6
 801d11e:	4606      	mov	r6, r0
 801d120:	2800      	cmp	r0, #0
 801d122:	d1ef      	bne.n	801d104 <GUI_CreateDialogBox+0x54>
 801d124:	4638      	mov	r0, r7
 801d126:	f7fd f85d 	bl	801a1e4 <WM_DeleteWindow>
 801d12a:	4630      	mov	r0, r6
 801d12c:	b002      	add	sp, #8
 801d12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d132:	f7fd ffbb 	bl	801b0ac <WM_GetDesktopWindow>
 801d136:	4682      	mov	sl, r0
 801d138:	e7c3      	b.n	801d0c2 <GUI_CreateDialogBox+0x12>
 801d13a:	4640      	mov	r0, r8
 801d13c:	211d      	movs	r1, #29
 801d13e:	f7fe fa01 	bl	801b544 <WM_SendMessageNoPara>
 801d142:	f1ba 3fff 	cmp.w	sl, #4294967295
 801d146:	d0c5      	beq.n	801d0d4 <GUI_CreateDialogBox+0x24>
 801d148:	f7f5 fdc2 	bl	8012cd0 <GUI_Lock>
 801d14c:	f7fe f888 	bl	801b260 <WM_GetFocusedWindow>
 801d150:	b960      	cbnz	r0, 801d16c <GUI_CreateDialogBox+0xbc>
 801d152:	45ba      	cmp	sl, r7
 801d154:	d002      	beq.n	801d15c <GUI_CreateDialogBox+0xac>
 801d156:	4638      	mov	r0, r7
 801d158:	f005 f9dc 	bl	8022514 <WM_SetFocusOnNextChild>
 801d15c:	f7f5 fdae 	bl	8012cbc <GUI_Unlock>
 801d160:	4638      	mov	r0, r7
 801d162:	b002      	add	sp, #8
 801d164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d168:	2800      	cmp	r0, #0
 801d16a:	d0f4      	beq.n	801d156 <GUI_CreateDialogBox+0xa6>
 801d16c:	f7f3 fdbe 	bl	8010cec <GUI_ALLOC_h2p>
 801d170:	6980      	ldr	r0, [r0, #24]
 801d172:	4287      	cmp	r7, r0
 801d174:	d1f8      	bne.n	801d168 <GUI_CreateDialogBox+0xb8>
 801d176:	e7f1      	b.n	801d15c <GUI_CreateDialogBox+0xac>

0801d178 <GUI_EndDialog>:
 801d178:	b530      	push	{r4, r5, lr}
 801d17a:	b085      	sub	sp, #20
 801d17c:	2300      	movs	r3, #0
 801d17e:	222a      	movs	r2, #42	; 0x2a
 801d180:	460d      	mov	r5, r1
 801d182:	4669      	mov	r1, sp
 801d184:	9301      	str	r3, [sp, #4]
 801d186:	9302      	str	r3, [sp, #8]
 801d188:	9303      	str	r3, [sp, #12]
 801d18a:	9200      	str	r2, [sp, #0]
 801d18c:	4604      	mov	r4, r0
 801d18e:	f7fc feb1 	bl	8019ef4 <WM_SendMessage>
 801d192:	9b03      	ldr	r3, [sp, #12]
 801d194:	b113      	cbz	r3, 801d19c <GUI_EndDialog+0x24>
 801d196:	2201      	movs	r2, #1
 801d198:	e883 0024 	stmia.w	r3, {r2, r5}
 801d19c:	f7f5 fd98 	bl	8012cd0 <GUI_Lock>
 801d1a0:	4620      	mov	r0, r4
 801d1a2:	f7fd fb47 	bl	801a834 <WM__DeleteSecure>
 801d1a6:	f7f5 fd89 	bl	8012cbc <GUI_Unlock>
 801d1aa:	b005      	add	sp, #20
 801d1ac:	bd30      	pop	{r4, r5, pc}
 801d1ae:	bf00      	nop

0801d1b0 <DROPDOWN_SetDefaultFont>:
 801d1b0:	4b01      	ldr	r3, [pc, #4]	; (801d1b8 <DROPDOWN_SetDefaultFont+0x8>)
 801d1b2:	6018      	str	r0, [r3, #0]
 801d1b4:	4770      	bx	lr
 801d1b6:	bf00      	nop
 801d1b8:	20000324 	.word	0x20000324

0801d1bc <DROPDOWN_SetDefaultColor>:
 801d1bc:	2801      	cmp	r0, #1
 801d1be:	d901      	bls.n	801d1c4 <DROPDOWN_SetDefaultColor+0x8>
 801d1c0:	2000      	movs	r0, #0
 801d1c2:	4770      	bx	lr
 801d1c4:	4b03      	ldr	r3, [pc, #12]	; (801d1d4 <DROPDOWN_SetDefaultColor+0x18>)
 801d1c6:	3006      	adds	r0, #6
 801d1c8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801d1cc:	6858      	ldr	r0, [r3, #4]
 801d1ce:	6059      	str	r1, [r3, #4]
 801d1d0:	4770      	bx	lr
 801d1d2:	bf00      	nop
 801d1d4:	20000324 	.word	0x20000324

0801d1d8 <_Create>:
 801d1d8:	b530      	push	{r4, r5, lr}
 801d1da:	b08b      	sub	sp, #44	; 0x2c
 801d1dc:	4605      	mov	r5, r0
 801d1de:	f7f3 fd8f 	bl	8010d00 <GUI_ALLOC_LockH>
 801d1e2:	ab0a      	add	r3, sp, #40	; 0x28
 801d1e4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 801d1e8:	f843 0d28 	str.w	r0, [r3, #-40]!
 801d1ec:	4618      	mov	r0, r3
 801d1ee:	6894      	ldr	r4, [r2, #8]
 801d1f0:	f7f3 fd98 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d1f4:	a80a      	add	r0, sp, #40	; 0x28
 801d1f6:	2200      	movs	r2, #0
 801d1f8:	6823      	ldr	r3, [r4, #0]
 801d1fa:	f840 5d24 	str.w	r5, [r0, #-36]!
 801d1fe:	9202      	str	r2, [sp, #8]
 801d200:	4798      	blx	r3
 801d202:	b00b      	add	sp, #44	; 0x2c
 801d204:	bd30      	pop	{r4, r5, pc}
 801d206:	bf00      	nop

0801d208 <_Paint>:
 801d208:	b570      	push	{r4, r5, r6, lr}
 801d20a:	b08e      	sub	sp, #56	; 0x38
 801d20c:	4604      	mov	r4, r0
 801d20e:	f7f3 fd77 	bl	8010d00 <GUI_ALLOC_LockH>
 801d212:	4603      	mov	r3, r0
 801d214:	a80e      	add	r0, sp, #56	; 0x38
 801d216:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 801d218:	f840 3d34 	str.w	r3, [r0, #-52]!
 801d21c:	f9b3 6034 	ldrsh.w	r6, [r3, #52]	; 0x34
 801d220:	f7f3 fd80 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d224:	4620      	mov	r0, r4
 801d226:	a903      	add	r1, sp, #12
 801d228:	f7fd ff0a 	bl	801b040 <WM_GetClientRectEx>
 801d22c:	2305      	movs	r3, #5
 801d22e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 801d232:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 801d236:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d23a:	9306      	str	r3, [sp, #24]
 801d23c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d240:	9009      	str	r0, [sp, #36]	; 0x24
 801d242:	910a      	str	r1, [sp, #40]	; 0x28
 801d244:	920b      	str	r2, [sp, #44]	; 0x2c
 801d246:	930c      	str	r3, [sp, #48]	; 0x30
 801d248:	9405      	str	r4, [sp, #20]
 801d24a:	a805      	add	r0, sp, #20
 801d24c:	47a8      	blx	r5
 801d24e:	4631      	mov	r1, r6
 801d250:	4620      	mov	r0, r4
 801d252:	f005 fa19 	bl	8022688 <DROPDOWN__GetpItemLocked>
 801d256:	9002      	str	r0, [sp, #8]
 801d258:	b138      	cbz	r0, 801d26a <_Paint+0x62>
 801d25a:	2312      	movs	r3, #18
 801d25c:	900d      	str	r0, [sp, #52]	; 0x34
 801d25e:	9306      	str	r3, [sp, #24]
 801d260:	a805      	add	r0, sp, #20
 801d262:	47a8      	blx	r5
 801d264:	a802      	add	r0, sp, #8
 801d266:	f7f3 fd5d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d26a:	2302      	movs	r3, #2
 801d26c:	a805      	add	r0, sp, #20
 801d26e:	9306      	str	r3, [sp, #24]
 801d270:	47a8      	blx	r5
 801d272:	b00e      	add	sp, #56	; 0x38
 801d274:	bd70      	pop	{r4, r5, r6, pc}
 801d276:	bf00      	nop

0801d278 <DROPDOWN_SetDefaultSkin>:
 801d278:	4b05      	ldr	r3, [pc, #20]	; (801d290 <DROPDOWN_SetDefaultSkin+0x18>)
 801d27a:	4906      	ldr	r1, [pc, #24]	; (801d294 <DROPDOWN_SetDefaultSkin+0x1c>)
 801d27c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d27e:	b410      	push	{r4}
 801d280:	4c05      	ldr	r4, [pc, #20]	; (801d298 <DROPDOWN_SetDefaultSkin+0x20>)
 801d282:	6318      	str	r0, [r3, #48]	; 0x30
 801d284:	600c      	str	r4, [r1, #0]
 801d286:	4610      	mov	r0, r2
 801d288:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d28c:	4770      	bx	lr
 801d28e:	bf00      	nop
 801d290:	20000324 	.word	0x20000324
 801d294:	2000035c 	.word	0x2000035c
 801d298:	20000144 	.word	0x20000144

0801d29c <DROPDOWN_DrawSkinFlex>:
 801d29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2a0:	4604      	mov	r4, r0
 801d2a2:	b088      	sub	sp, #32
 801d2a4:	6800      	ldr	r0, [r0, #0]
 801d2a6:	f7f3 fd2b 	bl	8010d00 <GUI_ALLOC_LockH>
 801d2aa:	4603      	mov	r3, r0
 801d2ac:	a808      	add	r0, sp, #32
 801d2ae:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 801d2b2:	f840 3d10 	str.w	r3, [r0, #-16]!
 801d2b6:	8e5f      	ldrh	r7, [r3, #50]	; 0x32
 801d2b8:	f7f3 fd34 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d2bc:	6820      	ldr	r0, [r4, #0]
 801d2be:	f7ff fa9d 	bl	801c7fc <WM__IsEnabled>
 801d2c2:	b926      	cbnz	r6, 801d2ce <DROPDOWN_DrawSkinFlex+0x32>
 801d2c4:	07fb      	lsls	r3, r7, #31
 801d2c6:	f140 80a4 	bpl.w	801d412 <DROPDOWN_DrawSkinFlex+0x176>
 801d2ca:	4d89      	ldr	r5, [pc, #548]	; (801d4f0 <DROPDOWN_DrawSkinFlex+0x254>)
 801d2cc:	e000      	b.n	801d2d0 <DROPDOWN_DrawSkinFlex+0x34>
 801d2ce:	4d89      	ldr	r5, [pc, #548]	; (801d4f4 <DROPDOWN_DrawSkinFlex+0x258>)
 801d2d0:	6863      	ldr	r3, [r4, #4]
 801d2d2:	2b12      	cmp	r3, #18
 801d2d4:	f200 8099 	bhi.w	801d40a <DROPDOWN_DrawSkinFlex+0x16e>
 801d2d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d2dc:	00970102 	.word	0x00970102
 801d2e0:	009700d9 	.word	0x009700d9
 801d2e4:	00130097 	.word	0x00130097
 801d2e8:	00970097 	.word	0x00970097
 801d2ec:	00970097 	.word	0x00970097
 801d2f0:	00970097 	.word	0x00970097
 801d2f4:	00970097 	.word	0x00970097
 801d2f8:	00970097 	.word	0x00970097
 801d2fc:	00970097 	.word	0x00970097
 801d300:	00a2      	.short	0x00a2
 801d302:	68ab      	ldr	r3, [r5, #8]
 801d304:	9303      	str	r3, [sp, #12]
 801d306:	686b      	ldr	r3, [r5, #4]
 801d308:	9302      	str	r3, [sp, #8]
 801d30a:	682b      	ldr	r3, [r5, #0]
 801d30c:	9301      	str	r3, [sp, #4]
 801d30e:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801d310:	f104 0010 	add.w	r0, r4, #16
 801d314:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801d316:	9600      	str	r6, [sp, #0]
 801d318:	f002 ff1c 	bl	8020154 <GUI__DrawTwinArc4>
 801d31c:	1f2f      	subs	r7, r5, #4
 801d31e:	2600      	movs	r6, #0
 801d320:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801d324:	f7f4 fa4a 	bl	80117bc <GUI_SetColor>
 801d328:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801d32a:	69a2      	ldr	r2, [r4, #24]
 801d32c:	6921      	ldr	r1, [r4, #16]
 801d32e:	6960      	ldr	r0, [r4, #20]
 801d330:	1ad2      	subs	r2, r2, r3
 801d332:	4419      	add	r1, r3
 801d334:	4430      	add	r0, r6
 801d336:	f7f5 fa17 	bl	8012768 <GUI_DrawHLine>
 801d33a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801d33c:	69a2      	ldr	r2, [r4, #24]
 801d33e:	6921      	ldr	r1, [r4, #16]
 801d340:	69e0      	ldr	r0, [r4, #28]
 801d342:	1ad2      	subs	r2, r2, r3
 801d344:	4419      	add	r1, r3
 801d346:	1b80      	subs	r0, r0, r6
 801d348:	f7f5 fa0e 	bl	8012768 <GUI_DrawHLine>
 801d34c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801d34e:	69e2      	ldr	r2, [r4, #28]
 801d350:	6961      	ldr	r1, [r4, #20]
 801d352:	6920      	ldr	r0, [r4, #16]
 801d354:	1ad2      	subs	r2, r2, r3
 801d356:	4419      	add	r1, r3
 801d358:	4430      	add	r0, r6
 801d35a:	f7f5 fa5b 	bl	8012814 <GUI_DrawVLine>
 801d35e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801d360:	69e2      	ldr	r2, [r4, #28]
 801d362:	6961      	ldr	r1, [r4, #20]
 801d364:	69a0      	ldr	r0, [r4, #24]
 801d366:	1ad2      	subs	r2, r2, r3
 801d368:	1b80      	subs	r0, r0, r6
 801d36a:	4419      	add	r1, r3
 801d36c:	3601      	adds	r6, #1
 801d36e:	f7f5 fa51 	bl	8012814 <GUI_DrawVLine>
 801d372:	2e02      	cmp	r6, #2
 801d374:	d1d4      	bne.n	801d320 <DROPDOWN_DrawSkinFlex+0x84>
 801d376:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801d378:	2802      	cmp	r0, #2
 801d37a:	dd19      	ble.n	801d3b0 <DROPDOWN_DrawSkinFlex+0x114>
 801d37c:	68a8      	ldr	r0, [r5, #8]
 801d37e:	f7f4 fa1d 	bl	80117bc <GUI_SetColor>
 801d382:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801d384:	6920      	ldr	r0, [r4, #16]
 801d386:	6966      	ldr	r6, [r4, #20]
 801d388:	69e3      	ldr	r3, [r4, #28]
 801d38a:	1842      	adds	r2, r0, r1
 801d38c:	1a5b      	subs	r3, r3, r1
 801d38e:	3a01      	subs	r2, #1
 801d390:	4431      	add	r1, r6
 801d392:	3002      	adds	r0, #2
 801d394:	f7f5 fa68 	bl	8012868 <GUI_FillRect>
 801d398:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801d39a:	69a2      	ldr	r2, [r4, #24]
 801d39c:	69e3      	ldr	r3, [r4, #28]
 801d39e:	6966      	ldr	r6, [r4, #20]
 801d3a0:	1a50      	subs	r0, r2, r1
 801d3a2:	3001      	adds	r0, #1
 801d3a4:	1a5b      	subs	r3, r3, r1
 801d3a6:	3a02      	subs	r2, #2
 801d3a8:	4431      	add	r1, r6
 801d3aa:	f7f5 fa5d 	bl	8012868 <GUI_FillRect>
 801d3ae:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801d3b0:	692a      	ldr	r2, [r5, #16]
 801d3b2:	6961      	ldr	r1, [r4, #20]
 801d3b4:	69e3      	ldr	r3, [r4, #28]
 801d3b6:	9201      	str	r2, [sp, #4]
 801d3b8:	6926      	ldr	r6, [r4, #16]
 801d3ba:	69a2      	ldr	r2, [r4, #24]
 801d3bc:	68ef      	ldr	r7, [r5, #12]
 801d3be:	9700      	str	r7, [sp, #0]
 801d3c0:	440b      	add	r3, r1
 801d3c2:	1a12      	subs	r2, r2, r0
 801d3c4:	105b      	asrs	r3, r3, #1
 801d3c6:	4430      	add	r0, r6
 801d3c8:	3102      	adds	r1, #2
 801d3ca:	f001 fe09 	bl	801efe0 <GUI_DrawGradientV>
 801d3ce:	69e3      	ldr	r3, [r4, #28]
 801d3d0:	6961      	ldr	r1, [r4, #20]
 801d3d2:	69ae      	ldr	r6, [r5, #24]
 801d3d4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801d3d6:	69a2      	ldr	r2, [r4, #24]
 801d3d8:	9601      	str	r6, [sp, #4]
 801d3da:	6926      	ldr	r6, [r4, #16]
 801d3dc:	696f      	ldr	r7, [r5, #20]
 801d3de:	9700      	str	r7, [sp, #0]
 801d3e0:	4419      	add	r1, r3
 801d3e2:	1049      	asrs	r1, r1, #1
 801d3e4:	1a12      	subs	r2, r2, r0
 801d3e6:	3101      	adds	r1, #1
 801d3e8:	3b02      	subs	r3, #2
 801d3ea:	4430      	add	r0, r6
 801d3ec:	f001 fdf8 	bl	801efe0 <GUI_DrawGradientV>
 801d3f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801d3f2:	f7f4 f9e3 	bl	80117bc <GUI_SetColor>
 801d3f6:	69e2      	ldr	r2, [r4, #28]
 801d3f8:	6961      	ldr	r1, [r4, #20]
 801d3fa:	69a3      	ldr	r3, [r4, #24]
 801d3fc:	1a50      	subs	r0, r2, r1
 801d3fe:	1a18      	subs	r0, r3, r0
 801d400:	3001      	adds	r0, #1
 801d402:	3a04      	subs	r2, #4
 801d404:	3104      	adds	r1, #4
 801d406:	f7f5 fa05 	bl	8012814 <GUI_DrawVLine>
 801d40a:	2000      	movs	r0, #0
 801d40c:	b008      	add	sp, #32
 801d40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d412:	4b39      	ldr	r3, [pc, #228]	; (801d4f8 <DROPDOWN_DrawSkinFlex+0x25c>)
 801d414:	f1a3 052c 	sub.w	r5, r3, #44	; 0x2c
 801d418:	2800      	cmp	r0, #0
 801d41a:	bf08      	it	eq
 801d41c:	461d      	moveq	r5, r3
 801d41e:	e757      	b.n	801d2d0 <DROPDOWN_DrawSkinFlex+0x34>
 801d420:	6820      	ldr	r0, [r4, #0]
 801d422:	f7f3 fc6d 	bl	8010d00 <GUI_ALLOC_LockH>
 801d426:	4603      	mov	r3, r0
 801d428:	a808      	add	r0, sp, #32
 801d42a:	f9b3 8080 	ldrsh.w	r8, [r3, #128]	; 0x80
 801d42e:	f840 3d0c 	str.w	r3, [r0, #-12]!
 801d432:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801d434:	f9b3 6082 	ldrsh.w	r6, [r3, #130]	; 0x82
 801d438:	f7f3 fc74 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d43c:	8aa0      	ldrh	r0, [r4, #20]
 801d43e:	69a3      	ldr	r3, [r4, #24]
 801d440:	6921      	ldr	r1, [r4, #16]
 801d442:	4403      	add	r3, r0
 801d444:	fa1f f288 	uxth.w	r2, r8
 801d448:	3b03      	subs	r3, #3
 801d44a:	4411      	add	r1, r2
 801d44c:	1a9b      	subs	r3, r3, r2
 801d44e:	8ba2      	ldrh	r2, [r4, #28]
 801d450:	f100 0e02 	add.w	lr, r0, #2
 801d454:	1a9b      	subs	r3, r3, r2
 801d456:	3102      	adds	r1, #2
 801d458:	3a02      	subs	r2, #2
 801d45a:	2002      	movs	r0, #2
 801d45c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d460:	f8ad e01a 	strh.w	lr, [sp, #26]
 801d464:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d468:	f8ad 201e 	strh.w	r2, [sp, #30]
 801d46c:	f7f4 fa38 	bl	80118e0 <GUI_SetTextMode>
 801d470:	4638      	mov	r0, r7
 801d472:	f7f4 fa05 	bl	8011880 <GUI_SetFont>
 801d476:	6a28      	ldr	r0, [r5, #32]
 801d478:	f7f4 f9a0 	bl	80117bc <GUI_SetColor>
 801d47c:	6a20      	ldr	r0, [r4, #32]
 801d47e:	4632      	mov	r2, r6
 801d480:	a906      	add	r1, sp, #24
 801d482:	f7f5 f835 	bl	80124f0 <GUI_DispStringInRect>
 801d486:	2000      	movs	r0, #0
 801d488:	b008      	add	sp, #32
 801d48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d48e:	f104 0114 	add.w	r1, r4, #20
 801d492:	c90e      	ldmia	r1, {r1, r2, r3}
 801d494:	1a5c      	subs	r4, r3, r1
 801d496:	f1a4 0608 	sub.w	r6, r4, #8
 801d49a:	1076      	asrs	r6, r6, #1
 801d49c:	69e8      	ldr	r0, [r5, #28]
 801d49e:	f106 38ff 	add.w	r8, r6, #4294967295
 801d4a2:	1c65      	adds	r5, r4, #1
 801d4a4:	eba2 0565 	sub.w	r5, r2, r5, asr #1
 801d4a8:	ebc8 0404 	rsb	r4, r8, r4
 801d4ac:	f7f4 f986 	bl	80117bc <GUI_SetColor>
 801d4b0:	f1b8 0f00 	cmp.w	r8, #0
 801d4b4:	ea4f 0464 	mov.w	r4, r4, asr #1
 801d4b8:	dba7      	blt.n	801d40a <DROPDOWN_DrawSkinFlex+0x16e>
 801d4ba:	1baf      	subs	r7, r5, r6
 801d4bc:	3701      	adds	r7, #1
 801d4be:	4445      	add	r5, r8
 801d4c0:	1b3f      	subs	r7, r7, r4
 801d4c2:	4426      	add	r6, r4
 801d4c4:	462a      	mov	r2, r5
 801d4c6:	1939      	adds	r1, r7, r4
 801d4c8:	4620      	mov	r0, r4
 801d4ca:	3401      	adds	r4, #1
 801d4cc:	f7f5 f94c 	bl	8012768 <GUI_DrawHLine>
 801d4d0:	42a6      	cmp	r6, r4
 801d4d2:	f105 35ff 	add.w	r5, r5, #4294967295
 801d4d6:	d1f5      	bne.n	801d4c4 <DROPDOWN_DrawSkinFlex+0x228>
 801d4d8:	2000      	movs	r0, #0
 801d4da:	b008      	add	sp, #32
 801d4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4e0:	6820      	ldr	r0, [r4, #0]
 801d4e2:	f005 f897 	bl	8022614 <WM_SetHasTrans>
 801d4e6:	2000      	movs	r0, #0
 801d4e8:	b008      	add	sp, #32
 801d4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4ee:	bf00      	nop
 801d4f0:	2000017c 	.word	0x2000017c
 801d4f4:	20000150 	.word	0x20000150
 801d4f8:	200001d4 	.word	0x200001d4

0801d4fc <FRAMEWIN__GetBorderSize>:
 801d4fc:	b570      	push	{r4, r5, r6, lr}
 801d4fe:	b08a      	sub	sp, #40	; 0x28
 801d500:	460c      	mov	r4, r1
 801d502:	4606      	mov	r6, r0
 801d504:	f7f3 fbfc 	bl	8010d00 <GUI_ALLOC_LockH>
 801d508:	ab0a      	add	r3, sp, #40	; 0x28
 801d50a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 801d50c:	f843 0d28 	str.w	r0, [r3, #-40]!
 801d510:	4618      	mov	r0, r3
 801d512:	6895      	ldr	r5, [r2, #8]
 801d514:	f7f3 fc06 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d518:	9601      	str	r6, [sp, #4]
 801d51a:	2c03      	cmp	r4, #3
 801d51c:	d805      	bhi.n	801d52a <FRAMEWIN__GetBorderSize+0x2e>
 801d51e:	e8df f004 	tbb	[pc, r4]
 801d522:	0c0f      	.short	0x0c0f
 801d524:	0209      	.short	0x0209
 801d526:	2317      	movs	r3, #23
 801d528:	9302      	str	r3, [sp, #8]
 801d52a:	686b      	ldr	r3, [r5, #4]
 801d52c:	a801      	add	r0, sp, #4
 801d52e:	4798      	blx	r3
 801d530:	b00a      	add	sp, #40	; 0x28
 801d532:	bd70      	pop	{r4, r5, r6, pc}
 801d534:	2315      	movs	r3, #21
 801d536:	9302      	str	r3, [sp, #8]
 801d538:	e7f7      	b.n	801d52a <FRAMEWIN__GetBorderSize+0x2e>
 801d53a:	2316      	movs	r3, #22
 801d53c:	9302      	str	r3, [sp, #8]
 801d53e:	e7f4      	b.n	801d52a <FRAMEWIN__GetBorderSize+0x2e>
 801d540:	2318      	movs	r3, #24
 801d542:	9302      	str	r3, [sp, #8]
 801d544:	e7f1      	b.n	801d52a <FRAMEWIN__GetBorderSize+0x2e>
 801d546:	bf00      	nop

0801d548 <FRAMEWIN__CalcTitleHeight>:
 801d548:	b508      	push	{r3, lr}
 801d54a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801d54c:	f003 0320 	and.w	r3, r3, #32
 801d550:	b29b      	uxth	r3, r3
 801d552:	b14b      	cbz	r3, 801d568 <FRAMEWIN__CalcTitleHeight+0x20>
 801d554:	4602      	mov	r2, r0
 801d556:	f9b0 0054 	ldrsh.w	r0, [r0, #84]	; 0x54
 801d55a:	b100      	cbz	r0, 801d55e <FRAMEWIN__CalcTitleHeight+0x16>
 801d55c:	bd08      	pop	{r3, pc}
 801d55e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 801d560:	f7f3 fffa 	bl	8011558 <GUI_GetYSizeOfFont>
 801d564:	3002      	adds	r0, #2
 801d566:	bd08      	pop	{r3, pc}
 801d568:	4618      	mov	r0, r3
 801d56a:	bd08      	pop	{r3, pc}

0801d56c <FRAMEWIN__GetTitleLimits>:
 801d56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d570:	b083      	sub	sp, #12
 801d572:	4688      	mov	r8, r1
 801d574:	4604      	mov	r4, r0
 801d576:	4691      	mov	r9, r2
 801d578:	f7f3 fbc2 	bl	8010d00 <GUI_ALLOC_LockH>
 801d57c:	4603      	mov	r3, r0
 801d57e:	a802      	add	r0, sp, #8
 801d580:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801d582:	f840 3d08 	str.w	r3, [r0, #-8]!
 801d586:	6895      	ldr	r5, [r2, #8]
 801d588:	f9b3 7000 	ldrsh.w	r7, [r3]
 801d58c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801d590:	f7f3 fbc8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d594:	682b      	ldr	r3, [r5, #0]
 801d596:	4620      	mov	r0, r4
 801d598:	2100      	movs	r1, #0
 801d59a:	4798      	blx	r3
 801d59c:	4605      	mov	r5, r0
 801d59e:	4620      	mov	r0, r4
 801d5a0:	f7fd fe50 	bl	801b244 <WM_GetFirstChild>
 801d5a4:	b360      	cbz	r0, 801d600 <FRAMEWIN__GetTitleLimits+0x94>
 801d5a6:	4604      	mov	r4, r0
 801d5a8:	e007      	b.n	801d5ba <FRAMEWIN__GetTitleLimits+0x4e>
 801d5aa:	a801      	add	r0, sp, #4
 801d5ac:	f7f3 fbba 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d5b0:	4620      	mov	r0, r4
 801d5b2:	f7fd fe75 	bl	801b2a0 <WM_GetNextSibling>
 801d5b6:	4604      	mov	r4, r0
 801d5b8:	b310      	cbz	r0, 801d600 <FRAMEWIN__GetTitleLimits+0x94>
 801d5ba:	4620      	mov	r0, r4
 801d5bc:	f7f3 fba0 	bl	8010d00 <GUI_ALLOC_LockH>
 801d5c0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d5c4:	9001      	str	r0, [sp, #4]
 801d5c6:	1b9b      	subs	r3, r3, r6
 801d5c8:	429d      	cmp	r5, r3
 801d5ca:	d1ee      	bne.n	801d5aa <FRAMEWIN__GetTitleLimits+0x3e>
 801d5cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d5ce:	061b      	lsls	r3, r3, #24
 801d5d0:	d50b      	bpl.n	801d5ea <FRAMEWIN__GetTitleLimits+0x7e>
 801d5d2:	f9b0 3000 	ldrsh.w	r3, [r0]
 801d5d6:	f8d9 2000 	ldr.w	r2, [r9]
 801d5da:	1bdb      	subs	r3, r3, r7
 801d5dc:	4293      	cmp	r3, r2
 801d5de:	f103 33ff 	add.w	r3, r3, #4294967295
 801d5e2:	dce2      	bgt.n	801d5aa <FRAMEWIN__GetTitleLimits+0x3e>
 801d5e4:	f8c9 3000 	str.w	r3, [r9]
 801d5e8:	e7df      	b.n	801d5aa <FRAMEWIN__GetTitleLimits+0x3e>
 801d5ea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d5ee:	f8d8 2000 	ldr.w	r2, [r8]
 801d5f2:	1bdb      	subs	r3, r3, r7
 801d5f4:	4293      	cmp	r3, r2
 801d5f6:	bfa4      	itt	ge
 801d5f8:	3301      	addge	r3, #1
 801d5fa:	f8c8 3000 	strge.w	r3, [r8]
 801d5fe:	e7d4      	b.n	801d5aa <FRAMEWIN__GetTitleLimits+0x3e>
 801d600:	b003      	add	sp, #12
 801d602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d606:	bf00      	nop

0801d608 <FRAMEWIN_GetActive>:
 801d608:	b510      	push	{r4, lr}
 801d60a:	4604      	mov	r4, r0
 801d60c:	b082      	sub	sp, #8
 801d60e:	b180      	cbz	r0, 801d632 <FRAMEWIN_GetActive+0x2a>
 801d610:	f7f5 fb5e 	bl	8012cd0 <GUI_Lock>
 801d614:	4620      	mov	r0, r4
 801d616:	f7f3 fb73 	bl	8010d00 <GUI_ALLOC_LockH>
 801d61a:	ab02      	add	r3, sp, #8
 801d61c:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 801d620:	f843 0d04 	str.w	r0, [r3, #-4]!
 801d624:	4618      	mov	r0, r3
 801d626:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 801d62a:	f7f3 fb7b 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d62e:	f7f5 fb45 	bl	8012cbc <GUI_Unlock>
 801d632:	4620      	mov	r0, r4
 801d634:	b002      	add	sp, #8
 801d636:	bd10      	pop	{r4, pc}

0801d638 <FRAMEWIN_SetDefaultFont>:
 801d638:	4b01      	ldr	r3, [pc, #4]	; (801d640 <FRAMEWIN_SetDefaultFont+0x8>)
 801d63a:	6018      	str	r0, [r3, #0]
 801d63c:	4770      	bx	lr
 801d63e:	bf00      	nop
 801d640:	20000200 	.word	0x20000200

0801d644 <FRAMEWIN_SetDefaultBarColor>:
 801d644:	2801      	cmp	r0, #1
 801d646:	d803      	bhi.n	801d650 <FRAMEWIN_SetDefaultBarColor+0xc>
 801d648:	4b02      	ldr	r3, [pc, #8]	; (801d654 <FRAMEWIN_SetDefaultBarColor+0x10>)
 801d64a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d64e:	6041      	str	r1, [r0, #4]
 801d650:	4770      	bx	lr
 801d652:	bf00      	nop
 801d654:	20000200 	.word	0x20000200

0801d658 <FRAMEWIN_SetDefaultClientColor>:
 801d658:	4b01      	ldr	r3, [pc, #4]	; (801d660 <FRAMEWIN_SetDefaultClientColor+0x8>)
 801d65a:	6158      	str	r0, [r3, #20]
 801d65c:	4770      	bx	lr
 801d65e:	bf00      	nop
 801d660:	20000200 	.word	0x20000200

0801d664 <FRAMEWIN_GetDefaultClientColor>:
 801d664:	4b01      	ldr	r3, [pc, #4]	; (801d66c <FRAMEWIN_GetDefaultClientColor+0x8>)
 801d666:	6958      	ldr	r0, [r3, #20]
 801d668:	4770      	bx	lr
 801d66a:	bf00      	nop
 801d66c:	20000200 	.word	0x20000200

0801d670 <FRAMEWIN_SetDefaultTitleHeight>:
 801d670:	4b01      	ldr	r3, [pc, #4]	; (801d678 <FRAMEWIN_SetDefaultTitleHeight+0x8>)
 801d672:	8418      	strh	r0, [r3, #32]
 801d674:	4770      	bx	lr
 801d676:	bf00      	nop
 801d678:	20000200 	.word	0x20000200

0801d67c <FRAMEWIN_SetDefaultTextColor>:
 801d67c:	2801      	cmp	r0, #1
 801d67e:	d803      	bhi.n	801d688 <FRAMEWIN_SetDefaultTextColor+0xc>
 801d680:	4b02      	ldr	r3, [pc, #8]	; (801d68c <FRAMEWIN_SetDefaultTextColor+0x10>)
 801d682:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d686:	60c1      	str	r1, [r0, #12]
 801d688:	4770      	bx	lr
 801d68a:	bf00      	nop
 801d68c:	20000200 	.word	0x20000200

0801d690 <_GetBorderSize>:
 801d690:	b570      	push	{r4, r5, r6, lr}
 801d692:	b08a      	sub	sp, #40	; 0x28
 801d694:	460c      	mov	r4, r1
 801d696:	4606      	mov	r6, r0
 801d698:	f7f3 fb32 	bl	8010d00 <GUI_ALLOC_LockH>
 801d69c:	ab0a      	add	r3, sp, #40	; 0x28
 801d69e:	6d05      	ldr	r5, [r0, #80]	; 0x50
 801d6a0:	f843 0d28 	str.w	r0, [r3, #-40]!
 801d6a4:	4618      	mov	r0, r3
 801d6a6:	f7f3 fb3d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d6aa:	9601      	str	r6, [sp, #4]
 801d6ac:	2c03      	cmp	r4, #3
 801d6ae:	d805      	bhi.n	801d6bc <_GetBorderSize+0x2c>
 801d6b0:	e8df f004 	tbb	[pc, r4]
 801d6b4:	02080e14 	.word	0x02080e14
 801d6b8:	2317      	movs	r3, #23
 801d6ba:	9302      	str	r3, [sp, #8]
 801d6bc:	a801      	add	r0, sp, #4
 801d6be:	47a8      	blx	r5
 801d6c0:	b00a      	add	sp, #40	; 0x28
 801d6c2:	bd70      	pop	{r4, r5, r6, pc}
 801d6c4:	2315      	movs	r3, #21
 801d6c6:	9302      	str	r3, [sp, #8]
 801d6c8:	a801      	add	r0, sp, #4
 801d6ca:	47a8      	blx	r5
 801d6cc:	b00a      	add	sp, #40	; 0x28
 801d6ce:	bd70      	pop	{r4, r5, r6, pc}
 801d6d0:	2316      	movs	r3, #22
 801d6d2:	9302      	str	r3, [sp, #8]
 801d6d4:	a801      	add	r0, sp, #4
 801d6d6:	47a8      	blx	r5
 801d6d8:	b00a      	add	sp, #40	; 0x28
 801d6da:	bd70      	pop	{r4, r5, r6, pc}
 801d6dc:	2318      	movs	r3, #24
 801d6de:	9302      	str	r3, [sp, #8]
 801d6e0:	a801      	add	r0, sp, #4
 801d6e2:	47a8      	blx	r5
 801d6e4:	b00a      	add	sp, #40	; 0x28
 801d6e6:	bd70      	pop	{r4, r5, r6, pc}

0801d6e8 <_Create>:
 801d6e8:	b530      	push	{r4, r5, lr}
 801d6ea:	b08b      	sub	sp, #44	; 0x2c
 801d6ec:	4605      	mov	r5, r0
 801d6ee:	f7f3 fb07 	bl	8010d00 <GUI_ALLOC_LockH>
 801d6f2:	ab0a      	add	r3, sp, #40	; 0x28
 801d6f4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 801d6f6:	f843 0d28 	str.w	r0, [r3, #-40]!
 801d6fa:	4618      	mov	r0, r3
 801d6fc:	6894      	ldr	r4, [r2, #8]
 801d6fe:	f7f3 fb11 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d702:	a80a      	add	r0, sp, #40	; 0x28
 801d704:	2200      	movs	r2, #0
 801d706:	6863      	ldr	r3, [r4, #4]
 801d708:	f840 5d24 	str.w	r5, [r0, #-36]!
 801d70c:	9202      	str	r2, [sp, #8]
 801d70e:	4798      	blx	r3
 801d710:	b00b      	add	sp, #44	; 0x2c
 801d712:	bd30      	pop	{r4, r5, pc}

0801d714 <_Paint>:
 801d714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d718:	b093      	sub	sp, #76	; 0x4c
 801d71a:	4681      	mov	r9, r0
 801d71c:	f7f3 faf0 	bl	8010d00 <GUI_ALLOC_LockH>
 801d720:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 801d722:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801d724:	6897      	ldr	r7, [r2, #8]
 801d726:	9107      	str	r1, [sp, #28]
 801d728:	9008      	str	r0, [sp, #32]
 801d72a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 801d72c:	f7ff ff0c 	bl	801d548 <FRAMEWIN__CalcTitleHeight>
 801d730:	9001      	str	r0, [sp, #4]
 801d732:	a812      	add	r0, sp, #72	; 0x48
 801d734:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 801d738:	f9b3 6058 	ldrsh.w	r6, [r3, #88]	; 0x58
 801d73c:	f7f3 faf2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d740:	4648      	mov	r0, r9
 801d742:	f004 fc19 	bl	8021f78 <WM_GetWindowSizeX>
 801d746:	4682      	mov	sl, r0
 801d748:	4648      	mov	r0, r9
 801d74a:	f004 fc33 	bl	8021fb4 <WM_GetWindowSizeY>
 801d74e:	683b      	ldr	r3, [r7, #0]
 801d750:	2101      	movs	r1, #1
 801d752:	4680      	mov	r8, r0
 801d754:	4648      	mov	r0, r9
 801d756:	4798      	blx	r3
 801d758:	683b      	ldr	r3, [r7, #0]
 801d75a:	2103      	movs	r1, #3
 801d75c:	4683      	mov	fp, r0
 801d75e:	4648      	mov	r0, r9
 801d760:	4798      	blx	r3
 801d762:	683b      	ldr	r3, [r7, #0]
 801d764:	2100      	movs	r1, #0
 801d766:	4605      	mov	r5, r0
 801d768:	4648      	mov	r0, r9
 801d76a:	4798      	blx	r3
 801d76c:	683b      	ldr	r3, [r7, #0]
 801d76e:	9000      	str	r0, [sp, #0]
 801d770:	2102      	movs	r1, #2
 801d772:	4648      	mov	r0, r9
 801d774:	4798      	blx	r3
 801d776:	4607      	mov	r7, r0
 801d778:	2000      	movs	r0, #0
 801d77a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801d77e:	f7fc fe7b 	bl	801a478 <WM__InitIVRSearch>
 801d782:	2800      	cmp	r0, #0
 801d784:	d053      	beq.n	801d82e <_Paint+0x11a>
 801d786:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801d78a:	4413      	add	r3, r2
 801d78c:	441e      	add	r6, r3
 801d78e:	ebc7 0708 	rsb	r7, r7, r8
 801d792:	f10a 32ff 	add.w	r2, sl, #4294967295
 801d796:	9302      	str	r3, [sp, #8]
 801d798:	3e01      	subs	r6, #1
 801d79a:	3b01      	subs	r3, #1
 801d79c:	3f01      	subs	r7, #1
 801d79e:	ebc5 050a 	rsb	r5, r5, sl
 801d7a2:	9201      	str	r2, [sp, #4]
 801d7a4:	9304      	str	r3, [sp, #16]
 801d7a6:	f108 32ff 	add.w	r2, r8, #4294967295
 801d7aa:	ab0f      	add	r3, sp, #60	; 0x3c
 801d7ac:	42be      	cmp	r6, r7
 801d7ae:	f105 35ff 	add.w	r5, r5, #4294967295
 801d7b2:	9203      	str	r2, [sp, #12]
 801d7b4:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 801d7b8:	9305      	str	r3, [sp, #20]
 801d7ba:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 801d7be:	da39      	bge.n	801d834 <_Paint+0x120>
 801d7c0:	9606      	str	r6, [sp, #24]
 801d7c2:	462e      	mov	r6, r5
 801d7c4:	465d      	mov	r5, fp
 801d7c6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d7ca:	2700      	movs	r7, #0
 801d7cc:	9b01      	ldr	r3, [sp, #4]
 801d7ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801d7d0:	9b03      	ldr	r3, [sp, #12]
 801d7d2:	9310      	str	r3, [sp, #64]	; 0x40
 801d7d4:	230b      	movs	r3, #11
 801d7d6:	930a      	str	r3, [sp, #40]	; 0x28
 801d7d8:	970e      	str	r7, [sp, #56]	; 0x38
 801d7da:	970d      	str	r7, [sp, #52]	; 0x34
 801d7dc:	4640      	mov	r0, r8
 801d7de:	47a0      	blx	r4
 801d7e0:	9b02      	ldr	r3, [sp, #8]
 801d7e2:	930e      	str	r3, [sp, #56]	; 0x38
 801d7e4:	9b06      	ldr	r3, [sp, #24]
 801d7e6:	9310      	str	r3, [sp, #64]	; 0x40
 801d7e8:	230e      	movs	r3, #14
 801d7ea:	930a      	str	r3, [sp, #40]	; 0x28
 801d7ec:	950d      	str	r5, [sp, #52]	; 0x34
 801d7ee:	960f      	str	r6, [sp, #60]	; 0x3c
 801d7f0:	4640      	mov	r0, r8
 801d7f2:	47a0      	blx	r4
 801d7f4:	9a00      	ldr	r2, [sp, #0]
 801d7f6:	920e      	str	r2, [sp, #56]	; 0x38
 801d7f8:	2305      	movs	r3, #5
 801d7fa:	9a04      	ldr	r2, [sp, #16]
 801d7fc:	930a      	str	r3, [sp, #40]	; 0x28
 801d7fe:	9210      	str	r2, [sp, #64]	; 0x40
 801d800:	950d      	str	r5, [sp, #52]	; 0x34
 801d802:	960f      	str	r6, [sp, #60]	; 0x3c
 801d804:	4640      	mov	r0, r8
 801d806:	47a0      	blx	r4
 801d808:	9a05      	ldr	r2, [sp, #20]
 801d80a:	4651      	mov	r1, sl
 801d80c:	4648      	mov	r0, r9
 801d80e:	f7ff fead 	bl	801d56c <FRAMEWIN__GetTitleLimits>
 801d812:	2002      	movs	r0, #2
 801d814:	f7f4 f864 	bl	80118e0 <GUI_SetTextMode>
 801d818:	4658      	mov	r0, fp
 801d81a:	f7f4 f831 	bl	8011880 <GUI_SetFont>
 801d81e:	2312      	movs	r3, #18
 801d820:	930a      	str	r3, [sp, #40]	; 0x28
 801d822:	4640      	mov	r0, r8
 801d824:	47a0      	blx	r4
 801d826:	f7fc fd01 	bl	801a22c <WM__GetNextIVR>
 801d82a:	2800      	cmp	r0, #0
 801d82c:	d1ce      	bne.n	801d7cc <_Paint+0xb8>
 801d82e:	b013      	add	sp, #76	; 0x4c
 801d830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d834:	9706      	str	r7, [sp, #24]
 801d836:	462f      	mov	r7, r5
 801d838:	465d      	mov	r5, fp
 801d83a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d83e:	2600      	movs	r6, #0
 801d840:	9b01      	ldr	r3, [sp, #4]
 801d842:	930f      	str	r3, [sp, #60]	; 0x3c
 801d844:	9b03      	ldr	r3, [sp, #12]
 801d846:	9310      	str	r3, [sp, #64]	; 0x40
 801d848:	230b      	movs	r3, #11
 801d84a:	930a      	str	r3, [sp, #40]	; 0x28
 801d84c:	960e      	str	r6, [sp, #56]	; 0x38
 801d84e:	960d      	str	r6, [sp, #52]	; 0x34
 801d850:	4640      	mov	r0, r8
 801d852:	47a0      	blx	r4
 801d854:	9b02      	ldr	r3, [sp, #8]
 801d856:	930e      	str	r3, [sp, #56]	; 0x38
 801d858:	9b06      	ldr	r3, [sp, #24]
 801d85a:	9310      	str	r3, [sp, #64]	; 0x40
 801d85c:	230e      	movs	r3, #14
 801d85e:	930a      	str	r3, [sp, #40]	; 0x28
 801d860:	950d      	str	r5, [sp, #52]	; 0x34
 801d862:	970f      	str	r7, [sp, #60]	; 0x3c
 801d864:	4640      	mov	r0, r8
 801d866:	47a0      	blx	r4
 801d868:	9a00      	ldr	r2, [sp, #0]
 801d86a:	920e      	str	r2, [sp, #56]	; 0x38
 801d86c:	2305      	movs	r3, #5
 801d86e:	9a04      	ldr	r2, [sp, #16]
 801d870:	930a      	str	r3, [sp, #40]	; 0x28
 801d872:	9210      	str	r2, [sp, #64]	; 0x40
 801d874:	950d      	str	r5, [sp, #52]	; 0x34
 801d876:	970f      	str	r7, [sp, #60]	; 0x3c
 801d878:	4640      	mov	r0, r8
 801d87a:	47a0      	blx	r4
 801d87c:	9a05      	ldr	r2, [sp, #20]
 801d87e:	4651      	mov	r1, sl
 801d880:	4648      	mov	r0, r9
 801d882:	f7ff fe73 	bl	801d56c <FRAMEWIN__GetTitleLimits>
 801d886:	2002      	movs	r0, #2
 801d888:	f7f4 f82a 	bl	80118e0 <GUI_SetTextMode>
 801d88c:	4658      	mov	r0, fp
 801d88e:	f7f3 fff7 	bl	8011880 <GUI_SetFont>
 801d892:	2312      	movs	r3, #18
 801d894:	930a      	str	r3, [sp, #40]	; 0x28
 801d896:	4640      	mov	r0, r8
 801d898:	47a0      	blx	r4
 801d89a:	f7fc fcc7 	bl	801a22c <WM__GetNextIVR>
 801d89e:	2800      	cmp	r0, #0
 801d8a0:	d1ce      	bne.n	801d840 <_Paint+0x12c>
 801d8a2:	b013      	add	sp, #76	; 0x4c
 801d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d8a8 <FRAMEWIN_DrawSkinFlex>:
 801d8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8ac:	4604      	mov	r4, r0
 801d8ae:	b090      	sub	sp, #64	; 0x40
 801d8b0:	6800      	ldr	r0, [r0, #0]
 801d8b2:	f7ff fea9 	bl	801d608 <FRAMEWIN_GetActive>
 801d8b6:	4bb0      	ldr	r3, [pc, #704]	; (801db78 <FRAMEWIN_DrawSkinFlex+0x2d0>)
 801d8b8:	6866      	ldr	r6, [r4, #4]
 801d8ba:	f1a3 052c 	sub.w	r5, r3, #44	; 0x2c
 801d8be:	2800      	cmp	r0, #0
 801d8c0:	bf08      	it	eq
 801d8c2:	461d      	moveq	r5, r3
 801d8c4:	2e1c      	cmp	r6, #28
 801d8c6:	f200 80f8 	bhi.w	801daba <FRAMEWIN_DrawSkinFlex+0x212>
 801d8ca:	e8df f016 	tbh	[pc, r6, lsl #1]
 801d8ce:	0022      	.short	0x0022
 801d8d0:	00f600f6 	.word	0x00f600f6
 801d8d4:	00f600f6 	.word	0x00f600f6
 801d8d8:	00f60035 	.word	0x00f60035
 801d8dc:	00f600f6 	.word	0x00f600f6
 801d8e0:	00f600f6 	.word	0x00f600f6
 801d8e4:	00f60051 	.word	0x00f60051
 801d8e8:	00fb00f6 	.word	0x00fb00f6
 801d8ec:	00f600f6 	.word	0x00f600f6
 801d8f0:	010f00f6 	.word	0x010f00f6
 801d8f4:	00f600f6 	.word	0x00f600f6
 801d8f8:	014b0149 	.word	0x014b0149
 801d8fc:	014f014d 	.word	0x014f014d
 801d900:	00f600f6 	.word	0x00f600f6
 801d904:	001d00f6 	.word	0x001d00f6
 801d908:	696e      	ldr	r6, [r5, #20]
 801d90a:	4630      	mov	r0, r6
 801d90c:	b010      	add	sp, #64	; 0x40
 801d90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d912:	6820      	ldr	r0, [r4, #0]
 801d914:	f7f3 f9f4 	bl	8010d00 <GUI_ALLOC_LockH>
 801d918:	ab10      	add	r3, sp, #64	; 0x40
 801d91a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 801d91e:	f843 0d2c 	str.w	r0, [r3, #-44]!
 801d922:	f042 020c 	orr.w	r2, r2, #12
 801d926:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 801d92a:	4618      	mov	r0, r3
 801d92c:	f7f3 f9fa 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d930:	6820      	ldr	r0, [r4, #0]
 801d932:	f004 fe6f 	bl	8022614 <WM_SetHasTrans>
 801d936:	e7e8      	b.n	801d90a <FRAMEWIN_DrawSkinFlex+0x62>
 801d938:	692b      	ldr	r3, [r5, #16]
 801d93a:	9301      	str	r3, [sp, #4]
 801d93c:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
 801d940:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 801d944:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
 801d948:	f9b4 401c 	ldrsh.w	r4, [r4, #28]
 801d94c:	68eb      	ldr	r3, [r5, #12]
 801d94e:	9300      	str	r3, [sp, #0]
 801d950:	4632      	mov	r2, r6
 801d952:	4670      	mov	r0, lr
 801d954:	4639      	mov	r1, r7
 801d956:	4623      	mov	r3, r4
 801d958:	f8ad 6020 	strh.w	r6, [sp, #32]
 801d95c:	f8ad e01c 	strh.w	lr, [sp, #28]
 801d960:	f8ad 701e 	strh.w	r7, [sp, #30]
 801d964:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
 801d968:	2600      	movs	r6, #0
 801d96a:	f001 fb39 	bl	801efe0 <GUI_DrawGradientV>
 801d96e:	e7cc      	b.n	801d90a <FRAMEWIN_DrawSkinFlex+0x62>
 801d970:	231c      	movs	r3, #28
 801d972:	6820      	ldr	r0, [r4, #0]
 801d974:	9308      	str	r3, [sp, #32]
 801d976:	9007      	str	r0, [sp, #28]
 801d978:	f7f3 f9c2 	bl	8010d00 <GUI_ALLOC_LockH>
 801d97c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801d97e:	9005      	str	r0, [sp, #20]
 801d980:	a807      	add	r0, sp, #28
 801d982:	4798      	blx	r3
 801d984:	4606      	mov	r6, r0
 801d986:	a805      	add	r0, sp, #20
 801d988:	f7f3 f9cc 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801d98c:	2e01      	cmp	r6, #1
 801d98e:	f340 8126 	ble.w	801dbde <FRAMEWIN_DrawSkinFlex+0x336>
 801d992:	68ab      	ldr	r3, [r5, #8]
 801d994:	9302      	str	r3, [sp, #8]
 801d996:	686b      	ldr	r3, [r5, #4]
 801d998:	9301      	str	r3, [sp, #4]
 801d99a:	682b      	ldr	r3, [r5, #0]
 801d99c:	6962      	ldr	r2, [r4, #20]
 801d99e:	69a1      	ldr	r1, [r4, #24]
 801d9a0:	6920      	ldr	r0, [r4, #16]
 801d9a2:	9300      	str	r3, [sp, #0]
 801d9a4:	4633      	mov	r3, r6
 801d9a6:	f002 facb 	bl	801ff40 <GUI__DrawTwinArc2>
 801d9aa:	6927      	ldr	r7, [r4, #16]
 801d9ac:	69a3      	ldr	r3, [r4, #24]
 801d9ae:	4437      	add	r7, r6
 801d9b0:	ebc6 0803 	rsb	r8, r6, r3
 801d9b4:	6828      	ldr	r0, [r5, #0]
 801d9b6:	f7f3 ff01 	bl	80117bc <GUI_SetColor>
 801d9ba:	4642      	mov	r2, r8
 801d9bc:	4639      	mov	r1, r7
 801d9be:	6960      	ldr	r0, [r4, #20]
 801d9c0:	f7f4 fed2 	bl	8012768 <GUI_DrawHLine>
 801d9c4:	6868      	ldr	r0, [r5, #4]
 801d9c6:	f7f3 fef9 	bl	80117bc <GUI_SetColor>
 801d9ca:	6960      	ldr	r0, [r4, #20]
 801d9cc:	4642      	mov	r2, r8
 801d9ce:	3001      	adds	r0, #1
 801d9d0:	4639      	mov	r1, r7
 801d9d2:	f7f4 fec9 	bl	8012768 <GUI_DrawHLine>
 801d9d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d9d8:	2b02      	cmp	r3, #2
 801d9da:	f300 80f3 	bgt.w	801dbc4 <FRAMEWIN_DrawSkinFlex+0x31c>
 801d9de:	6a2a      	ldr	r2, [r5, #32]
 801d9e0:	4296      	cmp	r6, r2
 801d9e2:	da18      	bge.n	801da16 <FRAMEWIN_DrawSkinFlex+0x16e>
 801d9e4:	6963      	ldr	r3, [r4, #20]
 801d9e6:	6920      	ldr	r0, [r4, #16]
 801d9e8:	2e01      	cmp	r6, #1
 801d9ea:	f103 0702 	add.w	r7, r3, #2
 801d9ee:	f340 8124 	ble.w	801dc3a <FRAMEWIN_DrawSkinFlex+0x392>
 801d9f2:	4402      	add	r2, r0
 801d9f4:	eb06 0803 	add.w	r8, r6, r3
 801d9f8:	3a01      	subs	r2, #1
 801d9fa:	4430      	add	r0, r6
 801d9fc:	4643      	mov	r3, r8
 801d9fe:	4639      	mov	r1, r7
 801da00:	f7f4 ff32 	bl	8012868 <GUI_FillRect>
 801da04:	69a0      	ldr	r0, [r4, #24]
 801da06:	1b82      	subs	r2, r0, r6
 801da08:	69eb      	ldr	r3, [r5, #28]
 801da0a:	1ac0      	subs	r0, r0, r3
 801da0c:	4639      	mov	r1, r7
 801da0e:	4643      	mov	r3, r8
 801da10:	3001      	adds	r0, #1
 801da12:	f7f4 ff29 	bl	8012868 <GUI_FillRect>
 801da16:	2e01      	cmp	r6, #1
 801da18:	bfd4      	ite	le
 801da1a:	6966      	ldrle	r6, [r4, #20]
 801da1c:	6963      	ldrgt	r3, [r4, #20]
 801da1e:	69e7      	ldr	r7, [r4, #28]
 801da20:	6828      	ldr	r0, [r5, #0]
 801da22:	bfcc      	ite	gt
 801da24:	18f6      	addgt	r6, r6, r3
 801da26:	3602      	addle	r6, #2
 801da28:	3f01      	subs	r7, #1
 801da2a:	f7f3 fec7 	bl	80117bc <GUI_SetColor>
 801da2e:	463a      	mov	r2, r7
 801da30:	4631      	mov	r1, r6
 801da32:	6920      	ldr	r0, [r4, #16]
 801da34:	f7f4 feee 	bl	8012814 <GUI_DrawVLine>
 801da38:	463a      	mov	r2, r7
 801da3a:	4631      	mov	r1, r6
 801da3c:	69a0      	ldr	r0, [r4, #24]
 801da3e:	f7f4 fee9 	bl	8012814 <GUI_DrawVLine>
 801da42:	69e7      	ldr	r7, [r4, #28]
 801da44:	6868      	ldr	r0, [r5, #4]
 801da46:	f7f3 feb9 	bl	80117bc <GUI_SetColor>
 801da4a:	6920      	ldr	r0, [r4, #16]
 801da4c:	3f02      	subs	r7, #2
 801da4e:	463a      	mov	r2, r7
 801da50:	3001      	adds	r0, #1
 801da52:	4631      	mov	r1, r6
 801da54:	f7f4 fede 	bl	8012814 <GUI_DrawVLine>
 801da58:	69a0      	ldr	r0, [r4, #24]
 801da5a:	463a      	mov	r2, r7
 801da5c:	3801      	subs	r0, #1
 801da5e:	4631      	mov	r1, r6
 801da60:	f7f4 fed8 	bl	8012814 <GUI_DrawVLine>
 801da64:	69eb      	ldr	r3, [r5, #28]
 801da66:	2b02      	cmp	r3, #2
 801da68:	f340 8082 	ble.w	801db70 <FRAMEWIN_DrawSkinFlex+0x2c8>
 801da6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801da6e:	69e7      	ldr	r7, [r4, #28]
 801da70:	68a8      	ldr	r0, [r5, #8]
 801da72:	2b02      	cmp	r3, #2
 801da74:	bfcc      	ite	gt
 801da76:	1aff      	subgt	r7, r7, r3
 801da78:	3f02      	suble	r7, #2
 801da7a:	f7f3 fe9f 	bl	80117bc <GUI_SetColor>
 801da7e:	69ea      	ldr	r2, [r5, #28]
 801da80:	2a02      	cmp	r2, #2
 801da82:	f300 8096 	bgt.w	801dbb2 <FRAMEWIN_DrawSkinFlex+0x30a>
 801da86:	6a2b      	ldr	r3, [r5, #32]
 801da88:	2b02      	cmp	r3, #2
 801da8a:	f300 8088 	bgt.w	801db9e <FRAMEWIN_DrawSkinFlex+0x2f6>
 801da8e:	6828      	ldr	r0, [r5, #0]
 801da90:	f7f3 fe94 	bl	80117bc <GUI_SetColor>
 801da94:	69a2      	ldr	r2, [r4, #24]
 801da96:	6921      	ldr	r1, [r4, #16]
 801da98:	69e0      	ldr	r0, [r4, #28]
 801da9a:	f7f4 fe65 	bl	8012768 <GUI_DrawHLine>
 801da9e:	6868      	ldr	r0, [r5, #4]
 801daa0:	f7f3 fe8c 	bl	80117bc <GUI_SetColor>
 801daa4:	69a2      	ldr	r2, [r4, #24]
 801daa6:	6921      	ldr	r1, [r4, #16]
 801daa8:	69e0      	ldr	r0, [r4, #28]
 801daaa:	3a01      	subs	r2, #1
 801daac:	3101      	adds	r1, #1
 801daae:	3801      	subs	r0, #1
 801dab0:	f7f4 fe5a 	bl	8012768 <GUI_DrawHLine>
 801dab4:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801dab6:	2e02      	cmp	r6, #2
 801dab8:	dc60      	bgt.n	801db7c <FRAMEWIN_DrawSkinFlex+0x2d4>
 801daba:	2600      	movs	r6, #0
 801dabc:	4630      	mov	r0, r6
 801dabe:	b010      	add	sp, #64	; 0x40
 801dac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dac4:	f104 0114 	add.w	r1, r4, #20
 801dac8:	c90e      	ldmia	r1, {r1, r2, r3}
 801daca:	68a8      	ldr	r0, [r5, #8]
 801dacc:	6925      	ldr	r5, [r4, #16]
 801dace:	f8ad 101e 	strh.w	r1, [sp, #30]
 801dad2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dad6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801dada:	f8ad 501c 	strh.w	r5, [sp, #28]
 801dade:	f7f3 fe6d 	bl	80117bc <GUI_SetColor>
 801dae2:	a807      	add	r0, sp, #28
 801dae4:	f7f4 feec 	bl	80128c0 <GUI_FillRectEx>
 801dae8:	2600      	movs	r6, #0
 801daea:	e70e      	b.n	801d90a <FRAMEWIN_DrawSkinFlex+0x62>
 801daec:	8b29      	ldrh	r1, [r5, #24]
 801daee:	6922      	ldr	r2, [r4, #16]
 801daf0:	69a3      	ldr	r3, [r4, #24]
 801daf2:	6966      	ldr	r6, [r4, #20]
 801daf4:	69e5      	ldr	r5, [r4, #28]
 801daf6:	6820      	ldr	r0, [r4, #0]
 801daf8:	f8ad 601e 	strh.w	r6, [sp, #30]
 801dafc:	1a5b      	subs	r3, r3, r1
 801dafe:	440a      	add	r2, r1
 801db00:	f8ad 3020 	strh.w	r3, [sp, #32]
 801db04:	f8ad 201c 	strh.w	r2, [sp, #28]
 801db08:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 801db0c:	f7f3 f8f8 	bl	8010d00 <GUI_ALLOC_LockH>
 801db10:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801db12:	9005      	str	r0, [sp, #20]
 801db14:	b1fb      	cbz	r3, 801db56 <FRAMEWIN_DrawSkinFlex+0x2ae>
 801db16:	2002      	movs	r0, #2
 801db18:	f7f3 fee2 	bl	80118e0 <GUI_SetTextMode>
 801db1c:	9a05      	ldr	r2, [sp, #20]
 801db1e:	f8b2 307c 	ldrh.w	r3, [r2, #124]	; 0x7c
 801db22:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801db26:	330e      	adds	r3, #14
 801db28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801db2c:	6898      	ldr	r0, [r3, #8]
 801db2e:	f7f3 fe45 	bl	80117bc <GUI_SetColor>
 801db32:	9b05      	ldr	r3, [sp, #20]
 801db34:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801db36:	f7f3 fea3 	bl	8011880 <GUI_SetFont>
 801db3a:	9b05      	ldr	r3, [sp, #20]
 801db3c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 801db3e:	f7f3 f8df 	bl	8010d00 <GUI_ALLOC_LockH>
 801db42:	9b05      	ldr	r3, [sp, #20]
 801db44:	9006      	str	r0, [sp, #24]
 801db46:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 801db4a:	a907      	add	r1, sp, #28
 801db4c:	f7f4 fcd0 	bl	80124f0 <GUI_DispStringInRect>
 801db50:	a806      	add	r0, sp, #24
 801db52:	f7f3 f8e7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801db56:	a805      	add	r0, sp, #20
 801db58:	f7f3 f8e4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801db5c:	2600      	movs	r6, #0
 801db5e:	e6d4      	b.n	801d90a <FRAMEWIN_DrawSkinFlex+0x62>
 801db60:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801db62:	e6d2      	b.n	801d90a <FRAMEWIN_DrawSkinFlex+0x62>
 801db64:	69ee      	ldr	r6, [r5, #28]
 801db66:	e6d0      	b.n	801d90a <FRAMEWIN_DrawSkinFlex+0x62>
 801db68:	6a2e      	ldr	r6, [r5, #32]
 801db6a:	e6ce      	b.n	801d90a <FRAMEWIN_DrawSkinFlex+0x62>
 801db6c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 801db6e:	e6cc      	b.n	801d90a <FRAMEWIN_DrawSkinFlex+0x62>
 801db70:	6a2b      	ldr	r3, [r5, #32]
 801db72:	2b02      	cmp	r3, #2
 801db74:	dd8b      	ble.n	801da8e <FRAMEWIN_DrawSkinFlex+0x1e6>
 801db76:	e779      	b.n	801da6c <FRAMEWIN_DrawSkinFlex+0x1c4>
 801db78:	2000026c 	.word	0x2000026c
 801db7c:	69a2      	ldr	r2, [r4, #24]
 801db7e:	69e7      	ldr	r7, [r4, #28]
 801db80:	6921      	ldr	r1, [r4, #16]
 801db82:	68a8      	ldr	r0, [r5, #8]
 801db84:	1c8c      	adds	r4, r1, #2
 801db86:	1e95      	subs	r5, r2, #2
 801db88:	f7f3 fe18 	bl	80117bc <GUI_SetColor>
 801db8c:	1bb9      	subs	r1, r7, r6
 801db8e:	462a      	mov	r2, r5
 801db90:	4620      	mov	r0, r4
 801db92:	3101      	adds	r1, #1
 801db94:	1ebb      	subs	r3, r7, #2
 801db96:	f7f4 fe67 	bl	8012868 <GUI_FillRect>
 801db9a:	2600      	movs	r6, #0
 801db9c:	e6b5      	b.n	801d90a <FRAMEWIN_DrawSkinFlex+0x62>
 801db9e:	69a2      	ldr	r2, [r4, #24]
 801dba0:	69e8      	ldr	r0, [r5, #28]
 801dba2:	1a10      	subs	r0, r2, r0
 801dba4:	463b      	mov	r3, r7
 801dba6:	4631      	mov	r1, r6
 801dba8:	3001      	adds	r0, #1
 801dbaa:	3a02      	subs	r2, #2
 801dbac:	f7f4 fe5c 	bl	8012868 <GUI_FillRect>
 801dbb0:	e76d      	b.n	801da8e <FRAMEWIN_DrawSkinFlex+0x1e6>
 801dbb2:	6920      	ldr	r0, [r4, #16]
 801dbb4:	4402      	add	r2, r0
 801dbb6:	3a01      	subs	r2, #1
 801dbb8:	3002      	adds	r0, #2
 801dbba:	463b      	mov	r3, r7
 801dbbc:	4631      	mov	r1, r6
 801dbbe:	f7f4 fe53 	bl	8012868 <GUI_FillRect>
 801dbc2:	e760      	b.n	801da86 <FRAMEWIN_DrawSkinFlex+0x1de>
 801dbc4:	68a8      	ldr	r0, [r5, #8]
 801dbc6:	f7f3 fdf9 	bl	80117bc <GUI_SetColor>
 801dbca:	6961      	ldr	r1, [r4, #20]
 801dbcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801dbce:	440b      	add	r3, r1
 801dbd0:	4642      	mov	r2, r8
 801dbd2:	4638      	mov	r0, r7
 801dbd4:	3b01      	subs	r3, #1
 801dbd6:	3102      	adds	r1, #2
 801dbd8:	f7f4 fe46 	bl	8012868 <GUI_FillRect>
 801dbdc:	e71b      	b.n	801da16 <FRAMEWIN_DrawSkinFlex+0x16e>
 801dbde:	6828      	ldr	r0, [r5, #0]
 801dbe0:	f7f3 fdec 	bl	80117bc <GUI_SetColor>
 801dbe4:	6921      	ldr	r1, [r4, #16]
 801dbe6:	69ea      	ldr	r2, [r5, #28]
 801dbe8:	6960      	ldr	r0, [r4, #20]
 801dbea:	440a      	add	r2, r1
 801dbec:	3a01      	subs	r2, #1
 801dbee:	f7f4 fdbb 	bl	8012768 <GUI_DrawHLine>
 801dbf2:	69a2      	ldr	r2, [r4, #24]
 801dbf4:	69e9      	ldr	r1, [r5, #28]
 801dbf6:	6960      	ldr	r0, [r4, #20]
 801dbf8:	1a51      	subs	r1, r2, r1
 801dbfa:	3101      	adds	r1, #1
 801dbfc:	f7f4 fdb4 	bl	8012768 <GUI_DrawHLine>
 801dc00:	6967      	ldr	r7, [r4, #20]
 801dc02:	6920      	ldr	r0, [r4, #16]
 801dc04:	3701      	adds	r7, #1
 801dc06:	4639      	mov	r1, r7
 801dc08:	f7f4 fdda 	bl	80127c0 <GUI_DrawPixel>
 801dc0c:	4639      	mov	r1, r7
 801dc0e:	69a0      	ldr	r0, [r4, #24]
 801dc10:	f7f4 fdd6 	bl	80127c0 <GUI_DrawPixel>
 801dc14:	6868      	ldr	r0, [r5, #4]
 801dc16:	f7f3 fdd1 	bl	80117bc <GUI_SetColor>
 801dc1a:	6920      	ldr	r0, [r4, #16]
 801dc1c:	4639      	mov	r1, r7
 801dc1e:	3001      	adds	r0, #1
 801dc20:	f7f4 fdce 	bl	80127c0 <GUI_DrawPixel>
 801dc24:	69a0      	ldr	r0, [r4, #24]
 801dc26:	4639      	mov	r1, r7
 801dc28:	3801      	subs	r0, #1
 801dc2a:	f7f4 fdc9 	bl	80127c0 <GUI_DrawPixel>
 801dc2e:	6927      	ldr	r7, [r4, #16]
 801dc30:	69a3      	ldr	r3, [r4, #24]
 801dc32:	3702      	adds	r7, #2
 801dc34:	f1a3 0802 	sub.w	r8, r3, #2
 801dc38:	e6bc      	b.n	801d9b4 <FRAMEWIN_DrawSkinFlex+0x10c>
 801dc3a:	4402      	add	r2, r0
 801dc3c:	3a01      	subs	r2, #1
 801dc3e:	3002      	adds	r0, #2
 801dc40:	463b      	mov	r3, r7
 801dc42:	4639      	mov	r1, r7
 801dc44:	f7f4 fe10 	bl	8012868 <GUI_FillRect>
 801dc48:	69a0      	ldr	r0, [r4, #24]
 801dc4a:	46b8      	mov	r8, r7
 801dc4c:	1e82      	subs	r2, r0, #2
 801dc4e:	e6db      	b.n	801da08 <FRAMEWIN_DrawSkinFlex+0x160>

0801dc50 <GUI_DRAW__Draw>:
 801dc50:	b900      	cbnz	r0, 801dc54 <GUI_DRAW__Draw+0x4>
 801dc52:	4770      	bx	lr
 801dc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc58:	b082      	sub	sp, #8
 801dc5a:	461e      	mov	r6, r3
 801dc5c:	4615      	mov	r5, r2
 801dc5e:	460c      	mov	r4, r1
 801dc60:	4607      	mov	r7, r0
 801dc62:	f7f3 f84d 	bl	8010d00 <GUI_ALLOC_LockH>
 801dc66:	ab02      	add	r3, sp, #8
 801dc68:	6802      	ldr	r2, [r0, #0]
 801dc6a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801dc6e:	4618      	mov	r0, r3
 801dc70:	f8d2 8000 	ldr.w	r8, [r2]
 801dc74:	f7f3 f856 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801dc78:	4633      	mov	r3, r6
 801dc7a:	462a      	mov	r2, r5
 801dc7c:	4621      	mov	r1, r4
 801dc7e:	4638      	mov	r0, r7
 801dc80:	47c0      	blx	r8
 801dc82:	b002      	add	sp, #8
 801dc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801dc88 <GUI_DRAW__GetXSize>:
 801dc88:	b900      	cbnz	r0, 801dc8c <GUI_DRAW__GetXSize+0x4>
 801dc8a:	4770      	bx	lr
 801dc8c:	b530      	push	{r4, r5, lr}
 801dc8e:	b083      	sub	sp, #12
 801dc90:	4604      	mov	r4, r0
 801dc92:	f7f3 f835 	bl	8010d00 <GUI_ALLOC_LockH>
 801dc96:	ab02      	add	r3, sp, #8
 801dc98:	6802      	ldr	r2, [r0, #0]
 801dc9a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801dc9e:	4618      	mov	r0, r3
 801dca0:	6855      	ldr	r5, [r2, #4]
 801dca2:	f7f3 f83f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801dca6:	4620      	mov	r0, r4
 801dca8:	47a8      	blx	r5
 801dcaa:	b003      	add	sp, #12
 801dcac:	bd30      	pop	{r4, r5, pc}
 801dcae:	bf00      	nop

0801dcb0 <GUI_DRAW__GetYSize>:
 801dcb0:	b900      	cbnz	r0, 801dcb4 <GUI_DRAW__GetYSize+0x4>
 801dcb2:	4770      	bx	lr
 801dcb4:	b530      	push	{r4, r5, lr}
 801dcb6:	b083      	sub	sp, #12
 801dcb8:	4604      	mov	r4, r0
 801dcba:	f7f3 f821 	bl	8010d00 <GUI_ALLOC_LockH>
 801dcbe:	ab02      	add	r3, sp, #8
 801dcc0:	6802      	ldr	r2, [r0, #0]
 801dcc2:	f843 0d04 	str.w	r0, [r3, #-4]!
 801dcc6:	4618      	mov	r0, r3
 801dcc8:	6895      	ldr	r5, [r2, #8]
 801dcca:	f7f3 f82b 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801dcce:	4620      	mov	r0, r4
 801dcd0:	47a8      	blx	r5
 801dcd2:	b003      	add	sp, #12
 801dcd4:	bd30      	pop	{r4, r5, pc}
 801dcd6:	bf00      	nop

0801dcd8 <HEADER_SetDefaultBkColor>:
 801dcd8:	4b02      	ldr	r3, [pc, #8]	; (801dce4 <HEADER_SetDefaultBkColor+0xc>)
 801dcda:	685a      	ldr	r2, [r3, #4]
 801dcdc:	6058      	str	r0, [r3, #4]
 801dcde:	4610      	mov	r0, r2
 801dce0:	4770      	bx	lr
 801dce2:	bf00      	nop
 801dce4:	20000364 	.word	0x20000364

0801dce8 <HEADER_SetDefaultTextColor>:
 801dce8:	4b02      	ldr	r3, [pc, #8]	; (801dcf4 <HEADER_SetDefaultTextColor+0xc>)
 801dcea:	689a      	ldr	r2, [r3, #8]
 801dcec:	6098      	str	r0, [r3, #8]
 801dcee:	4610      	mov	r0, r2
 801dcf0:	4770      	bx	lr
 801dcf2:	bf00      	nop
 801dcf4:	20000364 	.word	0x20000364

0801dcf8 <HEADER_SetDefaultFont>:
 801dcf8:	4b02      	ldr	r3, [pc, #8]	; (801dd04 <HEADER_SetDefaultFont+0xc>)
 801dcfa:	681a      	ldr	r2, [r3, #0]
 801dcfc:	6018      	str	r0, [r3, #0]
 801dcfe:	4610      	mov	r0, r2
 801dd00:	4770      	bx	lr
 801dd02:	bf00      	nop
 801dd04:	20000364 	.word	0x20000364

0801dd08 <LISTVIEW_GetHeader>:
 801dd08:	b510      	push	{r4, lr}
 801dd0a:	4604      	mov	r4, r0
 801dd0c:	b082      	sub	sp, #8
 801dd0e:	b168      	cbz	r0, 801dd2c <LISTVIEW_GetHeader+0x24>
 801dd10:	f7f4 ffde 	bl	8012cd0 <GUI_Lock>
 801dd14:	4620      	mov	r0, r4
 801dd16:	f7f2 fff3 	bl	8010d00 <GUI_ALLOC_LockH>
 801dd1a:	ab02      	add	r3, sp, #8
 801dd1c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801dd1e:	f843 0d04 	str.w	r0, [r3, #-4]!
 801dd22:	4618      	mov	r0, r3
 801dd24:	f7f2 fffe 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801dd28:	f7f4 ffc8 	bl	8012cbc <GUI_Unlock>
 801dd2c:	4620      	mov	r0, r4
 801dd2e:	b002      	add	sp, #8
 801dd30:	bd10      	pop	{r4, pc}
 801dd32:	bf00      	nop

0801dd34 <LISTVIEW_GetNumColumns>:
 801dd34:	b530      	push	{r4, r5, lr}
 801dd36:	4604      	mov	r4, r0
 801dd38:	b083      	sub	sp, #12
 801dd3a:	b188      	cbz	r0, 801dd60 <LISTVIEW_GetNumColumns+0x2c>
 801dd3c:	f7f4 ffc8 	bl	8012cd0 <GUI_Lock>
 801dd40:	4620      	mov	r0, r4
 801dd42:	f7f2 ffdd 	bl	8010d00 <GUI_ALLOC_LockH>
 801dd46:	ad02      	add	r5, sp, #8
 801dd48:	4603      	mov	r3, r0
 801dd4a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801dd4c:	f845 3d04 	str.w	r3, [r5, #-4]!
 801dd50:	f004 fcec 	bl	802272c <GUI_ARRAY_GetNumItems>
 801dd54:	4604      	mov	r4, r0
 801dd56:	4628      	mov	r0, r5
 801dd58:	f7f2 ffe4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801dd5c:	f7f4 ffae 	bl	8012cbc <GUI_Unlock>
 801dd60:	4620      	mov	r0, r4
 801dd62:	b003      	add	sp, #12
 801dd64:	bd30      	pop	{r4, r5, pc}
 801dd66:	bf00      	nop

0801dd68 <LISTVIEW_SetColumnWidth>:
 801dd68:	b900      	cbnz	r0, 801dd6c <LISTVIEW_SetColumnWidth+0x4>
 801dd6a:	4770      	bx	lr
 801dd6c:	b570      	push	{r4, r5, r6, lr}
 801dd6e:	4604      	mov	r4, r0
 801dd70:	b082      	sub	sp, #8
 801dd72:	4616      	mov	r6, r2
 801dd74:	460d      	mov	r5, r1
 801dd76:	f7f4 ffab 	bl	8012cd0 <GUI_Lock>
 801dd7a:	4620      	mov	r0, r4
 801dd7c:	f7f2 ffc0 	bl	8010d00 <GUI_ALLOC_LockH>
 801dd80:	ab02      	add	r3, sp, #8
 801dd82:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801dd84:	f843 0d04 	str.w	r0, [r3, #-4]!
 801dd88:	4618      	mov	r0, r3
 801dd8a:	f7f2 ffcb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801dd8e:	4632      	mov	r2, r6
 801dd90:	4629      	mov	r1, r5
 801dd92:	4620      	mov	r0, r4
 801dd94:	f004 fdae 	bl	80228f4 <HEADER_SetItemWidth>
 801dd98:	f7f4 ff90 	bl	8012cbc <GUI_Unlock>
 801dd9c:	b002      	add	sp, #8
 801dd9e:	bd70      	pop	{r4, r5, r6, pc}

0801dda0 <LISTVIEW_SetDefaultFont>:
 801dda0:	4b02      	ldr	r3, [pc, #8]	; (801ddac <LISTVIEW_SetDefaultFont+0xc>)
 801dda2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801dda4:	6258      	str	r0, [r3, #36]	; 0x24
 801dda6:	4610      	mov	r0, r2
 801dda8:	4770      	bx	lr
 801ddaa:	bf00      	nop
 801ddac:	20000298 	.word	0x20000298

0801ddb0 <LISTVIEW_SetDefaultTextColor>:
 801ddb0:	2803      	cmp	r0, #3
 801ddb2:	d806      	bhi.n	801ddc2 <LISTVIEW_SetDefaultTextColor+0x12>
 801ddb4:	1d03      	adds	r3, r0, #4
 801ddb6:	4a04      	ldr	r2, [pc, #16]	; (801ddc8 <LISTVIEW_SetDefaultTextColor+0x18>)
 801ddb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ddbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801ddc0:	4770      	bx	lr
 801ddc2:	2000      	movs	r0, #0
 801ddc4:	4770      	bx	lr
 801ddc6:	bf00      	nop
 801ddc8:	20000298 	.word	0x20000298

0801ddcc <LISTVIEW_SetDefaultBkColor>:
 801ddcc:	2803      	cmp	r0, #3
 801ddce:	4603      	mov	r3, r0
 801ddd0:	bf9d      	ittte	ls
 801ddd2:	4a03      	ldrls	r2, [pc, #12]	; (801dde0 <LISTVIEW_SetDefaultBkColor+0x14>)
 801ddd4:	f852 0020 	ldrls.w	r0, [r2, r0, lsl #2]
 801ddd8:	f842 1023 	strls.w	r1, [r2, r3, lsl #2]
 801dddc:	2000      	movhi	r0, #0
 801ddde:	4770      	bx	lr
 801dde0:	20000298 	.word	0x20000298

0801dde4 <LISTVIEW_SetDefaultGridColor>:
 801dde4:	4b02      	ldr	r3, [pc, #8]	; (801ddf0 <LISTVIEW_SetDefaultGridColor+0xc>)
 801dde6:	6a1a      	ldr	r2, [r3, #32]
 801dde8:	6218      	str	r0, [r3, #32]
 801ddea:	4610      	mov	r0, r2
 801ddec:	4770      	bx	lr
 801ddee:	bf00      	nop
 801ddf0:	20000298 	.word	0x20000298

0801ddf4 <SCROLLBAR_GetDefaultWidth>:
 801ddf4:	4b01      	ldr	r3, [pc, #4]	; (801ddfc <SCROLLBAR_GetDefaultWidth+0x8>)
 801ddf6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ddfa:	4770      	bx	lr
 801ddfc:	200003a8 	.word	0x200003a8

0801de00 <SCROLLBAR_SetDefaultWidth>:
 801de00:	4b02      	ldr	r3, [pc, #8]	; (801de0c <SCROLLBAR_SetDefaultWidth+0xc>)
 801de02:	f9b3 2000 	ldrsh.w	r2, [r3]
 801de06:	8018      	strh	r0, [r3, #0]
 801de08:	4610      	mov	r0, r2
 801de0a:	4770      	bx	lr
 801de0c:	200003a8 	.word	0x200003a8

0801de10 <SCROLLBAR_SetDefaultColor>:
 801de10:	2902      	cmp	r1, #2
 801de12:	bf9d      	ittte	ls
 801de14:	4a03      	ldrls	r2, [pc, #12]	; (801de24 <SCROLLBAR_SetDefaultColor+0x14>)
 801de16:	f852 3021 	ldrls.w	r3, [r2, r1, lsl #2]
 801de1a:	f842 0021 	strls.w	r0, [r2, r1, lsl #2]
 801de1e:	2300      	movhi	r3, #0
 801de20:	4618      	mov	r0, r3
 801de22:	4770      	bx	lr
 801de24:	200003ac 	.word	0x200003ac

0801de28 <TEXT_Callback>:
 801de28:	b530      	push	{r4, r5, lr}
 801de2a:	6845      	ldr	r5, [r0, #4]
 801de2c:	b085      	sub	sp, #20
 801de2e:	4604      	mov	r4, r0
 801de30:	4601      	mov	r1, r0
 801de32:	4628      	mov	r0, r5
 801de34:	f000 f9d4 	bl	801e1e0 <WIDGET_HandleActive>
 801de38:	b1b8      	cbz	r0, 801de6a <TEXT_Callback+0x42>
 801de3a:	6823      	ldr	r3, [r4, #0]
 801de3c:	2b0f      	cmp	r3, #15
 801de3e:	d016      	beq.n	801de6e <TEXT_Callback+0x46>
 801de40:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801de44:	d040      	beq.n	801dec8 <TEXT_Callback+0xa0>
 801de46:	2b0b      	cmp	r3, #11
 801de48:	d10c      	bne.n	801de64 <TEXT_Callback+0x3c>
 801de4a:	4628      	mov	r0, r5
 801de4c:	f7f2 ff58 	bl	8010d00 <GUI_ALLOC_LockH>
 801de50:	ad04      	add	r5, sp, #16
 801de52:	4603      	mov	r3, r0
 801de54:	f845 3d08 	str.w	r3, [r5, #-8]!
 801de58:	3044      	adds	r0, #68	; 0x44
 801de5a:	f7f3 f907 	bl	801106c <GUI_ALLOC_FreePtr>
 801de5e:	4628      	mov	r0, r5
 801de60:	f7f2 ff60 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801de64:	4620      	mov	r0, r4
 801de66:	f7fc fe59 	bl	801ab1c <WM_DefaultProc>
 801de6a:	b005      	add	sp, #20
 801de6c:	bd30      	pop	{r4, r5, pc}
 801de6e:	4628      	mov	r0, r5
 801de70:	f7f2 ff46 	bl	8010d00 <GUI_ALLOC_LockH>
 801de74:	9000      	str	r0, [sp, #0]
 801de76:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801de78:	f7f6 fe42 	bl	8014b00 <LCD_SetColor>
 801de7c:	9b00      	ldr	r3, [sp, #0]
 801de7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801de80:	f7f3 fcfe 	bl	8011880 <GUI_SetFont>
 801de84:	4628      	mov	r0, r5
 801de86:	f004 fbef 	bl	8022668 <WM_GetHasTrans>
 801de8a:	b340      	cbz	r0, 801dede <TEXT_Callback+0xb6>
 801de8c:	9b00      	ldr	r3, [sp, #0]
 801de8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801de90:	b1ab      	cbz	r3, 801debe <TEXT_Callback+0x96>
 801de92:	2002      	movs	r0, #2
 801de94:	f7f3 fd24 	bl	80118e0 <GUI_SetTextMode>
 801de98:	a802      	add	r0, sp, #8
 801de9a:	f7fd f8df 	bl	801b05c <WM_GetClientRect>
 801de9e:	9b00      	ldr	r3, [sp, #0]
 801dea0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801dea2:	f7f2 ff2d 	bl	8010d00 <GUI_ALLOC_LockH>
 801dea6:	9a00      	ldr	r2, [sp, #0]
 801dea8:	9001      	str	r0, [sp, #4]
 801deaa:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801deae:	f9b2 2048 	ldrsh.w	r2, [r2, #72]	; 0x48
 801deb2:	a902      	add	r1, sp, #8
 801deb4:	f7f4 fb44 	bl	8012540 <GUI_DispStringInRectWrap>
 801deb8:	a801      	add	r0, sp, #4
 801deba:	f7f2 ff33 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801debe:	4668      	mov	r0, sp
 801dec0:	f7f2 ff30 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801dec4:	b005      	add	sp, #20
 801dec6:	bd30      	pop	{r4, r5, pc}
 801dec8:	68e3      	ldr	r3, [r4, #12]
 801deca:	b17b      	cbz	r3, 801deec <TEXT_Callback+0xc4>
 801decc:	7a1b      	ldrb	r3, [r3, #8]
 801dece:	2b00      	cmp	r3, #0
 801ded0:	bf14      	ite	ne
 801ded2:	2101      	movne	r1, #1
 801ded4:	2102      	moveq	r1, #2
 801ded6:	4628      	mov	r0, r5
 801ded8:	f7fd fac8 	bl	801b46c <WM_NotifyParent>
 801dedc:	e7c2      	b.n	801de64 <TEXT_Callback+0x3c>
 801dede:	9b00      	ldr	r3, [sp, #0]
 801dee0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801dee2:	f7f6 fe07 	bl	8014af4 <LCD_SetBkColor>
 801dee6:	f7f3 fdad 	bl	8011a44 <GUI_Clear>
 801deea:	e7cf      	b.n	801de8c <TEXT_Callback+0x64>
 801deec:	2103      	movs	r1, #3
 801deee:	e7f2      	b.n	801ded6 <TEXT_Callback+0xae>

0801def0 <TEXT_CreateIndirect>:
 801def0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801def4:	468b      	mov	fp, r1
 801def6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 801defa:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801defe:	6985      	ldr	r5, [r0, #24]
 801df00:	f9b0 700e 	ldrsh.w	r7, [r0, #14]
 801df04:	f9b0 8010 	ldrsh.w	r8, [r0, #16]
 801df08:	f8b0 9012 	ldrh.w	r9, [r0, #18]
 801df0c:	f9b0 a008 	ldrsh.w	sl, [r0, #8]
 801df10:	6844      	ldr	r4, [r0, #4]
 801df12:	b089      	sub	sp, #36	; 0x24
 801df14:	4419      	add	r1, r3
 801df16:	4416      	add	r6, r2
 801df18:	9105      	str	r1, [sp, #20]
 801df1a:	3520      	adds	r5, #32
 801df1c:	f7f4 fed8 	bl	8012cd0 <GUI_Lock>
 801df20:	f8df e090 	ldr.w	lr, [pc, #144]	; 801dfb4 <TEXT_CreateIndirect+0xc4>
 801df24:	9503      	str	r5, [sp, #12]
 801df26:	f04f 0c03 	mov.w	ip, #3
 801df2a:	f8cd b000 	str.w	fp, [sp]
 801df2e:	9905      	ldr	r1, [sp, #20]
 801df30:	f8cd e008 	str.w	lr, [sp, #8]
 801df34:	4630      	mov	r0, r6
 801df36:	4643      	mov	r3, r8
 801df38:	463a      	mov	r2, r7
 801df3a:	f8cd c004 	str.w	ip, [sp, #4]
 801df3e:	f7fc f863 	bl	801a008 <WM_CreateWindowAsChild>
 801df42:	4605      	mov	r5, r0
 801df44:	b300      	cbz	r0, 801df88 <TEXT_CreateIndirect+0x98>
 801df46:	b32c      	cbz	r4, 801df94 <TEXT_CreateIndirect+0xa4>
 801df48:	4620      	mov	r0, r4
 801df4a:	f7e2 f959 	bl	8000200 <strlen>
 801df4e:	3001      	adds	r0, #1
 801df50:	f7f3 f92c 	bl	80111ac <GUI_ALLOC_AllocZero>
 801df54:	4607      	mov	r7, r0
 801df56:	b9f8      	cbnz	r0, 801df98 <TEXT_CreateIndirect+0xa8>
 801df58:	ae07      	add	r6, sp, #28
 801df5a:	4628      	mov	r0, r5
 801df5c:	f7f2 fed0 	bl	8010d00 <GUI_ALLOC_LockH>
 801df60:	4651      	mov	r1, sl
 801df62:	2200      	movs	r2, #0
 801df64:	9007      	str	r0, [sp, #28]
 801df66:	f000 f8b5 	bl	801e0d4 <WIDGET__Init>
 801df6a:	4b11      	ldr	r3, [pc, #68]	; (801dfb0 <TEXT_CreateIndirect+0xc0>)
 801df6c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801df70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801df72:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 801df76:	f8ce 7044 	str.w	r7, [lr, #68]	; 0x44
 801df7a:	f8ae 9048 	strh.w	r9, [lr, #72]	; 0x48
 801df7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801df82:	4630      	mov	r0, r6
 801df84:	f7f2 fece 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801df88:	f7f4 fe98 	bl	8012cbc <GUI_Unlock>
 801df8c:	4628      	mov	r0, r5
 801df8e:	b009      	add	sp, #36	; 0x24
 801df90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df94:	4627      	mov	r7, r4
 801df96:	e7df      	b.n	801df58 <TEXT_CreateIndirect+0x68>
 801df98:	f7f2 feb2 	bl	8010d00 <GUI_ALLOC_LockH>
 801df9c:	ae08      	add	r6, sp, #32
 801df9e:	4621      	mov	r1, r4
 801dfa0:	f846 0d04 	str.w	r0, [r6, #-4]!
 801dfa4:	f007 f9e2 	bl	802536c <strcpy>
 801dfa8:	4630      	mov	r0, r6
 801dfaa:	f7f2 febb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801dfae:	e7d4      	b.n	801df5a <TEXT_CreateIndirect+0x6a>
 801dfb0:	200002c8 	.word	0x200002c8
 801dfb4:	0801de29 	.word	0x0801de29

0801dfb8 <TEXT_SetFont>:
 801dfb8:	b900      	cbnz	r0, 801dfbc <TEXT_SetFont+0x4>
 801dfba:	4770      	bx	lr
 801dfbc:	b530      	push	{r4, r5, lr}
 801dfbe:	4604      	mov	r4, r0
 801dfc0:	b083      	sub	sp, #12
 801dfc2:	460d      	mov	r5, r1
 801dfc4:	f7f4 fe84 	bl	8012cd0 <GUI_Lock>
 801dfc8:	4620      	mov	r0, r4
 801dfca:	f7f2 fe99 	bl	8010d00 <GUI_ALLOC_LockH>
 801dfce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801dfd0:	9001      	str	r0, [sp, #4]
 801dfd2:	42ab      	cmp	r3, r5
 801dfd4:	d003      	beq.n	801dfde <TEXT_SetFont+0x26>
 801dfd6:	6345      	str	r5, [r0, #52]	; 0x34
 801dfd8:	4620      	mov	r0, r4
 801dfda:	f7fb ffb9 	bl	8019f50 <WM_InvalidateWindow>
 801dfde:	a801      	add	r0, sp, #4
 801dfe0:	f7f2 fea0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801dfe4:	f7f4 fe6a 	bl	8012cbc <GUI_Unlock>
 801dfe8:	b003      	add	sp, #12
 801dfea:	bd30      	pop	{r4, r5, pc}

0801dfec <TEXT_SetTextColor>:
 801dfec:	b900      	cbnz	r0, 801dff0 <TEXT_SetTextColor+0x4>
 801dfee:	4770      	bx	lr
 801dff0:	b530      	push	{r4, r5, lr}
 801dff2:	4604      	mov	r4, r0
 801dff4:	b083      	sub	sp, #12
 801dff6:	460d      	mov	r5, r1
 801dff8:	f7f4 fe6a 	bl	8012cd0 <GUI_Lock>
 801dffc:	4620      	mov	r0, r4
 801dffe:	f7f2 fe7f 	bl	8010d00 <GUI_ALLOC_LockH>
 801e002:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801e004:	9001      	str	r0, [sp, #4]
 801e006:	42ab      	cmp	r3, r5
 801e008:	d003      	beq.n	801e012 <TEXT_SetTextColor+0x26>
 801e00a:	6385      	str	r5, [r0, #56]	; 0x38
 801e00c:	4620      	mov	r0, r4
 801e00e:	f7fb ff9f 	bl	8019f50 <WM_InvalidateWindow>
 801e012:	a801      	add	r0, sp, #4
 801e014:	f7f2 fe86 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e018:	f7f4 fe50 	bl	8012cbc <GUI_Unlock>
 801e01c:	b003      	add	sp, #12
 801e01e:	bd30      	pop	{r4, r5, pc}

0801e020 <TEXT_SetDefaultFont>:
 801e020:	4b01      	ldr	r3, [pc, #4]	; (801e028 <TEXT_SetDefaultFont+0x8>)
 801e022:	6018      	str	r0, [r3, #0]
 801e024:	4770      	bx	lr
 801e026:	bf00      	nop
 801e028:	200002c8 	.word	0x200002c8

0801e02c <TEXT_SetDefaultTextColor>:
 801e02c:	4b01      	ldr	r3, [pc, #4]	; (801e034 <TEXT_SetDefaultTextColor+0x8>)
 801e02e:	6058      	str	r0, [r3, #4]
 801e030:	4770      	bx	lr
 801e032:	bf00      	nop
 801e034:	200002c8 	.word	0x200002c8

0801e038 <WIDGET__RotateRect90>:
 801e038:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e03c:	b470      	push	{r4, r5, r6}
 801e03e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801e042:	8856      	ldrh	r6, [r2, #2]
 801e044:	88d0      	ldrh	r0, [r2, #6]
 801e046:	f9b2 5000 	ldrsh.w	r5, [r2]
 801e04a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801e04e:	80ca      	strh	r2, [r1, #6]
 801e050:	1ae3      	subs	r3, r4, r3
 801e052:	b29b      	uxth	r3, r3
 801e054:	1a18      	subs	r0, r3, r0
 801e056:	1b9b      	subs	r3, r3, r6
 801e058:	804d      	strh	r5, [r1, #2]
 801e05a:	8008      	strh	r0, [r1, #0]
 801e05c:	808b      	strh	r3, [r1, #4]
 801e05e:	bc70      	pop	{r4, r5, r6}
 801e060:	4770      	bx	lr
 801e062:	bf00      	nop

0801e064 <WIDGET__GetClientRect>:
 801e064:	b510      	push	{r4, lr}
 801e066:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801e068:	071b      	lsls	r3, r3, #28
 801e06a:	b082      	sub	sp, #8
 801e06c:	460c      	mov	r4, r1
 801e06e:	d404      	bmi.n	801e07a <WIDGET__GetClientRect+0x16>
 801e070:	4608      	mov	r0, r1
 801e072:	f7fc fff3 	bl	801b05c <WM_GetClientRect>
 801e076:	b002      	add	sp, #8
 801e078:	bd10      	pop	{r4, pc}
 801e07a:	4668      	mov	r0, sp
 801e07c:	f7fc ffee 	bl	801b05c <WM_GetClientRect>
 801e080:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 801e084:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801e088:	f8bd 2000 	ldrh.w	r2, [sp]
 801e08c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801e090:	8020      	strh	r0, [r4, #0]
 801e092:	80a1      	strh	r1, [r4, #4]
 801e094:	8062      	strh	r2, [r4, #2]
 801e096:	80e3      	strh	r3, [r4, #6]
 801e098:	b002      	add	sp, #8
 801e09a:	bd10      	pop	{r4, pc}

0801e09c <WIDGET__GetXSize>:
 801e09c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801e09e:	071b      	lsls	r3, r3, #28
 801e0a0:	bf4b      	itete	mi
 801e0a2:	f9b0 3006 	ldrshmi.w	r3, [r0, #6]
 801e0a6:	f9b0 3004 	ldrshpl.w	r3, [r0, #4]
 801e0aa:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 801e0ae:	f9b0 0000 	ldrshpl.w	r0, [r0]
 801e0b2:	1a18      	subs	r0, r3, r0
 801e0b4:	3001      	adds	r0, #1
 801e0b6:	4770      	bx	lr

0801e0b8 <WIDGET__GetYSize>:
 801e0b8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801e0ba:	071b      	lsls	r3, r3, #28
 801e0bc:	bf4b      	itete	mi
 801e0be:	f9b0 3004 	ldrshmi.w	r3, [r0, #4]
 801e0c2:	f9b0 3006 	ldrshpl.w	r3, [r0, #6]
 801e0c6:	f9b0 0000 	ldrshmi.w	r0, [r0]
 801e0ca:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 801e0ce:	1a18      	subs	r0, r3, r0
 801e0d0:	3001      	adds	r0, #1
 801e0d2:	4770      	bx	lr

0801e0d4 <WIDGET__Init>:
 801e0d4:	4b02      	ldr	r3, [pc, #8]	; (801e0e0 <WIDGET__Init+0xc>)
 801e0d6:	8642      	strh	r2, [r0, #50]	; 0x32
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	8601      	strh	r1, [r0, #48]	; 0x30
 801e0dc:	62c3      	str	r3, [r0, #44]	; 0x2c
 801e0de:	4770      	bx	lr
 801e0e0:	200002d8 	.word	0x200002d8

0801e0e4 <WIDGET_GetState>:
 801e0e4:	b510      	push	{r4, lr}
 801e0e6:	4604      	mov	r4, r0
 801e0e8:	b082      	sub	sp, #8
 801e0ea:	b168      	cbz	r0, 801e108 <WIDGET_GetState+0x24>
 801e0ec:	f7f4 fdf0 	bl	8012cd0 <GUI_Lock>
 801e0f0:	4620      	mov	r0, r4
 801e0f2:	f7f2 fe05 	bl	8010d00 <GUI_ALLOC_LockH>
 801e0f6:	ab02      	add	r3, sp, #8
 801e0f8:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 801e0fa:	f843 0d04 	str.w	r0, [r3, #-4]!
 801e0fe:	4618      	mov	r0, r3
 801e100:	f7f2 fe10 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e104:	f7f4 fdda 	bl	8012cbc <GUI_Unlock>
 801e108:	4620      	mov	r0, r4
 801e10a:	b002      	add	sp, #8
 801e10c:	bd10      	pop	{r4, pc}
 801e10e:	bf00      	nop

0801e110 <WIDGET_OrState>:
 801e110:	b900      	cbnz	r0, 801e114 <WIDGET_OrState+0x4>
 801e112:	4770      	bx	lr
 801e114:	b530      	push	{r4, r5, lr}
 801e116:	4604      	mov	r4, r0
 801e118:	b083      	sub	sp, #12
 801e11a:	460d      	mov	r5, r1
 801e11c:	f7f4 fdd8 	bl	8012cd0 <GUI_Lock>
 801e120:	4620      	mov	r0, r4
 801e122:	f7f2 fded 	bl	8010d00 <GUI_ALLOC_LockH>
 801e126:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801e128:	9001      	str	r0, [sp, #4]
 801e12a:	ea35 0301 	bics.w	r3, r5, r1
 801e12e:	d004      	beq.n	801e13a <WIDGET_OrState+0x2a>
 801e130:	4329      	orrs	r1, r5
 801e132:	8641      	strh	r1, [r0, #50]	; 0x32
 801e134:	4620      	mov	r0, r4
 801e136:	f7fb ff0b 	bl	8019f50 <WM_InvalidateWindow>
 801e13a:	a801      	add	r0, sp, #4
 801e13c:	f7f2 fdf2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e140:	f7f4 fdbc 	bl	8012cbc <GUI_Unlock>
 801e144:	b003      	add	sp, #12
 801e146:	bd30      	pop	{r4, r5, pc}

0801e148 <WIDGET_AndState>:
 801e148:	b900      	cbnz	r0, 801e14c <WIDGET_AndState+0x4>
 801e14a:	4770      	bx	lr
 801e14c:	b530      	push	{r4, r5, lr}
 801e14e:	4604      	mov	r4, r0
 801e150:	b083      	sub	sp, #12
 801e152:	460d      	mov	r5, r1
 801e154:	f7f4 fdbc 	bl	8012cd0 <GUI_Lock>
 801e158:	4620      	mov	r0, r4
 801e15a:	f7f2 fdd1 	bl	8010d00 <GUI_ALLOC_LockH>
 801e15e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801e160:	9001      	str	r0, [sp, #4]
 801e162:	ea23 0105 	bic.w	r1, r3, r5
 801e166:	428b      	cmp	r3, r1
 801e168:	d003      	beq.n	801e172 <WIDGET_AndState+0x2a>
 801e16a:	8641      	strh	r1, [r0, #50]	; 0x32
 801e16c:	4620      	mov	r0, r4
 801e16e:	f7fb feef 	bl	8019f50 <WM_InvalidateWindow>
 801e172:	a801      	add	r0, sp, #4
 801e174:	f7f2 fdd6 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e178:	f7f4 fda0 	bl	8012cbc <GUI_Unlock>
 801e17c:	b003      	add	sp, #12
 801e17e:	bd30      	pop	{r4, r5, pc}

0801e180 <WIDGET_SetFocusable>:
 801e180:	b510      	push	{r4, lr}
 801e182:	4604      	mov	r4, r0
 801e184:	b082      	sub	sp, #8
 801e186:	b111      	cbz	r1, 801e18e <WIDGET_SetFocusable+0xe>
 801e188:	b9d0      	cbnz	r0, 801e1c0 <WIDGET_SetFocusable+0x40>
 801e18a:	b002      	add	sp, #8
 801e18c:	bd10      	pop	{r4, pc}
 801e18e:	2800      	cmp	r0, #0
 801e190:	d0fb      	beq.n	801e18a <WIDGET_SetFocusable+0xa>
 801e192:	f7f4 fd9d 	bl	8012cd0 <GUI_Lock>
 801e196:	4620      	mov	r0, r4
 801e198:	f7f2 fdb2 	bl	8010d00 <GUI_ALLOC_LockH>
 801e19c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801e19e:	9001      	str	r0, [sp, #4]
 801e1a0:	f022 0310 	bic.w	r3, r2, #16
 801e1a4:	b29b      	uxth	r3, r3
 801e1a6:	429a      	cmp	r2, r3
 801e1a8:	d003      	beq.n	801e1b2 <WIDGET_SetFocusable+0x32>
 801e1aa:	8643      	strh	r3, [r0, #50]	; 0x32
 801e1ac:	4620      	mov	r0, r4
 801e1ae:	f7fb fecf 	bl	8019f50 <WM_InvalidateWindow>
 801e1b2:	a801      	add	r0, sp, #4
 801e1b4:	f7f2 fdb6 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e1b8:	f7f4 fd80 	bl	8012cbc <GUI_Unlock>
 801e1bc:	b002      	add	sp, #8
 801e1be:	bd10      	pop	{r4, pc}
 801e1c0:	f7f4 fd86 	bl	8012cd0 <GUI_Lock>
 801e1c4:	4620      	mov	r0, r4
 801e1c6:	f7f2 fd9b 	bl	8010d00 <GUI_ALLOC_LockH>
 801e1ca:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801e1cc:	9001      	str	r0, [sp, #4]
 801e1ce:	06da      	lsls	r2, r3, #27
 801e1d0:	d4ef      	bmi.n	801e1b2 <WIDGET_SetFocusable+0x32>
 801e1d2:	f043 0310 	orr.w	r3, r3, #16
 801e1d6:	8643      	strh	r3, [r0, #50]	; 0x32
 801e1d8:	4620      	mov	r0, r4
 801e1da:	f7fb feb9 	bl	8019f50 <WM_InvalidateWindow>
 801e1de:	e7e8      	b.n	801e1b2 <WIDGET_SetFocusable+0x32>

0801e1e0 <WIDGET_HandleActive>:
 801e1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1e4:	b084      	sub	sp, #16
 801e1e6:	b920      	cbnz	r0, 801e1f2 <WIDGET_HandleActive+0x12>
 801e1e8:	2401      	movs	r4, #1
 801e1ea:	4620      	mov	r0, r4
 801e1ec:	b004      	add	sp, #16
 801e1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1f2:	460e      	mov	r6, r1
 801e1f4:	4607      	mov	r7, r0
 801e1f6:	f7f2 fd83 	bl	8010d00 <GUI_ALLOC_LockH>
 801e1fa:	6833      	ldr	r3, [r6, #0]
 801e1fc:	9002      	str	r0, [sp, #8]
 801e1fe:	2b16      	cmp	r3, #22
 801e200:	4605      	mov	r5, r0
 801e202:	f000 8090 	beq.w	801e326 <WIDGET_HandleActive+0x146>
 801e206:	dd2a      	ble.n	801e25e <WIDGET_HandleActive+0x7e>
 801e208:	2b1f      	cmp	r3, #31
 801e20a:	d07c      	beq.n	801e306 <WIDGET_HandleActive+0x126>
 801e20c:	dd51      	ble.n	801e2b2 <WIDGET_HandleActive+0xd2>
 801e20e:	2b31      	cmp	r3, #49	; 0x31
 801e210:	d037      	beq.n	801e282 <WIDGET_HandleActive+0xa2>
 801e212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e216:	d148      	bne.n	801e2aa <WIDGET_HandleActive+0xca>
 801e218:	68f2      	ldr	r2, [r6, #12]
 801e21a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801e21c:	6814      	ldr	r4, [r2, #0]
 801e21e:	681b      	ldr	r3, [r3, #0]
 801e220:	62c2      	str	r2, [r0, #44]	; 0x2c
 801e222:	a802      	add	r0, sp, #8
 801e224:	1b1c      	subs	r4, r3, r4
 801e226:	f7f2 fd7d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e22a:	f7f4 fd51 	bl	8012cd0 <GUI_Lock>
 801e22e:	4638      	mov	r0, r7
 801e230:	f7f2 fd66 	bl	8010d00 <GUI_ALLOC_LockH>
 801e234:	ad04      	add	r5, sp, #16
 801e236:	4262      	negs	r2, r4
 801e238:	9400      	str	r4, [sp, #0]
 801e23a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801e23e:	4623      	mov	r3, r4
 801e240:	4611      	mov	r1, r2
 801e242:	f7fe fb3b 	bl	801c8bc <WM__UpdateChildPositions>
 801e246:	4628      	mov	r0, r5
 801e248:	f7f2 fd6c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e24c:	f7f4 fd36 	bl	8012cbc <GUI_Unlock>
 801e250:	4638      	mov	r0, r7
 801e252:	f7fb fe7d 	bl	8019f50 <WM_InvalidateWindow>
 801e256:	9d02      	ldr	r5, [sp, #8]
 801e258:	2400      	movs	r4, #0
 801e25a:	b95d      	cbnz	r5, 801e274 <WIDGET_HandleActive+0x94>
 801e25c:	e7c5      	b.n	801e1ea <WIDGET_HandleActive+0xa>
 801e25e:	2b11      	cmp	r3, #17
 801e260:	d057      	beq.n	801e312 <WIDGET_HandleActive+0x132>
 801e262:	dd3c      	ble.n	801e2de <WIDGET_HandleActive+0xfe>
 801e264:	2b14      	cmp	r3, #20
 801e266:	d011      	beq.n	801e28c <WIDGET_HandleActive+0xac>
 801e268:	2b15      	cmp	r3, #21
 801e26a:	d11e      	bne.n	801e2aa <WIDGET_HandleActive+0xca>
 801e26c:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 801e270:	60f3      	str	r3, [r6, #12]
 801e272:	2400      	movs	r4, #0
 801e274:	a802      	add	r0, sp, #8
 801e276:	f7f2 fd55 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e27a:	4620      	mov	r0, r4
 801e27c:	b004      	add	sp, #16
 801e27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e282:	2400      	movs	r4, #0
 801e284:	60f4      	str	r4, [r6, #12]
 801e286:	2d00      	cmp	r5, #0
 801e288:	d1f4      	bne.n	801e274 <WIDGET_HandleActive+0x94>
 801e28a:	e7ae      	b.n	801e1ea <WIDGET_HandleActive+0xa>
 801e28c:	68f4      	ldr	r4, [r6, #12]
 801e28e:	4621      	mov	r1, r4
 801e290:	f7fb fe4c 	bl	8019f2c <WM__GetClientRectWin>
 801e294:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801e296:	4621      	mov	r1, r4
 801e298:	4620      	mov	r0, r4
 801e29a:	681a      	ldr	r2, [r3, #0]
 801e29c:	f7f5 fdf2 	bl	8013e84 <GUI__ReduceRect>
 801e2a0:	9d02      	ldr	r5, [sp, #8]
 801e2a2:	2400      	movs	r4, #0
 801e2a4:	2d00      	cmp	r5, #0
 801e2a6:	d1e5      	bne.n	801e274 <WIDGET_HandleActive+0x94>
 801e2a8:	e79f      	b.n	801e1ea <WIDGET_HandleActive+0xa>
 801e2aa:	2401      	movs	r4, #1
 801e2ac:	2d00      	cmp	r5, #0
 801e2ae:	d1e1      	bne.n	801e274 <WIDGET_HandleActive+0x94>
 801e2b0:	e79b      	b.n	801e1ea <WIDGET_HandleActive+0xa>
 801e2b2:	2b1e      	cmp	r3, #30
 801e2b4:	d1f9      	bne.n	801e2aa <WIDGET_HandleActive+0xca>
 801e2b6:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801e2ba:	f1b8 0f01 	cmp.w	r8, #1
 801e2be:	d136      	bne.n	801e32e <WIDGET_HandleActive+0x14e>
 801e2c0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801e2c2:	f003 0410 	and.w	r4, r3, #16
 801e2c6:	b2a4      	uxth	r4, r4
 801e2c8:	2c00      	cmp	r4, #0
 801e2ca:	d153      	bne.n	801e374 <WIDGET_HandleActive+0x194>
 801e2cc:	a802      	add	r0, sp, #8
 801e2ce:	f7f2 fd29 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e2d2:	9d02      	ldr	r5, [sp, #8]
 801e2d4:	f8c6 800c 	str.w	r8, [r6, #12]
 801e2d8:	2d00      	cmp	r5, #0
 801e2da:	d1cb      	bne.n	801e274 <WIDGET_HandleActive+0x94>
 801e2dc:	e785      	b.n	801e1ea <WIDGET_HandleActive+0xa>
 801e2de:	2b0d      	cmp	r3, #13
 801e2e0:	d1e3      	bne.n	801e2aa <WIDGET_HandleActive+0xca>
 801e2e2:	68f3      	ldr	r3, [r6, #12]
 801e2e4:	68db      	ldr	r3, [r3, #12]
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d0df      	beq.n	801e2aa <WIDGET_HandleActive+0xca>
 801e2ea:	7a1b      	ldrb	r3, [r3, #8]
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d0dc      	beq.n	801e2aa <WIDGET_HandleActive+0xca>
 801e2f0:	a802      	add	r0, sp, #8
 801e2f2:	f7f2 fd17 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e2f6:	4638      	mov	r0, r7
 801e2f8:	f003 fdf6 	bl	8021ee8 <WM_BringToTop>
 801e2fc:	9d02      	ldr	r5, [sp, #8]
 801e2fe:	2400      	movs	r4, #0
 801e300:	2d00      	cmp	r5, #0
 801e302:	d1b7      	bne.n	801e274 <WIDGET_HandleActive+0x94>
 801e304:	e771      	b.n	801e1ea <WIDGET_HandleActive+0xa>
 801e306:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801e308:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801e30c:	60f3      	str	r3, [r6, #12]
 801e30e:	2400      	movs	r4, #0
 801e310:	e7b0      	b.n	801e274 <WIDGET_HandleActive+0x94>
 801e312:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801e314:	06db      	lsls	r3, r3, #27
 801e316:	d504      	bpl.n	801e322 <WIDGET_HandleActive+0x142>
 801e318:	68f3      	ldr	r3, [r6, #12]
 801e31a:	b113      	cbz	r3, 801e322 <WIDGET_HandleActive+0x142>
 801e31c:	7a1b      	ldrb	r3, [r3, #8]
 801e31e:	2b00      	cmp	r3, #0
 801e320:	d13e      	bne.n	801e3a0 <WIDGET_HandleActive+0x1c0>
 801e322:	2401      	movs	r4, #1
 801e324:	e7a6      	b.n	801e274 <WIDGET_HandleActive+0x94>
 801e326:	68f3      	ldr	r3, [r6, #12]
 801e328:	8603      	strh	r3, [r0, #48]	; 0x30
 801e32a:	2400      	movs	r4, #0
 801e32c:	e7a2      	b.n	801e274 <WIDGET_HandleActive+0x94>
 801e32e:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 801e330:	f7f4 fcce 	bl	8012cd0 <GUI_Lock>
 801e334:	4638      	mov	r0, r7
 801e336:	f7f2 fce3 	bl	8010d00 <GUI_ALLOC_LockH>
 801e33a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801e33c:	9003      	str	r0, [sp, #12]
 801e33e:	f024 0401 	bic.w	r4, r4, #1
 801e342:	429c      	cmp	r4, r3
 801e344:	d003      	beq.n	801e34e <WIDGET_HandleActive+0x16e>
 801e346:	8644      	strh	r4, [r0, #50]	; 0x32
 801e348:	4638      	mov	r0, r7
 801e34a:	f7fb fe01 	bl	8019f50 <WM_InvalidateWindow>
 801e34e:	a803      	add	r0, sp, #12
 801e350:	f7f2 fce8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e354:	2409      	movs	r4, #9
 801e356:	f7f4 fcb1 	bl	8012cbc <GUI_Unlock>
 801e35a:	a802      	add	r0, sp, #8
 801e35c:	f7f2 fce2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e360:	4621      	mov	r1, r4
 801e362:	4638      	mov	r0, r7
 801e364:	f7fd f882 	bl	801b46c <WM_NotifyParent>
 801e368:	9d02      	ldr	r5, [sp, #8]
 801e36a:	2400      	movs	r4, #0
 801e36c:	60f4      	str	r4, [r6, #12]
 801e36e:	2d00      	cmp	r5, #0
 801e370:	d180      	bne.n	801e274 <WIDGET_HandleActive+0x94>
 801e372:	e73a      	b.n	801e1ea <WIDGET_HandleActive+0xa>
 801e374:	f043 0401 	orr.w	r4, r3, #1
 801e378:	f7f4 fcaa 	bl	8012cd0 <GUI_Lock>
 801e37c:	4638      	mov	r0, r7
 801e37e:	f7f2 fcbf 	bl	8010d00 <GUI_ALLOC_LockH>
 801e382:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801e384:	9003      	str	r0, [sp, #12]
 801e386:	42a3      	cmp	r3, r4
 801e388:	d003      	beq.n	801e392 <WIDGET_HandleActive+0x1b2>
 801e38a:	8644      	strh	r4, [r0, #50]	; 0x32
 801e38c:	4638      	mov	r0, r7
 801e38e:	f7fb fddf 	bl	8019f50 <WM_InvalidateWindow>
 801e392:	a803      	add	r0, sp, #12
 801e394:	f7f2 fcc6 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e398:	2408      	movs	r4, #8
 801e39a:	f7f4 fc8f 	bl	8012cbc <GUI_Unlock>
 801e39e:	e7dc      	b.n	801e35a <WIDGET_HandleActive+0x17a>
 801e3a0:	a802      	add	r0, sp, #8
 801e3a2:	f7f2 fcbf 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e3a6:	4638      	mov	r0, r7
 801e3a8:	f7fd f918 	bl	801b5dc <WM_SetFocus>
 801e3ac:	9d02      	ldr	r5, [sp, #8]
 801e3ae:	2401      	movs	r4, #1
 801e3b0:	2d00      	cmp	r5, #0
 801e3b2:	f47f af5f 	bne.w	801e274 <WIDGET_HandleActive+0x94>
 801e3b6:	e718      	b.n	801e1ea <WIDGET_HandleActive+0xa>

0801e3b8 <WIDGET__DrawVLine>:
 801e3b8:	b470      	push	{r4, r5, r6}
 801e3ba:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 801e3bc:	460e      	mov	r6, r1
 801e3be:	4611      	mov	r1, r2
 801e3c0:	0722      	lsls	r2, r4, #28
 801e3c2:	d404      	bmi.n	801e3ce <WIDGET__DrawVLine+0x16>
 801e3c4:	4630      	mov	r0, r6
 801e3c6:	461a      	mov	r2, r3
 801e3c8:	bc70      	pop	{r4, r5, r6}
 801e3ca:	f7f4 ba23 	b.w	8012814 <GUI_DrawVLine>
 801e3ce:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e3d2:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801e3d6:	1b2d      	subs	r5, r5, r4
 801e3d8:	b2ac      	uxth	r4, r5
 801e3da:	1a62      	subs	r2, r4, r1
 801e3dc:	1ae4      	subs	r4, r4, r3
 801e3de:	b230      	sxth	r0, r6
 801e3e0:	b221      	sxth	r1, r4
 801e3e2:	b212      	sxth	r2, r2
 801e3e4:	bc70      	pop	{r4, r5, r6}
 801e3e6:	f7f4 b9bf 	b.w	8012768 <GUI_DrawHLine>
 801e3ea:	bf00      	nop

0801e3ec <WIDGET__FillRectEx>:
 801e3ec:	b530      	push	{r4, r5, lr}
 801e3ee:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801e3f0:	071b      	lsls	r3, r3, #28
 801e3f2:	b083      	sub	sp, #12
 801e3f4:	d516      	bpl.n	801e424 <WIDGET__FillRectEx+0x38>
 801e3f6:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e3fa:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801e3fe:	884c      	ldrh	r4, [r1, #2]
 801e400:	88c8      	ldrh	r0, [r1, #6]
 801e402:	f9b1 5000 	ldrsh.w	r5, [r1]
 801e406:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 801e40a:	f8ad 1006 	strh.w	r1, [sp, #6]
 801e40e:	1ad2      	subs	r2, r2, r3
 801e410:	b293      	uxth	r3, r2
 801e412:	1a1a      	subs	r2, r3, r0
 801e414:	1b1b      	subs	r3, r3, r4
 801e416:	f8ad 5002 	strh.w	r5, [sp, #2]
 801e41a:	f8ad 2000 	strh.w	r2, [sp]
 801e41e:	f8ad 3004 	strh.w	r3, [sp, #4]
 801e422:	4669      	mov	r1, sp
 801e424:	4608      	mov	r0, r1
 801e426:	f7f4 fa4b 	bl	80128c0 <GUI_FillRectEx>
 801e42a:	b003      	add	sp, #12
 801e42c:	bd30      	pop	{r4, r5, pc}
 801e42e:	bf00      	nop

0801e430 <WIDGET__DrawTriangle>:
 801e430:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801e432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e436:	460d      	mov	r5, r1
 801e438:	0701      	lsls	r1, r0, #28
 801e43a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801e43e:	d411      	bmi.n	801e464 <WIDGET__DrawTriangle+0x34>
 801e440:	2b00      	cmp	r3, #0
 801e442:	db21      	blt.n	801e488 <WIDGET__DrawTriangle+0x58>
 801e444:	1ad6      	subs	r6, r2, r3
 801e446:	189c      	adds	r4, r3, r2
 801e448:	1c57      	adds	r7, r2, #1
 801e44a:	4622      	mov	r2, r4
 801e44c:	4631      	mov	r1, r6
 801e44e:	4628      	mov	r0, r5
 801e450:	3601      	adds	r6, #1
 801e452:	f7f4 f9df 	bl	8012814 <GUI_DrawVLine>
 801e456:	42b7      	cmp	r7, r6
 801e458:	f104 34ff 	add.w	r4, r4, #4294967295
 801e45c:	4445      	add	r5, r8
 801e45e:	d1f4      	bne.n	801e44a <WIDGET__DrawTriangle+0x1a>
 801e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e464:	2b00      	cmp	r3, #0
 801e466:	dbfb      	blt.n	801e460 <WIDGET__DrawTriangle+0x30>
 801e468:	1ad6      	subs	r6, r2, r3
 801e46a:	189c      	adds	r4, r3, r2
 801e46c:	1c57      	adds	r7, r2, #1
 801e46e:	4622      	mov	r2, r4
 801e470:	4631      	mov	r1, r6
 801e472:	4628      	mov	r0, r5
 801e474:	3601      	adds	r6, #1
 801e476:	f7f4 f977 	bl	8012768 <GUI_DrawHLine>
 801e47a:	42be      	cmp	r6, r7
 801e47c:	f104 34ff 	add.w	r4, r4, #4294967295
 801e480:	4445      	add	r5, r8
 801e482:	d1f4      	bne.n	801e46e <WIDGET__DrawTriangle+0x3e>
 801e484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e48c <_DrawUpRect>:
 801e48c:	4770      	bx	lr
 801e48e:	bf00      	nop

0801e490 <_DrawFlat>:
 801e490:	4770      	bx	lr
 801e492:	bf00      	nop

0801e494 <_DrawDownRect>:
 801e494:	4770      	bx	lr
 801e496:	bf00      	nop

0801e498 <_DrawDown>:
 801e498:	4770      	bx	lr
 801e49a:	bf00      	nop

0801e49c <_DrawUp>:
 801e49c:	4770      	bx	lr
 801e49e:	bf00      	nop

0801e4a0 <_DrawDownRect>:
 801e4a0:	b510      	push	{r4, lr}
 801e4a2:	b09e      	sub	sp, #120	; 0x78
 801e4a4:	4604      	mov	r4, r0
 801e4a6:	a801      	add	r0, sp, #4
 801e4a8:	f7f3 f95a 	bl	8011760 <GUI_SaveContext_W>
 801e4ac:	4b09      	ldr	r3, [pc, #36]	; (801e4d4 <_DrawDownRect+0x34>)
 801e4ae:	6818      	ldr	r0, [r3, #0]
 801e4b0:	f7f6 fb26 	bl	8014b00 <LCD_SetColor>
 801e4b4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e4b8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e4bc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801e4c0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e4c4:	f000 fa44 	bl	801e950 <GUI_DrawRect>
 801e4c8:	a801      	add	r0, sp, #4
 801e4ca:	f7f3 f953 	bl	8011774 <GUI_RestoreContext>
 801e4ce:	b01e      	add	sp, #120	; 0x78
 801e4d0:	bd10      	pop	{r4, pc}
 801e4d2:	bf00      	nop
 801e4d4:	200008b4 	.word	0x200008b4

0801e4d8 <_DrawUp>:
 801e4d8:	b500      	push	{lr}
 801e4da:	b0a1      	sub	sp, #132	; 0x84
 801e4dc:	a801      	add	r0, sp, #4
 801e4de:	f7fc fdbd 	bl	801b05c <WM_GetClientRect>
 801e4e2:	a803      	add	r0, sp, #12
 801e4e4:	f7f3 f93c 	bl	8011760 <GUI_SaveContext_W>
 801e4e8:	4b09      	ldr	r3, [pc, #36]	; (801e510 <_DrawUp+0x38>)
 801e4ea:	6818      	ldr	r0, [r3, #0]
 801e4ec:	f7f6 fb08 	bl	8014b00 <LCD_SetColor>
 801e4f0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801e4f4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801e4f8:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801e4fc:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801e500:	f000 fa26 	bl	801e950 <GUI_DrawRect>
 801e504:	a803      	add	r0, sp, #12
 801e506:	f7f3 f935 	bl	8011774 <GUI_RestoreContext>
 801e50a:	b021      	add	sp, #132	; 0x84
 801e50c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e510:	200008b4 	.word	0x200008b4

0801e514 <_DrawUpRect>:
 801e514:	b510      	push	{r4, lr}
 801e516:	b09e      	sub	sp, #120	; 0x78
 801e518:	4604      	mov	r4, r0
 801e51a:	a801      	add	r0, sp, #4
 801e51c:	f7f3 f920 	bl	8011760 <GUI_SaveContext_W>
 801e520:	4b09      	ldr	r3, [pc, #36]	; (801e548 <_DrawUpRect+0x34>)
 801e522:	6818      	ldr	r0, [r3, #0]
 801e524:	f7f6 faec 	bl	8014b00 <LCD_SetColor>
 801e528:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e52c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e530:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801e534:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e538:	f000 fa0a 	bl	801e950 <GUI_DrawRect>
 801e53c:	a801      	add	r0, sp, #4
 801e53e:	f7f3 f919 	bl	8011774 <GUI_RestoreContext>
 801e542:	b01e      	add	sp, #120	; 0x78
 801e544:	bd10      	pop	{r4, pc}
 801e546:	bf00      	nop
 801e548:	200008b4 	.word	0x200008b4

0801e54c <_DrawDown>:
 801e54c:	b500      	push	{lr}
 801e54e:	b0a1      	sub	sp, #132	; 0x84
 801e550:	a801      	add	r0, sp, #4
 801e552:	f7fc fd83 	bl	801b05c <WM_GetClientRect>
 801e556:	a803      	add	r0, sp, #12
 801e558:	f7f3 f902 	bl	8011760 <GUI_SaveContext_W>
 801e55c:	4b09      	ldr	r3, [pc, #36]	; (801e584 <_DrawDown+0x38>)
 801e55e:	6818      	ldr	r0, [r3, #0]
 801e560:	f7f6 face 	bl	8014b00 <LCD_SetColor>
 801e564:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801e568:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801e56c:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801e570:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801e574:	f000 f9ec 	bl	801e950 <GUI_DrawRect>
 801e578:	a803      	add	r0, sp, #12
 801e57a:	f7f3 f8fb 	bl	8011774 <GUI_RestoreContext>
 801e57e:	b021      	add	sp, #132	; 0x84
 801e580:	f85d fb04 	ldr.w	pc, [sp], #4
 801e584:	200008b4 	.word	0x200008b4

0801e588 <WINDOW_Callback>:
 801e588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e58c:	6846      	ldr	r6, [r0, #4]
 801e58e:	b083      	sub	sp, #12
 801e590:	4604      	mov	r4, r0
 801e592:	4630      	mov	r0, r6
 801e594:	f7f2 fbb4 	bl	8010d00 <GUI_ALLOC_LockH>
 801e598:	ad02      	add	r5, sp, #8
 801e59a:	4603      	mov	r3, r0
 801e59c:	f845 0d08 	str.w	r0, [r5, #-8]!
 801e5a0:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
 801e5a4:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 801e5a6:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801e5aa:	4628      	mov	r0, r5
 801e5ac:	f7f2 fbba 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e5b0:	6823      	ldr	r3, [r4, #0]
 801e5b2:	3b0e      	subs	r3, #14
 801e5b4:	2b1c      	cmp	r3, #28
 801e5b6:	d819      	bhi.n	801e5ec <WINDOW_Callback+0x64>
 801e5b8:	e8df f003 	tbb	[pc, r3]
 801e5bc:	18180f2d 	.word	0x18180f2d
 801e5c0:	18181818 	.word	0x18181818
 801e5c4:	18181818 	.word	0x18181818
 801e5c8:	18181818 	.word	0x18181818
 801e5cc:	18564f3a 	.word	0x18564f3a
 801e5d0:	1818186f 	.word	0x1818186f
 801e5d4:	18181818 	.word	0x18181818
 801e5d8:	1f          	.byte	0x1f
 801e5d9:	00          	.byte	0x00
 801e5da:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801e5de:	4599      	cmp	r9, r3
 801e5e0:	d004      	beq.n	801e5ec <WINDOW_Callback+0x64>
 801e5e2:	4648      	mov	r0, r9
 801e5e4:	f7f6 fa86 	bl	8014af4 <LCD_SetBkColor>
 801e5e8:	f7f3 fa2c 	bl	8011a44 <GUI_Clear>
 801e5ec:	2f00      	cmp	r7, #0
 801e5ee:	d059      	beq.n	801e6a4 <WINDOW_Callback+0x11c>
 801e5f0:	4620      	mov	r0, r4
 801e5f2:	47b8      	blx	r7
 801e5f4:	b003      	add	sp, #12
 801e5f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e5fa:	4630      	mov	r0, r6
 801e5fc:	f7f2 fb80 	bl	8010d00 <GUI_ALLOC_LockH>
 801e600:	68e3      	ldr	r3, [r4, #12]
 801e602:	9000      	str	r0, [sp, #0]
 801e604:	2b00      	cmp	r3, #0
 801e606:	d05e      	beq.n	801e6c6 <WINDOW_Callback+0x13e>
 801e608:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e60a:	4628      	mov	r0, r5
 801e60c:	f7f2 fb8a 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e610:	b003      	add	sp, #12
 801e612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e616:	68e3      	ldr	r3, [r4, #12]
 801e618:	685a      	ldr	r2, [r3, #4]
 801e61a:	2a00      	cmp	r2, #0
 801e61c:	dde6      	ble.n	801e5ec <WINDOW_Callback+0x64>
 801e61e:	681b      	ldr	r3, [r3, #0]
 801e620:	2b09      	cmp	r3, #9
 801e622:	d04c      	beq.n	801e6be <WINDOW_Callback+0x136>
 801e624:	2b0a      	cmp	r3, #10
 801e626:	d1e1      	bne.n	801e5ec <WINDOW_Callback+0x64>
 801e628:	4630      	mov	r0, r6
 801e62a:	f003 ffbb 	bl	80225a4 <WM_SetFocusOnPrevChild>
 801e62e:	e7e1      	b.n	801e5f4 <WINDOW_Callback+0x6c>
 801e630:	68e4      	ldr	r4, [r4, #12]
 801e632:	2c01      	cmp	r4, #1
 801e634:	d1de      	bne.n	801e5f4 <WINDOW_Callback+0x6c>
 801e636:	4640      	mov	r0, r8
 801e638:	f7fc ff0c 	bl	801b454 <WM_IsWindow>
 801e63c:	2800      	cmp	r0, #0
 801e63e:	d03e      	beq.n	801e6be <WINDOW_Callback+0x136>
 801e640:	4640      	mov	r0, r8
 801e642:	f7fc ffcb 	bl	801b5dc <WM_SetFocus>
 801e646:	4640      	mov	r0, r8
 801e648:	f7fc fed6 	bl	801b3f8 <WM_HasFocus>
 801e64c:	2800      	cmp	r0, #0
 801e64e:	d0d1      	beq.n	801e5f4 <WINDOW_Callback+0x6c>
 801e650:	4621      	mov	r1, r4
 801e652:	4640      	mov	r0, r8
 801e654:	f7ff fd5c 	bl	801e110 <WIDGET_OrState>
 801e658:	e7cc      	b.n	801e5f4 <WINDOW_Callback+0x6c>
 801e65a:	4621      	mov	r1, r4
 801e65c:	4630      	mov	r0, r6
 801e65e:	f7ff fdbf 	bl	801e1e0 <WIDGET_HandleActive>
 801e662:	b003      	add	sp, #12
 801e664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e668:	4630      	mov	r0, r6
 801e66a:	f7f2 fb49 	bl	8010d00 <GUI_ALLOC_LockH>
 801e66e:	68e4      	ldr	r4, [r4, #12]
 801e670:	9001      	str	r0, [sp, #4]
 801e672:	b164      	cbz	r4, 801e68e <WINDOW_Callback+0x106>
 801e674:	4631      	mov	r1, r6
 801e676:	6860      	ldr	r0, [r4, #4]
 801e678:	f7fe f8aa 	bl	801c7d0 <WM__IsAncestorOrSelf>
 801e67c:	4631      	mov	r1, r6
 801e67e:	b9a8      	cbnz	r0, 801e6ac <WINDOW_Callback+0x124>
 801e680:	6820      	ldr	r0, [r4, #0]
 801e682:	f7fe f893 	bl	801c7ac <WM__IsAncestor>
 801e686:	b110      	cbz	r0, 801e68e <WINDOW_Callback+0x106>
 801e688:	9b01      	ldr	r3, [sp, #4]
 801e68a:	6822      	ldr	r2, [r4, #0]
 801e68c:	639a      	str	r2, [r3, #56]	; 0x38
 801e68e:	a801      	add	r0, sp, #4
 801e690:	f7f2 fb48 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e694:	b003      	add	sp, #12
 801e696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e69a:	f8c4 900c 	str.w	r9, [r4, #12]
 801e69e:	b003      	add	sp, #12
 801e6a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6a4:	4620      	mov	r0, r4
 801e6a6:	f7fc fa39 	bl	801ab1c <WM_DefaultProc>
 801e6aa:	e7a3      	b.n	801e5f4 <WINDOW_Callback+0x6c>
 801e6ac:	6860      	ldr	r0, [r4, #4]
 801e6ae:	f7fe f87d 	bl	801c7ac <WM__IsAncestor>
 801e6b2:	2800      	cmp	r0, #0
 801e6b4:	d0eb      	beq.n	801e68e <WINDOW_Callback+0x106>
 801e6b6:	9b01      	ldr	r3, [sp, #4]
 801e6b8:	6862      	ldr	r2, [r4, #4]
 801e6ba:	639a      	str	r2, [r3, #56]	; 0x38
 801e6bc:	e7e7      	b.n	801e68e <WINDOW_Callback+0x106>
 801e6be:	4630      	mov	r0, r6
 801e6c0:	f003 ff28 	bl	8022514 <WM_SetFocusOnNextChild>
 801e6c4:	e796      	b.n	801e5f4 <WINDOW_Callback+0x6c>
 801e6c6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801e6c8:	60e3      	str	r3, [r4, #12]
 801e6ca:	e79e      	b.n	801e60a <WINDOW_Callback+0x82>

0801e6cc <WINDOW_CreateIndirect>:
 801e6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6d0:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801e6d4:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 801e6d8:	6985      	ldr	r5, [r0, #24]
 801e6da:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 801e6de:	f9b0 9010 	ldrsh.w	r9, [r0, #16]
 801e6e2:	f8b0 a012 	ldrh.w	sl, [r0, #18]
 801e6e6:	4c19      	ldr	r4, [pc, #100]	; (801e74c <WINDOW_CreateIndirect+0x80>)
 801e6e8:	b089      	sub	sp, #36	; 0x24
 801e6ea:	468b      	mov	fp, r1
 801e6ec:	4416      	add	r6, r2
 801e6ee:	441f      	add	r7, r3
 801e6f0:	3518      	adds	r5, #24
 801e6f2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801e6f6:	9305      	str	r3, [sp, #20]
 801e6f8:	f7f4 faea 	bl	8012cd0 <GUI_Lock>
 801e6fc:	9402      	str	r4, [sp, #8]
 801e6fe:	f8cd b000 	str.w	fp, [sp]
 801e702:	4639      	mov	r1, r7
 801e704:	4630      	mov	r0, r6
 801e706:	9503      	str	r5, [sp, #12]
 801e708:	f8cd a004 	str.w	sl, [sp, #4]
 801e70c:	464b      	mov	r3, r9
 801e70e:	4642      	mov	r2, r8
 801e710:	f7fb fc7a 	bl	801a008 <WM_CreateWindowAsChild>
 801e714:	4604      	mov	r4, r0
 801e716:	b190      	cbz	r0, 801e73e <WINDOW_CreateIndirect+0x72>
 801e718:	f7f2 faf2 	bl	8010d00 <GUI_ALLOC_LockH>
 801e71c:	9905      	ldr	r1, [sp, #20]
 801e71e:	9007      	str	r0, [sp, #28]
 801e720:	2210      	movs	r2, #16
 801e722:	f7ff fcd7 	bl	801e0d4 <WIDGET__Init>
 801e726:	a808      	add	r0, sp, #32
 801e728:	4a09      	ldr	r2, [pc, #36]	; (801e750 <WINDOW_CreateIndirect+0x84>)
 801e72a:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 801e72e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e730:	6812      	ldr	r2, [r2, #0]
 801e732:	6359      	str	r1, [r3, #52]	; 0x34
 801e734:	2100      	movs	r1, #0
 801e736:	6399      	str	r1, [r3, #56]	; 0x38
 801e738:	641a      	str	r2, [r3, #64]	; 0x40
 801e73a:	f7f2 faf3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801e73e:	f7f4 fabd 	bl	8012cbc <GUI_Unlock>
 801e742:	4620      	mov	r0, r4
 801e744:	b009      	add	sp, #36	; 0x24
 801e746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e74a:	bf00      	nop
 801e74c:	0801e589 	.word	0x0801e589
 801e750:	200002dc 	.word	0x200002dc

0801e754 <WINDOW_SetDefaultBkColor>:
 801e754:	4b01      	ldr	r3, [pc, #4]	; (801e75c <WINDOW_SetDefaultBkColor+0x8>)
 801e756:	6018      	str	r0, [r3, #0]
 801e758:	4770      	bx	lr
 801e75a:	bf00      	nop
 801e75c:	200002dc 	.word	0x200002dc

0801e760 <_GetIndexMask_0>:
 801e760:	b508      	push	{r3, lr}
 801e762:	f7f6 fc03 	bl	8014f6c <LCD_GetNumColors>
 801e766:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801e76a:	d014      	beq.n	801e796 <_GetIndexMask_0+0x36>
 801e76c:	287f      	cmp	r0, #127	; 0x7f
 801e76e:	d80e      	bhi.n	801e78e <_GetIndexMask_0+0x2e>
 801e770:	283f      	cmp	r0, #63	; 0x3f
 801e772:	d812      	bhi.n	801e79a <_GetIndexMask_0+0x3a>
 801e774:	281f      	cmp	r0, #31
 801e776:	d80c      	bhi.n	801e792 <_GetIndexMask_0+0x32>
 801e778:	280f      	cmp	r0, #15
 801e77a:	d810      	bhi.n	801e79e <_GetIndexMask_0+0x3e>
 801e77c:	2807      	cmp	r0, #7
 801e77e:	d812      	bhi.n	801e7a6 <_GetIndexMask_0+0x46>
 801e780:	2803      	cmp	r0, #3
 801e782:	d80e      	bhi.n	801e7a2 <_GetIndexMask_0+0x42>
 801e784:	2801      	cmp	r0, #1
 801e786:	bf94      	ite	ls
 801e788:	2000      	movls	r0, #0
 801e78a:	2001      	movhi	r0, #1
 801e78c:	bd08      	pop	{r3, pc}
 801e78e:	207f      	movs	r0, #127	; 0x7f
 801e790:	bd08      	pop	{r3, pc}
 801e792:	201f      	movs	r0, #31
 801e794:	bd08      	pop	{r3, pc}
 801e796:	20ff      	movs	r0, #255	; 0xff
 801e798:	bd08      	pop	{r3, pc}
 801e79a:	203f      	movs	r0, #63	; 0x3f
 801e79c:	bd08      	pop	{r3, pc}
 801e79e:	200f      	movs	r0, #15
 801e7a0:	bd08      	pop	{r3, pc}
 801e7a2:	2003      	movs	r0, #3
 801e7a4:	bd08      	pop	{r3, pc}
 801e7a6:	2007      	movs	r0, #7
 801e7a8:	bd08      	pop	{r3, pc}
 801e7aa:	bf00      	nop

0801e7ac <_Index2Color_0>:
 801e7ac:	b538      	push	{r3, r4, r5, lr}
 801e7ae:	4604      	mov	r4, r0
 801e7b0:	f7f6 fbdc 	bl	8014f6c <LCD_GetNumColors>
 801e7b4:	4605      	mov	r5, r0
 801e7b6:	f7f6 fbf9 	bl	8014fac <LCD_GetPalette>
 801e7ba:	42a5      	cmp	r5, r4
 801e7bc:	d903      	bls.n	801e7c6 <_Index2Color_0+0x1a>
 801e7be:	b118      	cbz	r0, 801e7c8 <_Index2Color_0+0x1c>
 801e7c0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801e7c4:	bd38      	pop	{r3, r4, r5, pc}
 801e7c6:	2000      	movs	r0, #0
 801e7c8:	bd38      	pop	{r3, r4, r5, pc}
 801e7ca:	bf00      	nop

0801e7cc <_Color2Index_0>:
 801e7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e7d0:	4606      	mov	r6, r0
 801e7d2:	f7f6 fbcb 	bl	8014f6c <LCD_GetNumColors>
 801e7d6:	4607      	mov	r7, r0
 801e7d8:	f7f6 fbe8 	bl	8014fac <LCD_GetPalette>
 801e7dc:	b158      	cbz	r0, 801e7f6 <_Color2Index_0+0x2a>
 801e7de:	f1a0 0804 	sub.w	r8, r0, #4
 801e7e2:	4643      	mov	r3, r8
 801e7e4:	2000      	movs	r0, #0
 801e7e6:	e002      	b.n	801e7ee <_Color2Index_0+0x22>
 801e7e8:	3001      	adds	r0, #1
 801e7ea:	4287      	cmp	r7, r0
 801e7ec:	dd05      	ble.n	801e7fa <_Color2Index_0+0x2e>
 801e7ee:	f853 2f04 	ldr.w	r2, [r3, #4]!
 801e7f2:	42b2      	cmp	r2, r6
 801e7f4:	d1f8      	bne.n	801e7e8 <_Color2Index_0+0x1c>
 801e7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e7fa:	2400      	movs	r4, #0
 801e7fc:	4625      	mov	r5, r4
 801e7fe:	f06f 497f 	mvn.w	r9, #4278190080	; 0xff000000
 801e802:	f858 1f04 	ldr.w	r1, [r8, #4]!
 801e806:	4630      	mov	r0, r6
 801e808:	f7f2 fe18 	bl	801143c <GUI_CalcColorDist>
 801e80c:	4581      	cmp	r9, r0
 801e80e:	bf88      	it	hi
 801e810:	462c      	movhi	r4, r5
 801e812:	f105 0501 	add.w	r5, r5, #1
 801e816:	bf88      	it	hi
 801e818:	4681      	movhi	r9, r0
 801e81a:	42af      	cmp	r7, r5
 801e81c:	dcf1      	bgt.n	801e802 <_Color2Index_0+0x36>
 801e81e:	4620      	mov	r0, r4
 801e820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801e824 <LCD_Index2Color_565>:
 801e824:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 801e828:	4a08      	ldr	r2, [pc, #32]	; (801e84c <LCD_Index2Color_565+0x28>)
 801e82a:	b410      	push	{r4}
 801e82c:	f3c0 1145 	ubfx	r1, r0, #5, #6
 801e830:	4c07      	ldr	r4, [pc, #28]	; (801e850 <LCD_Index2Color_565+0x2c>)
 801e832:	5cd3      	ldrb	r3, [r2, r3]
 801e834:	5c61      	ldrb	r1, [r4, r1]
 801e836:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e83a:	f000 001f 	and.w	r0, r0, #31
 801e83e:	041b      	lsls	r3, r3, #16
 801e840:	5c10      	ldrb	r0, [r2, r0]
 801e842:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801e846:	4418      	add	r0, r3
 801e848:	4770      	bx	lr
 801e84a:	bf00      	nop
 801e84c:	0802589c 	.word	0x0802589c
 801e850:	0802585c 	.word	0x0802585c

0801e854 <_Color2Index_565>:
 801e854:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801e858:	4a07      	ldr	r2, [pc, #28]	; (801e878 <_Color2Index_565+0x24>)
 801e85a:	b410      	push	{r4}
 801e85c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801e860:	4c06      	ldr	r4, [pc, #24]	; (801e87c <_Color2Index_565+0x28>)
 801e862:	5cd3      	ldrb	r3, [r2, r3]
 801e864:	5c61      	ldrb	r1, [r4, r1]
 801e866:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e86a:	b2c0      	uxtb	r0, r0
 801e86c:	02db      	lsls	r3, r3, #11
 801e86e:	5c10      	ldrb	r0, [r2, r0]
 801e870:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801e874:	4418      	add	r0, r3
 801e876:	4770      	bx	lr
 801e878:	0802565c 	.word	0x0802565c
 801e87c:	0802555c 	.word	0x0802555c

0801e880 <_GetIndexMask_565>:
 801e880:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e884:	4770      	bx	lr
 801e886:	bf00      	nop

0801e888 <_Color2IndexBulk>:
 801e888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e88a:	f8df e030 	ldr.w	lr, [pc, #48]	; 801e8bc <_Color2IndexBulk+0x34>
 801e88e:	4f0a      	ldr	r7, [pc, #40]	; (801e8b8 <_Color2IndexBulk+0x30>)
 801e890:	f850 6b04 	ldr.w	r6, [r0], #4
 801e894:	f3c6 4507 	ubfx	r5, r6, #16, #8
 801e898:	f3c6 2407 	ubfx	r4, r6, #8, #8
 801e89c:	5d7d      	ldrb	r5, [r7, r5]
 801e89e:	f81e 4004 	ldrb.w	r4, [lr, r4]
 801e8a2:	b2f6      	uxtb	r6, r6
 801e8a4:	02ed      	lsls	r5, r5, #11
 801e8a6:	5dbe      	ldrb	r6, [r7, r6]
 801e8a8:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 801e8ac:	4434      	add	r4, r6
 801e8ae:	3a01      	subs	r2, #1
 801e8b0:	800c      	strh	r4, [r1, #0]
 801e8b2:	4419      	add	r1, r3
 801e8b4:	d1ec      	bne.n	801e890 <_Color2IndexBulk+0x8>
 801e8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8b8:	0802565c 	.word	0x0802565c
 801e8bc:	0802555c 	.word	0x0802555c

0801e8c0 <_Index2ColorBulk>:
 801e8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8c2:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 801e8c6:	3c01      	subs	r4, #1
 801e8c8:	3a01      	subs	r2, #1
 801e8ca:	fb03 0002 	mla	r0, r3, r2, r0
 801e8ce:	4f0f      	ldr	r7, [pc, #60]	; (801e90c <_Index2ColorBulk+0x4c>)
 801e8d0:	f8df e03c 	ldr.w	lr, [pc, #60]	; 801e910 <_Index2ColorBulk+0x50>
 801e8d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e8d8:	425b      	negs	r3, r3
 801e8da:	e000      	b.n	801e8de <_Index2ColorBulk+0x1e>
 801e8dc:	3a01      	subs	r2, #1
 801e8de:	8804      	ldrh	r4, [r0, #0]
 801e8e0:	f004 051f 	and.w	r5, r4, #31
 801e8e4:	ea4f 2cd4 	mov.w	ip, r4, lsr #11
 801e8e8:	f3c4 1645 	ubfx	r6, r4, #5, #6
 801e8ec:	5d7d      	ldrb	r5, [r7, r5]
 801e8ee:	f817 400c 	ldrb.w	r4, [r7, ip]
 801e8f2:	f81e 6006 	ldrb.w	r6, [lr, r6]
 801e8f6:	eb05 4404 	add.w	r4, r5, r4, lsl #16
 801e8fa:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 801e8fe:	4418      	add	r0, r3
 801e900:	f841 4904 	str.w	r4, [r1], #-4
 801e904:	2a00      	cmp	r2, #0
 801e906:	d1e9      	bne.n	801e8dc <_Index2ColorBulk+0x1c>
 801e908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e90a:	bf00      	nop
 801e90c:	0802589c 	.word	0x0802589c
 801e910:	0802585c 	.word	0x0802585c

0801e914 <_Color2Index_8888>:
 801e914:	4770      	bx	lr
 801e916:	bf00      	nop

0801e918 <_GetIndexMask_8888>:
 801e918:	f04f 30ff 	mov.w	r0, #4294967295
 801e91c:	4770      	bx	lr
 801e91e:	bf00      	nop

0801e920 <_Color2IndexBulk>:
 801e920:	b410      	push	{r4}
 801e922:	f850 4b04 	ldr.w	r4, [r0], #4
 801e926:	600c      	str	r4, [r1, #0]
 801e928:	3a01      	subs	r2, #1
 801e92a:	4419      	add	r1, r3
 801e92c:	d1f9      	bne.n	801e922 <_Color2IndexBulk+0x2>
 801e92e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e932:	4770      	bx	lr

0801e934 <_Index2ColorBulk>:
 801e934:	b410      	push	{r4}
 801e936:	6804      	ldr	r4, [r0, #0]
 801e938:	f841 4b04 	str.w	r4, [r1], #4
 801e93c:	3a01      	subs	r2, #1
 801e93e:	4418      	add	r0, r3
 801e940:	d1f9      	bne.n	801e936 <_Index2ColorBulk+0x2>
 801e942:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e946:	4770      	bx	lr

0801e948 <LCD_Index2Color_8888>:
 801e948:	4770      	bx	lr
 801e94a:	bf00      	nop

0801e94c <LCD_Index2Color_888>:
 801e94c:	4770      	bx	lr
 801e94e:	bf00      	nop

0801e950 <GUI_DrawRect>:
 801e950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e954:	b082      	sub	sp, #8
 801e956:	4604      	mov	r4, r0
 801e958:	4689      	mov	r9, r1
 801e95a:	4692      	mov	sl, r2
 801e95c:	4698      	mov	r8, r3
 801e95e:	f7f4 f9b7 	bl	8012cd0 <GUI_Lock>
 801e962:	4b1e      	ldr	r3, [pc, #120]	; (801e9dc <GUI_DrawRect+0x8c>)
 801e964:	681f      	ldr	r7, [r3, #0]
 801e966:	7e3e      	ldrb	r6, [r7, #24]
 801e968:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 801e96a:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 801e96c:	3e01      	subs	r6, #1
 801e96e:	b2b6      	uxth	r6, r6
 801e970:	442c      	add	r4, r5
 801e972:	44b9      	add	r9, r7
 801e974:	4455      	add	r5, sl
 801e976:	44b8      	add	r8, r7
 801e978:	1ba1      	subs	r1, r4, r6
 801e97a:	1972      	adds	r2, r6, r5
 801e97c:	ebc6 0309 	rsb	r3, r6, r9
 801e980:	4668      	mov	r0, sp
 801e982:	4446      	add	r6, r8
 801e984:	f8ad 1000 	strh.w	r1, [sp]
 801e988:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e98c:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e990:	f8ad 6006 	strh.w	r6, [sp, #6]
 801e994:	f7fb fd70 	bl	801a478 <WM__InitIVRSearch>
 801e998:	b1d8      	cbz	r0, 801e9d2 <GUI_DrawRect+0x82>
 801e99a:	f109 0701 	add.w	r7, r9, #1
 801e99e:	f108 36ff 	add.w	r6, r8, #4294967295
 801e9a2:	462a      	mov	r2, r5
 801e9a4:	4649      	mov	r1, r9
 801e9a6:	4620      	mov	r0, r4
 801e9a8:	f7f5 fcc2 	bl	8014330 <LCD_DrawHLine>
 801e9ac:	462a      	mov	r2, r5
 801e9ae:	4641      	mov	r1, r8
 801e9b0:	4620      	mov	r0, r4
 801e9b2:	f7f5 fcbd 	bl	8014330 <LCD_DrawHLine>
 801e9b6:	4632      	mov	r2, r6
 801e9b8:	4639      	mov	r1, r7
 801e9ba:	4620      	mov	r0, r4
 801e9bc:	f7f5 fce2 	bl	8014384 <LCD_DrawVLine>
 801e9c0:	4632      	mov	r2, r6
 801e9c2:	4639      	mov	r1, r7
 801e9c4:	4628      	mov	r0, r5
 801e9c6:	f7f5 fcdd 	bl	8014384 <LCD_DrawVLine>
 801e9ca:	f7fb fc2f 	bl	801a22c <WM__GetNextIVR>
 801e9ce:	2800      	cmp	r0, #0
 801e9d0:	d1e7      	bne.n	801e9a2 <GUI_DrawRect+0x52>
 801e9d2:	f7f4 f973 	bl	8012cbc <GUI_Unlock>
 801e9d6:	b002      	add	sp, #8
 801e9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9dc:	20000014 	.word	0x20000014

0801e9e0 <GUI_DrawRectEx>:
 801e9e0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e9e4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801e9e8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801e9ec:	f9b0 0000 	ldrsh.w	r0, [r0]
 801e9f0:	f7ff bfae 	b.w	801e950 <GUI_DrawRect>

0801e9f4 <_Log2VisBuffered>:
 801e9f4:	4770      	bx	lr
 801e9f6:	bf00      	nop

0801e9f8 <_DispLine>:
 801e9f8:	b570      	push	{r4, r5, r6, lr}
 801e9fa:	b082      	sub	sp, #8
 801e9fc:	ab02      	add	r3, sp, #8
 801e9fe:	4d21      	ldr	r5, [pc, #132]	; (801ea84 <_DispLine+0x8c>)
 801ea00:	f843 1d08 	str.w	r1, [r3, #-8]!
 801ea04:	4c20      	ldr	r4, [pc, #128]	; (801ea88 <_DispLine+0x90>)
 801ea06:	9001      	str	r0, [sp, #4]
 801ea08:	4619      	mov	r1, r3
 801ea0a:	682b      	ldr	r3, [r5, #0]
 801ea0c:	4615      	mov	r5, r2
 801ea0e:	4798      	blx	r3
 801ea10:	6823      	ldr	r3, [r4, #0]
 801ea12:	9001      	str	r0, [sp, #4]
 801ea14:	6958      	ldr	r0, [r3, #20]
 801ea16:	b118      	cbz	r0, 801ea20 <_DispLine+0x28>
 801ea18:	4629      	mov	r1, r5
 801ea1a:	f7f2 fe83 	bl	8011724 <GUI_RectsIntersect>
 801ea1e:	b1a8      	cbz	r0, 801ea4c <_DispLine+0x54>
 801ea20:	2001      	movs	r0, #1
 801ea22:	f001 fce3 	bl	80203ec <GUI__ManageCache>
 801ea26:	6822      	ldr	r2, [r4, #0]
 801ea28:	69d3      	ldr	r3, [r2, #28]
 801ea2a:	695b      	ldr	r3, [r3, #20]
 801ea2c:	b1ab      	cbz	r3, 801ea5a <_DispLine+0x62>
 801ea2e:	4c17      	ldr	r4, [pc, #92]	; (801ea8c <_DispLine+0x94>)
 801ea30:	6821      	ldr	r1, [r4, #0]
 801ea32:	b169      	cbz	r1, 801ea50 <_DispLine+0x58>
 801ea34:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 801ea38:	689b      	ldr	r3, [r3, #8]
 801ea3a:	9801      	ldr	r0, [sp, #4]
 801ea3c:	9900      	ldr	r1, [sp, #0]
 801ea3e:	4798      	blx	r3
 801ea40:	4628      	mov	r0, r5
 801ea42:	6823      	ldr	r3, [r4, #0]
 801ea44:	4798      	blx	r3
 801ea46:	2000      	movs	r0, #0
 801ea48:	f001 fcd0 	bl	80203ec <GUI__ManageCache>
 801ea4c:	b002      	add	sp, #8
 801ea4e:	bd70      	pop	{r4, r5, r6, pc}
 801ea50:	689b      	ldr	r3, [r3, #8]
 801ea52:	9900      	ldr	r1, [sp, #0]
 801ea54:	9801      	ldr	r0, [sp, #4]
 801ea56:	4798      	blx	r3
 801ea58:	e7f5      	b.n	801ea46 <_DispLine+0x4e>
 801ea5a:	4d0d      	ldr	r5, [pc, #52]	; (801ea90 <_DispLine+0x98>)
 801ea5c:	9b00      	ldr	r3, [sp, #0]
 801ea5e:	3b01      	subs	r3, #1
 801ea60:	2b00      	cmp	r3, #0
 801ea62:	a801      	add	r0, sp, #4
 801ea64:	9300      	str	r3, [sp, #0]
 801ea66:	dbee      	blt.n	801ea46 <_DispLine+0x4e>
 801ea68:	f7f4 fc50 	bl	801330c <GUI_UC__GetCharCodeInc>
 801ea6c:	6823      	ldr	r3, [r4, #0]
 801ea6e:	69db      	ldr	r3, [r3, #28]
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	4606      	mov	r6, r0
 801ea74:	4798      	blx	r3
 801ea76:	682b      	ldr	r3, [r5, #0]
 801ea78:	2b00      	cmp	r3, #0
 801ea7a:	d0ef      	beq.n	801ea5c <_DispLine+0x64>
 801ea7c:	4630      	mov	r0, r6
 801ea7e:	4798      	blx	r3
 801ea80:	e7ec      	b.n	801ea5c <_DispLine+0x64>
 801ea82:	bf00      	nop
 801ea84:	200002e0 	.word	0x200002e0
 801ea88:	20000014 	.word	0x20000014
 801ea8c:	20035de8 	.word	0x20035de8
 801ea90:	20035e20 	.word	0x20035e20

0801ea94 <GUI__GetLineNumChars>:
 801ea94:	b530      	push	{r4, r5, lr}
 801ea96:	b083      	sub	sp, #12
 801ea98:	9001      	str	r0, [sp, #4]
 801ea9a:	b300      	cbz	r0, 801eade <GUI__GetLineNumChars+0x4a>
 801ea9c:	4b11      	ldr	r3, [pc, #68]	; (801eae4 <GUI__GetLineNumChars+0x50>)
 801ea9e:	681b      	ldr	r3, [r3, #0]
 801eaa0:	69db      	ldr	r3, [r3, #28]
 801eaa2:	695b      	ldr	r3, [r3, #20]
 801eaa4:	460d      	mov	r5, r1
 801eaa6:	b123      	cbz	r3, 801eab2 <GUI__GetLineNumChars+0x1e>
 801eaa8:	685b      	ldr	r3, [r3, #4]
 801eaaa:	b113      	cbz	r3, 801eab2 <GUI__GetLineNumChars+0x1e>
 801eaac:	4798      	blx	r3
 801eaae:	b003      	add	sp, #12
 801eab0:	bd30      	pop	{r4, r5, pc}
 801eab2:	2d00      	cmp	r5, #0
 801eab4:	bfd8      	it	le
 801eab6:	2000      	movle	r0, #0
 801eab8:	ddf9      	ble.n	801eaae <GUI__GetLineNumChars+0x1a>
 801eaba:	2400      	movs	r4, #0
 801eabc:	e004      	b.n	801eac8 <GUI__GetLineNumChars+0x34>
 801eabe:	280a      	cmp	r0, #10
 801eac0:	d007      	beq.n	801ead2 <GUI__GetLineNumChars+0x3e>
 801eac2:	3401      	adds	r4, #1
 801eac4:	42a5      	cmp	r5, r4
 801eac6:	d007      	beq.n	801ead8 <GUI__GetLineNumChars+0x44>
 801eac8:	a801      	add	r0, sp, #4
 801eaca:	f7f4 fc1f 	bl	801330c <GUI_UC__GetCharCodeInc>
 801eace:	2800      	cmp	r0, #0
 801ead0:	d1f5      	bne.n	801eabe <GUI__GetLineNumChars+0x2a>
 801ead2:	4620      	mov	r0, r4
 801ead4:	b003      	add	sp, #12
 801ead6:	bd30      	pop	{r4, r5, pc}
 801ead8:	4628      	mov	r0, r5
 801eada:	b003      	add	sp, #12
 801eadc:	bd30      	pop	{r4, r5, pc}
 801eade:	b003      	add	sp, #12
 801eae0:	bd30      	pop	{r4, r5, pc}
 801eae2:	bf00      	nop
 801eae4:	20000014 	.word	0x20000014

0801eae8 <GUI__GetOverlap>:
 801eae8:	b510      	push	{r4, lr}
 801eaea:	b082      	sub	sp, #8
 801eaec:	a902      	add	r1, sp, #8
 801eaee:	2400      	movs	r4, #0
 801eaf0:	f841 4d04 	str.w	r4, [r1, #-4]!
 801eaf4:	f7f2 fc8e 	bl	8011414 <GUI_GetCharDistXEx>
 801eaf8:	9b01      	ldr	r3, [sp, #4]
 801eafa:	4298      	cmp	r0, r3
 801eafc:	bfb4      	ite	lt
 801eafe:	1a18      	sublt	r0, r3, r0
 801eb00:	4620      	movge	r0, r4
 801eb02:	b002      	add	sp, #8
 801eb04:	bd10      	pop	{r4, pc}
 801eb06:	bf00      	nop

0801eb08 <GUI__GetLineDistX>:
 801eb08:	b570      	push	{r4, r5, r6, lr}
 801eb0a:	b084      	sub	sp, #16
 801eb0c:	ab04      	add	r3, sp, #16
 801eb0e:	4a1d      	ldr	r2, [pc, #116]	; (801eb84 <GUI__GetLineDistX+0x7c>)
 801eb10:	f843 1d10 	str.w	r1, [r3, #-16]!
 801eb14:	9001      	str	r0, [sp, #4]
 801eb16:	4619      	mov	r1, r3
 801eb18:	6813      	ldr	r3, [r2, #0]
 801eb1a:	4798      	blx	r3
 801eb1c:	9001      	str	r0, [sp, #4]
 801eb1e:	b358      	cbz	r0, 801eb78 <GUI__GetLineDistX+0x70>
 801eb20:	4b19      	ldr	r3, [pc, #100]	; (801eb88 <GUI__GetLineDistX+0x80>)
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	69db      	ldr	r3, [r3, #28]
 801eb26:	695b      	ldr	r3, [r3, #20]
 801eb28:	b12b      	cbz	r3, 801eb36 <GUI__GetLineDistX+0x2e>
 801eb2a:	681b      	ldr	r3, [r3, #0]
 801eb2c:	b11b      	cbz	r3, 801eb36 <GUI__GetLineDistX+0x2e>
 801eb2e:	9900      	ldr	r1, [sp, #0]
 801eb30:	4798      	blx	r3
 801eb32:	b004      	add	sp, #16
 801eb34:	bd70      	pop	{r4, r5, r6, pc}
 801eb36:	9b00      	ldr	r3, [sp, #0]
 801eb38:	3b01      	subs	r3, #1
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	9300      	str	r3, [sp, #0]
 801eb3e:	bfa8      	it	ge
 801eb40:	2400      	movge	r4, #0
 801eb42:	db1b      	blt.n	801eb7c <GUI__GetLineDistX+0x74>
 801eb44:	a801      	add	r0, sp, #4
 801eb46:	f7f4 fbe1 	bl	801330c <GUI_UC__GetCharCodeInc>
 801eb4a:	4605      	mov	r5, r0
 801eb4c:	f7f2 fc50 	bl	80113f0 <GUI_GetCharDistX>
 801eb50:	9b00      	ldr	r3, [sp, #0]
 801eb52:	3b01      	subs	r3, #1
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	4404      	add	r4, r0
 801eb58:	9300      	str	r3, [sp, #0]
 801eb5a:	daf3      	bge.n	801eb44 <GUI__GetLineDistX+0x3c>
 801eb5c:	a904      	add	r1, sp, #16
 801eb5e:	2600      	movs	r6, #0
 801eb60:	f841 6d04 	str.w	r6, [r1, #-4]!
 801eb64:	4628      	mov	r0, r5
 801eb66:	f7f2 fc55 	bl	8011414 <GUI_GetCharDistXEx>
 801eb6a:	9b03      	ldr	r3, [sp, #12]
 801eb6c:	4298      	cmp	r0, r3
 801eb6e:	bfb8      	it	lt
 801eb70:	1a1e      	sublt	r6, r3, r0
 801eb72:	1930      	adds	r0, r6, r4
 801eb74:	b004      	add	sp, #16
 801eb76:	bd70      	pop	{r4, r5, r6, pc}
 801eb78:	b004      	add	sp, #16
 801eb7a:	bd70      	pop	{r4, r5, r6, pc}
 801eb7c:	2500      	movs	r5, #0
 801eb7e:	462c      	mov	r4, r5
 801eb80:	e7ec      	b.n	801eb5c <GUI__GetLineDistX+0x54>
 801eb82:	bf00      	nop
 801eb84:	200002e0 	.word	0x200002e0
 801eb88:	20000014 	.word	0x20000014

0801eb8c <GUI__DispLine>:
 801eb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb8e:	4b2a      	ldr	r3, [pc, #168]	; (801ec38 <GUI__DispLine+0xac>)
 801eb90:	681b      	ldr	r3, [r3, #0]
 801eb92:	b083      	sub	sp, #12
 801eb94:	4604      	mov	r4, r0
 801eb96:	460d      	mov	r5, r1
 801eb98:	b17b      	cbz	r3, 801ebba <GUI__DispLine+0x2e>
 801eb9a:	2000      	movs	r0, #0
 801eb9c:	f7fb fc6c 	bl	801a478 <WM__InitIVRSearch>
 801eba0:	b148      	cbz	r0, 801ebb6 <GUI__DispLine+0x2a>
 801eba2:	466e      	mov	r6, sp
 801eba4:	4632      	mov	r2, r6
 801eba6:	4629      	mov	r1, r5
 801eba8:	4620      	mov	r0, r4
 801ebaa:	f7ff ff25 	bl	801e9f8 <_DispLine>
 801ebae:	f7fb fb3d 	bl	801a22c <WM__GetNextIVR>
 801ebb2:	2800      	cmp	r0, #0
 801ebb4:	d1f6      	bne.n	801eba4 <GUI__DispLine+0x18>
 801ebb6:	b003      	add	sp, #12
 801ebb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebba:	6810      	ldr	r0, [r2, #0]
 801ebbc:	6851      	ldr	r1, [r2, #4]
 801ebbe:	4f1f      	ldr	r7, [pc, #124]	; (801ec3c <GUI__DispLine+0xb0>)
 801ebc0:	466b      	mov	r3, sp
 801ebc2:	c303      	stmia	r3!, {r0, r1}
 801ebc4:	683b      	ldr	r3, [r7, #0]
 801ebc6:	f8bd 0000 	ldrh.w	r0, [sp]
 801ebca:	f8b3 e04c 	ldrh.w	lr, [r3, #76]	; 0x4c
 801ebce:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 801ebd2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801ebd6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801ebda:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ebde:	4470      	add	r0, lr
 801ebe0:	4432      	add	r2, r6
 801ebe2:	4433      	add	r3, r6
 801ebe4:	4471      	add	r1, lr
 801ebe6:	f8ad 0000 	strh.w	r0, [sp]
 801ebea:	4668      	mov	r0, sp
 801ebec:	466e      	mov	r6, sp
 801ebee:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ebf2:	f8ad 2002 	strh.w	r2, [sp, #2]
 801ebf6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ebfa:	f7fb fc3d 	bl	801a478 <WM__InitIVRSearch>
 801ebfe:	b950      	cbnz	r0, 801ec16 <GUI__DispLine+0x8a>
 801ec00:	683b      	ldr	r3, [r7, #0]
 801ec02:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801ec04:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 801ec06:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801ec08:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801ec0a:	1b09      	subs	r1, r1, r4
 801ec0c:	1a12      	subs	r2, r2, r0
 801ec0e:	8459      	strh	r1, [r3, #34]	; 0x22
 801ec10:	849a      	strh	r2, [r3, #36]	; 0x24
 801ec12:	b003      	add	sp, #12
 801ec14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec16:	683b      	ldr	r3, [r7, #0]
 801ec18:	f8bd 1000 	ldrh.w	r1, [sp]
 801ec1c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801ec20:	8459      	strh	r1, [r3, #34]	; 0x22
 801ec22:	849a      	strh	r2, [r3, #36]	; 0x24
 801ec24:	4629      	mov	r1, r5
 801ec26:	4632      	mov	r2, r6
 801ec28:	4620      	mov	r0, r4
 801ec2a:	f7ff fee5 	bl	801e9f8 <_DispLine>
 801ec2e:	f7fb fafd 	bl	801a22c <WM__GetNextIVR>
 801ec32:	2800      	cmp	r0, #0
 801ec34:	d1ef      	bne.n	801ec16 <GUI__DispLine+0x8a>
 801ec36:	e7e3      	b.n	801ec00 <GUI__DispLine+0x74>
 801ec38:	20035e0c 	.word	0x20035e0c
 801ec3c:	20000014 	.word	0x20000014

0801ec40 <GUIMONO_DispChar>:
 801ec40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec44:	4e4f      	ldr	r6, [pc, #316]	; (801ed84 <GUIMONO_DispChar+0x144>)
 801ec46:	6833      	ldr	r3, [r6, #0]
 801ec48:	69da      	ldr	r2, [r3, #28]
 801ec4a:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 801ec4e:	69d4      	ldr	r4, [r2, #28]
 801ec50:	f8b4 b00c 	ldrh.w	fp, [r4, #12]
 801ec54:	4583      	cmp	fp, r0
 801ec56:	b08b      	sub	sp, #44	; 0x2c
 801ec58:	d87d      	bhi.n	801ed56 <GUIMONO_DispChar+0x116>
 801ec5a:	89e1      	ldrh	r1, [r4, #14]
 801ec5c:	4281      	cmp	r1, r0
 801ec5e:	d37a      	bcc.n	801ed56 <GUIMONO_DispChar+0x116>
 801ec60:	6821      	ldr	r1, [r4, #0]
 801ec62:	9108      	str	r1, [sp, #32]
 801ec64:	f04f 31ff 	mov.w	r1, #4294967295
 801ec68:	ebcb 0b00 	rsb	fp, fp, r0
 801ec6c:	9107      	str	r1, [sp, #28]
 801ec6e:	f1bb 3fff 	cmp.w	fp, #4294967295
 801ec72:	d06a      	beq.n	801ed4a <GUIMONO_DispChar+0x10a>
 801ec74:	7e17      	ldrb	r7, [r2, #24]
 801ec76:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 801ec7a:	7ca2      	ldrb	r2, [r4, #18]
 801ec7c:	f9b3 9024 	ldrsh.w	r9, [r3, #36]	; 0x24
 801ec80:	f894 a010 	ldrb.w	sl, [r4, #16]
 801ec84:	fb17 f302 	smulbb	r3, r7, r2
 801ec88:	4640      	mov	r0, r8
 801ec8a:	9306      	str	r3, [sp, #24]
 801ec8c:	f7f5 fb14 	bl	80142b8 <LCD_SetDrawMode>
 801ec90:	6833      	ldr	r3, [r6, #0]
 801ec92:	9a06      	ldr	r2, [sp, #24]
 801ec94:	9908      	ldr	r1, [sp, #32]
 801ec96:	9009      	str	r0, [sp, #36]	; 0x24
 801ec98:	fb02 100b 	mla	r0, r2, fp, r1
 801ec9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ec9e:	69db      	ldr	r3, [r3, #28]
 801eca0:	9004      	str	r0, [sp, #16]
 801eca2:	9205      	str	r2, [sp, #20]
 801eca4:	7ca2      	ldrb	r2, [r4, #18]
 801eca6:	9203      	str	r2, [sp, #12]
 801eca8:	f04f 0b01 	mov.w	fp, #1
 801ecac:	f8cd b008 	str.w	fp, [sp, #8]
 801ecb0:	7eda      	ldrb	r2, [r3, #27]
 801ecb2:	9201      	str	r2, [sp, #4]
 801ecb4:	7e9b      	ldrb	r3, [r3, #26]
 801ecb6:	9300      	str	r3, [sp, #0]
 801ecb8:	4628      	mov	r0, r5
 801ecba:	463b      	mov	r3, r7
 801ecbc:	4652      	mov	r2, sl
 801ecbe:	4649      	mov	r1, r9
 801ecc0:	f7f5 fcc8 	bl	8014654 <LCD_DrawBitmap>
 801ecc4:	9807      	ldr	r0, [sp, #28]
 801ecc6:	3001      	adds	r0, #1
 801ecc8:	d01c      	beq.n	801ed04 <GUIMONO_DispChar+0xc4>
 801ecca:	f048 0002 	orr.w	r0, r8, #2
 801ecce:	f7f5 faf3 	bl	80142b8 <LCD_SetDrawMode>
 801ecd2:	4a2c      	ldr	r2, [pc, #176]	; (801ed84 <GUIMONO_DispChar+0x144>)
 801ecd4:	9807      	ldr	r0, [sp, #28]
 801ecd6:	6812      	ldr	r2, [r2, #0]
 801ecd8:	9908      	ldr	r1, [sp, #32]
 801ecda:	9b06      	ldr	r3, [sp, #24]
 801ecdc:	fb03 1300 	mla	r3, r3, r0, r1
 801ece0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 801ece2:	69d2      	ldr	r2, [r2, #28]
 801ece4:	9105      	str	r1, [sp, #20]
 801ece6:	9304      	str	r3, [sp, #16]
 801ece8:	7ca3      	ldrb	r3, [r4, #18]
 801ecea:	9303      	str	r3, [sp, #12]
 801ecec:	f8cd b008 	str.w	fp, [sp, #8]
 801ecf0:	7ed3      	ldrb	r3, [r2, #27]
 801ecf2:	9301      	str	r3, [sp, #4]
 801ecf4:	7e93      	ldrb	r3, [r2, #26]
 801ecf6:	9300      	str	r3, [sp, #0]
 801ecf8:	4652      	mov	r2, sl
 801ecfa:	463b      	mov	r3, r7
 801ecfc:	4649      	mov	r1, r9
 801ecfe:	4628      	mov	r0, r5
 801ed00:	f7f5 fca8 	bl	8014654 <LCD_DrawBitmap>
 801ed04:	6833      	ldr	r3, [r6, #0]
 801ed06:	4f1f      	ldr	r7, [pc, #124]	; (801ed84 <GUIMONO_DispChar+0x144>)
 801ed08:	69db      	ldr	r3, [r3, #28]
 801ed0a:	7e5a      	ldrb	r2, [r3, #25]
 801ed0c:	7e1b      	ldrb	r3, [r3, #24]
 801ed0e:	429a      	cmp	r2, r3
 801ed10:	d914      	bls.n	801ed3c <GUIMONO_DispChar+0xfc>
 801ed12:	f1b8 0f02 	cmp.w	r8, #2
 801ed16:	d011      	beq.n	801ed3c <GUIMONO_DispChar+0xfc>
 801ed18:	f088 0004 	eor.w	r0, r8, #4
 801ed1c:	f7f5 facc 	bl	80142b8 <LCD_SetDrawMode>
 801ed20:	683b      	ldr	r3, [r7, #0]
 801ed22:	69db      	ldr	r3, [r3, #28]
 801ed24:	7e18      	ldrb	r0, [r3, #24]
 801ed26:	7ed9      	ldrb	r1, [r3, #27]
 801ed28:	7e9a      	ldrb	r2, [r3, #26]
 801ed2a:	7e5b      	ldrb	r3, [r3, #25]
 801ed2c:	fb00 9101 	mla	r1, r0, r1, r9
 801ed30:	fb0a 5202 	mla	r2, sl, r2, r5
 801ed34:	444b      	add	r3, r9
 801ed36:	4628      	mov	r0, r5
 801ed38:	f7f5 fb4e 	bl	80143d8 <LCD_FillRect>
 801ed3c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801ed40:	f7f5 faba 	bl	80142b8 <LCD_SetDrawMode>
 801ed44:	6833      	ldr	r3, [r6, #0]
 801ed46:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 801ed4a:	7c62      	ldrb	r2, [r4, #17]
 801ed4c:	4415      	add	r5, r2
 801ed4e:	845d      	strh	r5, [r3, #34]	; 0x22
 801ed50:	b00b      	add	sp, #44	; 0x2c
 801ed52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed56:	68a1      	ldr	r1, [r4, #8]
 801ed58:	2900      	cmp	r1, #0
 801ed5a:	d0f6      	beq.n	801ed4a <GUIMONO_DispChar+0x10a>
 801ed5c:	880f      	ldrh	r7, [r1, #0]
 801ed5e:	42b8      	cmp	r0, r7
 801ed60:	d3f3      	bcc.n	801ed4a <GUIMONO_DispChar+0x10a>
 801ed62:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 801ed66:	4586      	cmp	lr, r0
 801ed68:	d3ef      	bcc.n	801ed4a <GUIMONO_DispChar+0x10a>
 801ed6a:	6849      	ldr	r1, [r1, #4]
 801ed6c:	1bc0      	subs	r0, r0, r7
 801ed6e:	b280      	uxth	r0, r0
 801ed70:	6867      	ldr	r7, [r4, #4]
 801ed72:	9708      	str	r7, [sp, #32]
 801ed74:	eb01 0780 	add.w	r7, r1, r0, lsl #2
 801ed78:	f931 b020 	ldrsh.w	fp, [r1, r0, lsl #2]
 801ed7c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801ed80:	9107      	str	r1, [sp, #28]
 801ed82:	e774      	b.n	801ec6e <GUIMONO_DispChar+0x2e>
 801ed84:	20000014 	.word	0x20000014

0801ed88 <GUIMONO_GetCharDistX>:
 801ed88:	4b04      	ldr	r3, [pc, #16]	; (801ed9c <GUIMONO_GetCharDistX+0x14>)
 801ed8a:	681b      	ldr	r3, [r3, #0]
 801ed8c:	69db      	ldr	r3, [r3, #28]
 801ed8e:	69db      	ldr	r3, [r3, #28]
 801ed90:	b109      	cbz	r1, 801ed96 <GUIMONO_GetCharDistX+0xe>
 801ed92:	7c1a      	ldrb	r2, [r3, #16]
 801ed94:	600a      	str	r2, [r1, #0]
 801ed96:	7c58      	ldrb	r0, [r3, #17]
 801ed98:	4770      	bx	lr
 801ed9a:	bf00      	nop
 801ed9c:	20000014 	.word	0x20000014

0801eda0 <GUIMONO_GetFontInfo>:
 801eda0:	2302      	movs	r3, #2
 801eda2:	800b      	strh	r3, [r1, #0]
 801eda4:	4770      	bx	lr
 801eda6:	bf00      	nop

0801eda8 <GUIMONO_IsInFont>:
 801eda8:	69c3      	ldr	r3, [r0, #28]
 801edaa:	899a      	ldrh	r2, [r3, #12]
 801edac:	428a      	cmp	r2, r1
 801edae:	d802      	bhi.n	801edb6 <GUIMONO_IsInFont+0xe>
 801edb0:	89da      	ldrh	r2, [r3, #14]
 801edb2:	428a      	cmp	r2, r1
 801edb4:	d211      	bcs.n	801edda <GUIMONO_IsInFont+0x32>
 801edb6:	6898      	ldr	r0, [r3, #8]
 801edb8:	b118      	cbz	r0, 801edc2 <GUIMONO_IsInFont+0x1a>
 801edba:	8803      	ldrh	r3, [r0, #0]
 801edbc:	4299      	cmp	r1, r3
 801edbe:	d201      	bcs.n	801edc4 <GUIMONO_IsInFont+0x1c>
 801edc0:	2000      	movs	r0, #0
 801edc2:	4770      	bx	lr
 801edc4:	8842      	ldrh	r2, [r0, #2]
 801edc6:	428a      	cmp	r2, r1
 801edc8:	d3fa      	bcc.n	801edc0 <GUIMONO_IsInFont+0x18>
 801edca:	1ac9      	subs	r1, r1, r3
 801edcc:	6843      	ldr	r3, [r0, #4]
 801edce:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 801edd2:	43c0      	mvns	r0, r0
 801edd4:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 801edd8:	4770      	bx	lr
 801edda:	2001      	movs	r0, #1
 801eddc:	4770      	bx	lr
 801edde:	bf00      	nop

0801ede0 <GUIPROP_DispChar>:
 801ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ede4:	4d3e      	ldr	r5, [pc, #248]	; (801eee0 <GUIPROP_DispChar+0x100>)
 801ede6:	682b      	ldr	r3, [r5, #0]
 801ede8:	69da      	ldr	r2, [r3, #28]
 801edea:	f9b3 602a 	ldrsh.w	r6, [r3, #42]	; 0x2a
 801edee:	69d3      	ldr	r3, [r2, #28]
 801edf0:	b089      	sub	sp, #36	; 0x24
 801edf2:	b143      	cbz	r3, 801ee06 <GUIPROP_DispChar+0x26>
 801edf4:	881a      	ldrh	r2, [r3, #0]
 801edf6:	4290      	cmp	r0, r2
 801edf8:	d302      	bcc.n	801ee00 <GUIPROP_DispChar+0x20>
 801edfa:	8859      	ldrh	r1, [r3, #2]
 801edfc:	4281      	cmp	r1, r0
 801edfe:	d205      	bcs.n	801ee0c <GUIPROP_DispChar+0x2c>
 801ee00:	689b      	ldr	r3, [r3, #8]
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d1f6      	bne.n	801edf4 <GUIPROP_DispChar+0x14>
 801ee06:	b009      	add	sp, #36	; 0x24
 801ee08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee0c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801ee10:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 801eee0 <GUIPROP_DispChar+0x100>
 801ee14:	1a84      	subs	r4, r0, r2
 801ee16:	eb08 07c4 	add.w	r7, r8, r4, lsl #3
 801ee1a:	4630      	mov	r0, r6
 801ee1c:	f897 b002 	ldrb.w	fp, [r7, #2]
 801ee20:	f7f5 fa4a 	bl	80142b8 <LCD_SetDrawMode>
 801ee24:	4682      	mov	sl, r0
 801ee26:	6828      	ldr	r0, [r5, #0]
 801ee28:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
 801ee2c:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 801ee30:	f8d0 c038 	ldr.w	ip, [r0, #56]	; 0x38
 801ee34:	f89e 3018 	ldrb.w	r3, [lr, #24]
 801ee38:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 801ee3c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 801ee40:	f8cd c014 	str.w	ip, [sp, #20]
 801ee44:	9306      	str	r3, [sp, #24]
 801ee46:	f04f 0c01 	mov.w	ip, #1
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	9304      	str	r3, [sp, #16]
 801ee4e:	f8cd b00c 	str.w	fp, [sp, #12]
 801ee52:	f8cd c008 	str.w	ip, [sp, #8]
 801ee56:	f89e c01b 	ldrb.w	ip, [lr, #27]
 801ee5a:	f8cd c004 	str.w	ip, [sp, #4]
 801ee5e:	f89e e01a 	ldrb.w	lr, [lr, #26]
 801ee62:	9b06      	ldr	r3, [sp, #24]
 801ee64:	f8cd e000 	str.w	lr, [sp]
 801ee68:	f7f5 fbf4 	bl	8014654 <LCD_DrawBitmap>
 801ee6c:	682b      	ldr	r3, [r5, #0]
 801ee6e:	69da      	ldr	r2, [r3, #28]
 801ee70:	7e53      	ldrb	r3, [r2, #25]
 801ee72:	f892 b018 	ldrb.w	fp, [r2, #24]
 801ee76:	455b      	cmp	r3, fp
 801ee78:	d923      	bls.n	801eec2 <GUIPROP_DispChar+0xe2>
 801ee7a:	2e02      	cmp	r6, #2
 801ee7c:	9306      	str	r3, [sp, #24]
 801ee7e:	d020      	beq.n	801eec2 <GUIPROP_DispChar+0xe2>
 801ee80:	7ed1      	ldrb	r1, [r2, #27]
 801ee82:	9107      	str	r1, [sp, #28]
 801ee84:	f7f2 fb12 	bl	80114ac <GUI_GetColor>
 801ee88:	4606      	mov	r6, r0
 801ee8a:	f7f2 fb03 	bl	8011494 <GUI_GetBkColor>
 801ee8e:	f7f2 fc95 	bl	80117bc <GUI_SetColor>
 801ee92:	f8d9 2000 	ldr.w	r2, [r9]
 801ee96:	f818 c034 	ldrb.w	ip, [r8, r4, lsl #3]
 801ee9a:	69d4      	ldr	r4, [r2, #28]
 801ee9c:	f9b2 0022 	ldrsh.w	r0, [r2, #34]	; 0x22
 801eea0:	f894 e01b 	ldrb.w	lr, [r4, #27]
 801eea4:	9907      	ldr	r1, [sp, #28]
 801eea6:	f9b2 4024 	ldrsh.w	r4, [r2, #36]	; 0x24
 801eeaa:	9b06      	ldr	r3, [sp, #24]
 801eeac:	fb0c 020e 	mla	r2, ip, lr, r0
 801eeb0:	fb01 4303 	mla	r3, r1, r3, r4
 801eeb4:	fb01 410b 	mla	r1, r1, fp, r4
 801eeb8:	f7f5 fa8e 	bl	80143d8 <LCD_FillRect>
 801eebc:	4630      	mov	r0, r6
 801eebe:	f7f2 fc7d 	bl	80117bc <GUI_SetColor>
 801eec2:	4650      	mov	r0, sl
 801eec4:	f7f5 f9f8 	bl	80142b8 <LCD_SetDrawMode>
 801eec8:	682b      	ldr	r3, [r5, #0]
 801eeca:	7879      	ldrb	r1, [r7, #1]
 801eecc:	69d8      	ldr	r0, [r3, #28]
 801eece:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801eed0:	7e80      	ldrb	r0, [r0, #26]
 801eed2:	fb00 2201 	mla	r2, r0, r1, r2
 801eed6:	845a      	strh	r2, [r3, #34]	; 0x22
 801eed8:	b009      	add	sp, #36	; 0x24
 801eeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eede:	bf00      	nop
 801eee0:	20000014 	.word	0x20000014

0801eee4 <GUIPROP_GetCharDistX>:
 801eee4:	4b11      	ldr	r3, [pc, #68]	; (801ef2c <GUIPROP_GetCharDistX+0x48>)
 801eee6:	b470      	push	{r4, r5, r6}
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	69dd      	ldr	r5, [r3, #28]
 801eeec:	69eb      	ldr	r3, [r5, #28]
 801eeee:	b143      	cbz	r3, 801ef02 <GUIPROP_GetCharDistX+0x1e>
 801eef0:	881a      	ldrh	r2, [r3, #0]
 801eef2:	4290      	cmp	r0, r2
 801eef4:	d302      	bcc.n	801eefc <GUIPROP_GetCharDistX+0x18>
 801eef6:	885c      	ldrh	r4, [r3, #2]
 801eef8:	4284      	cmp	r4, r0
 801eefa:	d205      	bcs.n	801ef08 <GUIPROP_GetCharDistX+0x24>
 801eefc:	689b      	ldr	r3, [r3, #8]
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d1f6      	bne.n	801eef0 <GUIPROP_GetCharDistX+0xc>
 801ef02:	4618      	mov	r0, r3
 801ef04:	bc70      	pop	{r4, r5, r6}
 801ef06:	4770      	bx	lr
 801ef08:	685e      	ldr	r6, [r3, #4]
 801ef0a:	7eac      	ldrb	r4, [r5, #26]
 801ef0c:	1a82      	subs	r2, r0, r2
 801ef0e:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 801ef12:	785b      	ldrb	r3, [r3, #1]
 801ef14:	fb13 f004 	smulbb	r0, r3, r4
 801ef18:	2900      	cmp	r1, #0
 801ef1a:	d0f3      	beq.n	801ef04 <GUIPROP_GetCharDistX+0x20>
 801ef1c:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
 801ef20:	fb14 f303 	smulbb	r3, r4, r3
 801ef24:	600b      	str	r3, [r1, #0]
 801ef26:	bc70      	pop	{r4, r5, r6}
 801ef28:	4770      	bx	lr
 801ef2a:	bf00      	nop
 801ef2c:	20000014 	.word	0x20000014

0801ef30 <GUIPROP_GetFontInfo>:
 801ef30:	2301      	movs	r3, #1
 801ef32:	800b      	strh	r3, [r1, #0]
 801ef34:	4770      	bx	lr
 801ef36:	bf00      	nop

0801ef38 <GUIPROP_IsInFont>:
 801ef38:	69c0      	ldr	r0, [r0, #28]
 801ef3a:	b150      	cbz	r0, 801ef52 <GUIPROP_IsInFont+0x1a>
 801ef3c:	8803      	ldrh	r3, [r0, #0]
 801ef3e:	428b      	cmp	r3, r1
 801ef40:	d802      	bhi.n	801ef48 <GUIPROP_IsInFont+0x10>
 801ef42:	8843      	ldrh	r3, [r0, #2]
 801ef44:	428b      	cmp	r3, r1
 801ef46:	d203      	bcs.n	801ef50 <GUIPROP_IsInFont+0x18>
 801ef48:	6880      	ldr	r0, [r0, #8]
 801ef4a:	2800      	cmp	r0, #0
 801ef4c:	d1f6      	bne.n	801ef3c <GUIPROP_IsInFont+0x4>
 801ef4e:	4770      	bx	lr
 801ef50:	2001      	movs	r0, #1
 801ef52:	4770      	bx	lr

0801ef54 <GUI_CURSOR_SetPositionEx>:
 801ef54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef58:	4614      	mov	r4, r2
 801ef5a:	4606      	mov	r6, r0
 801ef5c:	4688      	mov	r8, r1
 801ef5e:	f7f3 feb7 	bl	8012cd0 <GUI_Lock>
 801ef62:	4620      	mov	r0, r4
 801ef64:	f7f3 fe1a 	bl	8012b9c <GUI_GetCursorLayer>
 801ef68:	b9e8      	cbnz	r0, 801efa6 <GUI_CURSOR_SetPositionEx+0x52>
 801ef6a:	00a7      	lsls	r7, r4, #2
 801ef6c:	4d1b      	ldr	r5, [pc, #108]	; (801efdc <GUI_CURSOR_SetPositionEx+0x88>)
 801ef6e:	193b      	adds	r3, r7, r4
 801ef70:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801ef74:	68da      	ldr	r2, [r3, #12]
 801ef76:	42b2      	cmp	r2, r6
 801ef78:	d106      	bne.n	801ef88 <GUI_CURSOR_SetPositionEx+0x34>
 801ef7a:	691b      	ldr	r3, [r3, #16]
 801ef7c:	4543      	cmp	r3, r8
 801ef7e:	d103      	bne.n	801ef88 <GUI_CURSOR_SetPositionEx+0x34>
 801ef80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ef84:	f7f3 be9a 	b.w	8012cbc <GUI_Unlock>
 801ef88:	193b      	adds	r3, r7, r4
 801ef8a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801ef8e:	6958      	ldr	r0, [r3, #20]
 801ef90:	b9d0      	cbnz	r0, 801efc8 <GUI_CURSOR_SetPositionEx+0x74>
 801ef92:	443c      	add	r4, r7
 801ef94:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 801ef98:	60e6      	str	r6, [r4, #12]
 801ef9a:	f8c4 8010 	str.w	r8, [r4, #16]
 801ef9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801efa2:	f7f3 be8b 	b.w	8012cbc <GUI_Unlock>
 801efa6:	4b0d      	ldr	r3, [pc, #52]	; (801efdc <GUI_CURSOR_SetPositionEx+0x88>)
 801efa8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801efac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801efb0:	6863      	ldr	r3, [r4, #4]
 801efb2:	689a      	ldr	r2, [r3, #8]
 801efb4:	6859      	ldr	r1, [r3, #4]
 801efb6:	ebc2 0208 	rsb	r2, r2, r8
 801efba:	1a71      	subs	r1, r6, r1
 801efbc:	f7f3 fe2c 	bl	8012c18 <GUI_SetLayerPosEx>
 801efc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801efc4:	f7f3 be7a 	b.w	8012cbc <GUI_Unlock>
 801efc8:	685b      	ldr	r3, [r3, #4]
 801efca:	689a      	ldr	r2, [r3, #8]
 801efcc:	6859      	ldr	r1, [r3, #4]
 801efce:	ebc2 0208 	rsb	r2, r2, r8
 801efd2:	1a71      	subs	r1, r6, r1
 801efd4:	f000 fab2 	bl	801f53c <GUI_SPRITE_SetPosition>
 801efd8:	e7db      	b.n	801ef92 <GUI_CURSOR_SetPositionEx+0x3e>
 801efda:	bf00      	nop
 801efdc:	200008b8 	.word	0x200008b8

0801efe0 <GUI_DrawGradientV>:
 801efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efe4:	b091      	sub	sp, #68	; 0x44
 801efe6:	4681      	mov	r9, r0
 801efe8:	461e      	mov	r6, r3
 801efea:	460f      	mov	r7, r1
 801efec:	4690      	mov	r8, r2
 801efee:	f7f3 fe6f 	bl	8012cd0 <GUI_Lock>
 801eff2:	4b64      	ldr	r3, [pc, #400]	; (801f184 <GUI_DrawGradientV+0x1a4>)
 801eff4:	681c      	ldr	r4, [r3, #0]
 801eff6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801eff8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801effa:	19a0      	adds	r0, r4, r6
 801effc:	19e1      	adds	r1, r4, r7
 801effe:	eb05 0309 	add.w	r3, r5, r9
 801f002:	eb05 0208 	add.w	r2, r5, r8
 801f006:	4604      	mov	r4, r0
 801f008:	9001      	str	r0, [sp, #4]
 801f00a:	a80e      	add	r0, sp, #56	; 0x38
 801f00c:	9307      	str	r3, [sp, #28]
 801f00e:	9208      	str	r2, [sp, #32]
 801f010:	9102      	str	r1, [sp, #8]
 801f012:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801f016:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801f01a:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
 801f01e:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 801f022:	f7fb fa29 	bl	801a478 <WM__InitIVRSearch>
 801f026:	2800      	cmp	r0, #0
 801f028:	f000 8091 	beq.w	801f14e <GUI_DrawGradientV+0x16e>
 801f02c:	9b01      	ldr	r3, [sp, #4]
 801f02e:	9a02      	ldr	r2, [sp, #8]
 801f030:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 801f034:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
 801f038:	ebc2 0b03 	rsb	fp, r2, r3
 801f03c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f03e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801f042:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f044:	f3c2 2607 	ubfx	r6, r2, #8, #8
 801f048:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f04a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801f04e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f050:	eb0b 73db 	add.w	r3, fp, fp, lsr #31
 801f054:	105b      	asrs	r3, r3, #1
 801f056:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801f05a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f05c:	fb0b 3504 	mla	r5, fp, r4, r3
 801f060:	1b3c      	subs	r4, r7, r4
 801f062:	0e12      	lsrs	r2, r2, #24
 801f064:	9406      	str	r4, [sp, #24]
 801f066:	fb0b 3400 	mla	r4, fp, r0, r3
 801f06a:	1a30      	subs	r0, r6, r0
 801f06c:	9003      	str	r0, [sp, #12]
 801f06e:	fb0b 3001 	mla	r0, fp, r1, r3
 801f072:	fb0b 3302 	mla	r3, fp, r2, r3
 801f076:	930d      	str	r3, [sp, #52]	; 0x34
 801f078:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f07a:	950a      	str	r5, [sp, #40]	; 0x28
 801f07c:	ebc1 010e 	rsb	r1, r1, lr
 801f080:	ebc2 6313 	rsb	r3, r2, r3, lsr #24
 801f084:	940b      	str	r4, [sp, #44]	; 0x2c
 801f086:	900c      	str	r0, [sp, #48]	; 0x30
 801f088:	9104      	str	r1, [sp, #16]
 801f08a:	9305      	str	r3, [sp, #20]
 801f08c:	465e      	mov	r6, fp
 801f08e:	f7f2 fa0d 	bl	80114ac <GUI_GetColor>
 801f092:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f094:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f096:	9009      	str	r0, [sp, #36]	; 0x24
 801f098:	4293      	cmp	r3, r2
 801f09a:	d069      	beq.n	801f170 <GUI_DrawGradientV+0x190>
 801f09c:	2e00      	cmp	r6, #0
 801f09e:	d052      	beq.n	801f146 <GUI_DrawGradientV+0x166>
 801f0a0:	9d02      	ldr	r5, [sp, #8]
 801f0a2:	9a01      	ldr	r2, [sp, #4]
 801f0a4:	4295      	cmp	r5, r2
 801f0a6:	dc5b      	bgt.n	801f160 <GUI_DrawGradientV+0x180>
 801f0a8:	af0a      	add	r7, sp, #40	; 0x28
 801f0aa:	4602      	mov	r2, r0
 801f0ac:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 801f0b0:	f04f 0b01 	mov.w	fp, #1
 801f0b4:	e006      	b.n	801f0c4 <GUI_DrawGradientV+0xe4>
 801f0b6:	f10b 0b01 	add.w	fp, fp, #1
 801f0ba:	9b01      	ldr	r3, [sp, #4]
 801f0bc:	3501      	adds	r5, #1
 801f0be:	42ab      	cmp	r3, r5
 801f0c0:	4622      	mov	r2, r4
 801f0c2:	db2f      	blt.n	801f124 <GUI_DrawGradientV+0x144>
 801f0c4:	fb9a f3f6 	sdiv	r3, sl, r6
 801f0c8:	fb99 f4f6 	sdiv	r4, r9, r6
 801f0cc:	061b      	lsls	r3, r3, #24
 801f0ce:	fb97 f1f6 	sdiv	r1, r7, r6
 801f0d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801f0d6:	fb98 f4f6 	sdiv	r4, r8, r6
 801f0da:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
 801f0de:	9905      	ldr	r1, [sp, #20]
 801f0e0:	431c      	orrs	r4, r3
 801f0e2:	9b03      	ldr	r3, [sp, #12]
 801f0e4:	448a      	add	sl, r1
 801f0e6:	9904      	ldr	r1, [sp, #16]
 801f0e8:	4498      	add	r8, r3
 801f0ea:	9b02      	ldr	r3, [sp, #8]
 801f0ec:	4489      	add	r9, r1
 801f0ee:	9906      	ldr	r1, [sp, #24]
 801f0f0:	42ab      	cmp	r3, r5
 801f0f2:	4610      	mov	r0, r2
 801f0f4:	440f      	add	r7, r1
 801f0f6:	dae0      	bge.n	801f0ba <GUI_DrawGradientV+0xda>
 801f0f8:	4294      	cmp	r4, r2
 801f0fa:	d0dc      	beq.n	801f0b6 <GUI_DrawGradientV+0xd6>
 801f0fc:	f7f5 fd00 	bl	8014b00 <LCD_SetColor>
 801f100:	f1bb 0f01 	cmp.w	fp, #1
 801f104:	ebcb 0105 	rsb	r1, fp, r5
 801f108:	f105 33ff 	add.w	r3, r5, #4294967295
 801f10c:	9a08      	ldr	r2, [sp, #32]
 801f10e:	9807      	ldr	r0, [sp, #28]
 801f110:	d022      	beq.n	801f158 <GUI_DrawGradientV+0x178>
 801f112:	f7f5 f961 	bl	80143d8 <LCD_FillRect>
 801f116:	9b01      	ldr	r3, [sp, #4]
 801f118:	3501      	adds	r5, #1
 801f11a:	42ab      	cmp	r3, r5
 801f11c:	f04f 0b01 	mov.w	fp, #1
 801f120:	4622      	mov	r2, r4
 801f122:	dacf      	bge.n	801f0c4 <GUI_DrawGradientV+0xe4>
 801f124:	4620      	mov	r0, r4
 801f126:	f7f5 fceb 	bl	8014b00 <LCD_SetColor>
 801f12a:	f1bb 0f01 	cmp.w	fp, #1
 801f12e:	d019      	beq.n	801f164 <GUI_DrawGradientV+0x184>
 801f130:	9b01      	ldr	r3, [sp, #4]
 801f132:	9a08      	ldr	r2, [sp, #32]
 801f134:	9807      	ldr	r0, [sp, #28]
 801f136:	ebcb 0103 	rsb	r1, fp, r3
 801f13a:	3101      	adds	r1, #1
 801f13c:	f7f5 f94c 	bl	80143d8 <LCD_FillRect>
 801f140:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f142:	f7f5 fcdd 	bl	8014b00 <LCD_SetColor>
 801f146:	f7fb f871 	bl	801a22c <WM__GetNextIVR>
 801f14a:	2800      	cmp	r0, #0
 801f14c:	d19f      	bne.n	801f08e <GUI_DrawGradientV+0xae>
 801f14e:	f7f3 fdb5 	bl	8012cbc <GUI_Unlock>
 801f152:	b011      	add	sp, #68	; 0x44
 801f154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f158:	1e69      	subs	r1, r5, #1
 801f15a:	f7f5 f8e9 	bl	8014330 <LCD_DrawHLine>
 801f15e:	e7ac      	b.n	801f0ba <GUI_DrawGradientV+0xda>
 801f160:	f7f5 fcce 	bl	8014b00 <LCD_SetColor>
 801f164:	9a08      	ldr	r2, [sp, #32]
 801f166:	9901      	ldr	r1, [sp, #4]
 801f168:	9807      	ldr	r0, [sp, #28]
 801f16a:	f7f5 f8e1 	bl	8014330 <LCD_DrawHLine>
 801f16e:	e7e7      	b.n	801f140 <GUI_DrawGradientV+0x160>
 801f170:	4618      	mov	r0, r3
 801f172:	f7f5 fcc5 	bl	8014b00 <LCD_SetColor>
 801f176:	9b01      	ldr	r3, [sp, #4]
 801f178:	9a08      	ldr	r2, [sp, #32]
 801f17a:	9902      	ldr	r1, [sp, #8]
 801f17c:	9807      	ldr	r0, [sp, #28]
 801f17e:	f7f5 f92b 	bl	80143d8 <LCD_FillRect>
 801f182:	e7dd      	b.n	801f140 <GUI_DrawGradientV+0x160>
 801f184:	20000014 	.word	0x20000014

0801f188 <GUI_DrawGradientH>:
 801f188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f18c:	b091      	sub	sp, #68	; 0x44
 801f18e:	4681      	mov	r9, r0
 801f190:	461e      	mov	r6, r3
 801f192:	460f      	mov	r7, r1
 801f194:	4690      	mov	r8, r2
 801f196:	f7f3 fd9b 	bl	8012cd0 <GUI_Lock>
 801f19a:	4b65      	ldr	r3, [pc, #404]	; (801f330 <GUI_DrawGradientH+0x1a8>)
 801f19c:	681c      	ldr	r4, [r3, #0]
 801f19e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801f1a0:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801f1a2:	19a0      	adds	r0, r4, r6
 801f1a4:	19e1      	adds	r1, r4, r7
 801f1a6:	eb05 0309 	add.w	r3, r5, r9
 801f1aa:	eb05 0208 	add.w	r2, r5, r8
 801f1ae:	4604      	mov	r4, r0
 801f1b0:	9008      	str	r0, [sp, #32]
 801f1b2:	a80e      	add	r0, sp, #56	; 0x38
 801f1b4:	9302      	str	r3, [sp, #8]
 801f1b6:	9201      	str	r2, [sp, #4]
 801f1b8:	9107      	str	r1, [sp, #28]
 801f1ba:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801f1be:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801f1c2:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
 801f1c6:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 801f1ca:	f7fb f955 	bl	801a478 <WM__InitIVRSearch>
 801f1ce:	2800      	cmp	r0, #0
 801f1d0:	f000 8091 	beq.w	801f2f6 <GUI_DrawGradientH+0x16e>
 801f1d4:	9b01      	ldr	r3, [sp, #4]
 801f1d6:	9a02      	ldr	r2, [sp, #8]
 801f1d8:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 801f1dc:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
 801f1e0:	ebc2 0b03 	rsb	fp, r2, r3
 801f1e4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f1e6:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801f1ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f1ec:	f3c2 2607 	ubfx	r6, r2, #8, #8
 801f1f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f1f2:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801f1f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f1f8:	eb0b 73db 	add.w	r3, fp, fp, lsr #31
 801f1fc:	105b      	asrs	r3, r3, #1
 801f1fe:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801f202:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f204:	fb0b 3504 	mla	r5, fp, r4, r3
 801f208:	1b3c      	subs	r4, r7, r4
 801f20a:	0e12      	lsrs	r2, r2, #24
 801f20c:	9406      	str	r4, [sp, #24]
 801f20e:	fb0b 3400 	mla	r4, fp, r0, r3
 801f212:	1a30      	subs	r0, r6, r0
 801f214:	9003      	str	r0, [sp, #12]
 801f216:	fb0b 3001 	mla	r0, fp, r1, r3
 801f21a:	fb0b 3302 	mla	r3, fp, r2, r3
 801f21e:	930d      	str	r3, [sp, #52]	; 0x34
 801f220:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f222:	950a      	str	r5, [sp, #40]	; 0x28
 801f224:	ebc1 010e 	rsb	r1, r1, lr
 801f228:	ebc2 6313 	rsb	r3, r2, r3, lsr #24
 801f22c:	940b      	str	r4, [sp, #44]	; 0x2c
 801f22e:	900c      	str	r0, [sp, #48]	; 0x30
 801f230:	9104      	str	r1, [sp, #16]
 801f232:	9305      	str	r3, [sp, #20]
 801f234:	465e      	mov	r6, fp
 801f236:	f7f2 f939 	bl	80114ac <GUI_GetColor>
 801f23a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f23c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f23e:	9009      	str	r0, [sp, #36]	; 0x24
 801f240:	4293      	cmp	r3, r2
 801f242:	d06a      	beq.n	801f31a <GUI_DrawGradientH+0x192>
 801f244:	2e00      	cmp	r6, #0
 801f246:	d052      	beq.n	801f2ee <GUI_DrawGradientH+0x166>
 801f248:	9d02      	ldr	r5, [sp, #8]
 801f24a:	9a01      	ldr	r2, [sp, #4]
 801f24c:	4295      	cmp	r5, r2
 801f24e:	dc5c      	bgt.n	801f30a <GUI_DrawGradientH+0x182>
 801f250:	af0a      	add	r7, sp, #40	; 0x28
 801f252:	4602      	mov	r2, r0
 801f254:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 801f258:	f04f 0b01 	mov.w	fp, #1
 801f25c:	e006      	b.n	801f26c <GUI_DrawGradientH+0xe4>
 801f25e:	f10b 0b01 	add.w	fp, fp, #1
 801f262:	9b01      	ldr	r3, [sp, #4]
 801f264:	3501      	adds	r5, #1
 801f266:	42ab      	cmp	r3, r5
 801f268:	4622      	mov	r2, r4
 801f26a:	db2f      	blt.n	801f2cc <GUI_DrawGradientH+0x144>
 801f26c:	fb9a f3f6 	sdiv	r3, sl, r6
 801f270:	fb99 f4f6 	sdiv	r4, r9, r6
 801f274:	061b      	lsls	r3, r3, #24
 801f276:	fb97 f1f6 	sdiv	r1, r7, r6
 801f27a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801f27e:	fb98 f4f6 	sdiv	r4, r8, r6
 801f282:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
 801f286:	9905      	ldr	r1, [sp, #20]
 801f288:	431c      	orrs	r4, r3
 801f28a:	9b03      	ldr	r3, [sp, #12]
 801f28c:	448a      	add	sl, r1
 801f28e:	9904      	ldr	r1, [sp, #16]
 801f290:	4498      	add	r8, r3
 801f292:	9b02      	ldr	r3, [sp, #8]
 801f294:	4489      	add	r9, r1
 801f296:	9906      	ldr	r1, [sp, #24]
 801f298:	42ab      	cmp	r3, r5
 801f29a:	4610      	mov	r0, r2
 801f29c:	440f      	add	r7, r1
 801f29e:	dae0      	bge.n	801f262 <GUI_DrawGradientH+0xda>
 801f2a0:	4294      	cmp	r4, r2
 801f2a2:	d0dc      	beq.n	801f25e <GUI_DrawGradientH+0xd6>
 801f2a4:	f7f5 fc2c 	bl	8014b00 <LCD_SetColor>
 801f2a8:	f1bb 0f01 	cmp.w	fp, #1
 801f2ac:	ebcb 0005 	rsb	r0, fp, r5
 801f2b0:	9b08      	ldr	r3, [sp, #32]
 801f2b2:	9907      	ldr	r1, [sp, #28]
 801f2b4:	f105 32ff 	add.w	r2, r5, #4294967295
 801f2b8:	d022      	beq.n	801f300 <GUI_DrawGradientH+0x178>
 801f2ba:	f7f5 f88d 	bl	80143d8 <LCD_FillRect>
 801f2be:	9b01      	ldr	r3, [sp, #4]
 801f2c0:	3501      	adds	r5, #1
 801f2c2:	42ab      	cmp	r3, r5
 801f2c4:	f04f 0b01 	mov.w	fp, #1
 801f2c8:	4622      	mov	r2, r4
 801f2ca:	dacf      	bge.n	801f26c <GUI_DrawGradientH+0xe4>
 801f2cc:	4620      	mov	r0, r4
 801f2ce:	f7f5 fc17 	bl	8014b00 <LCD_SetColor>
 801f2d2:	f1bb 0f01 	cmp.w	fp, #1
 801f2d6:	d01a      	beq.n	801f30e <GUI_DrawGradientH+0x186>
 801f2d8:	9a01      	ldr	r2, [sp, #4]
 801f2da:	9b08      	ldr	r3, [sp, #32]
 801f2dc:	9907      	ldr	r1, [sp, #28]
 801f2de:	ebcb 0002 	rsb	r0, fp, r2
 801f2e2:	3001      	adds	r0, #1
 801f2e4:	f7f5 f878 	bl	80143d8 <LCD_FillRect>
 801f2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f2ea:	f7f5 fc09 	bl	8014b00 <LCD_SetColor>
 801f2ee:	f7fa ff9d 	bl	801a22c <WM__GetNextIVR>
 801f2f2:	2800      	cmp	r0, #0
 801f2f4:	d19f      	bne.n	801f236 <GUI_DrawGradientH+0xae>
 801f2f6:	f7f3 fce1 	bl	8012cbc <GUI_Unlock>
 801f2fa:	b011      	add	sp, #68	; 0x44
 801f2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f300:	461a      	mov	r2, r3
 801f302:	1e68      	subs	r0, r5, #1
 801f304:	f7f5 f83e 	bl	8014384 <LCD_DrawVLine>
 801f308:	e7ab      	b.n	801f262 <GUI_DrawGradientH+0xda>
 801f30a:	f7f5 fbf9 	bl	8014b00 <LCD_SetColor>
 801f30e:	9a08      	ldr	r2, [sp, #32]
 801f310:	9907      	ldr	r1, [sp, #28]
 801f312:	9801      	ldr	r0, [sp, #4]
 801f314:	f7f5 f836 	bl	8014384 <LCD_DrawVLine>
 801f318:	e7e6      	b.n	801f2e8 <GUI_DrawGradientH+0x160>
 801f31a:	4618      	mov	r0, r3
 801f31c:	f7f5 fbf0 	bl	8014b00 <LCD_SetColor>
 801f320:	9b08      	ldr	r3, [sp, #32]
 801f322:	9a01      	ldr	r2, [sp, #4]
 801f324:	9907      	ldr	r1, [sp, #28]
 801f326:	9802      	ldr	r0, [sp, #8]
 801f328:	f7f5 f856 	bl	80143d8 <LCD_FillRect>
 801f32c:	e7dc      	b.n	801f2e8 <GUI_DrawGradientH+0x160>
 801f32e:	bf00      	nop
 801f330:	20000014 	.word	0x20000014

0801f334 <_CreateBuffer.isra.4>:
 801f334:	680b      	ldr	r3, [r1, #0]
 801f336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f33a:	4680      	mov	r8, r0
 801f33c:	8818      	ldrh	r0, [r3, #0]
 801f33e:	300d      	adds	r0, #13
 801f340:	0080      	lsls	r0, r0, #2
 801f342:	460d      	mov	r5, r1
 801f344:	4616      	mov	r6, r2
 801f346:	f7f1 fcc3 	bl	8010cd0 <GUI_ALLOC_AllocNoInit>
 801f34a:	2800      	cmp	r0, #0
 801f34c:	d03d      	beq.n	801f3ca <_CreateBuffer.isra.4+0x96>
 801f34e:	4607      	mov	r7, r0
 801f350:	f7f1 fcd6 	bl	8010d00 <GUI_ALLOC_LockH>
 801f354:	f8d8 3000 	ldr.w	r3, [r8]
 801f358:	4604      	mov	r4, r0
 801f35a:	6998      	ldr	r0, [r3, #24]
 801f35c:	f7f2 fc84 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 801f360:	2800      	cmp	r0, #0
 801f362:	d032      	beq.n	801f3ca <_CreateBuffer.isra.4+0x96>
 801f364:	68c3      	ldr	r3, [r0, #12]
 801f366:	2108      	movs	r1, #8
 801f368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f36a:	4798      	blx	r3
 801f36c:	2802      	cmp	r0, #2
 801f36e:	dc22      	bgt.n	801f3b6 <_CreateBuffer.isra.4+0x82>
 801f370:	61a0      	str	r0, [r4, #24]
 801f372:	2201      	movs	r2, #1
 801f374:	682b      	ldr	r3, [r5, #0]
 801f376:	6122      	str	r2, [r4, #16]
 801f378:	881b      	ldrh	r3, [r3, #0]
 801f37a:	61e3      	str	r3, [r4, #28]
 801f37c:	fb03 f302 	mul.w	r3, r3, r2
 801f380:	6163      	str	r3, [r4, #20]
 801f382:	f7f1 fce9 	bl	8010d58 <GUI_ALLOC_GetMaxSize>
 801f386:	6963      	ldr	r3, [r4, #20]
 801f388:	60a7      	str	r7, [r4, #8]
 801f38a:	4298      	cmp	r0, r3
 801f38c:	bfb8      	it	lt
 801f38e:	6160      	strlt	r0, [r4, #20]
 801f390:	f104 0234 	add.w	r2, r4, #52	; 0x34
 801f394:	2300      	movs	r3, #0
 801f396:	2e01      	cmp	r6, #1
 801f398:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 801f39c:	6022      	str	r2, [r4, #0]
 801f39e:	60e3      	str	r3, [r4, #12]
 801f3a0:	d018      	beq.n	801f3d4 <_CreateBuffer.isra.4+0xa0>
 801f3a2:	69e3      	ldr	r3, [r4, #28]
 801f3a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f3a8:	3b01      	subs	r3, #1
 801f3aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f3ae:	6063      	str	r3, [r4, #4]
 801f3b0:	4620      	mov	r0, r4
 801f3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3b6:	2804      	cmp	r0, #4
 801f3b8:	dd0a      	ble.n	801f3d0 <_CreateBuffer.isra.4+0x9c>
 801f3ba:	2808      	cmp	r0, #8
 801f3bc:	dd0e      	ble.n	801f3dc <_CreateBuffer.isra.4+0xa8>
 801f3be:	2810      	cmp	r0, #16
 801f3c0:	dd0e      	ble.n	801f3e0 <_CreateBuffer.isra.4+0xac>
 801f3c2:	2320      	movs	r3, #32
 801f3c4:	61a3      	str	r3, [r4, #24]
 801f3c6:	2204      	movs	r2, #4
 801f3c8:	e7d4      	b.n	801f374 <_CreateBuffer.isra.4+0x40>
 801f3ca:	2000      	movs	r0, #0
 801f3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3d0:	2004      	movs	r0, #4
 801f3d2:	e7cd      	b.n	801f370 <_CreateBuffer.isra.4+0x3c>
 801f3d4:	6062      	str	r2, [r4, #4]
 801f3d6:	4620      	mov	r0, r4
 801f3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3dc:	2008      	movs	r0, #8
 801f3de:	e7c7      	b.n	801f370 <_CreateBuffer.isra.4+0x3c>
 801f3e0:	2310      	movs	r3, #16
 801f3e2:	61a3      	str	r3, [r4, #24]
 801f3e4:	2202      	movs	r2, #2
 801f3e6:	e7c5      	b.n	801f374 <_CreateBuffer.isra.4+0x40>

0801f3e8 <_SetBkIndexBuffered>:
 801f3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3ec:	b086      	sub	sp, #24
 801f3ee:	460e      	mov	r6, r1
 801f3f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f3f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801f3f4:	428d      	cmp	r5, r1
 801f3f6:	4607      	mov	r7, r0
 801f3f8:	4690      	mov	r8, r2
 801f3fa:	d040      	beq.n	801f47e <_SetBkIndexBuffered+0x96>
 801f3fc:	68e1      	ldr	r1, [r4, #12]
 801f3fe:	b369      	cbz	r1, 801f45c <_SetBkIndexBuffered+0x74>
 801f400:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 801f404:	2a01      	cmp	r2, #1
 801f406:	d04d      	beq.n	801f4a4 <_SetBkIndexBuffered+0xbc>
 801f408:	69e2      	ldr	r2, [r4, #28]
 801f40a:	6825      	ldr	r5, [r4, #0]
 801f40c:	6860      	ldr	r0, [r4, #4]
 801f40e:	f8d4 9020 	ldr.w	r9, [r4, #32]
 801f412:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801f416:	3a01      	subs	r2, #1
 801f418:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801f41c:	1d05      	adds	r5, r0, #4
 801f41e:	6062      	str	r2, [r4, #4]
 801f420:	f8d3 a000 	ldr.w	sl, [r3]
 801f424:	f1ba 0f00 	cmp.w	sl, #0
 801f428:	d019      	beq.n	801f45e <_SetBkIndexBuffered+0x76>
 801f42a:	69a2      	ldr	r2, [r4, #24]
 801f42c:	4628      	mov	r0, r5
 801f42e:	f000 fbf9 	bl	801fc24 <GUI__CompactPixelIndices>
 801f432:	f8d4 c014 	ldr.w	ip, [r4, #20]
 801f436:	f8da e00c 	ldr.w	lr, [sl, #12]
 801f43a:	69a0      	ldr	r0, [r4, #24]
 801f43c:	68e3      	ldr	r3, [r4, #12]
 801f43e:	9503      	str	r5, [sp, #12]
 801f440:	2200      	movs	r2, #0
 801f442:	9205      	str	r2, [sp, #20]
 801f444:	9204      	str	r2, [sp, #16]
 801f446:	2101      	movs	r1, #1
 801f448:	f8cd c008 	str.w	ip, [sp, #8]
 801f44c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801f44e:	9001      	str	r0, [sp, #4]
 801f450:	9100      	str	r1, [sp, #0]
 801f452:	4650      	mov	r0, sl
 801f454:	4649      	mov	r1, r9
 801f456:	f8de 5004 	ldr.w	r5, [lr, #4]
 801f45a:	47a8      	blx	r5
 801f45c:	6862      	ldr	r2, [r4, #4]
 801f45e:	f8c2 8000 	str.w	r8, [r2]
 801f462:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 801f466:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801f46a:	6062      	str	r2, [r4, #4]
 801f46c:	2301      	movs	r3, #1
 801f46e:	62a7      	str	r7, [r4, #40]	; 0x28
 801f470:	62e6      	str	r6, [r4, #44]	; 0x2c
 801f472:	60e3      	str	r3, [r4, #12]
 801f474:	6227      	str	r7, [r4, #32]
 801f476:	6266      	str	r6, [r4, #36]	; 0x24
 801f478:	b006      	add	sp, #24
 801f47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f47e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 801f482:	6a22      	ldr	r2, [r4, #32]
 801f484:	440a      	add	r2, r1
 801f486:	4282      	cmp	r2, r0
 801f488:	d1b8      	bne.n	801f3fc <_SetBkIndexBuffered+0x14>
 801f48a:	6863      	ldr	r3, [r4, #4]
 801f48c:	68e2      	ldr	r2, [r4, #12]
 801f48e:	f8c3 8000 	str.w	r8, [r3]
 801f492:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 801f496:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f49a:	6063      	str	r3, [r4, #4]
 801f49c:	1c53      	adds	r3, r2, #1
 801f49e:	2a00      	cmp	r2, #0
 801f4a0:	d1e7      	bne.n	801f472 <_SetBkIndexBuffered+0x8a>
 801f4a2:	e7e4      	b.n	801f46e <_SetBkIndexBuffered+0x86>
 801f4a4:	6825      	ldr	r5, [r4, #0]
 801f4a6:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
 801f4aa:	462a      	mov	r2, r5
 801f4ac:	e7b7      	b.n	801f41e <_SetBkIndexBuffered+0x36>
 801f4ae:	bf00      	nop

0801f4b0 <_ReleaseBuffer.isra.7>:
 801f4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f4b2:	68ca      	ldr	r2, [r1, #12]
 801f4b4:	b089      	sub	sp, #36	; 0x24
 801f4b6:	460c      	mov	r4, r1
 801f4b8:	9107      	str	r1, [sp, #28]
 801f4ba:	2a00      	cmp	r2, #0
 801f4bc:	d02c      	beq.n	801f518 <_ReleaseBuffer.isra.7+0x68>
 801f4be:	f991 3030 	ldrsb.w	r3, [r1, #48]	; 0x30
 801f4c2:	2b01      	cmp	r3, #1
 801f4c4:	d031      	beq.n	801f52a <_ReleaseBuffer.isra.7+0x7a>
 801f4c6:	69cb      	ldr	r3, [r1, #28]
 801f4c8:	6a27      	ldr	r7, [r4, #32]
 801f4ca:	c942      	ldmia	r1, {r1, r6}
 801f4cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f4d0:	3b01      	subs	r3, #1
 801f4d2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f4d6:	6063      	str	r3, [r4, #4]
 801f4d8:	6805      	ldr	r5, [r0, #0]
 801f4da:	3604      	adds	r6, #4
 801f4dc:	2d00      	cmp	r5, #0
 801f4de:	d02b      	beq.n	801f538 <_ReleaseBuffer.isra.7+0x88>
 801f4e0:	4611      	mov	r1, r2
 801f4e2:	4630      	mov	r0, r6
 801f4e4:	69a2      	ldr	r2, [r4, #24]
 801f4e6:	f000 fb9d 	bl	801fc24 <GUI__CompactPixelIndices>
 801f4ea:	2100      	movs	r1, #0
 801f4ec:	68e3      	ldr	r3, [r4, #12]
 801f4ee:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 801f4f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801f4f4:	9105      	str	r1, [sp, #20]
 801f4f6:	9104      	str	r1, [sp, #16]
 801f4f8:	9603      	str	r6, [sp, #12]
 801f4fa:	6961      	ldr	r1, [r4, #20]
 801f4fc:	9102      	str	r1, [sp, #8]
 801f4fe:	69a1      	ldr	r1, [r4, #24]
 801f500:	9101      	str	r1, [sp, #4]
 801f502:	2101      	movs	r1, #1
 801f504:	9100      	str	r1, [sp, #0]
 801f506:	4628      	mov	r0, r5
 801f508:	4639      	mov	r1, r7
 801f50a:	f8de 5004 	ldr.w	r5, [lr, #4]
 801f50e:	47a8      	blx	r5
 801f510:	9b07      	ldr	r3, [sp, #28]
 801f512:	2200      	movs	r2, #0
 801f514:	60e2      	str	r2, [r4, #12]
 801f516:	461c      	mov	r4, r3
 801f518:	68a4      	ldr	r4, [r4, #8]
 801f51a:	a807      	add	r0, sp, #28
 801f51c:	f7f1 fc02 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801f520:	4620      	mov	r0, r4
 801f522:	f7f1 fd83 	bl	801102c <GUI_ALLOC_Free>
 801f526:	b009      	add	sp, #36	; 0x24
 801f528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f52a:	680e      	ldr	r6, [r1, #0]
 801f52c:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 801f52e:	4633      	mov	r3, r6
 801f530:	6063      	str	r3, [r4, #4]
 801f532:	6805      	ldr	r5, [r0, #0]
 801f534:	2d00      	cmp	r5, #0
 801f536:	d1d3      	bne.n	801f4e0 <_ReleaseBuffer.isra.7+0x30>
 801f538:	4623      	mov	r3, r4
 801f53a:	e7ea      	b.n	801f512 <_ReleaseBuffer.isra.7+0x62>

0801f53c <GUI_SPRITE_SetPosition>:
 801f53c:	b900      	cbnz	r0, 801f540 <GUI_SPRITE_SetPosition+0x4>
 801f53e:	4770      	bx	lr
 801f540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f544:	b0ab      	sub	sp, #172	; 0xac
 801f546:	4604      	mov	r4, r0
 801f548:	460d      	mov	r5, r1
 801f54a:	4616      	mov	r6, r2
 801f54c:	921c      	str	r2, [sp, #112]	; 0x70
 801f54e:	911b      	str	r1, [sp, #108]	; 0x6c
 801f550:	f7f3 fbbe 	bl	8012cd0 <GUI_Lock>
 801f554:	4620      	mov	r0, r4
 801f556:	f7f1 fbd3 	bl	8010d00 <GUI_ALLOC_LockH>
 801f55a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801f55e:	6804      	ldr	r4, [r0, #0]
 801f560:	9027      	str	r0, [sp, #156]	; 0x9c
 801f562:	429d      	cmp	r5, r3
 801f564:	9410      	str	r4, [sp, #64]	; 0x40
 801f566:	f000 8181 	beq.w	801f86c <GUI_SPRITE_SetPosition+0x330>
 801f56a:	2000      	movs	r0, #0
 801f56c:	f001 f99a 	bl	80208a4 <GUI_MEMDEV_Select>
 801f570:	4b9d      	ldr	r3, [pc, #628]	; (801f7e8 <GUI_SPRITE_SetPosition+0x2ac>)
 801f572:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f574:	681b      	ldr	r3, [r3, #0]
 801f576:	6992      	ldr	r2, [r2, #24]
 801f578:	7c59      	ldrb	r1, [r3, #17]
 801f57a:	901f      	str	r0, [sp, #124]	; 0x7c
 801f57c:	4608      	mov	r0, r1
 801f57e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801f580:	9120      	str	r1, [sp, #128]	; 0x80
 801f582:	4282      	cmp	r2, r0
 801f584:	bf18      	it	ne
 801f586:	745a      	strbne	r2, [r3, #17]
 801f588:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801f58c:	9305      	str	r3, [sp, #20]
 801f58e:	4618      	mov	r0, r3
 801f590:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801f594:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801f598:	9216      	str	r2, [sp, #88]	; 0x58
 801f59a:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 801f59e:	9312      	str	r3, [sp, #72]	; 0x48
 801f5a0:	461c      	mov	r4, r3
 801f5a2:	1a09      	subs	r1, r1, r0
 801f5a4:	1b12      	subs	r2, r2, r4
 801f5a6:	460e      	mov	r6, r1
 801f5a8:	910b      	str	r1, [sp, #44]	; 0x2c
 801f5aa:	9219      	str	r2, [sp, #100]	; 0x64
 801f5ac:	4621      	mov	r1, r4
 801f5ae:	4614      	mov	r4, r2
 801f5b0:	4632      	mov	r2, r6
 801f5b2:	3201      	adds	r2, #1
 801f5b4:	8a2b      	ldrh	r3, [r5, #16]
 801f5b6:	921a      	str	r2, [sp, #104]	; 0x68
 801f5b8:	4622      	mov	r2, r4
 801f5ba:	3201      	adds	r2, #1
 801f5bc:	079b      	lsls	r3, r3, #30
 801f5be:	921d      	str	r2, [sp, #116]	; 0x74
 801f5c0:	f140 8135 	bpl.w	801f82e <GUI_SPRITE_SetPosition+0x2f2>
 801f5c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f5c6:	696a      	ldr	r2, [r5, #20]
 801f5c8:	9202      	str	r2, [sp, #8]
 801f5ca:	1a1b      	subs	r3, r3, r0
 801f5cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801f5ce:	9313      	str	r3, [sp, #76]	; 0x4c
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	eba2 0401 	sub.w	r4, r2, r1
 801f5d6:	f340 81e8 	ble.w	801f9aa <GUI_SPRITE_SetPosition+0x46e>
 801f5da:	9308      	str	r3, [sp, #32]
 801f5dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f5de:	9304      	str	r3, [sp, #16]
 801f5e0:	2300      	movs	r3, #0
 801f5e2:	f04f 0b01 	mov.w	fp, #1
 801f5e6:	9311      	str	r3, [sp, #68]	; 0x44
 801f5e8:	2c00      	cmp	r4, #0
 801f5ea:	f340 81d2 	ble.w	801f992 <GUI_SPRITE_SetPosition+0x456>
 801f5ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f5f0:	9315      	str	r3, [sp, #84]	; 0x54
 801f5f2:	2301      	movs	r3, #1
 801f5f4:	9417      	str	r4, [sp, #92]	; 0x5c
 801f5f6:	9314      	str	r3, [sp, #80]	; 0x50
 801f5f8:	f04f 0a00 	mov.w	sl, #0
 801f5fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f5fe:	4b7b      	ldr	r3, [pc, #492]	; (801f7ec <GUI_SPRITE_SetPosition+0x2b0>)
 801f600:	69b0      	ldr	r0, [r6, #24]
 801f602:	561b      	ldrsb	r3, [r3, r0]
 801f604:	2b01      	cmp	r3, #1
 801f606:	f340 81bc 	ble.w	801f982 <GUI_SPRITE_SetPosition+0x446>
 801f60a:	2300      	movs	r3, #0
 801f60c:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
 801f610:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 801f614:	f7f5 fbee 	bl	8014df4 <LCD_GetXSizeEx>
 801f618:	1e43      	subs	r3, r0, #1
 801f61a:	69b0      	ldr	r0, [r6, #24]
 801f61c:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 801f620:	f7f5 fbf8 	bl	8014e14 <LCD_GetYSizeEx>
 801f624:	3801      	subs	r0, #1
 801f626:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
 801f62a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f62c:	465a      	mov	r2, fp
 801f62e:	f100 0114 	add.w	r1, r0, #20
 801f632:	f7ff fe7f 	bl	801f334 <_CreateBuffer.isra.4>
 801f636:	9021      	str	r0, [sp, #132]	; 0x84
 801f638:	2800      	cmp	r0, #0
 801f63a:	f000 80f7 	beq.w	801f82c <GUI_SPRITE_SetPosition+0x2f0>
 801f63e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f640:	465a      	mov	r2, fp
 801f642:	f100 0114 	add.w	r1, r0, #20
 801f646:	f7ff fe75 	bl	801f334 <_CreateBuffer.isra.4>
 801f64a:	9024      	str	r0, [sp, #144]	; 0x90
 801f64c:	2800      	cmp	r0, #0
 801f64e:	f000 80e8 	beq.w	801f822 <GUI_SPRITE_SetPosition+0x2e6>
 801f652:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f654:	68d8      	ldr	r0, [r3, #12]
 801f656:	2800      	cmp	r0, #0
 801f658:	f040 81b8 	bne.w	801f9cc <GUI_SPRITE_SetPosition+0x490>
 801f65c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f65e:	4552      	cmp	r2, sl
 801f660:	f000 80db 	beq.w	801f81a <GUI_SPRITE_SetPosition+0x2de>
 801f664:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f666:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f668:	9022      	str	r0, [sp, #136]	; 0x88
 801f66a:	009a      	lsls	r2, r3, #2
 801f66c:	fb0a 1303 	mla	r3, sl, r3, r1
 801f670:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801f674:	930e      	str	r3, [sp, #56]	; 0x38
 801f676:	ebc4 030a 	rsb	r3, r4, sl
 801f67a:	930c      	str	r3, [sp, #48]	; 0x30
 801f67c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f67e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f680:	4423      	add	r3, r4
 801f682:	fb01 f202 	mul.w	r2, r1, r2
 801f686:	9318      	str	r3, [sp, #96]	; 0x60
 801f688:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801f68c:	921e      	str	r2, [sp, #120]	; 0x78
 801f68e:	9306      	str	r3, [sp, #24]
 801f690:	46d1      	mov	r9, sl
 801f692:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f694:	454b      	cmp	r3, r9
 801f696:	f300 8113 	bgt.w	801f8c0 <GUI_SPRITE_SetPosition+0x384>
 801f69a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f69c:	454b      	cmp	r3, r9
 801f69e:	bfb4      	ite	lt
 801f6a0:	2300      	movlt	r3, #0
 801f6a2:	2301      	movge	r3, #1
 801f6a4:	930f      	str	r3, [sp, #60]	; 0x3c
 801f6a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f6a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f6aa:	444b      	add	r3, r9
 801f6ac:	930d      	str	r3, [sp, #52]	; 0x34
 801f6ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f6b0:	444b      	add	r3, r9
 801f6b2:	9307      	str	r3, [sp, #28]
 801f6b4:	9b04      	ldr	r3, [sp, #16]
 801f6b6:	461a      	mov	r2, r3
 801f6b8:	42a2      	cmp	r2, r4
 801f6ba:	f000 809f 	beq.w	801f7fc <GUI_SPRITE_SetPosition+0x2c0>
 801f6be:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f6c0:	9b05      	ldr	r3, [sp, #20]
 801f6c2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801f6c6:	f8cd 900c 	str.w	r9, [sp, #12]
 801f6ca:	4403      	add	r3, r0
 801f6cc:	ebc0 0a04 	rsb	sl, r0, r4
 801f6d0:	9309      	str	r3, [sp, #36]	; 0x24
 801f6d2:	e051      	b.n	801f778 <GUI_SPRITE_SetPosition+0x23c>
 801f6d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f6d6:	42a2      	cmp	r2, r4
 801f6d8:	db5e      	blt.n	801f798 <GUI_SPRITE_SetPosition+0x25c>
 801f6da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f6dc:	2a00      	cmp	r2, #0
 801f6de:	d05b      	beq.n	801f798 <GUI_SPRITE_SetPosition+0x25c>
 801f6e0:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 801f6e4:	42a9      	cmp	r1, r5
 801f6e6:	f340 8294 	ble.w	801fc12 <GUI_SPRITE_SetPosition+0x6d6>
 801f6ea:	f04f 0900 	mov.w	r9, #0
 801f6ee:	f1ba 0f00 	cmp.w	sl, #0
 801f6f2:	930a      	str	r3, [sp, #40]	; 0x28
 801f6f4:	db0c      	blt.n	801f710 <GUI_SPRITE_SetPosition+0x1d4>
 801f6f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	db09      	blt.n	801f710 <GUI_SPRITE_SetPosition+0x1d4>
 801f6fc:	461a      	mov	r2, r3
 801f6fe:	4651      	mov	r1, sl
 801f700:	9802      	ldr	r0, [sp, #8]
 801f702:	f7f1 ff9d 	bl	8011640 <GUI_GetBitmapPixelIndex>
 801f706:	0e00      	lsrs	r0, r0, #24
 801f708:	28ff      	cmp	r0, #255	; 0xff
 801f70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f70c:	f000 80db 	beq.w	801f8c6 <GUI_SPRITE_SetPosition+0x38a>
 801f710:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 801f714:	4295      	cmp	r5, r2
 801f716:	db26      	blt.n	801f766 <GUI_SPRITE_SetPosition+0x22a>
 801f718:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801f71c:	9907      	ldr	r1, [sp, #28]
 801f71e:	428b      	cmp	r3, r1
 801f720:	dc21      	bgt.n	801f766 <GUI_SPRITE_SetPosition+0x22a>
 801f722:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801f726:	42ab      	cmp	r3, r5
 801f728:	db1d      	blt.n	801f766 <GUI_SPRITE_SetPosition+0x22a>
 801f72a:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 801f72e:	428b      	cmp	r3, r1
 801f730:	db19      	blt.n	801f766 <GUI_SPRITE_SetPosition+0x22a>
 801f732:	2f00      	cmp	r7, #0
 801f734:	f000 811a 	beq.w	801f96c <GUI_SPRITE_SetPosition+0x430>
 801f738:	9922      	ldr	r1, [sp, #136]	; 0x88
 801f73a:	4b2d      	ldr	r3, [pc, #180]	; (801f7f0 <GUI_SPRITE_SetPosition+0x2b4>)
 801f73c:	22ff      	movs	r2, #255	; 0xff
 801f73e:	681b      	ldr	r3, [r3, #0]
 801f740:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801f744:	4630      	mov	r0, r6
 801f746:	4798      	blx	r3
 801f748:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f74a:	4b2a      	ldr	r3, [pc, #168]	; (801f7f4 <GUI_SPRITE_SetPosition+0x2b8>)
 801f74c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f750:	691b      	ldr	r3, [r3, #16]
 801f752:	681b      	ldr	r3, [r3, #0]
 801f754:	4798      	blx	r3
 801f756:	4602      	mov	r2, r0
 801f758:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f75a:	9300      	str	r3, [sp, #0]
 801f75c:	4628      	mov	r0, r5
 801f75e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f760:	9907      	ldr	r1, [sp, #28]
 801f762:	f7ff fe41 	bl	801f3e8 <_SetBkIndexBuffered>
 801f766:	f8c8 9020 	str.w	r9, [r8, #32]
 801f76a:	9b06      	ldr	r3, [sp, #24]
 801f76c:	4498      	add	r8, r3
 801f76e:	9b04      	ldr	r3, [sp, #16]
 801f770:	445c      	add	r4, fp
 801f772:	42a3      	cmp	r3, r4
 801f774:	44da      	add	sl, fp
 801f776:	d03f      	beq.n	801f7f8 <GUI_SPRITE_SetPosition+0x2bc>
 801f778:	9a03      	ldr	r2, [sp, #12]
 801f77a:	9802      	ldr	r0, [sp, #8]
 801f77c:	4621      	mov	r1, r4
 801f77e:	f7f1 ff5f 	bl	8011640 <GUI_GetBitmapPixelIndex>
 801f782:	0e07      	lsrs	r7, r0, #24
 801f784:	2fff      	cmp	r7, #255	; 0xff
 801f786:	4606      	mov	r6, r0
 801f788:	d0ef      	beq.n	801f76a <GUI_SPRITE_SetPosition+0x22e>
 801f78a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f78c:	9b05      	ldr	r3, [sp, #20]
 801f78e:	1915      	adds	r5, r2, r4
 801f790:	9a08      	ldr	r2, [sp, #32]
 801f792:	42a2      	cmp	r2, r4
 801f794:	4423      	add	r3, r4
 801f796:	dd9d      	ble.n	801f6d4 <GUI_SPRITE_SetPosition+0x198>
 801f798:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 801f79c:	42aa      	cmp	r2, r5
 801f79e:	4611      	mov	r1, r2
 801f7a0:	dc6a      	bgt.n	801f878 <GUI_SPRITE_SetPosition+0x33c>
 801f7a2:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 801f7a6:	9807      	ldr	r0, [sp, #28]
 801f7a8:	4282      	cmp	r2, r0
 801f7aa:	f300 8086 	bgt.w	801f8ba <GUI_SPRITE_SetPosition+0x37e>
 801f7ae:	2200      	movs	r2, #0
 801f7b0:	920a      	str	r2, [sp, #40]	; 0x28
 801f7b2:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 801f7b6:	42aa      	cmp	r2, r5
 801f7b8:	db05      	blt.n	801f7c6 <GUI_SPRITE_SetPosition+0x28a>
 801f7ba:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 801f7be:	9907      	ldr	r1, [sp, #28]
 801f7c0:	428a      	cmp	r2, r1
 801f7c2:	f280 8083 	bge.w	801f8cc <GUI_SPRITE_SetPosition+0x390>
 801f7c6:	f04f 0900 	mov.w	r9, #0
 801f7ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f7cc:	2a00      	cmp	r2, #0
 801f7ce:	d18e      	bne.n	801f6ee <GUI_SPRITE_SetPosition+0x1b2>
 801f7d0:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 801f7d4:	460a      	mov	r2, r1
 801f7d6:	4293      	cmp	r3, r2
 801f7d8:	db9c      	blt.n	801f714 <GUI_SPRITE_SetPosition+0x1d8>
 801f7da:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 801f7de:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f7e0:	4281      	cmp	r1, r0
 801f7e2:	dc97      	bgt.n	801f714 <GUI_SPRITE_SetPosition+0x1d8>
 801f7e4:	e051      	b.n	801f88a <GUI_SPRITE_SetPosition+0x34e>
 801f7e6:	bf00      	nop
 801f7e8:	20000014 	.word	0x20000014
 801f7ec:	20035e14 	.word	0x20035e14
 801f7f0:	20000034 	.word	0x20000034
 801f7f4:	20035df8 	.word	0x20035df8
 801f7f8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801f7fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f800:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f802:	440b      	add	r3, r1
 801f804:	930e      	str	r3, [sp, #56]	; 0x38
 801f806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f808:	4619      	mov	r1, r3
 801f80a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f80c:	4491      	add	r9, r2
 801f80e:	4411      	add	r1, r2
 801f810:	454b      	cmp	r3, r9
 801f812:	910c      	str	r1, [sp, #48]	; 0x30
 801f814:	f47f af3d 	bne.w	801f692 <GUI_SPRITE_SetPosition+0x156>
 801f818:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f81a:	6818      	ldr	r0, [r3, #0]
 801f81c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f81e:	f7ff fe47 	bl	801f4b0 <_ReleaseBuffer.isra.7>
 801f822:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f824:	9921      	ldr	r1, [sp, #132]	; 0x84
 801f826:	6818      	ldr	r0, [r3, #0]
 801f828:	f7ff fe42 	bl	801f4b0 <_ReleaseBuffer.isra.7>
 801f82c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801f82e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f830:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f832:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f834:	80ab      	strh	r3, [r5, #4]
 801f836:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f838:	80e9      	strh	r1, [r5, #6]
 801f83a:	4413      	add	r3, r2
 801f83c:	3b01      	subs	r3, #1
 801f83e:	1e4a      	subs	r2, r1, #1
 801f840:	4402      	add	r2, r0
 801f842:	812b      	strh	r3, [r5, #8]
 801f844:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f846:	816a      	strh	r2, [r5, #10]
 801f848:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f84a:	4619      	mov	r1, r3
 801f84c:	4291      	cmp	r1, r2
 801f84e:	d002      	beq.n	801f856 <GUI_SPRITE_SetPosition+0x31a>
 801f850:	4b5c      	ldr	r3, [pc, #368]	; (801f9c4 <GUI_SPRITE_SetPosition+0x488>)
 801f852:	681b      	ldr	r3, [r3, #0]
 801f854:	745a      	strb	r2, [r3, #17]
 801f856:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f858:	f001 f824 	bl	80208a4 <GUI_MEMDEV_Select>
 801f85c:	a827      	add	r0, sp, #156	; 0x9c
 801f85e:	f7f1 fa61 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801f862:	f7f3 fa2b 	bl	8012cbc <GUI_Unlock>
 801f866:	b02b      	add	sp, #172	; 0xac
 801f868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f86c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801f870:	429e      	cmp	r6, r3
 801f872:	f47f ae7a 	bne.w	801f56a <GUI_SPRITE_SetPosition+0x2e>
 801f876:	e7f1      	b.n	801f85c <GUI_SPRITE_SetPosition+0x320>
 801f878:	4293      	cmp	r3, r2
 801f87a:	db1b      	blt.n	801f8b4 <GUI_SPRITE_SetPosition+0x378>
 801f87c:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 801f880:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f882:	4288      	cmp	r0, r1
 801f884:	db16      	blt.n	801f8b4 <GUI_SPRITE_SetPosition+0x378>
 801f886:	f04f 0900 	mov.w	r9, #0
 801f88a:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
 801f88e:	4299      	cmp	r1, r3
 801f890:	f6ff af40 	blt.w	801f714 <GUI_SPRITE_SetPosition+0x1d8>
 801f894:	f9bd 10a6 	ldrsh.w	r1, [sp, #166]	; 0xa6
 801f898:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f89a:	4281      	cmp	r1, r0
 801f89c:	f6ff af3a 	blt.w	801f714 <GUI_SPRITE_SetPosition+0x1d8>
 801f8a0:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f8a2:	f8d8 2020 	ldr.w	r2, [r8, #32]
 801f8a6:	9100      	str	r1, [sp, #0]
 801f8a8:	4618      	mov	r0, r3
 801f8aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f8ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f8ae:	f7ff fd9b 	bl	801f3e8 <_SetBkIndexBuffered>
 801f8b2:	e72d      	b.n	801f710 <GUI_SPRITE_SetPosition+0x1d4>
 801f8b4:	f04f 0900 	mov.w	r9, #0
 801f8b8:	e755      	b.n	801f766 <GUI_SPRITE_SetPosition+0x22a>
 801f8ba:	f04f 0900 	mov.w	r9, #0
 801f8be:	e789      	b.n	801f7d4 <GUI_SPRITE_SetPosition+0x298>
 801f8c0:	2300      	movs	r3, #0
 801f8c2:	930f      	str	r3, [sp, #60]	; 0x3c
 801f8c4:	e6ef      	b.n	801f6a6 <GUI_SPRITE_SetPosition+0x16a>
 801f8c6:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 801f8ca:	e784      	b.n	801f7d6 <GUI_SPRITE_SetPosition+0x29a>
 801f8cc:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 801f8d0:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801f8d4:	42aa      	cmp	r2, r5
 801f8d6:	dc3a      	bgt.n	801f94e <GUI_SPRITE_SetPosition+0x412>
 801f8d8:	f9b9 1008 	ldrsh.w	r1, [r9, #8]
 801f8dc:	42a9      	cmp	r1, r5
 801f8de:	db36      	blt.n	801f94e <GUI_SPRITE_SetPosition+0x412>
 801f8e0:	f9b9 e006 	ldrsh.w	lr, [r9, #6]
 801f8e4:	9907      	ldr	r1, [sp, #28]
 801f8e6:	458e      	cmp	lr, r1
 801f8e8:	dc31      	bgt.n	801f94e <GUI_SPRITE_SetPosition+0x412>
 801f8ea:	f9b9 000a 	ldrsh.w	r0, [r9, #10]
 801f8ee:	4288      	cmp	r0, r1
 801f8f0:	db2d      	blt.n	801f94e <GUI_SPRITE_SetPosition+0x412>
 801f8f2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801f8f6:	b350      	cbz	r0, 801f94e <GUI_SPRITE_SetPosition+0x412>
 801f8f8:	9325      	str	r3, [sp, #148]	; 0x94
 801f8fa:	1aab      	subs	r3, r5, r2
 801f8fc:	4619      	mov	r1, r3
 801f8fe:	9322      	str	r3, [sp, #136]	; 0x88
 801f900:	9b07      	ldr	r3, [sp, #28]
 801f902:	ebce 0303 	rsb	r3, lr, r3
 801f906:	461a      	mov	r2, r3
 801f908:	9323      	str	r3, [sp, #140]	; 0x8c
 801f90a:	f7f1 fe99 	bl	8011640 <GUI_GetBitmapPixelIndex>
 801f90e:	0e00      	lsrs	r0, r0, #24
 801f910:	28ff      	cmp	r0, #255	; 0xff
 801f912:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f914:	d01b      	beq.n	801f94e <GUI_SPRITE_SetPosition+0x412>
 801f916:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 801f91a:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801f91e:	1a52      	subs	r2, r2, r1
 801f920:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801f922:	fb02 1201 	mla	r2, r2, r1, r1
 801f926:	9922      	ldr	r1, [sp, #136]	; 0x88
 801f928:	440a      	add	r2, r1
 801f92a:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 801f92e:	f8d9 2020 	ldr.w	r2, [r9, #32]
 801f932:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
 801f936:	4691      	mov	r9, r2
 801f938:	9323      	str	r3, [sp, #140]	; 0x8c
 801f93a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f93c:	4b22      	ldr	r3, [pc, #136]	; (801f9c8 <GUI_SPRITE_SetPosition+0x48c>)
 801f93e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f942:	6912      	ldr	r2, [r2, #16]
 801f944:	6852      	ldr	r2, [r2, #4]
 801f946:	4790      	blx	r2
 801f948:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f94a:	9022      	str	r0, [sp, #136]	; 0x88
 801f94c:	e73d      	b.n	801f7ca <GUI_SPRITE_SetPosition+0x28e>
 801f94e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f950:	6810      	ldr	r0, [r2, #0]
 801f952:	b1e0      	cbz	r0, 801f98e <GUI_SPRITE_SetPosition+0x452>
 801f954:	68c2      	ldr	r2, [r0, #12]
 801f956:	9322      	str	r3, [sp, #136]	; 0x88
 801f958:	f8d2 9014 	ldr.w	r9, [r2, #20]
 801f95c:	9a07      	ldr	r2, [sp, #28]
 801f95e:	4629      	mov	r1, r5
 801f960:	47c8      	blx	r9
 801f962:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f964:	4681      	mov	r9, r0
 801f966:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801f96a:	e7e5      	b.n	801f938 <GUI_SPRITE_SetPosition+0x3fc>
 801f96c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f96e:	4b16      	ldr	r3, [pc, #88]	; (801f9c8 <GUI_SPRITE_SetPosition+0x48c>)
 801f970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f974:	691b      	ldr	r3, [r3, #16]
 801f976:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
 801f97a:	685b      	ldr	r3, [r3, #4]
 801f97c:	4798      	blx	r3
 801f97e:	4602      	mov	r2, r0
 801f980:	e6ea      	b.n	801f758 <GUI_SPRITE_SetPosition+0x21c>
 801f982:	68f3      	ldr	r3, [r6, #12]
 801f984:	4630      	mov	r0, r6
 801f986:	a928      	add	r1, sp, #160	; 0xa0
 801f988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f98a:	4798      	blx	r3
 801f98c:	e64d      	b.n	801f62a <GUI_SPRITE_SetPosition+0xee>
 801f98e:	4681      	mov	r9, r0
 801f990:	e7d2      	b.n	801f938 <GUI_SPRITE_SetPosition+0x3fc>
 801f992:	f04f 33ff 	mov.w	r3, #4294967295
 801f996:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f998:	9315      	str	r3, [sp, #84]	; 0x54
 801f99a:	9314      	str	r3, [sp, #80]	; 0x50
 801f99c:	2300      	movs	r3, #0
 801f99e:	9317      	str	r3, [sp, #92]	; 0x5c
 801f9a0:	4613      	mov	r3, r2
 801f9a2:	4423      	add	r3, r4
 801f9a4:	4692      	mov	sl, r2
 801f9a6:	9319      	str	r3, [sp, #100]	; 0x64
 801f9a8:	e628      	b.n	801f5fc <GUI_SPRITE_SetPosition+0xc0>
 801f9aa:	2200      	movs	r2, #0
 801f9ac:	f04f 33ff 	mov.w	r3, #4294967295
 801f9b0:	9208      	str	r2, [sp, #32]
 801f9b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f9b4:	9304      	str	r3, [sp, #16]
 801f9b6:	469b      	mov	fp, r3
 801f9b8:	4633      	mov	r3, r6
 801f9ba:	4413      	add	r3, r2
 801f9bc:	9611      	str	r6, [sp, #68]	; 0x44
 801f9be:	930b      	str	r3, [sp, #44]	; 0x2c
 801f9c0:	e612      	b.n	801f5e8 <GUI_SPRITE_SetPosition+0xac>
 801f9c2:	bf00      	nop
 801f9c4:	20000014 	.word	0x20000014
 801f9c8:	20035df8 	.word	0x20035df8
 801f9cc:	f7f1 f998 	bl	8010d00 <GUI_ALLOC_LockH>
 801f9d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f9d2:	9026      	str	r0, [sp, #152]	; 0x98
 801f9d4:	4553      	cmp	r3, sl
 801f9d6:	f000 80a9 	beq.w	801fb2c <GUI_SPRITE_SetPosition+0x5f0>
 801f9da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f9dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f9de:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801f9e2:	009a      	lsls	r2, r3, #2
 801f9e4:	fb0a 1303 	mla	r3, sl, r3, r1
 801f9e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801f9ec:	930c      	str	r3, [sp, #48]	; 0x30
 801f9ee:	ebc4 030a 	rsb	r3, r4, sl
 801f9f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f9f4:	930a      	str	r3, [sp, #40]	; 0x28
 801f9f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f9f8:	fb01 f202 	mul.w	r2, r1, r2
 801f9fc:	4423      	add	r3, r4
 801f9fe:	920f      	str	r2, [sp, #60]	; 0x3c
 801fa00:	9318      	str	r3, [sp, #96]	; 0x60
 801fa02:	9a05      	ldr	r2, [sp, #20]
 801fa04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fa06:	ea4f 098b 	mov.w	r9, fp, lsl #2
 801fa0a:	4413      	add	r3, r2
 801fa0c:	f8cd 900c 	str.w	r9, [sp, #12]
 801fa10:	9309      	str	r3, [sp, #36]	; 0x24
 801fa12:	46d1      	mov	r9, sl
 801fa14:	46da      	mov	sl, fp
 801fa16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fa18:	454b      	cmp	r3, r9
 801fa1a:	f300 80aa 	bgt.w	801fb72 <GUI_SPRITE_SetPosition+0x636>
 801fa1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fa20:	454b      	cmp	r3, r9
 801fa22:	bfb4      	ite	lt
 801fa24:	2300      	movlt	r3, #0
 801fa26:	2301      	movge	r3, #1
 801fa28:	930e      	str	r3, [sp, #56]	; 0x38
 801fa2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fa2c:	444b      	add	r3, r9
 801fa2e:	930d      	str	r3, [sp, #52]	; 0x34
 801fa30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fa32:	444b      	add	r3, r9
 801fa34:	9307      	str	r3, [sp, #28]
 801fa36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fa38:	4598      	cmp	r8, r3
 801fa3a:	d069      	beq.n	801fb10 <GUI_SPRITE_SetPosition+0x5d4>
 801fa3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fa3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fa40:	461c      	mov	r4, r3
 801fa42:	ebc2 0b03 	rsb	fp, r2, r3
 801fa46:	464a      	mov	r2, r9
 801fa48:	4621      	mov	r1, r4
 801fa4a:	9802      	ldr	r0, [sp, #8]
 801fa4c:	f7f1 fdf8 	bl	8011640 <GUI_GetBitmapPixelIndex>
 801fa50:	4606      	mov	r6, r0
 801fa52:	2800      	cmp	r0, #0
 801fa54:	d056      	beq.n	801fb04 <GUI_SPRITE_SetPosition+0x5c8>
 801fa56:	9b05      	ldr	r3, [sp, #20]
 801fa58:	18e3      	adds	r3, r4, r3
 801fa5a:	9306      	str	r3, [sp, #24]
 801fa5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa5e:	191f      	adds	r7, r3, r4
 801fa60:	9b08      	ldr	r3, [sp, #32]
 801fa62:	42a3      	cmp	r3, r4
 801fa64:	dc67      	bgt.n	801fb36 <GUI_SPRITE_SetPosition+0x5fa>
 801fa66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa68:	42a3      	cmp	r3, r4
 801fa6a:	db64      	blt.n	801fb36 <GUI_SPRITE_SetPosition+0x5fa>
 801fa6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d061      	beq.n	801fb36 <GUI_SPRITE_SetPosition+0x5fa>
 801fa72:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801fa76:	42bb      	cmp	r3, r7
 801fa78:	bfd8      	it	le
 801fa7a:	2301      	movle	r3, #1
 801fa7c:	f300 80c6 	bgt.w	801fc0c <GUI_SPRITE_SetPosition+0x6d0>
 801fa80:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 801fa84:	9907      	ldr	r1, [sp, #28]
 801fa86:	428a      	cmp	r2, r1
 801fa88:	dc07      	bgt.n	801fa9a <GUI_SPRITE_SetPosition+0x55e>
 801fa8a:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 801fa8e:	42ba      	cmp	r2, r7
 801fa90:	db03      	blt.n	801fa9a <GUI_SPRITE_SetPosition+0x55e>
 801fa92:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 801fa96:	428a      	cmp	r2, r1
 801fa98:	da78      	bge.n	801fb8c <GUI_SPRITE_SetPosition+0x650>
 801fa9a:	2200      	movs	r2, #0
 801fa9c:	9204      	str	r2, [sp, #16]
 801fa9e:	b163      	cbz	r3, 801faba <GUI_SPRITE_SetPosition+0x57e>
 801faa0:	f1bb 0f00 	cmp.w	fp, #0
 801faa4:	db5d      	blt.n	801fb62 <GUI_SPRITE_SetPosition+0x626>
 801faa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801faa8:	2b00      	cmp	r3, #0
 801faaa:	db5a      	blt.n	801fb62 <GUI_SPRITE_SetPosition+0x626>
 801faac:	461a      	mov	r2, r3
 801faae:	4659      	mov	r1, fp
 801fab0:	9802      	ldr	r0, [sp, #8]
 801fab2:	f7f1 fdc5 	bl	8011640 <GUI_GetBitmapPixelIndex>
 801fab6:	2800      	cmp	r0, #0
 801fab8:	d153      	bne.n	801fb62 <GUI_SPRITE_SetPosition+0x626>
 801faba:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801fabe:	9a06      	ldr	r2, [sp, #24]
 801fac0:	429a      	cmp	r2, r3
 801fac2:	db0e      	blt.n	801fae2 <GUI_SPRITE_SetPosition+0x5a6>
 801fac4:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 801fac8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801faca:	428a      	cmp	r2, r1
 801facc:	dc09      	bgt.n	801fae2 <GUI_SPRITE_SetPosition+0x5a6>
 801face:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 801fad2:	9906      	ldr	r1, [sp, #24]
 801fad4:	428a      	cmp	r2, r1
 801fad6:	db04      	blt.n	801fae2 <GUI_SPRITE_SetPosition+0x5a6>
 801fad8:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 801fadc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801fade:	428a      	cmp	r2, r1
 801fae0:	da38      	bge.n	801fb54 <GUI_SPRITE_SetPosition+0x618>
 801fae2:	429f      	cmp	r7, r3
 801fae4:	db0c      	blt.n	801fb00 <GUI_SPRITE_SetPosition+0x5c4>
 801fae6:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801faea:	9907      	ldr	r1, [sp, #28]
 801faec:	428b      	cmp	r3, r1
 801faee:	dc07      	bgt.n	801fb00 <GUI_SPRITE_SetPosition+0x5c4>
 801faf0:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801faf4:	42bb      	cmp	r3, r7
 801faf6:	db03      	blt.n	801fb00 <GUI_SPRITE_SetPosition+0x5c4>
 801faf8:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 801fafc:	428b      	cmp	r3, r1
 801fafe:	da3b      	bge.n	801fb78 <GUI_SPRITE_SetPosition+0x63c>
 801fb00:	9b04      	ldr	r3, [sp, #16]
 801fb02:	622b      	str	r3, [r5, #32]
 801fb04:	4454      	add	r4, sl
 801fb06:	9b03      	ldr	r3, [sp, #12]
 801fb08:	4544      	cmp	r4, r8
 801fb0a:	441d      	add	r5, r3
 801fb0c:	44d3      	add	fp, sl
 801fb0e:	d19a      	bne.n	801fa46 <GUI_SPRITE_SetPosition+0x50a>
 801fb10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801fb14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb16:	440b      	add	r3, r1
 801fb18:	930c      	str	r3, [sp, #48]	; 0x30
 801fb1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb1c:	4619      	mov	r1, r3
 801fb1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fb20:	4491      	add	r9, r2
 801fb22:	4411      	add	r1, r2
 801fb24:	4599      	cmp	r9, r3
 801fb26:	910a      	str	r1, [sp, #40]	; 0x28
 801fb28:	f47f af75 	bne.w	801fa16 <GUI_SPRITE_SetPosition+0x4da>
 801fb2c:	a826      	add	r0, sp, #152	; 0x98
 801fb2e:	f7f1 f8f9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 801fb32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fb34:	e671      	b.n	801f81a <GUI_SPRITE_SetPosition+0x2de>
 801fb36:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801fb3a:	42bb      	cmp	r3, r7
 801fb3c:	dd17      	ble.n	801fb6e <GUI_SPRITE_SetPosition+0x632>
 801fb3e:	9a06      	ldr	r2, [sp, #24]
 801fb40:	4293      	cmp	r3, r2
 801fb42:	dc11      	bgt.n	801fb68 <GUI_SPRITE_SetPosition+0x62c>
 801fb44:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 801fb48:	990d      	ldr	r1, [sp, #52]	; 0x34
 801fb4a:	4291      	cmp	r1, r2
 801fb4c:	db0c      	blt.n	801fb68 <GUI_SPRITE_SetPosition+0x62c>
 801fb4e:	2200      	movs	r2, #0
 801fb50:	9204      	str	r2, [sp, #16]
 801fb52:	e7bc      	b.n	801face <GUI_SPRITE_SetPosition+0x592>
 801fb54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb56:	6a2a      	ldr	r2, [r5, #32]
 801fb58:	9806      	ldr	r0, [sp, #24]
 801fb5a:	9300      	str	r3, [sp, #0]
 801fb5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fb5e:	f7ff fc43 	bl	801f3e8 <_SetBkIndexBuffered>
 801fb62:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801fb66:	e7bc      	b.n	801fae2 <GUI_SPRITE_SetPosition+0x5a6>
 801fb68:	2300      	movs	r3, #0
 801fb6a:	9304      	str	r3, [sp, #16]
 801fb6c:	e7c8      	b.n	801fb00 <GUI_SPRITE_SetPosition+0x5c4>
 801fb6e:	2300      	movs	r3, #0
 801fb70:	e786      	b.n	801fa80 <GUI_SPRITE_SetPosition+0x544>
 801fb72:	2300      	movs	r3, #0
 801fb74:	930e      	str	r3, [sp, #56]	; 0x38
 801fb76:	e758      	b.n	801fa2a <GUI_SPRITE_SetPosition+0x4ee>
 801fb78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fb7a:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 801fb7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fb80:	9300      	str	r3, [sp, #0]
 801fb82:	4638      	mov	r0, r7
 801fb84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fb86:	f7ff fc2f 	bl	801f3e8 <_SetBkIndexBuffered>
 801fb8a:	e7b9      	b.n	801fb00 <GUI_SPRITE_SetPosition+0x5c4>
 801fb8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801fb8e:	9204      	str	r2, [sp, #16]
 801fb90:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801fb94:	42ba      	cmp	r2, r7
 801fb96:	dc0d      	bgt.n	801fbb4 <GUI_SPRITE_SetPosition+0x678>
 801fb98:	9804      	ldr	r0, [sp, #16]
 801fb9a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801fb9e:	42b9      	cmp	r1, r7
 801fba0:	db08      	blt.n	801fbb4 <GUI_SPRITE_SetPosition+0x678>
 801fba2:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801fba6:	9907      	ldr	r1, [sp, #28]
 801fba8:	458e      	cmp	lr, r1
 801fbaa:	dc03      	bgt.n	801fbb4 <GUI_SPRITE_SetPosition+0x678>
 801fbac:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 801fbb0:	4288      	cmp	r0, r1
 801fbb2:	da0d      	bge.n	801fbd0 <GUI_SPRITE_SetPosition+0x694>
 801fbb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fbb6:	6810      	ldr	r0, [r2, #0]
 801fbb8:	2800      	cmp	r0, #0
 801fbba:	f43f af6e 	beq.w	801fa9a <GUI_SPRITE_SetPosition+0x55e>
 801fbbe:	68c2      	ldr	r2, [r0, #12]
 801fbc0:	931e      	str	r3, [sp, #120]	; 0x78
 801fbc2:	4639      	mov	r1, r7
 801fbc4:	6953      	ldr	r3, [r2, #20]
 801fbc6:	9a07      	ldr	r2, [sp, #28]
 801fbc8:	4798      	blx	r3
 801fbca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fbcc:	9004      	str	r0, [sp, #16]
 801fbce:	e766      	b.n	801fa9e <GUI_SPRITE_SetPosition+0x562>
 801fbd0:	9323      	str	r3, [sp, #140]	; 0x8c
 801fbd2:	1abb      	subs	r3, r7, r2
 801fbd4:	931e      	str	r3, [sp, #120]	; 0x78
 801fbd6:	ebce 0201 	rsb	r2, lr, r1
 801fbda:	4619      	mov	r1, r3
 801fbdc:	9b04      	ldr	r3, [sp, #16]
 801fbde:	9222      	str	r2, [sp, #136]	; 0x88
 801fbe0:	6958      	ldr	r0, [r3, #20]
 801fbe2:	f7f1 fd2d 	bl	8011640 <GUI_GetBitmapPixelIndex>
 801fbe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fbe8:	2800      	cmp	r0, #0
 801fbea:	d0e3      	beq.n	801fbb4 <GUI_SPRITE_SetPosition+0x678>
 801fbec:	9804      	ldr	r0, [sp, #16]
 801fbee:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801fbf2:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801fbf6:	1a52      	subs	r2, r2, r1
 801fbf8:	9922      	ldr	r1, [sp, #136]	; 0x88
 801fbfa:	fb02 1201 	mla	r2, r2, r1, r1
 801fbfe:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fc00:	440a      	add	r2, r1
 801fc02:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801fc06:	6a12      	ldr	r2, [r2, #32]
 801fc08:	9204      	str	r2, [sp, #16]
 801fc0a:	e748      	b.n	801fa9e <GUI_SPRITE_SetPosition+0x562>
 801fc0c:	2300      	movs	r3, #0
 801fc0e:	9304      	str	r3, [sp, #16]
 801fc10:	e746      	b.n	801faa0 <GUI_SPRITE_SetPosition+0x564>
 801fc12:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 801fc16:	9907      	ldr	r1, [sp, #28]
 801fc18:	428a      	cmp	r2, r1
 801fc1a:	f73f ad66 	bgt.w	801f6ea <GUI_SPRITE_SetPosition+0x1ae>
 801fc1e:	2201      	movs	r2, #1
 801fc20:	920a      	str	r2, [sp, #40]	; 0x28
 801fc22:	e5c6      	b.n	801f7b2 <GUI_SPRITE_SetPosition+0x276>

0801fc24 <GUI__CompactPixelIndices>:
 801fc24:	2a08      	cmp	r2, #8
 801fc26:	b410      	push	{r4}
 801fc28:	dd0e      	ble.n	801fc48 <GUI__CompactPixelIndices+0x24>
 801fc2a:	2a10      	cmp	r2, #16
 801fc2c:	dc1c      	bgt.n	801fc68 <GUI__CompactPixelIndices+0x44>
 801fc2e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801fc32:	4603      	mov	r3, r0
 801fc34:	f850 2b04 	ldr.w	r2, [r0], #4
 801fc38:	f823 2b02 	strh.w	r2, [r3], #2
 801fc3c:	4299      	cmp	r1, r3
 801fc3e:	d1f9      	bne.n	801fc34 <GUI__CompactPixelIndices+0x10>
 801fc40:	2001      	movs	r0, #1
 801fc42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fc46:	4770      	bx	lr
 801fc48:	2a02      	cmp	r2, #2
 801fc4a:	d011      	beq.n	801fc70 <GUI__CompactPixelIndices+0x4c>
 801fc4c:	2a04      	cmp	r2, #4
 801fc4e:	f000 8090 	beq.w	801fd72 <GUI__CompactPixelIndices+0x14e>
 801fc52:	2a01      	cmp	r2, #1
 801fc54:	d03c      	beq.n	801fcd0 <GUI__CompactPixelIndices+0xac>
 801fc56:	4401      	add	r1, r0
 801fc58:	4603      	mov	r3, r0
 801fc5a:	f850 2b04 	ldr.w	r2, [r0], #4
 801fc5e:	f803 2b01 	strb.w	r2, [r3], #1
 801fc62:	4299      	cmp	r1, r3
 801fc64:	d1f9      	bne.n	801fc5a <GUI__CompactPixelIndices+0x36>
 801fc66:	e7eb      	b.n	801fc40 <GUI__CompactPixelIndices+0x1c>
 801fc68:	2000      	movs	r0, #0
 801fc6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fc6e:	4770      	bx	lr
 801fc70:	f100 0210 	add.w	r2, r0, #16
 801fc74:	f852 3c10 	ldr.w	r3, [r2, #-16]
 801fc78:	2901      	cmp	r1, #1
 801fc7a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 801fc7e:	b2db      	uxtb	r3, r3
 801fc80:	d023      	beq.n	801fcca <GUI__CompactPixelIndices+0xa6>
 801fc82:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 801fc86:	0124      	lsls	r4, r4, #4
 801fc88:	f004 0430 	and.w	r4, r4, #48	; 0x30
 801fc8c:	2902      	cmp	r1, #2
 801fc8e:	ea43 0304 	orr.w	r3, r3, r4
 801fc92:	d01a      	beq.n	801fcca <GUI__CompactPixelIndices+0xa6>
 801fc94:	f852 4c08 	ldr.w	r4, [r2, #-8]
 801fc98:	00a4      	lsls	r4, r4, #2
 801fc9a:	f004 040c 	and.w	r4, r4, #12
 801fc9e:	2903      	cmp	r1, #3
 801fca0:	ea43 0304 	orr.w	r3, r3, r4
 801fca4:	d011      	beq.n	801fcca <GUI__CompactPixelIndices+0xa6>
 801fca6:	f852 4c04 	ldr.w	r4, [r2, #-4]
 801fcaa:	f004 0403 	and.w	r4, r4, #3
 801fcae:	4323      	orrs	r3, r4
 801fcb0:	3904      	subs	r1, #4
 801fcb2:	f800 3b01 	strb.w	r3, [r0], #1
 801fcb6:	f102 0210 	add.w	r2, r2, #16
 801fcba:	d0c1      	beq.n	801fc40 <GUI__CompactPixelIndices+0x1c>
 801fcbc:	f852 3c10 	ldr.w	r3, [r2, #-16]
 801fcc0:	2901      	cmp	r1, #1
 801fcc2:	ea4f 1383 	mov.w	r3, r3, lsl #6
 801fcc6:	b2db      	uxtb	r3, r3
 801fcc8:	d1db      	bne.n	801fc82 <GUI__CompactPixelIndices+0x5e>
 801fcca:	7003      	strb	r3, [r0, #0]
 801fccc:	2001      	movs	r0, #1
 801fcce:	e7b8      	b.n	801fc42 <GUI__CompactPixelIndices+0x1e>
 801fcd0:	f100 0220 	add.w	r2, r0, #32
 801fcd4:	f852 3c20 	ldr.w	r3, [r2, #-32]
 801fcd8:	2901      	cmp	r1, #1
 801fcda:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801fcde:	b2db      	uxtb	r3, r3
 801fce0:	d0f3      	beq.n	801fcca <GUI__CompactPixelIndices+0xa6>
 801fce2:	f852 4c1c 	ldr.w	r4, [r2, #-28]
 801fce6:	01a4      	lsls	r4, r4, #6
 801fce8:	f004 0440 	and.w	r4, r4, #64	; 0x40
 801fcec:	2902      	cmp	r1, #2
 801fcee:	ea43 0304 	orr.w	r3, r3, r4
 801fcf2:	d0ea      	beq.n	801fcca <GUI__CompactPixelIndices+0xa6>
 801fcf4:	f852 4c18 	ldr.w	r4, [r2, #-24]
 801fcf8:	0164      	lsls	r4, r4, #5
 801fcfa:	f004 0420 	and.w	r4, r4, #32
 801fcfe:	2903      	cmp	r1, #3
 801fd00:	ea43 0304 	orr.w	r3, r3, r4
 801fd04:	d0e1      	beq.n	801fcca <GUI__CompactPixelIndices+0xa6>
 801fd06:	f852 4c14 	ldr.w	r4, [r2, #-20]
 801fd0a:	0124      	lsls	r4, r4, #4
 801fd0c:	f004 0410 	and.w	r4, r4, #16
 801fd10:	2904      	cmp	r1, #4
 801fd12:	ea43 0304 	orr.w	r3, r3, r4
 801fd16:	d0d8      	beq.n	801fcca <GUI__CompactPixelIndices+0xa6>
 801fd18:	f852 4c10 	ldr.w	r4, [r2, #-16]
 801fd1c:	00e4      	lsls	r4, r4, #3
 801fd1e:	f004 0408 	and.w	r4, r4, #8
 801fd22:	2905      	cmp	r1, #5
 801fd24:	ea43 0304 	orr.w	r3, r3, r4
 801fd28:	d0cf      	beq.n	801fcca <GUI__CompactPixelIndices+0xa6>
 801fd2a:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 801fd2e:	00a4      	lsls	r4, r4, #2
 801fd30:	f004 0404 	and.w	r4, r4, #4
 801fd34:	2906      	cmp	r1, #6
 801fd36:	ea43 0304 	orr.w	r3, r3, r4
 801fd3a:	d0c6      	beq.n	801fcca <GUI__CompactPixelIndices+0xa6>
 801fd3c:	f852 4c08 	ldr.w	r4, [r2, #-8]
 801fd40:	0064      	lsls	r4, r4, #1
 801fd42:	f004 0402 	and.w	r4, r4, #2
 801fd46:	3907      	subs	r1, #7
 801fd48:	ea43 0304 	orr.w	r3, r3, r4
 801fd4c:	f102 0220 	add.w	r2, r2, #32
 801fd50:	d0bb      	beq.n	801fcca <GUI__CompactPixelIndices+0xa6>
 801fd52:	f852 4c24 	ldr.w	r4, [r2, #-36]
 801fd56:	f004 0401 	and.w	r4, r4, #1
 801fd5a:	4323      	orrs	r3, r4
 801fd5c:	f800 3b01 	strb.w	r3, [r0], #1
 801fd60:	f852 3c20 	ldr.w	r3, [r2, #-32]
 801fd64:	2901      	cmp	r1, #1
 801fd66:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801fd6a:	b2db      	uxtb	r3, r3
 801fd6c:	d1b9      	bne.n	801fce2 <GUI__CompactPixelIndices+0xbe>
 801fd6e:	7003      	strb	r3, [r0, #0]
 801fd70:	e7ac      	b.n	801fccc <GUI__CompactPixelIndices+0xa8>
 801fd72:	f100 0408 	add.w	r4, r0, #8
 801fd76:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801fd7a:	2901      	cmp	r1, #1
 801fd7c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801fd80:	b2db      	uxtb	r3, r3
 801fd82:	d012      	beq.n	801fdaa <GUI__CompactPixelIndices+0x186>
 801fd84:	f854 2c04 	ldr.w	r2, [r4, #-4]
 801fd88:	f002 020f 	and.w	r2, r2, #15
 801fd8c:	4313      	orrs	r3, r2
 801fd8e:	3902      	subs	r1, #2
 801fd90:	f800 3b01 	strb.w	r3, [r0], #1
 801fd94:	f104 0408 	add.w	r4, r4, #8
 801fd98:	f43f af52 	beq.w	801fc40 <GUI__CompactPixelIndices+0x1c>
 801fd9c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801fda0:	2901      	cmp	r1, #1
 801fda2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801fda6:	b2db      	uxtb	r3, r3
 801fda8:	d1ec      	bne.n	801fd84 <GUI__CompactPixelIndices+0x160>
 801fdaa:	7003      	strb	r3, [r0, #0]
 801fdac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fdb0:	4608      	mov	r0, r1
 801fdb2:	4770      	bx	lr

0801fdb4 <GUI__CompactPixelIndicesEx>:
 801fdb4:	2a08      	cmp	r2, #8
 801fdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdba:	460c      	mov	r4, r1
 801fdbc:	681f      	ldr	r7, [r3, #0]
 801fdbe:	4605      	mov	r5, r0
 801fdc0:	dd0c      	ble.n	801fddc <GUI__CompactPixelIndicesEx+0x28>
 801fdc2:	2a10      	cmp	r2, #16
 801fdc4:	dc21      	bgt.n	801fe0a <GUI__CompactPixelIndicesEx+0x56>
 801fdc6:	691e      	ldr	r6, [r3, #16]
 801fdc8:	2e00      	cmp	r6, #0
 801fdca:	f000 8091 	beq.w	801fef0 <GUI__CompactPixelIndicesEx+0x13c>
 801fdce:	4622      	mov	r2, r4
 801fdd0:	4629      	mov	r1, r5
 801fdd2:	2302      	movs	r3, #2
 801fdd4:	47b0      	blx	r6
 801fdd6:	2001      	movs	r0, #1
 801fdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fddc:	3a01      	subs	r2, #1
 801fdde:	2a07      	cmp	r2, #7
 801fde0:	d810      	bhi.n	801fe04 <GUI__CompactPixelIndicesEx+0x50>
 801fde2:	e8df f002 	tbb	[pc, r2]
 801fde6:	5104      	.short	0x5104
 801fde8:	0f0f770f 	.word	0x0f0f770f
 801fdec:	9a0f      	.short	0x9a0f
 801fdee:	f100 0820 	add.w	r8, r0, #32
 801fdf2:	f858 0c20 	ldr.w	r0, [r8, #-32]
 801fdf6:	47b8      	blx	r7
 801fdf8:	2c01      	cmp	r4, #1
 801fdfa:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 801fdfe:	b2c6      	uxtb	r6, r0
 801fe00:	d106      	bne.n	801fe10 <GUI__CompactPixelIndicesEx+0x5c>
 801fe02:	702e      	strb	r6, [r5, #0]
 801fe04:	2001      	movs	r0, #1
 801fe06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe0a:	2000      	movs	r0, #0
 801fe0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe10:	f858 0c1c 	ldr.w	r0, [r8, #-28]
 801fe14:	47b8      	blx	r7
 801fe16:	2c02      	cmp	r4, #2
 801fe18:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 801fe1c:	b2c6      	uxtb	r6, r0
 801fe1e:	d0f0      	beq.n	801fe02 <GUI__CompactPixelIndicesEx+0x4e>
 801fe20:	f858 0c18 	ldr.w	r0, [r8, #-24]
 801fe24:	47b8      	blx	r7
 801fe26:	2c03      	cmp	r4, #3
 801fe28:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 801fe2c:	b2c6      	uxtb	r6, r0
 801fe2e:	d0e8      	beq.n	801fe02 <GUI__CompactPixelIndicesEx+0x4e>
 801fe30:	f858 0c14 	ldr.w	r0, [r8, #-20]
 801fe34:	47b8      	blx	r7
 801fe36:	2c04      	cmp	r4, #4
 801fe38:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 801fe3c:	b2c6      	uxtb	r6, r0
 801fe3e:	d0e0      	beq.n	801fe02 <GUI__CompactPixelIndicesEx+0x4e>
 801fe40:	f858 0c10 	ldr.w	r0, [r8, #-16]
 801fe44:	47b8      	blx	r7
 801fe46:	2c05      	cmp	r4, #5
 801fe48:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 801fe4c:	b2c6      	uxtb	r6, r0
 801fe4e:	d0d8      	beq.n	801fe02 <GUI__CompactPixelIndicesEx+0x4e>
 801fe50:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 801fe54:	47b8      	blx	r7
 801fe56:	2c06      	cmp	r4, #6
 801fe58:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 801fe5c:	b2c6      	uxtb	r6, r0
 801fe5e:	d0d0      	beq.n	801fe02 <GUI__CompactPixelIndicesEx+0x4e>
 801fe60:	f858 0c08 	ldr.w	r0, [r8, #-8]
 801fe64:	47b8      	blx	r7
 801fe66:	2c07      	cmp	r4, #7
 801fe68:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 801fe6c:	b2c6      	uxtb	r6, r0
 801fe6e:	d0c8      	beq.n	801fe02 <GUI__CompactPixelIndicesEx+0x4e>
 801fe70:	f858 0c04 	ldr.w	r0, [r8, #-4]
 801fe74:	47b8      	blx	r7
 801fe76:	3c08      	subs	r4, #8
 801fe78:	ea40 0006 	orr.w	r0, r0, r6
 801fe7c:	f805 0b01 	strb.w	r0, [r5], #1
 801fe80:	f108 0820 	add.w	r8, r8, #32
 801fe84:	d1b5      	bne.n	801fdf2 <GUI__CompactPixelIndicesEx+0x3e>
 801fe86:	e7bd      	b.n	801fe04 <GUI__CompactPixelIndicesEx+0x50>
 801fe88:	f100 0810 	add.w	r8, r0, #16
 801fe8c:	f858 0c10 	ldr.w	r0, [r8, #-16]
 801fe90:	47b8      	blx	r7
 801fe92:	2c01      	cmp	r4, #1
 801fe94:	ea4f 1080 	mov.w	r0, r0, lsl #6
 801fe98:	b2c6      	uxtb	r6, r0
 801fe9a:	d0b2      	beq.n	801fe02 <GUI__CompactPixelIndicesEx+0x4e>
 801fe9c:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 801fea0:	47b8      	blx	r7
 801fea2:	2c02      	cmp	r4, #2
 801fea4:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 801fea8:	b2c6      	uxtb	r6, r0
 801feaa:	d0aa      	beq.n	801fe02 <GUI__CompactPixelIndicesEx+0x4e>
 801feac:	f858 0c08 	ldr.w	r0, [r8, #-8]
 801feb0:	47b8      	blx	r7
 801feb2:	2c03      	cmp	r4, #3
 801feb4:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 801feb8:	b2c6      	uxtb	r6, r0
 801feba:	d0a2      	beq.n	801fe02 <GUI__CompactPixelIndicesEx+0x4e>
 801febc:	f858 0c04 	ldr.w	r0, [r8, #-4]
 801fec0:	47b8      	blx	r7
 801fec2:	3c04      	subs	r4, #4
 801fec4:	ea40 0006 	orr.w	r0, r0, r6
 801fec8:	f805 0b01 	strb.w	r0, [r5], #1
 801fecc:	f108 0810 	add.w	r8, r8, #16
 801fed0:	d1dc      	bne.n	801fe8c <GUI__CompactPixelIndicesEx+0xd8>
 801fed2:	e797      	b.n	801fe04 <GUI__CompactPixelIndicesEx+0x50>
 801fed4:	f100 0808 	add.w	r8, r0, #8
 801fed8:	f858 0c08 	ldr.w	r0, [r8, #-8]
 801fedc:	47b8      	blx	r7
 801fede:	2c01      	cmp	r4, #1
 801fee0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801fee4:	b2c6      	uxtb	r6, r0
 801fee6:	d10c      	bne.n	801ff02 <GUI__CompactPixelIndicesEx+0x14e>
 801fee8:	702e      	strb	r6, [r5, #0]
 801feea:	4620      	mov	r0, r4
 801feec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fef0:	1e86      	subs	r6, r0, #2
 801fef2:	f855 0b04 	ldr.w	r0, [r5], #4
 801fef6:	47b8      	blx	r7
 801fef8:	3c01      	subs	r4, #1
 801fefa:	f826 0f02 	strh.w	r0, [r6, #2]!
 801fefe:	d1f8      	bne.n	801fef2 <GUI__CompactPixelIndicesEx+0x13e>
 801ff00:	e780      	b.n	801fe04 <GUI__CompactPixelIndicesEx+0x50>
 801ff02:	f858 0c04 	ldr.w	r0, [r8, #-4]
 801ff06:	47b8      	blx	r7
 801ff08:	3c02      	subs	r4, #2
 801ff0a:	ea40 0006 	orr.w	r0, r0, r6
 801ff0e:	f805 0b01 	strb.w	r0, [r5], #1
 801ff12:	f108 0808 	add.w	r8, r8, #8
 801ff16:	d1df      	bne.n	801fed8 <GUI__CompactPixelIndicesEx+0x124>
 801ff18:	e774      	b.n	801fe04 <GUI__CompactPixelIndicesEx+0x50>
 801ff1a:	691e      	ldr	r6, [r3, #16]
 801ff1c:	b13e      	cbz	r6, 801ff2e <GUI__CompactPixelIndicesEx+0x17a>
 801ff1e:	4628      	mov	r0, r5
 801ff20:	4622      	mov	r2, r4
 801ff22:	2301      	movs	r3, #1
 801ff24:	4629      	mov	r1, r5
 801ff26:	47b0      	blx	r6
 801ff28:	2001      	movs	r0, #1
 801ff2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff2e:	1e6e      	subs	r6, r5, #1
 801ff30:	f855 0b04 	ldr.w	r0, [r5], #4
 801ff34:	47b8      	blx	r7
 801ff36:	3c01      	subs	r4, #1
 801ff38:	f806 0f01 	strb.w	r0, [r6, #1]!
 801ff3c:	d1f8      	bne.n	801ff30 <GUI__CompactPixelIndicesEx+0x17c>
 801ff3e:	e761      	b.n	801fe04 <GUI__CompactPixelIndicesEx+0x50>

0801ff40 <GUI__DrawTwinArc2>:
 801ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff44:	b08d      	sub	sp, #52	; 0x34
 801ff46:	4606      	mov	r6, r0
 801ff48:	460d      	mov	r5, r1
 801ff4a:	4614      	mov	r4, r2
 801ff4c:	461f      	mov	r7, r3
 801ff4e:	9302      	str	r3, [sp, #8]
 801ff50:	f7f2 febe 	bl	8012cd0 <GUI_Lock>
 801ff54:	4b7e      	ldr	r3, [pc, #504]	; (8020150 <GUI__DrawTwinArc2+0x210>)
 801ff56:	681b      	ldr	r3, [r3, #0]
 801ff58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801ff5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ff5c:	440c      	add	r4, r1
 801ff5e:	199a      	adds	r2, r3, r6
 801ff60:	3f01      	subs	r7, #1
 801ff62:	442b      	add	r3, r5
 801ff64:	4619      	mov	r1, r3
 801ff66:	9305      	str	r3, [sp, #20]
 801ff68:	a80a      	add	r0, sp, #40	; 0x28
 801ff6a:	19e3      	adds	r3, r4, r7
 801ff6c:	9204      	str	r2, [sp, #16]
 801ff6e:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
 801ff72:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ff76:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801ff7a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ff7e:	f7fa fa7b 	bl	801a478 <WM__InitIVRSearch>
 801ff82:	2800      	cmp	r0, #0
 801ff84:	d05e      	beq.n	8020044 <GUI__DrawTwinArc2+0x104>
 801ff86:	9a02      	ldr	r2, [sp, #8]
 801ff88:	fb07 f307 	mul.w	r3, r7, r7
 801ff8c:	fb02 fa02 	mul.w	sl, r2, r2
 801ff90:	4619      	mov	r1, r3
 801ff92:	9301      	str	r3, [sp, #4]
 801ff94:	ebc1 030a 	rsb	r3, r1, sl
 801ff98:	9307      	str	r3, [sp, #28]
 801ff9a:	4613      	mov	r3, r2
 801ff9c:	3a02      	subs	r2, #2
 801ff9e:	9203      	str	r2, [sp, #12]
 801ffa0:	461a      	mov	r2, r3
 801ffa2:	3b03      	subs	r3, #3
 801ffa4:	9309      	str	r3, [sp, #36]	; 0x24
 801ffa6:	18a3      	adds	r3, r4, r2
 801ffa8:	9306      	str	r3, [sp, #24]
 801ffaa:	1ca3      	adds	r3, r4, #2
 801ffac:	9308      	str	r3, [sp, #32]
 801ffae:	9b02      	ldr	r3, [sp, #8]
 801ffb0:	2b00      	cmp	r3, #0
 801ffb2:	dd43      	ble.n	802003c <GUI__DrawTwinArc2+0xfc>
 801ffb4:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ffb6:	f7f1 fc01 	bl	80117bc <GUI_SetColor>
 801ffba:	2f00      	cmp	r7, #0
 801ffbc:	d047      	beq.n	802004e <GUI__DrawTwinArc2+0x10e>
 801ffbe:	9b06      	ldr	r3, [sp, #24]
 801ffc0:	9807      	ldr	r0, [sp, #28]
 801ffc2:	1bde      	subs	r6, r3, r7
 801ffc4:	9b08      	ldr	r3, [sp, #32]
 801ffc6:	1b9b      	subs	r3, r3, r6
 801ffc8:	9300      	str	r3, [sp, #0]
 801ffca:	f7f3 ff6b 	bl	8013ea4 <GUI__sqrt32>
 801ffce:	9b04      	ldr	r3, [sp, #16]
 801ffd0:	9a02      	ldr	r2, [sp, #8]
 801ffd2:	4619      	mov	r1, r3
 801ffd4:	9b05      	ldr	r3, [sp, #20]
 801ffd6:	eb01 0902 	add.w	r9, r1, r2
 801ffda:	4619      	mov	r1, r3
 801ffdc:	4605      	mov	r5, r0
 801ffde:	ebc2 0801 	rsb	r8, r2, r1
 801ffe2:	463c      	mov	r4, r7
 801ffe4:	f04f 0b00 	mov.w	fp, #0
 801ffe8:	ebcb 0209 	rsb	r2, fp, r9
 801ffec:	4631      	mov	r1, r6
 801ffee:	3a01      	subs	r2, #1
 801fff0:	ebc5 0009 	rsb	r0, r5, r9
 801fff4:	f7f4 f99c 	bl	8014330 <LCD_DrawHLine>
 801fff8:	eb0b 0008 	add.w	r0, fp, r8
 801fffc:	3001      	adds	r0, #1
 801fffe:	4631      	mov	r1, r6
 8020000:	eb05 0208 	add.w	r2, r5, r8
 8020004:	f7f4 f994 	bl	8014330 <LCD_DrawHLine>
 8020008:	3c01      	subs	r4, #1
 802000a:	9b00      	ldr	r3, [sp, #0]
 802000c:	fb04 fb04 	mul.w	fp, r4, r4
 8020010:	ebcb 000a 	rsb	r0, fp, sl
 8020014:	441e      	add	r6, r3
 8020016:	d01a      	beq.n	802004e <GUI__DrawTwinArc2+0x10e>
 8020018:	f7f3 ff44 	bl	8013ea4 <GUI__sqrt32>
 802001c:	42a7      	cmp	r7, r4
 802001e:	4605      	mov	r5, r0
 8020020:	dc02      	bgt.n	8020028 <GUI__DrawTwinArc2+0xe8>
 8020022:	f04f 0b00 	mov.w	fp, #0
 8020026:	e7df      	b.n	801ffe8 <GUI__DrawTwinArc2+0xa8>
 8020028:	9b01      	ldr	r3, [sp, #4]
 802002a:	ebcb 0003 	rsb	r0, fp, r3
 802002e:	f7f3 ff39 	bl	8013ea4 <GUI__sqrt32>
 8020032:	4683      	mov	fp, r0
 8020034:	e7d8      	b.n	801ffe8 <GUI__DrawTwinArc2+0xa8>
 8020036:	9b02      	ldr	r3, [sp, #8]
 8020038:	2b02      	cmp	r3, #2
 802003a:	d14e      	bne.n	80200da <GUI__DrawTwinArc2+0x19a>
 802003c:	f7fa f8f6 	bl	801a22c <WM__GetNextIVR>
 8020040:	2800      	cmp	r0, #0
 8020042:	d1b4      	bne.n	801ffae <GUI__DrawTwinArc2+0x6e>
 8020044:	f7f2 fe3a 	bl	8012cbc <GUI_Unlock>
 8020048:	b00d      	add	sp, #52	; 0x34
 802004a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802004e:	9b02      	ldr	r3, [sp, #8]
 8020050:	2b01      	cmp	r3, #1
 8020052:	d0f3      	beq.n	802003c <GUI__DrawTwinArc2+0xfc>
 8020054:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020056:	f7f1 fbb1 	bl	80117bc <GUI_SetColor>
 802005a:	9b03      	ldr	r3, [sp, #12]
 802005c:	2b00      	cmp	r3, #0
 802005e:	d0ea      	beq.n	8020036 <GUI__DrawTwinArc2+0xf6>
 8020060:	9a02      	ldr	r2, [sp, #8]
 8020062:	461c      	mov	r4, r3
 8020064:	9b06      	ldr	r3, [sp, #24]
 8020066:	f1c2 0602 	rsb	r6, r2, #2
 802006a:	441e      	add	r6, r3
 802006c:	9b04      	ldr	r3, [sp, #16]
 802006e:	4619      	mov	r1, r3
 8020070:	eb01 0902 	add.w	r9, r1, r2
 8020074:	4613      	mov	r3, r2
 8020076:	9a05      	ldr	r2, [sp, #20]
 8020078:	4611      	mov	r1, r2
 802007a:	ebc3 0801 	rsb	r8, r3, r1
 802007e:	e015      	b.n	80200ac <GUI__DrawTwinArc2+0x16c>
 8020080:	462b      	mov	r3, r5
 8020082:	ebc5 0209 	rsb	r2, r5, r9
 8020086:	4631      	mov	r1, r6
 8020088:	ebc3 0009 	rsb	r0, r3, r9
 802008c:	3a01      	subs	r2, #1
 802008e:	eb03 0b08 	add.w	fp, r3, r8
 8020092:	f7f4 f94d 	bl	8014330 <LCD_DrawHLine>
 8020096:	eb05 0008 	add.w	r0, r5, r8
 802009a:	4631      	mov	r1, r6
 802009c:	465a      	mov	r2, fp
 802009e:	3001      	adds	r0, #1
 80200a0:	f7f4 f946 	bl	8014330 <LCD_DrawHLine>
 80200a4:	3c01      	subs	r4, #1
 80200a6:	f106 0601 	add.w	r6, r6, #1
 80200aa:	d0c4      	beq.n	8020036 <GUI__DrawTwinArc2+0xf6>
 80200ac:	fb04 fb04 	mul.w	fp, r4, r4
 80200b0:	ebcb 000a 	rsb	r0, fp, sl
 80200b4:	f7f3 fef6 	bl	8013ea4 <GUI__sqrt32>
 80200b8:	42a7      	cmp	r7, r4
 80200ba:	f04f 0500 	mov.w	r5, #0
 80200be:	dddf      	ble.n	8020080 <GUI__DrawTwinArc2+0x140>
 80200c0:	9b01      	ldr	r3, [sp, #4]
 80200c2:	ebcb 0003 	rsb	r0, fp, r3
 80200c6:	f7f3 feed 	bl	8013ea4 <GUI__sqrt32>
 80200ca:	9a03      	ldr	r2, [sp, #12]
 80200cc:	42a2      	cmp	r2, r4
 80200ce:	4603      	mov	r3, r0
 80200d0:	dd01      	ble.n	80200d6 <GUI__DrawTwinArc2+0x196>
 80200d2:	1e45      	subs	r5, r0, #1
 80200d4:	e7d5      	b.n	8020082 <GUI__DrawTwinArc2+0x142>
 80200d6:	2500      	movs	r5, #0
 80200d8:	e7d3      	b.n	8020082 <GUI__DrawTwinArc2+0x142>
 80200da:	9818      	ldr	r0, [sp, #96]	; 0x60
 80200dc:	f7f1 fb6e 	bl	80117bc <GUI_SetColor>
 80200e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80200e2:	2c00      	cmp	r4, #0
 80200e4:	d0aa      	beq.n	802003c <GUI__DrawTwinArc2+0xfc>
 80200e6:	9b04      	ldr	r3, [sp, #16]
 80200e8:	9a02      	ldr	r2, [sp, #8]
 80200ea:	4619      	mov	r1, r3
 80200ec:	eb01 0802 	add.w	r8, r1, r2
 80200f0:	9905      	ldr	r1, [sp, #20]
 80200f2:	1a8e      	subs	r6, r1, r2
 80200f4:	1c73      	adds	r3, r6, #1
 80200f6:	9300      	str	r3, [sp, #0]
 80200f8:	9b06      	ldr	r3, [sp, #24]
 80200fa:	f1c2 0503 	rsb	r5, r2, #3
 80200fe:	f108 3bff 	add.w	fp, r8, #4294967295
 8020102:	441d      	add	r5, r3
 8020104:	e011      	b.n	802012a <GUI__DrawTwinArc2+0x1ea>
 8020106:	2000      	movs	r0, #0
 8020108:	4629      	mov	r1, r5
 802010a:	eb00 0906 	add.w	r9, r0, r6
 802010e:	465a      	mov	r2, fp
 8020110:	ebc0 0008 	rsb	r0, r0, r8
 8020114:	f7f4 f90c 	bl	8014330 <LCD_DrawHLine>
 8020118:	4629      	mov	r1, r5
 802011a:	464a      	mov	r2, r9
 802011c:	9800      	ldr	r0, [sp, #0]
 802011e:	f7f4 f907 	bl	8014330 <LCD_DrawHLine>
 8020122:	3c01      	subs	r4, #1
 8020124:	f105 0501 	add.w	r5, r5, #1
 8020128:	d088      	beq.n	802003c <GUI__DrawTwinArc2+0xfc>
 802012a:	fb04 f904 	mul.w	r9, r4, r4
 802012e:	ebc9 000a 	rsb	r0, r9, sl
 8020132:	f7f3 feb7 	bl	8013ea4 <GUI__sqrt32>
 8020136:	42a7      	cmp	r7, r4
 8020138:	dde5      	ble.n	8020106 <GUI__DrawTwinArc2+0x1c6>
 802013a:	9b01      	ldr	r3, [sp, #4]
 802013c:	ebc9 0003 	rsb	r0, r9, r3
 8020140:	f7f3 feb0 	bl	8013ea4 <GUI__sqrt32>
 8020144:	9b03      	ldr	r3, [sp, #12]
 8020146:	42a3      	cmp	r3, r4
 8020148:	dddd      	ble.n	8020106 <GUI__DrawTwinArc2+0x1c6>
 802014a:	3801      	subs	r0, #1
 802014c:	e7dc      	b.n	8020108 <GUI__DrawTwinArc2+0x1c8>
 802014e:	bf00      	nop
 8020150:	20000014 	.word	0x20000014

08020154 <GUI__DrawTwinArc4>:
 8020154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020158:	b093      	sub	sp, #76	; 0x4c
 802015a:	4680      	mov	r8, r0
 802015c:	460c      	mov	r4, r1
 802015e:	461e      	mov	r6, r3
 8020160:	4617      	mov	r7, r2
 8020162:	f7f2 fdb5 	bl	8012cd0 <GUI_Lock>
 8020166:	4ba0      	ldr	r3, [pc, #640]	; (80203e8 <GUI__DrawTwinArc4+0x294>)
 8020168:	6819      	ldr	r1, [r3, #0]
 802016a:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 802016c:	6d09      	ldr	r1, [r1, #80]	; 0x50
 802016e:	eb05 0308 	add.w	r3, r5, r8
 8020172:	19ea      	adds	r2, r5, r7
 8020174:	440c      	add	r4, r1
 8020176:	a810      	add	r0, sp, #64	; 0x40
 8020178:	4431      	add	r1, r6
 802017a:	9309      	str	r3, [sp, #36]	; 0x24
 802017c:	920a      	str	r2, [sp, #40]	; 0x28
 802017e:	910b      	str	r1, [sp, #44]	; 0x2c
 8020180:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8020184:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8020188:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 802018c:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8020190:	f7fa f972 	bl	801a478 <WM__InitIVRSearch>
 8020194:	2800      	cmp	r0, #0
 8020196:	d07e      	beq.n	8020296 <GUI__DrawTwinArc4+0x142>
 8020198:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802019a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802019c:	3b01      	subs	r3, #1
 802019e:	fb02 f202 	mul.w	r2, r2, r2
 80201a2:	9302      	str	r3, [sp, #8]
 80201a4:	fb03 f303 	mul.w	r3, r3, r3
 80201a8:	9308      	str	r3, [sp, #32]
 80201aa:	1ad3      	subs	r3, r2, r3
 80201ac:	930d      	str	r3, [sp, #52]	; 0x34
 80201ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80201b0:	9203      	str	r2, [sp, #12]
 80201b2:	3b02      	subs	r3, #2
 80201b4:	9304      	str	r3, [sp, #16]
 80201b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80201b8:	3b03      	subs	r3, #3
 80201ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80201bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80201be:	18e3      	adds	r3, r4, r3
 80201c0:	930c      	str	r3, [sp, #48]	; 0x30
 80201c2:	1ca3      	adds	r3, r4, #2
 80201c4:	930e      	str	r3, [sp, #56]	; 0x38
 80201c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80201c8:	2b00      	cmp	r3, #0
 80201ca:	dd60      	ble.n	802028e <GUI__DrawTwinArc4+0x13a>
 80201cc:	981d      	ldr	r0, [sp, #116]	; 0x74
 80201ce:	f7f1 faf5 	bl	80117bc <GUI_SetColor>
 80201d2:	9b02      	ldr	r3, [sp, #8]
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d063      	beq.n	80202a0 <GUI__DrawTwinArc4+0x14c>
 80201d8:	461d      	mov	r5, r3
 80201da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80201dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80201de:	461a      	mov	r2, r3
 80201e0:	ebc5 0802 	rsb	r8, r5, r2
 80201e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80201e8:	1a9b      	subs	r3, r3, r2
 80201ea:	461a      	mov	r2, r3
 80201ec:	9306      	str	r3, [sp, #24]
 80201ee:	462b      	mov	r3, r5
 80201f0:	4413      	add	r3, r2
 80201f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80201f4:	9305      	str	r3, [sp, #20]
 80201f6:	ebc8 0202 	rsb	r2, r8, r2
 80201fa:	9207      	str	r2, [sp, #28]
 80201fc:	4699      	mov	r9, r3
 80201fe:	f7f3 fe51 	bl	8013ea4 <GUI__sqrt32>
 8020202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020204:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8020206:	eb03 0b02 	add.w	fp, r3, r2
 802020a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802020c:	4606      	mov	r6, r0
 802020e:	ebc2 0a03 	rsb	sl, r2, r3
 8020212:	2000      	movs	r0, #0
 8020214:	ebc0 070b 	rsb	r7, r0, fp
 8020218:	ebc6 030b 	rsb	r3, r6, fp
 802021c:	3f01      	subs	r7, #1
 802021e:	4450      	add	r0, sl
 8020220:	1c44      	adds	r4, r0, #1
 8020222:	4641      	mov	r1, r8
 8020224:	4618      	mov	r0, r3
 8020226:	463a      	mov	r2, r7
 8020228:	4456      	add	r6, sl
 802022a:	9301      	str	r3, [sp, #4]
 802022c:	f7f4 f880 	bl	8014330 <LCD_DrawHLine>
 8020230:	4641      	mov	r1, r8
 8020232:	4620      	mov	r0, r4
 8020234:	4632      	mov	r2, r6
 8020236:	f7f4 f87b 	bl	8014330 <LCD_DrawHLine>
 802023a:	9b01      	ldr	r3, [sp, #4]
 802023c:	4649      	mov	r1, r9
 802023e:	4618      	mov	r0, r3
 8020240:	463a      	mov	r2, r7
 8020242:	f7f4 f875 	bl	8014330 <LCD_DrawHLine>
 8020246:	4620      	mov	r0, r4
 8020248:	4632      	mov	r2, r6
 802024a:	4649      	mov	r1, r9
 802024c:	f7f4 f870 	bl	8014330 <LCD_DrawHLine>
 8020250:	9a04      	ldr	r2, [sp, #16]
 8020252:	9b06      	ldr	r3, [sp, #24]
 8020254:	4413      	add	r3, r2
 8020256:	9a05      	ldr	r2, [sp, #20]
 8020258:	1a9b      	subs	r3, r3, r2
 802025a:	3d01      	subs	r5, #1
 802025c:	9a03      	ldr	r2, [sp, #12]
 802025e:	4499      	add	r9, r3
 8020260:	9b07      	ldr	r3, [sp, #28]
 8020262:	fb05 f405 	mul.w	r4, r5, r5
 8020266:	eba2 0004 	sub.w	r0, r2, r4
 802026a:	4498      	add	r8, r3
 802026c:	d018      	beq.n	80202a0 <GUI__DrawTwinArc4+0x14c>
 802026e:	f7f3 fe19 	bl	8013ea4 <GUI__sqrt32>
 8020272:	9b02      	ldr	r3, [sp, #8]
 8020274:	42ab      	cmp	r3, r5
 8020276:	4606      	mov	r6, r0
 8020278:	dc01      	bgt.n	802027e <GUI__DrawTwinArc4+0x12a>
 802027a:	2000      	movs	r0, #0
 802027c:	e7ca      	b.n	8020214 <GUI__DrawTwinArc4+0xc0>
 802027e:	9b08      	ldr	r3, [sp, #32]
 8020280:	1b18      	subs	r0, r3, r4
 8020282:	f7f3 fe0f 	bl	8013ea4 <GUI__sqrt32>
 8020286:	e7c5      	b.n	8020214 <GUI__DrawTwinArc4+0xc0>
 8020288:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802028a:	2b02      	cmp	r3, #2
 802028c:	d15f      	bne.n	802034e <GUI__DrawTwinArc4+0x1fa>
 802028e:	f7f9 ffcd 	bl	801a22c <WM__GetNextIVR>
 8020292:	2800      	cmp	r0, #0
 8020294:	d197      	bne.n	80201c6 <GUI__DrawTwinArc4+0x72>
 8020296:	f7f2 fd11 	bl	8012cbc <GUI_Unlock>
 802029a:	b013      	add	sp, #76	; 0x4c
 802029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202a2:	2b01      	cmp	r3, #1
 80202a4:	d0f3      	beq.n	802028e <GUI__DrawTwinArc4+0x13a>
 80202a6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80202a8:	f7f1 fa88 	bl	80117bc <GUI_SetColor>
 80202ac:	9b04      	ldr	r3, [sp, #16]
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	d0ea      	beq.n	8020288 <GUI__DrawTwinArc4+0x134>
 80202b2:	461d      	mov	r5, r3
 80202b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80202b8:	f1c3 0802 	rsb	r8, r3, #2
 80202bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80202be:	4498      	add	r8, r3
 80202c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202c2:	1a9b      	subs	r3, r3, r2
 80202c4:	9305      	str	r3, [sp, #20]
 80202c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202c8:	eb03 0b02 	add.w	fp, r3, r2
 80202cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202ce:	ebc2 0a03 	rsb	sl, r2, r3
 80202d2:	e023      	b.n	802031c <GUI__DrawTwinArc4+0x1c8>
 80202d4:	4620      	mov	r0, r4
 80202d6:	ebc4 070b 	rsb	r7, r4, fp
 80202da:	ebc0 030b 	rsb	r3, r0, fp
 80202de:	3f01      	subs	r7, #1
 80202e0:	4454      	add	r4, sl
 80202e2:	eb00 060a 	add.w	r6, r0, sl
 80202e6:	4641      	mov	r1, r8
 80202e8:	4618      	mov	r0, r3
 80202ea:	3401      	adds	r4, #1
 80202ec:	463a      	mov	r2, r7
 80202ee:	9301      	str	r3, [sp, #4]
 80202f0:	f7f4 f81e 	bl	8014330 <LCD_DrawHLine>
 80202f4:	4641      	mov	r1, r8
 80202f6:	4632      	mov	r2, r6
 80202f8:	4620      	mov	r0, r4
 80202fa:	f7f4 f819 	bl	8014330 <LCD_DrawHLine>
 80202fe:	9b01      	ldr	r3, [sp, #4]
 8020300:	463a      	mov	r2, r7
 8020302:	4618      	mov	r0, r3
 8020304:	4649      	mov	r1, r9
 8020306:	f7f4 f813 	bl	8014330 <LCD_DrawHLine>
 802030a:	4632      	mov	r2, r6
 802030c:	4649      	mov	r1, r9
 802030e:	4620      	mov	r0, r4
 8020310:	f7f4 f80e 	bl	8014330 <LCD_DrawHLine>
 8020314:	3d01      	subs	r5, #1
 8020316:	f108 0801 	add.w	r8, r8, #1
 802031a:	d0b5      	beq.n	8020288 <GUI__DrawTwinArc4+0x134>
 802031c:	9b03      	ldr	r3, [sp, #12]
 802031e:	fb05 f605 	mul.w	r6, r5, r5
 8020322:	1b98      	subs	r0, r3, r6
 8020324:	9b05      	ldr	r3, [sp, #20]
 8020326:	eb05 0903 	add.w	r9, r5, r3
 802032a:	f7f3 fdbb 	bl	8013ea4 <GUI__sqrt32>
 802032e:	9b02      	ldr	r3, [sp, #8]
 8020330:	42ab      	cmp	r3, r5
 8020332:	f04f 0400 	mov.w	r4, #0
 8020336:	ddcd      	ble.n	80202d4 <GUI__DrawTwinArc4+0x180>
 8020338:	9b08      	ldr	r3, [sp, #32]
 802033a:	1b98      	subs	r0, r3, r6
 802033c:	f7f3 fdb2 	bl	8013ea4 <GUI__sqrt32>
 8020340:	9b04      	ldr	r3, [sp, #16]
 8020342:	42ab      	cmp	r3, r5
 8020344:	dd01      	ble.n	802034a <GUI__DrawTwinArc4+0x1f6>
 8020346:	1e44      	subs	r4, r0, #1
 8020348:	e7c5      	b.n	80202d6 <GUI__DrawTwinArc4+0x182>
 802034a:	2400      	movs	r4, #0
 802034c:	e7c3      	b.n	80202d6 <GUI__DrawTwinArc4+0x182>
 802034e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020350:	f7f1 fa34 	bl	80117bc <GUI_SetColor>
 8020354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020356:	2b00      	cmp	r3, #0
 8020358:	d099      	beq.n	802028e <GUI__DrawTwinArc4+0x13a>
 802035a:	991c      	ldr	r1, [sp, #112]	; 0x70
 802035c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802035e:	eb02 0b01 	add.w	fp, r2, r1
 8020362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020364:	1a52      	subs	r2, r2, r1
 8020366:	9205      	str	r2, [sp, #20]
 8020368:	f102 0801 	add.w	r8, r2, #1
 802036c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802036e:	f1c1 0603 	rsb	r6, r1, #3
 8020372:	4416      	add	r6, r2
 8020374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020376:	1a52      	subs	r2, r2, r1
 8020378:	f10b 39ff 	add.w	r9, fp, #4294967295
 802037c:	9201      	str	r2, [sp, #4]
 802037e:	461c      	mov	r4, r3
 8020380:	e01d      	b.n	80203be <GUI__DrawTwinArc4+0x26a>
 8020382:	2500      	movs	r5, #0
 8020384:	9b05      	ldr	r3, [sp, #20]
 8020386:	ebc5 0a0b 	rsb	sl, r5, fp
 802038a:	4631      	mov	r1, r6
 802038c:	441d      	add	r5, r3
 802038e:	4650      	mov	r0, sl
 8020390:	464a      	mov	r2, r9
 8020392:	f7f3 ffcd 	bl	8014330 <LCD_DrawHLine>
 8020396:	4631      	mov	r1, r6
 8020398:	462a      	mov	r2, r5
 802039a:	4640      	mov	r0, r8
 802039c:	f7f3 ffc8 	bl	8014330 <LCD_DrawHLine>
 80203a0:	464a      	mov	r2, r9
 80203a2:	4639      	mov	r1, r7
 80203a4:	4650      	mov	r0, sl
 80203a6:	f7f3 ffc3 	bl	8014330 <LCD_DrawHLine>
 80203aa:	462a      	mov	r2, r5
 80203ac:	4639      	mov	r1, r7
 80203ae:	4640      	mov	r0, r8
 80203b0:	f7f3 ffbe 	bl	8014330 <LCD_DrawHLine>
 80203b4:	3c01      	subs	r4, #1
 80203b6:	f106 0601 	add.w	r6, r6, #1
 80203ba:	f43f af68 	beq.w	802028e <GUI__DrawTwinArc4+0x13a>
 80203be:	9b03      	ldr	r3, [sp, #12]
 80203c0:	fb04 f504 	mul.w	r5, r4, r4
 80203c4:	1b58      	subs	r0, r3, r5
 80203c6:	9b01      	ldr	r3, [sp, #4]
 80203c8:	191f      	adds	r7, r3, r4
 80203ca:	f7f3 fd6b 	bl	8013ea4 <GUI__sqrt32>
 80203ce:	9b02      	ldr	r3, [sp, #8]
 80203d0:	42a3      	cmp	r3, r4
 80203d2:	ddd6      	ble.n	8020382 <GUI__DrawTwinArc4+0x22e>
 80203d4:	9b08      	ldr	r3, [sp, #32]
 80203d6:	1b58      	subs	r0, r3, r5
 80203d8:	f7f3 fd64 	bl	8013ea4 <GUI__sqrt32>
 80203dc:	9b04      	ldr	r3, [sp, #16]
 80203de:	42a3      	cmp	r3, r4
 80203e0:	ddcf      	ble.n	8020382 <GUI__DrawTwinArc4+0x22e>
 80203e2:	1e45      	subs	r5, r0, #1
 80203e4:	e7ce      	b.n	8020384 <GUI__DrawTwinArc4+0x230>
 80203e6:	bf00      	nop
 80203e8:	20000014 	.word	0x20000014

080203ec <GUI__ManageCache>:
 80203ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203f0:	4b39      	ldr	r3, [pc, #228]	; (80204d8 <GUI__ManageCache+0xec>)
 80203f2:	681b      	ldr	r3, [r3, #0]
 80203f4:	7c5d      	ldrb	r5, [r3, #17]
 80203f6:	2d01      	cmp	r5, #1
 80203f8:	b082      	sub	sp, #8
 80203fa:	dd03      	ble.n	8020404 <GUI__ManageCache+0x18>
 80203fc:	2001      	movs	r0, #1
 80203fe:	b002      	add	sp, #8
 8020400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020404:	4e35      	ldr	r6, [pc, #212]	; (80204dc <GUI__ManageCache+0xf0>)
 8020406:	6873      	ldr	r3, [r6, #4]
 8020408:	4604      	mov	r4, r0
 802040a:	b113      	cbz	r3, 8020412 <GUI__ManageCache+0x26>
 802040c:	4601      	mov	r1, r0
 802040e:	4628      	mov	r0, r5
 8020410:	4798      	blx	r3
 8020412:	2c01      	cmp	r4, #1
 8020414:	d027      	beq.n	8020466 <GUI__ManageCache+0x7a>
 8020416:	2c02      	cmp	r4, #2
 8020418:	d00f      	beq.n	802043a <GUI__ManageCache+0x4e>
 802041a:	2c00      	cmp	r4, #0
 802041c:	d1ee      	bne.n	80203fc <GUI__ManageCache+0x10>
 802041e:	00ac      	lsls	r4, r5, #2
 8020420:	1937      	adds	r7, r6, r4
 8020422:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80204dc <GUI__ManageCache+0xf0>
 8020426:	68bb      	ldr	r3, [r7, #8]
 8020428:	2b01      	cmp	r3, #1
 802042a:	d03a      	beq.n	80204a2 <GUI__ManageCache+0xb6>
 802042c:	2001      	movs	r0, #1
 802042e:	4426      	add	r6, r4
 8020430:	2b00      	cmp	r3, #0
 8020432:	bf18      	it	ne
 8020434:	3b01      	subne	r3, #1
 8020436:	60b3      	str	r3, [r6, #8]
 8020438:	e7e1      	b.n	80203fe <GUI__ManageCache+0x12>
 802043a:	4628      	mov	r0, r5
 802043c:	f7f1 fc14 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 8020440:	9001      	str	r0, [sp, #4]
 8020442:	2800      	cmp	r0, #0
 8020444:	d0da      	beq.n	80203fc <GUI__ManageCache+0x10>
 8020446:	68c3      	ldr	r3, [r0, #12]
 8020448:	210d      	movs	r1, #13
 802044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802044c:	a801      	add	r0, sp, #4
 802044e:	4798      	blx	r3
 8020450:	4604      	mov	r4, r0
 8020452:	2800      	cmp	r0, #0
 8020454:	d0d2      	beq.n	80203fc <GUI__ManageCache+0x10>
 8020456:	6833      	ldr	r3, [r6, #0]
 8020458:	b103      	cbz	r3, 802045c <GUI__ManageCache+0x70>
 802045a:	4798      	blx	r3
 802045c:	2102      	movs	r1, #2
 802045e:	9801      	ldr	r0, [sp, #4]
 8020460:	47a0      	blx	r4
 8020462:	2000      	movs	r0, #0
 8020464:	e7cb      	b.n	80203fe <GUI__ManageCache+0x12>
 8020466:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 802046a:	68b7      	ldr	r7, [r6, #8]
 802046c:	b11f      	cbz	r7, 8020476 <GUI__ManageCache+0x8a>
 802046e:	1c78      	adds	r0, r7, #1
 8020470:	60b0      	str	r0, [r6, #8]
 8020472:	4620      	mov	r0, r4
 8020474:	e7c3      	b.n	80203fe <GUI__ManageCache+0x12>
 8020476:	4628      	mov	r0, r5
 8020478:	f7f1 fbf6 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 802047c:	9001      	str	r0, [sp, #4]
 802047e:	2800      	cmp	r0, #0
 8020480:	d0bc      	beq.n	80203fc <GUI__ManageCache+0x10>
 8020482:	68c3      	ldr	r3, [r0, #12]
 8020484:	210d      	movs	r1, #13
 8020486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020488:	a801      	add	r0, sp, #4
 802048a:	4798      	blx	r3
 802048c:	4603      	mov	r3, r0
 802048e:	2800      	cmp	r0, #0
 8020490:	d0b4      	beq.n	80203fc <GUI__ManageCache+0x10>
 8020492:	4621      	mov	r1, r4
 8020494:	9801      	ldr	r0, [sp, #4]
 8020496:	4798      	blx	r3
 8020498:	68b3      	ldr	r3, [r6, #8]
 802049a:	3301      	adds	r3, #1
 802049c:	4638      	mov	r0, r7
 802049e:	60b3      	str	r3, [r6, #8]
 80204a0:	e7ad      	b.n	80203fe <GUI__ManageCache+0x12>
 80204a2:	4628      	mov	r0, r5
 80204a4:	f7f1 fbe0 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 80204a8:	9001      	str	r0, [sp, #4]
 80204aa:	b188      	cbz	r0, 80204d0 <GUI__ManageCache+0xe4>
 80204ac:	68c3      	ldr	r3, [r0, #12]
 80204ae:	210d      	movs	r1, #13
 80204b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204b2:	a801      	add	r0, sp, #4
 80204b4:	4798      	blx	r3
 80204b6:	4605      	mov	r5, r0
 80204b8:	b150      	cbz	r0, 80204d0 <GUI__ManageCache+0xe4>
 80204ba:	f8d8 3000 	ldr.w	r3, [r8]
 80204be:	b103      	cbz	r3, 80204c2 <GUI__ManageCache+0xd6>
 80204c0:	4798      	blx	r3
 80204c2:	2100      	movs	r1, #0
 80204c4:	9801      	ldr	r0, [sp, #4]
 80204c6:	47a8      	blx	r5
 80204c8:	1933      	adds	r3, r6, r4
 80204ca:	2000      	movs	r0, #0
 80204cc:	689b      	ldr	r3, [r3, #8]
 80204ce:	e7ae      	b.n	802042e <GUI__ManageCache+0x42>
 80204d0:	68bb      	ldr	r3, [r7, #8]
 80204d2:	2001      	movs	r0, #1
 80204d4:	e7ab      	b.n	802042e <GUI__ManageCache+0x42>
 80204d6:	bf00      	nop
 80204d8:	20000014 	.word	0x20000014
 80204dc:	20000904 	.word	0x20000904

080204e0 <LCD_SetClipRectEx>:
 80204e0:	b530      	push	{r4, r5, lr}
 80204e2:	4c0a      	ldr	r4, [pc, #40]	; (802050c <LCD_SetClipRectEx+0x2c>)
 80204e4:	4b0a      	ldr	r3, [pc, #40]	; (8020510 <LCD_SetClipRectEx+0x30>)
 80204e6:	6822      	ldr	r2, [r4, #0]
 80204e8:	7c52      	ldrb	r2, [r2, #17]
 80204ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80204ee:	68da      	ldr	r2, [r3, #12]
 80204f0:	b083      	sub	sp, #12
 80204f2:	4605      	mov	r5, r0
 80204f4:	4669      	mov	r1, sp
 80204f6:	4618      	mov	r0, r3
 80204f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80204fa:	4790      	blx	r2
 80204fc:	6820      	ldr	r0, [r4, #0]
 80204fe:	466a      	mov	r2, sp
 8020500:	4629      	mov	r1, r5
 8020502:	3008      	adds	r0, #8
 8020504:	f7f3 fc1c 	bl	8013d40 <GUI__IntersectRects>
 8020508:	b003      	add	sp, #12
 802050a:	bd30      	pop	{r4, r5, pc}
 802050c:	20000014 	.word	0x20000014
 8020510:	20035df8 	.word	0x20035df8

08020514 <GUI_MEMDEV_CopyToLCDAt.part.0>:
 8020514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020518:	b084      	sub	sp, #16
 802051a:	460c      	mov	r4, r1
 802051c:	4615      	mov	r5, r2
 802051e:	4606      	mov	r6, r0
 8020520:	f7f2 fbd6 	bl	8012cd0 <GUI_Lock>
 8020524:	2000      	movs	r0, #0
 8020526:	f7f1 f99f 	bl	8011868 <GUI_SetDrawMode>
 802052a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8020610 <GUI_MEMDEV_CopyToLCDAt.part.0+0xfc>
 802052e:	f8d8 3000 	ldr.w	r3, [r8]
 8020532:	4681      	mov	r9, r0
 8020534:	4630      	mov	r0, r6
 8020536:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8020538:	f7f0 fbe2 	bl	8010d00 <GUI_ALLOC_LockH>
 802053c:	6803      	ldr	r3, [r0, #0]
 802053e:	9000      	str	r0, [sp, #0]
 8020540:	6998      	ldr	r0, [r3, #24]
 8020542:	f7f2 fb49 	bl	8012bd8 <GUI_SelectLayer>
 8020546:	4b31      	ldr	r3, [pc, #196]	; (802060c <GUI_MEMDEV_CopyToLCDAt.part.0+0xf8>)
 8020548:	429c      	cmp	r4, r3
 802054a:	9b00      	ldr	r3, [sp, #0]
 802054c:	bf04      	itt	eq
 802054e:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 8020552:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 8020556:	891a      	ldrh	r2, [r3, #8]
 8020558:	895b      	ldrh	r3, [r3, #10]
 802055a:	f8ad 4008 	strh.w	r4, [sp, #8]
 802055e:	3a01      	subs	r2, #1
 8020560:	3b01      	subs	r3, #1
 8020562:	4422      	add	r2, r4
 8020564:	442b      	add	r3, r5
 8020566:	4682      	mov	sl, r0
 8020568:	f8ad 200c 	strh.w	r2, [sp, #12]
 802056c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020570:	f8ad 500a 	strh.w	r5, [sp, #10]
 8020574:	f7fa faba 	bl	801aaec <WM_Activate>
 8020578:	4668      	mov	r0, sp
 802057a:	f7f0 fbd3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802057e:	a802      	add	r0, sp, #8
 8020580:	f7f9 ff7a 	bl	801a478 <WM__InitIVRSearch>
 8020584:	bb48      	cbnz	r0, 80205da <GUI_MEMDEV_CopyToLCDAt.part.0+0xc6>
 8020586:	4650      	mov	r0, sl
 8020588:	f7f2 fb26 	bl	8012bd8 <GUI_SelectLayer>
 802058c:	f7f2 fba0 	bl	8012cd0 <GUI_Lock>
 8020590:	2f00      	cmp	r7, #0
 8020592:	d038      	beq.n	8020606 <GUI_MEMDEV_CopyToLCDAt.part.0+0xf2>
 8020594:	f8d8 3000 	ldr.w	r3, [r8]
 8020598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802059a:	bb8b      	cbnz	r3, 8020600 <GUI_MEMDEV_CopyToLCDAt.part.0+0xec>
 802059c:	f7fa faae 	bl	801aafc <WM_Deactivate>
 80205a0:	4638      	mov	r0, r7
 80205a2:	f7f0 fbad 	bl	8010d00 <GUI_ALLOC_LockH>
 80205a6:	ac04      	add	r4, sp, #16
 80205a8:	f8d8 3000 	ldr.w	r3, [r8]
 80205ac:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80205b0:	661f      	str	r7, [r3, #96]	; 0x60
 80205b2:	6800      	ldr	r0, [r0, #0]
 80205b4:	f7f1 fbba 	bl	8011d2c <GUI_DEVICE_Link>
 80205b8:	4620      	mov	r0, r4
 80205ba:	f7f0 fbb3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80205be:	f7f5 fc17 	bl	8015df0 <LCD_UpdateColorIndices>
 80205c2:	f7f4 f9cd 	bl	8014960 <LCD_SetClipRectMax>
 80205c6:	f7f2 fb79 	bl	8012cbc <GUI_Unlock>
 80205ca:	4648      	mov	r0, r9
 80205cc:	f7f1 f94c 	bl	8011868 <GUI_SetDrawMode>
 80205d0:	f7f2 fb74 	bl	8012cbc <GUI_Unlock>
 80205d4:	b004      	add	sp, #16
 80205d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205da:	462a      	mov	r2, r5
 80205dc:	4621      	mov	r1, r4
 80205de:	4630      	mov	r0, r6
 80205e0:	f7f7 fc5e 	bl	8017ea0 <GUI_MEMDEV__WriteToActiveOpaque>
 80205e4:	f7f9 fe22 	bl	801a22c <WM__GetNextIVR>
 80205e8:	2800      	cmp	r0, #0
 80205ea:	d0cc      	beq.n	8020586 <GUI_MEMDEV_CopyToLCDAt.part.0+0x72>
 80205ec:	462a      	mov	r2, r5
 80205ee:	4621      	mov	r1, r4
 80205f0:	4630      	mov	r0, r6
 80205f2:	f7f7 fc55 	bl	8017ea0 <GUI_MEMDEV__WriteToActiveOpaque>
 80205f6:	f7f9 fe19 	bl	801a22c <WM__GetNextIVR>
 80205fa:	2800      	cmp	r0, #0
 80205fc:	d1ed      	bne.n	80205da <GUI_MEMDEV_CopyToLCDAt.part.0+0xc6>
 80205fe:	e7c2      	b.n	8020586 <GUI_MEMDEV_CopyToLCDAt.part.0+0x72>
 8020600:	f7f1 f8c2 	bl	8011788 <GUI_SelectLCD>
 8020604:	e7ca      	b.n	802059c <GUI_MEMDEV_CopyToLCDAt.part.0+0x88>
 8020606:	f7f1 f8bf 	bl	8011788 <GUI_SelectLCD>
 802060a:	e7dc      	b.n	80205c6 <GUI_MEMDEV_CopyToLCDAt.part.0+0xb2>
 802060c:	fffff001 	.word	0xfffff001
 8020610:	20000014 	.word	0x20000014

08020614 <GUI_MEMDEV__WriteToActiveAt>:
 8020614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020618:	b082      	sub	sp, #8
 802061a:	460f      	mov	r7, r1
 802061c:	4690      	mov	r8, r2
 802061e:	4606      	mov	r6, r0
 8020620:	f7f0 fb6e 	bl	8010d00 <GUI_ALLOC_LockH>
 8020624:	6803      	ldr	r3, [r0, #0]
 8020626:	ac02      	add	r4, sp, #8
 8020628:	68db      	ldr	r3, [r3, #12]
 802062a:	f844 0d04 	str.w	r0, [r4, #-4]!
 802062e:	2116      	movs	r1, #22
 8020630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020632:	2000      	movs	r0, #0
 8020634:	4798      	blx	r3
 8020636:	4605      	mov	r5, r0
 8020638:	4620      	mov	r0, r4
 802063a:	f7f0 fb73 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802063e:	b11d      	cbz	r5, 8020648 <GUI_MEMDEV__WriteToActiveAt+0x34>
 8020640:	4642      	mov	r2, r8
 8020642:	4639      	mov	r1, r7
 8020644:	4630      	mov	r0, r6
 8020646:	47a8      	blx	r5
 8020648:	b002      	add	sp, #8
 802064a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802064e:	bf00      	nop

08020650 <GUI_MEMDEV__CreateFixed>:
 8020650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020654:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8020784 <GUI_MEMDEV__CreateFixed+0x134>
 8020658:	b087      	sub	sp, #28
 802065a:	f8d8 4000 	ldr.w	r4, [r8]
 802065e:	4681      	mov	r9, r0
 8020660:	468a      	mov	sl, r1
 8020662:	4617      	mov	r7, r2
 8020664:	461e      	mov	r6, r3
 8020666:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020668:	7c63      	ldrb	r3, [r4, #17]
 802066a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802066c:	2200      	movs	r2, #0
 802066e:	f7f1 fb13 	bl	8011c98 <GUI_DEVICE_Create>
 8020672:	2800      	cmp	r0, #0
 8020674:	d04d      	beq.n	8020712 <GUI_MEMDEV__CreateFixed+0xc2>
 8020676:	6903      	ldr	r3, [r0, #16]
 8020678:	689b      	ldr	r3, [r3, #8]
 802067a:	4605      	mov	r5, r0
 802067c:	4798      	blx	r3
 802067e:	f7f4 fd15 	bl	80150ac <LCD__GetBPPDevice>
 8020682:	fb00 f407 	mul.w	r4, r0, r7
 8020686:	4683      	mov	fp, r0
 8020688:	f7f0 fc00 	bl	8010e8c <GUI_ALLOC_RequestSize>
 802068c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802068e:	3407      	adds	r4, #7
 8020690:	f013 0301 	ands.w	r3, r3, #1
 8020694:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 8020698:	d03f      	beq.n	802071a <GUI_MEMDEV__CreateFixed+0xca>
 802069a:	2e00      	cmp	r6, #0
 802069c:	dd2c      	ble.n	80206f8 <GUI_MEMDEV__CreateFixed+0xa8>
 802069e:	2b00      	cmp	r3, #0
 80206a0:	d042      	beq.n	8020728 <GUI_MEMDEV__CreateFixed+0xd8>
 80206a2:	fb04 f006 	mul.w	r0, r4, r6
 80206a6:	3018      	adds	r0, #24
 80206a8:	f7f0 fb12 	bl	8010cd0 <GUI_ALLOC_AllocNoInit>
 80206ac:	4603      	mov	r3, r0
 80206ae:	b368      	cbz	r0, 802070c <GUI_MEMDEV__CreateFixed+0xbc>
 80206b0:	2200      	movs	r2, #0
 80206b2:	9202      	str	r2, [sp, #8]
 80206b4:	4618      	mov	r0, r3
 80206b6:	9303      	str	r3, [sp, #12]
 80206b8:	f7f0 fb22 	bl	8010d00 <GUI_ALLOC_LockH>
 80206bc:	4602      	mov	r2, r0
 80206be:	a806      	add	r0, sp, #24
 80206c0:	9b02      	ldr	r3, [sp, #8]
 80206c2:	f8a2 9004 	strh.w	r9, [r2, #4]
 80206c6:	f840 2d04 	str.w	r2, [r0, #-4]!
 80206ca:	f8a2 a006 	strh.w	sl, [r2, #6]
 80206ce:	8117      	strh	r7, [r2, #8]
 80206d0:	8156      	strh	r6, [r2, #10]
 80206d2:	60d4      	str	r4, [r2, #12]
 80206d4:	f8c2 b010 	str.w	fp, [r2, #16]
 80206d8:	6153      	str	r3, [r2, #20]
 80206da:	6015      	str	r5, [r2, #0]
 80206dc:	f7f0 fb22 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80206e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80206e2:	612b      	str	r3, [r5, #16]
 80206e4:	f8d8 2000 	ldr.w	r2, [r8]
 80206e8:	9b03      	ldr	r3, [sp, #12]
 80206ea:	60ab      	str	r3, [r5, #8]
 80206ec:	7c52      	ldrb	r2, [r2, #17]
 80206ee:	61aa      	str	r2, [r5, #24]
 80206f0:	4618      	mov	r0, r3
 80206f2:	b007      	add	sp, #28
 80206f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206f8:	2c00      	cmp	r4, #0
 80206fa:	d134      	bne.n	8020766 <GUI_MEMDEV__CreateFixed+0x116>
 80206fc:	4620      	mov	r0, r4
 80206fe:	4276      	negs	r6, r6
 8020700:	4286      	cmp	r6, r0
 8020702:	bfa8      	it	ge
 8020704:	4606      	movge	r6, r0
 8020706:	b393      	cbz	r3, 802076e <GUI_MEMDEV__CreateFixed+0x11e>
 8020708:	2e00      	cmp	r6, #0
 802070a:	dcca      	bgt.n	80206a2 <GUI_MEMDEV__CreateFixed+0x52>
 802070c:	4628      	mov	r0, r5
 802070e:	f7f1 fac1 	bl	8011c94 <GUI_DEVICE_Delete>
 8020712:	2000      	movs	r0, #0
 8020714:	b007      	add	sp, #28
 8020716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802071a:	2800      	cmp	r0, #0
 802071c:	bfb8      	it	lt
 802071e:	3003      	addlt	r0, #3
 8020720:	1080      	asrs	r0, r0, #2
 8020722:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020726:	e7b8      	b.n	802069a <GUI_MEMDEV__CreateFixed+0x4a>
 8020728:	9300      	str	r3, [sp, #0]
 802072a:	463a      	mov	r2, r7
 802072c:	4633      	mov	r3, r6
 802072e:	4651      	mov	r1, sl
 8020730:	4648      	mov	r0, r9
 8020732:	f001 faa9 	bl	8021c88 <GUI_USAGE_BM_Create>
 8020736:	9002      	str	r0, [sp, #8]
 8020738:	fb04 f006 	mul.w	r0, r4, r6
 802073c:	3018      	adds	r0, #24
 802073e:	f7f0 fd35 	bl	80111ac <GUI_ALLOC_AllocZero>
 8020742:	4603      	mov	r3, r0
 8020744:	2800      	cmp	r0, #0
 8020746:	d1b5      	bne.n	80206b4 <GUI_MEMDEV__CreateFixed+0x64>
 8020748:	4628      	mov	r0, r5
 802074a:	9303      	str	r3, [sp, #12]
 802074c:	f7f1 faa2 	bl	8011c94 <GUI_DEVICE_Delete>
 8020750:	9b02      	ldr	r3, [sp, #8]
 8020752:	2b00      	cmp	r3, #0
 8020754:	d0dd      	beq.n	8020712 <GUI_MEMDEV__CreateFixed+0xc2>
 8020756:	4618      	mov	r0, r3
 8020758:	f7f0 fc68 	bl	801102c <GUI_ALLOC_Free>
 802075c:	9b03      	ldr	r3, [sp, #12]
 802075e:	4618      	mov	r0, r3
 8020760:	b007      	add	sp, #28
 8020762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020766:	3818      	subs	r0, #24
 8020768:	fbb0 f0f4 	udiv	r0, r0, r4
 802076c:	e7c7      	b.n	80206fe <GUI_MEMDEV__CreateFixed+0xae>
 802076e:	9300      	str	r3, [sp, #0]
 8020770:	463a      	mov	r2, r7
 8020772:	4633      	mov	r3, r6
 8020774:	4651      	mov	r1, sl
 8020776:	4648      	mov	r0, r9
 8020778:	f001 fa86 	bl	8021c88 <GUI_USAGE_BM_Create>
 802077c:	2e00      	cmp	r6, #0
 802077e:	9002      	str	r0, [sp, #8]
 8020780:	dcda      	bgt.n	8020738 <GUI_MEMDEV__CreateFixed+0xe8>
 8020782:	e7c3      	b.n	802070c <GUI_MEMDEV__CreateFixed+0xbc>
 8020784:	20000014 	.word	0x20000014

08020788 <GUI_MEMDEV_GetBitsPerPixel>:
 8020788:	b530      	push	{r4, r5, lr}
 802078a:	4604      	mov	r4, r0
 802078c:	b083      	sub	sp, #12
 802078e:	b198      	cbz	r0, 80207b8 <GUI_MEMDEV_GetBitsPerPixel+0x30>
 8020790:	f7f2 fa9e 	bl	8012cd0 <GUI_Lock>
 8020794:	4620      	mov	r0, r4
 8020796:	f7f0 fab3 	bl	8010d00 <GUI_ALLOC_LockH>
 802079a:	6803      	ldr	r3, [r0, #0]
 802079c:	ad02      	add	r5, sp, #8
 802079e:	691b      	ldr	r3, [r3, #16]
 80207a0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80207a4:	689b      	ldr	r3, [r3, #8]
 80207a6:	4798      	blx	r3
 80207a8:	f7f4 fc80 	bl	80150ac <LCD__GetBPPDevice>
 80207ac:	4604      	mov	r4, r0
 80207ae:	4628      	mov	r0, r5
 80207b0:	f7f0 fab8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80207b4:	f7f2 fa82 	bl	8012cbc <GUI_Unlock>
 80207b8:	4620      	mov	r0, r4
 80207ba:	b003      	add	sp, #12
 80207bc:	bd30      	pop	{r4, r5, pc}
 80207be:	bf00      	nop

080207c0 <GUI_MEMDEV_Delete>:
 80207c0:	b900      	cbnz	r0, 80207c4 <GUI_MEMDEV_Delete+0x4>
 80207c2:	4770      	bx	lr
 80207c4:	b510      	push	{r4, lr}
 80207c6:	b082      	sub	sp, #8
 80207c8:	4604      	mov	r4, r0
 80207ca:	f7f2 fa81 	bl	8012cd0 <GUI_Lock>
 80207ce:	4b10      	ldr	r3, [pc, #64]	; (8020810 <GUI_MEMDEV_Delete+0x50>)
 80207d0:	681b      	ldr	r3, [r3, #0]
 80207d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80207d4:	429c      	cmp	r4, r3
 80207d6:	d017      	beq.n	8020808 <GUI_MEMDEV_Delete+0x48>
 80207d8:	4620      	mov	r0, r4
 80207da:	f7f0 fa91 	bl	8010d00 <GUI_ALLOC_LockH>
 80207de:	6943      	ldr	r3, [r0, #20]
 80207e0:	9001      	str	r0, [sp, #4]
 80207e2:	b963      	cbnz	r3, 80207fe <GUI_MEMDEV_Delete+0x3e>
 80207e4:	6800      	ldr	r0, [r0, #0]
 80207e6:	f7f1 fa55 	bl	8011c94 <GUI_DEVICE_Delete>
 80207ea:	a801      	add	r0, sp, #4
 80207ec:	f7f0 fa9a 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80207f0:	4620      	mov	r0, r4
 80207f2:	f7f0 fc1b 	bl	801102c <GUI_ALLOC_Free>
 80207f6:	f7f2 fa61 	bl	8012cbc <GUI_Unlock>
 80207fa:	b002      	add	sp, #8
 80207fc:	bd10      	pop	{r4, pc}
 80207fe:	4618      	mov	r0, r3
 8020800:	f7f7 fb22 	bl	8017e48 <GUI_USAGE_DecUseCnt>
 8020804:	9801      	ldr	r0, [sp, #4]
 8020806:	e7ed      	b.n	80207e4 <GUI_MEMDEV_Delete+0x24>
 8020808:	f7f0 ffbe 	bl	8011788 <GUI_SelectLCD>
 802080c:	e7e4      	b.n	80207d8 <GUI_MEMDEV_Delete+0x18>
 802080e:	bf00      	nop
 8020810:	20000014 	.word	0x20000014

08020814 <GUI_MEMDEV_CreateEx>:
 8020814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020818:	b085      	sub	sp, #20
 802081a:	4606      	mov	r6, r0
 802081c:	4690      	mov	r8, r2
 802081e:	4699      	mov	r9, r3
 8020820:	460f      	mov	r7, r1
 8020822:	f7f2 fa55 	bl	8012cd0 <GUI_Lock>
 8020826:	4a1c      	ldr	r2, [pc, #112]	; (8020898 <GUI_MEMDEV_CreateEx+0x84>)
 8020828:	4b1c      	ldr	r3, [pc, #112]	; (802089c <GUI_MEMDEV_CreateEx+0x88>)
 802082a:	6812      	ldr	r2, [r2, #0]
 802082c:	7c50      	ldrb	r0, [r2, #17]
 802082e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8020832:	e001      	b.n	8020838 <GUI_MEMDEV_CreateEx+0x24>
 8020834:	6824      	ldr	r4, [r4, #0]
 8020836:	b1fc      	cbz	r4, 8020878 <GUI_MEMDEV_CreateEx+0x64>
 8020838:	68e3      	ldr	r3, [r4, #12]
 802083a:	681a      	ldr	r2, [r3, #0]
 802083c:	2a04      	cmp	r2, #4
 802083e:	d1f9      	bne.n	8020834 <GUI_MEMDEV_CreateEx+0x20>
 8020840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020842:	2101      	movs	r1, #1
 8020844:	4620      	mov	r0, r4
 8020846:	4798      	blx	r3
 8020848:	4605      	mov	r5, r0
 802084a:	b1d8      	cbz	r0, 8020884 <GUI_MEMDEV_CreateEx+0x70>
 802084c:	6924      	ldr	r4, [r4, #16]
 802084e:	68a3      	ldr	r3, [r4, #8]
 8020850:	4798      	blx	r3
 8020852:	3001      	adds	r0, #1
 8020854:	d018      	beq.n	8020888 <GUI_MEMDEV_CreateEx+0x74>
 8020856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020858:	9402      	str	r4, [sp, #8]
 802085a:	9300      	str	r3, [sp, #0]
 802085c:	9501      	str	r5, [sp, #4]
 802085e:	464b      	mov	r3, r9
 8020860:	4642      	mov	r2, r8
 8020862:	4639      	mov	r1, r7
 8020864:	4630      	mov	r0, r6
 8020866:	f7ff fef3 	bl	8020650 <GUI_MEMDEV__CreateFixed>
 802086a:	4604      	mov	r4, r0
 802086c:	f7f2 fa26 	bl	8012cbc <GUI_Unlock>
 8020870:	4620      	mov	r0, r4
 8020872:	b005      	add	sp, #20
 8020874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020878:	f7f1 f9f6 	bl	8011c68 <GUI_DEVICE__GetpDriver>
 802087c:	4604      	mov	r4, r0
 802087e:	b148      	cbz	r0, 8020894 <GUI_MEMDEV_CreateEx+0x80>
 8020880:	68c3      	ldr	r3, [r0, #12]
 8020882:	e7dd      	b.n	8020840 <GUI_MEMDEV_CreateEx+0x2c>
 8020884:	4604      	mov	r4, r0
 8020886:	e7f1      	b.n	802086c <GUI_MEMDEV_CreateEx+0x58>
 8020888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802088a:	4c05      	ldr	r4, [pc, #20]	; (80208a0 <GUI_MEMDEV_CreateEx+0x8c>)
 802088c:	f043 0301 	orr.w	r3, r3, #1
 8020890:	930c      	str	r3, [sp, #48]	; 0x30
 8020892:	e7e0      	b.n	8020856 <GUI_MEMDEV_CreateEx+0x42>
 8020894:	4620      	mov	r0, r4
 8020896:	e7ec      	b.n	8020872 <GUI_MEMDEV_CreateEx+0x5e>
 8020898:	20000014 	.word	0x20000014
 802089c:	20035df8 	.word	0x20035df8
 80208a0:	08026154 	.word	0x08026154

080208a4 <GUI_MEMDEV_Select>:
 80208a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80208a6:	4f16      	ldr	r7, [pc, #88]	; (8020900 <GUI_MEMDEV_Select+0x5c>)
 80208a8:	b083      	sub	sp, #12
 80208aa:	4604      	mov	r4, r0
 80208ac:	f7f2 fa10 	bl	8012cd0 <GUI_Lock>
 80208b0:	683b      	ldr	r3, [r7, #0]
 80208b2:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 80208b4:	b1e4      	cbz	r4, 80208f0 <GUI_MEMDEV_Select+0x4c>
 80208b6:	b9c6      	cbnz	r6, 80208ea <GUI_MEMDEV_Select+0x46>
 80208b8:	f7fa f920 	bl	801aafc <WM_Deactivate>
 80208bc:	4620      	mov	r0, r4
 80208be:	f7f0 fa1f 	bl	8010d00 <GUI_ALLOC_LockH>
 80208c2:	ad02      	add	r5, sp, #8
 80208c4:	683b      	ldr	r3, [r7, #0]
 80208c6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80208ca:	661c      	str	r4, [r3, #96]	; 0x60
 80208cc:	6800      	ldr	r0, [r0, #0]
 80208ce:	f7f1 fa2d 	bl	8011d2c <GUI_DEVICE_Link>
 80208d2:	4628      	mov	r0, r5
 80208d4:	f7f0 fa26 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80208d8:	f7f5 fa8a 	bl	8015df0 <LCD_UpdateColorIndices>
 80208dc:	f7f4 f840 	bl	8014960 <LCD_SetClipRectMax>
 80208e0:	f7f2 f9ec 	bl	8012cbc <GUI_Unlock>
 80208e4:	4630      	mov	r0, r6
 80208e6:	b003      	add	sp, #12
 80208e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208ea:	f7f0 ff4d 	bl	8011788 <GUI_SelectLCD>
 80208ee:	e7e3      	b.n	80208b8 <GUI_MEMDEV_Select+0x14>
 80208f0:	f7f0 ff4a 	bl	8011788 <GUI_SelectLCD>
 80208f4:	f7f2 f9e2 	bl	8012cbc <GUI_Unlock>
 80208f8:	4630      	mov	r0, r6
 80208fa:	b003      	add	sp, #12
 80208fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208fe:	bf00      	nop
 8020900:	20000014 	.word	0x20000014

08020904 <GUI_MEMDEV_CopyToLCD>:
 8020904:	b900      	cbnz	r0, 8020908 <GUI_MEMDEV_CopyToLCD+0x4>
 8020906:	4770      	bx	lr
 8020908:	4a01      	ldr	r2, [pc, #4]	; (8020910 <GUI_MEMDEV_CopyToLCD+0xc>)
 802090a:	4611      	mov	r1, r2
 802090c:	f7ff be02 	b.w	8020514 <GUI_MEMDEV_CopyToLCDAt.part.0>
 8020910:	fffff001 	.word	0xfffff001

08020914 <_GetDevData>:
 8020914:	2901      	cmp	r1, #1
 8020916:	4802      	ldr	r0, [pc, #8]	; (8020920 <_GetDevData+0xc>)
 8020918:	bf18      	it	ne
 802091a:	2000      	movne	r0, #0
 802091c:	4770      	bx	lr
 802091e:	bf00      	nop
 8020920:	080289cc 	.word	0x080289cc

08020924 <_GetDevFunc>:
 8020924:	2916      	cmp	r1, #22
 8020926:	4802      	ldr	r0, [pc, #8]	; (8020930 <_GetDevFunc+0xc>)
 8020928:	bf18      	it	ne
 802092a:	2000      	movne	r0, #0
 802092c:	4770      	bx	lr
 802092e:	bf00      	nop
 8020930:	08021d51 	.word	0x08021d51

08020934 <_GetDevProp>:
 8020934:	2908      	cmp	r1, #8
 8020936:	bf0c      	ite	eq
 8020938:	2020      	moveq	r0, #32
 802093a:	2000      	movne	r0, #0
 802093c:	4770      	bx	lr
 802093e:	bf00      	nop

08020940 <_SetOrg>:
 8020940:	6800      	ldr	r0, [r0, #0]
 8020942:	68c3      	ldr	r3, [r0, #12]
 8020944:	6a1b      	ldr	r3, [r3, #32]
 8020946:	4718      	bx	r3

08020948 <_GetRect>:
 8020948:	b570      	push	{r4, r5, r6, lr}
 802094a:	b082      	sub	sp, #8
 802094c:	6880      	ldr	r0, [r0, #8]
 802094e:	460c      	mov	r4, r1
 8020950:	f7f0 f9d6 	bl	8010d00 <GUI_ALLOC_LockH>
 8020954:	a902      	add	r1, sp, #8
 8020956:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 802095a:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 802095e:	8902      	ldrh	r2, [r0, #8]
 8020960:	8943      	ldrh	r3, [r0, #10]
 8020962:	f841 0d04 	str.w	r0, [r1, #-4]!
 8020966:	4432      	add	r2, r6
 8020968:	442b      	add	r3, r5
 802096a:	3a01      	subs	r2, #1
 802096c:	3b01      	subs	r3, #1
 802096e:	8026      	strh	r6, [r4, #0]
 8020970:	80a2      	strh	r2, [r4, #4]
 8020972:	8065      	strh	r5, [r4, #2]
 8020974:	80e3      	strh	r3, [r4, #6]
 8020976:	4608      	mov	r0, r1
 8020978:	f7f0 f9d4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802097c:	b002      	add	sp, #8
 802097e:	bd70      	pop	{r4, r5, r6, pc}

08020980 <_DrawBitmap>:
 8020980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020984:	4cab      	ldr	r4, [pc, #684]	; (8020c34 <_DrawBitmap+0x2b4>)
 8020986:	6824      	ldr	r4, [r4, #0]
 8020988:	b093      	sub	sp, #76	; 0x4c
 802098a:	6e26      	ldr	r6, [r4, #96]	; 0x60
 802098c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802098e:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8020992:	b916      	cbnz	r6, 802099a <_DrawBitmap+0x1a>
 8020994:	b013      	add	sp, #76	; 0x4c
 8020996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802099a:	4607      	mov	r7, r0
 802099c:	4630      	mov	r0, r6
 802099e:	9208      	str	r2, [sp, #32]
 80209a0:	9303      	str	r3, [sp, #12]
 80209a2:	460c      	mov	r4, r1
 80209a4:	f7f0 f9ac 	bl	8010d00 <GUI_ALLOC_LockH>
 80209a8:	6942      	ldr	r2, [r0, #20]
 80209aa:	900f      	str	r0, [sp, #60]	; 0x3c
 80209ac:	2a00      	cmp	r2, #0
 80209ae:	f040 80d9 	bne.w	8020b64 <_DrawBitmap+0x1e4>
 80209b2:	4603      	mov	r3, r0
 80209b4:	68db      	ldr	r3, [r3, #12]
 80209b6:	9304      	str	r3, [sp, #16]
 80209b8:	a80f      	add	r0, sp, #60	; 0x3c
 80209ba:	9210      	str	r2, [sp, #64]	; 0x40
 80209bc:	f7f0 f9b2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80209c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80209c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80209c4:	18e3      	adds	r3, r4, r3
 80209c6:	9305      	str	r3, [sp, #20]
 80209c8:	4b9a      	ldr	r3, [pc, #616]	; (8020c34 <_DrawBitmap+0x2b4>)
 80209ca:	681b      	ldr	r3, [r3, #0]
 80209cc:	b120      	cbz	r0, 80209d8 <_DrawBitmap+0x58>
 80209ce:	7c1a      	ldrb	r2, [r3, #16]
 80209d0:	4c98      	ldr	r4, [pc, #608]	; (8020c34 <_DrawBitmap+0x2b4>)
 80209d2:	0796      	lsls	r6, r2, #30
 80209d4:	f140 80a3 	bpl.w	8020b1e <_DrawBitmap+0x19e>
 80209d8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80209da:	f7f0 f991 	bl	8010d00 <GUI_ALLOC_LockH>
 80209de:	4604      	mov	r4, r0
 80209e0:	9908      	ldr	r1, [sp, #32]
 80209e2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80209e6:	68e3      	ldr	r3, [r4, #12]
 80209e8:	1a8a      	subs	r2, r1, r2
 80209ea:	fb03 f302 	mul.w	r3, r3, r2
 80209ee:	9905      	ldr	r1, [sp, #20]
 80209f0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80209f4:	a812      	add	r0, sp, #72	; 0x48
 80209f6:	1a8a      	subs	r2, r1, r2
 80209f8:	3318      	adds	r3, #24
 80209fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80209fe:	18e3      	adds	r3, r4, r3
 8020a00:	f840 4d04 	str.w	r4, [r0, #-4]!
 8020a04:	9302      	str	r3, [sp, #8]
 8020a06:	f7f0 f98d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8020a0a:	2d17      	cmp	r5, #23
 8020a0c:	dd58      	ble.n	8020ac0 <_DrawBitmap+0x140>
 8020a0e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020a10:	2b00      	cmp	r3, #0
 8020a12:	dd4b      	ble.n	8020aac <_DrawBitmap+0x12c>
 8020a14:	461a      	mov	r2, r3
 8020a16:	9b08      	ldr	r3, [sp, #32]
 8020a18:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8020c3c <_DrawBitmap+0x2bc>
 8020a1c:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8020c40 <_DrawBitmap+0x2c0>
 8020a20:	9707      	str	r7, [sp, #28]
 8020a22:	441a      	add	r2, r3
 8020a24:	9206      	str	r2, [sp, #24]
 8020a26:	9a03      	ldr	r2, [sp, #12]
 8020a28:	0092      	lsls	r2, r2, #2
 8020a2a:	9208      	str	r2, [sp, #32]
 8020a2c:	461f      	mov	r7, r3
 8020a2e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020a30:	b128      	cbz	r0, 8020a3e <_DrawBitmap+0xbe>
 8020a32:	6883      	ldr	r3, [r0, #8]
 8020a34:	9905      	ldr	r1, [sp, #20]
 8020a36:	685c      	ldr	r4, [r3, #4]
 8020a38:	9b03      	ldr	r3, [sp, #12]
 8020a3a:	463a      	mov	r2, r7
 8020a3c:	47a0      	blx	r4
 8020a3e:	9b07      	ldr	r3, [sp, #28]
 8020a40:	691b      	ldr	r3, [r3, #16]
 8020a42:	68d8      	ldr	r0, [r3, #12]
 8020a44:	2800      	cmp	r0, #0
 8020a46:	f040 8086 	bne.w	8020b56 <_DrawBitmap+0x1d6>
 8020a4a:	685b      	ldr	r3, [r3, #4]
 8020a4c:	4798      	blx	r3
 8020a4e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8020a52:	9c03      	ldr	r4, [sp, #12]
 8020a54:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8020a56:	0e05      	lsrs	r5, r0, #24
 8020a58:	4633      	mov	r3, r6
 8020a5a:	f04f 0e00 	mov.w	lr, #0
 8020a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a62:	ebb5 6f12 	cmp.w	r5, r2, lsr #24
 8020a66:	d063      	beq.n	8020b30 <_DrawBitmap+0x1b0>
 8020a68:	f1be 0f00 	cmp.w	lr, #0
 8020a6c:	d164      	bne.n	8020b38 <_DrawBitmap+0x1b8>
 8020a6e:	6830      	ldr	r0, [r6, #0]
 8020a70:	0e02      	lsrs	r2, r0, #24
 8020a72:	2aff      	cmp	r2, #255	; 0xff
 8020a74:	d008      	beq.n	8020a88 <_DrawBitmap+0x108>
 8020a76:	43d2      	mvns	r2, r2
 8020a78:	b2d2      	uxtb	r2, r2
 8020a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8020a7e:	f8da 1000 	ldr.w	r1, [sl]
 8020a82:	4798      	blx	r3
 8020a84:	f8ca 0000 	str.w	r0, [sl]
 8020a88:	3c01      	subs	r4, #1
 8020a8a:	f10a 0a04 	add.w	sl, sl, #4
 8020a8e:	3604      	adds	r6, #4
 8020a90:	2c00      	cmp	r4, #0
 8020a92:	d1e1      	bne.n	8020a58 <_DrawBitmap+0xd8>
 8020a94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020a96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020a98:	4413      	add	r3, r2
 8020a9a:	931f      	str	r3, [sp, #124]	; 0x7c
 8020a9c:	9a04      	ldr	r2, [sp, #16]
 8020a9e:	9b02      	ldr	r3, [sp, #8]
 8020aa0:	4413      	add	r3, r2
 8020aa2:	9302      	str	r3, [sp, #8]
 8020aa4:	9b06      	ldr	r3, [sp, #24]
 8020aa6:	3701      	adds	r7, #1
 8020aa8:	429f      	cmp	r7, r3
 8020aaa:	d1c0      	bne.n	8020a2e <_DrawBitmap+0xae>
 8020aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020aae:	2b00      	cmp	r3, #0
 8020ab0:	f43f af70 	beq.w	8020994 <_DrawBitmap+0x14>
 8020ab4:	a810      	add	r0, sp, #64	; 0x40
 8020ab6:	f7f0 f935 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8020aba:	b013      	add	sp, #76	; 0x4c
 8020abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ac0:	2d10      	cmp	r5, #16
 8020ac2:	d055      	beq.n	8020b70 <_DrawBitmap+0x1f0>
 8020ac4:	2d08      	cmp	r5, #8
 8020ac6:	f000 80bd 	beq.w	8020c44 <_DrawBitmap+0x2c4>
 8020aca:	4b5b      	ldr	r3, [pc, #364]	; (8020c38 <_DrawBitmap+0x2b8>)
 8020acc:	f1ba 0f00 	cmp.w	sl, #0
 8020ad0:	bf08      	it	eq
 8020ad2:	469a      	moveq	sl, r3
 8020ad4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	f340 80a5 	ble.w	8020c26 <_DrawBitmap+0x2a6>
 8020adc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020ade:	9a02      	ldr	r2, [sp, #8]
 8020ae0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8020ae2:	009b      	lsls	r3, r3, #2
 8020ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8020ae6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020ae8:	005b      	lsls	r3, r3, #1
 8020aea:	930c      	str	r3, [sp, #48]	; 0x30
 8020aec:	2300      	movs	r3, #0
 8020aee:	2d02      	cmp	r5, #2
 8020af0:	f000 827b 	beq.w	8020fea <_DrawBitmap+0x66a>
 8020af4:	2d04      	cmp	r5, #4
 8020af6:	f000 812b 	beq.w	8020d50 <_DrawBitmap+0x3d0>
 8020afa:	2d01      	cmp	r5, #1
 8020afc:	f000 8358 	beq.w	80211b0 <_DrawBitmap+0x830>
 8020b00:	981e      	ldr	r0, [sp, #120]	; 0x78
 8020b02:	4401      	add	r1, r0
 8020b04:	9804      	ldr	r0, [sp, #16]
 8020b06:	4402      	add	r2, r0
 8020b08:	981c      	ldr	r0, [sp, #112]	; 0x70
 8020b0a:	3301      	adds	r3, #1
 8020b0c:	4298      	cmp	r0, r3
 8020b0e:	dcee      	bgt.n	8020aee <_DrawBitmap+0x16e>
 8020b10:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8020b14:	46de      	mov	lr, fp
 8020b16:	f1be 0f00 	cmp.w	lr, #0
 8020b1a:	d1cb      	bne.n	8020ab4 <_DrawBitmap+0x134>
 8020b1c:	e73a      	b.n	8020994 <_DrawBitmap+0x14>
 8020b1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020b20:	9300      	str	r3, [sp, #0]
 8020b22:	9a08      	ldr	r2, [sp, #32]
 8020b24:	9b03      	ldr	r3, [sp, #12]
 8020b26:	9905      	ldr	r1, [sp, #20]
 8020b28:	f7f7 f9a8 	bl	8017e7c <GUI_USAGE_AddRect>
 8020b2c:	6823      	ldr	r3, [r4, #0]
 8020b2e:	e753      	b.n	80209d8 <_DrawBitmap+0x58>
 8020b30:	f10e 0e01 	add.w	lr, lr, #1
 8020b34:	45a6      	cmp	lr, r4
 8020b36:	d192      	bne.n	8020a5e <_DrawBitmap+0xde>
 8020b38:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8020b3c:	4631      	mov	r1, r6
 8020b3e:	4650      	mov	r0, sl
 8020b40:	465a      	mov	r2, fp
 8020b42:	f8d9 3000 	ldr.w	r3, [r9]
 8020b46:	ebce 0404 	rsb	r4, lr, r4
 8020b4a:	445e      	add	r6, fp
 8020b4c:	4798      	blx	r3
 8020b4e:	44da      	add	sl, fp
 8020b50:	2c00      	cmp	r4, #0
 8020b52:	d181      	bne.n	8020a58 <_DrawBitmap+0xd8>
 8020b54:	e79e      	b.n	8020a94 <_DrawBitmap+0x114>
 8020b56:	f8d9 3000 	ldr.w	r3, [r9]
 8020b5a:	9a08      	ldr	r2, [sp, #32]
 8020b5c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8020b5e:	9802      	ldr	r0, [sp, #8]
 8020b60:	4798      	blx	r3
 8020b62:	e797      	b.n	8020a94 <_DrawBitmap+0x114>
 8020b64:	4610      	mov	r0, r2
 8020b66:	f7f0 f8cb 	bl	8010d00 <GUI_ALLOC_LockH>
 8020b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020b6c:	4602      	mov	r2, r0
 8020b6e:	e721      	b.n	80209b4 <_DrawBitmap+0x34>
 8020b70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020b72:	2b00      	cmp	r3, #0
 8020b74:	dd9a      	ble.n	8020aac <_DrawBitmap+0x12c>
 8020b76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020b7a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020b7c:	4453      	add	r3, sl
 8020b7e:	9306      	str	r3, [sp, #24]
 8020b80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020b82:	f1a3 0b02 	sub.w	fp, r3, #2
 8020b86:	b35e      	cbz	r6, 8020be0 <_DrawBitmap+0x260>
 8020b88:	68b2      	ldr	r2, [r6, #8]
 8020b8a:	9d03      	ldr	r5, [sp, #12]
 8020b8c:	6854      	ldr	r4, [r2, #4]
 8020b8e:	9905      	ldr	r1, [sp, #20]
 8020b90:	462b      	mov	r3, r5
 8020b92:	4652      	mov	r2, sl
 8020b94:	4630      	mov	r0, r6
 8020b96:	47a0      	blx	r4
 8020b98:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8020b9c:	9c05      	ldr	r4, [sp, #20]
 8020b9e:	46d9      	mov	r9, fp
 8020ba0:	693b      	ldr	r3, [r7, #16]
 8020ba2:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 8020ba6:	685b      	ldr	r3, [r3, #4]
 8020ba8:	4798      	blx	r3
 8020baa:	68b3      	ldr	r3, [r6, #8]
 8020bac:	f848 0b04 	str.w	r0, [r8], #4
 8020bb0:	4621      	mov	r1, r4
 8020bb2:	681b      	ldr	r3, [r3, #0]
 8020bb4:	4652      	mov	r2, sl
 8020bb6:	4630      	mov	r0, r6
 8020bb8:	4798      	blx	r3
 8020bba:	3d01      	subs	r5, #1
 8020bbc:	f104 0401 	add.w	r4, r4, #1
 8020bc0:	d1ee      	bne.n	8020ba0 <_DrawBitmap+0x220>
 8020bc2:	9b02      	ldr	r3, [sp, #8]
 8020bc4:	9a04      	ldr	r2, [sp, #16]
 8020bc6:	4413      	add	r3, r2
 8020bc8:	9302      	str	r3, [sp, #8]
 8020bca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020bcc:	449b      	add	fp, r3
 8020bce:	9b06      	ldr	r3, [sp, #24]
 8020bd0:	f10a 0a01 	add.w	sl, sl, #1
 8020bd4:	459a      	cmp	sl, r3
 8020bd6:	f43f af69 	beq.w	8020aac <_DrawBitmap+0x12c>
 8020bda:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020bdc:	2e00      	cmp	r6, #0
 8020bde:	d1d3      	bne.n	8020b88 <_DrawBitmap+0x208>
 8020be0:	9d02      	ldr	r5, [sp, #8]
 8020be2:	9c03      	ldr	r4, [sp, #12]
 8020be4:	465e      	mov	r6, fp
 8020be6:	693b      	ldr	r3, [r7, #16]
 8020be8:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 8020bec:	685b      	ldr	r3, [r3, #4]
 8020bee:	4798      	blx	r3
 8020bf0:	3c01      	subs	r4, #1
 8020bf2:	f845 0b04 	str.w	r0, [r5], #4
 8020bf6:	d1f6      	bne.n	8020be6 <_DrawBitmap+0x266>
 8020bf8:	e7e3      	b.n	8020bc2 <_DrawBitmap+0x242>
 8020bfa:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8020bfe:	9b06      	ldr	r3, [sp, #24]
 8020c00:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020c02:	3301      	adds	r3, #1
 8020c04:	461c      	mov	r4, r3
 8020c06:	9306      	str	r3, [sp, #24]
 8020c08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020c0a:	4413      	add	r3, r2
 8020c0c:	931f      	str	r3, [sp, #124]	; 0x7c
 8020c0e:	9a04      	ldr	r2, [sp, #16]
 8020c10:	9b02      	ldr	r3, [sp, #8]
 8020c12:	a80f      	add	r0, sp, #60	; 0x3c
 8020c14:	4413      	add	r3, r2
 8020c16:	9302      	str	r3, [sp, #8]
 8020c18:	f7f0 f884 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8020c1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020c1e:	461a      	mov	r2, r3
 8020c20:	42a2      	cmp	r2, r4
 8020c22:	f300 82ce 	bgt.w	80211c2 <_DrawBitmap+0x842>
 8020c26:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8020c2a:	f1be 0f00 	cmp.w	lr, #0
 8020c2e:	f47f af41 	bne.w	8020ab4 <_DrawBitmap+0x134>
 8020c32:	e6af      	b.n	8020994 <_DrawBitmap+0x14>
 8020c34:	20000014 	.word	0x20000014
 8020c38:	08028a00 	.word	0x08028a00
 8020c3c:	2000003c 	.word	0x2000003c
 8020c40:	20000034 	.word	0x20000034
 8020c44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	f340 8380 	ble.w	802134c <_DrawBitmap+0x9cc>
 8020c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020c50:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8020c54:	9a03      	ldr	r2, [sp, #12]
 8020c56:	444b      	add	r3, r9
 8020c58:	9306      	str	r3, [sp, #24]
 8020c5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020c5c:	4658      	mov	r0, fp
 8020c5e:	189c      	adds	r4, r3, r2
 8020c60:	465d      	mov	r5, fp
 8020c62:	4bb9      	ldr	r3, [pc, #740]	; (8020f48 <_DrawBitmap+0x5c8>)
 8020c64:	681b      	ldr	r3, [r3, #0]
 8020c66:	7c1b      	ldrb	r3, [r3, #16]
 8020c68:	f1ba 0f00 	cmp.w	sl, #0
 8020c6c:	d041      	beq.n	8020cf2 <_DrawBitmap+0x372>
 8020c6e:	f013 0303 	ands.w	r3, r3, #3
 8020c72:	d033      	beq.n	8020cdc <_DrawBitmap+0x35c>
 8020c74:	2b02      	cmp	r3, #2
 8020c76:	d11e      	bne.n	8020cb6 <_DrawBitmap+0x336>
 8020c78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020c7a:	2d00      	cmp	r5, #0
 8020c7c:	d05c      	beq.n	8020d38 <_DrawBitmap+0x3b8>
 8020c7e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8020c82:	9f03      	ldr	r7, [sp, #12]
 8020c84:	9e05      	ldr	r6, [sp, #20]
 8020c86:	f103 3bff 	add.w	fp, r3, #4294967295
 8020c8a:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8020c8e:	4631      	mov	r1, r6
 8020c90:	464a      	mov	r2, r9
 8020c92:	3601      	adds	r6, #1
 8020c94:	4628      	mov	r0, r5
 8020c96:	b143      	cbz	r3, 8020caa <_DrawBitmap+0x32a>
 8020c98:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8020c9c:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8020ca0:	f8c8 3000 	str.w	r3, [r8]
 8020ca4:	f8de 3000 	ldr.w	r3, [lr]
 8020ca8:	4798      	blx	r3
 8020caa:	3f01      	subs	r7, #1
 8020cac:	f108 0804 	add.w	r8, r8, #4
 8020cb0:	d1eb      	bne.n	8020c8a <_DrawBitmap+0x30a>
 8020cb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020cb4:	4628      	mov	r0, r5
 8020cb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020cb8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020cba:	4413      	add	r3, r2
 8020cbc:	931f      	str	r3, [sp, #124]	; 0x7c
 8020cbe:	9a04      	ldr	r2, [sp, #16]
 8020cc0:	9b02      	ldr	r3, [sp, #8]
 8020cc2:	4413      	add	r3, r2
 8020cc4:	9302      	str	r3, [sp, #8]
 8020cc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020cc8:	441c      	add	r4, r3
 8020cca:	9b06      	ldr	r3, [sp, #24]
 8020ccc:	f109 0901 	add.w	r9, r9, #1
 8020cd0:	454b      	cmp	r3, r9
 8020cd2:	d1c6      	bne.n	8020c62 <_DrawBitmap+0x2e2>
 8020cd4:	2800      	cmp	r0, #0
 8020cd6:	f47f aeed 	bne.w	8020ab4 <_DrawBitmap+0x134>
 8020cda:	e65b      	b.n	8020994 <_DrawBitmap+0x14>
 8020cdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020cde:	9a02      	ldr	r2, [sp, #8]
 8020ce0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8020ce4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8020ce8:	f842 1b04 	str.w	r1, [r2], #4
 8020cec:	429c      	cmp	r4, r3
 8020cee:	d1f7      	bne.n	8020ce0 <_DrawBitmap+0x360>
 8020cf0:	e7e1      	b.n	8020cb6 <_DrawBitmap+0x336>
 8020cf2:	f013 0303 	ands.w	r3, r3, #3
 8020cf6:	f000 8252 	beq.w	802119e <_DrawBitmap+0x81e>
 8020cfa:	2b02      	cmp	r3, #2
 8020cfc:	d1db      	bne.n	8020cb6 <_DrawBitmap+0x336>
 8020cfe:	2d00      	cmp	r5, #0
 8020d00:	f000 8319 	beq.w	8021336 <_DrawBitmap+0x9b6>
 8020d04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020d06:	9f02      	ldr	r7, [sp, #8]
 8020d08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020d0c:	9e05      	ldr	r6, [sp, #20]
 8020d0e:	f103 38ff 	add.w	r8, r3, #4294967295
 8020d12:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8020d16:	4631      	mov	r1, r6
 8020d18:	464a      	mov	r2, r9
 8020d1a:	3601      	adds	r6, #1
 8020d1c:	4628      	mov	r0, r5
 8020d1e:	b12b      	cbz	r3, 8020d2c <_DrawBitmap+0x3ac>
 8020d20:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8020d24:	603b      	str	r3, [r7, #0]
 8020d26:	f8de 3000 	ldr.w	r3, [lr]
 8020d2a:	4798      	blx	r3
 8020d2c:	f1bb 0b01 	subs.w	fp, fp, #1
 8020d30:	f107 0704 	add.w	r7, r7, #4
 8020d34:	d1ed      	bne.n	8020d12 <_DrawBitmap+0x392>
 8020d36:	e7bc      	b.n	8020cb2 <_DrawBitmap+0x332>
 8020d38:	9a02      	ldr	r2, [sp, #8]
 8020d3a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8020d3e:	b111      	cbz	r1, 8020d46 <_DrawBitmap+0x3c6>
 8020d40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8020d44:	6011      	str	r1, [r2, #0]
 8020d46:	42a3      	cmp	r3, r4
 8020d48:	f102 0204 	add.w	r2, r2, #4
 8020d4c:	d1f5      	bne.n	8020d3a <_DrawBitmap+0x3ba>
 8020d4e:	e7b1      	b.n	8020cb4 <_DrawBitmap+0x334>
 8020d50:	911f      	str	r1, [sp, #124]	; 0x7c
 8020d52:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020d54:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8020d58:	9306      	str	r3, [sp, #24]
 8020d5a:	f1c1 0302 	rsb	r3, r1, #2
 8020d5e:	b2d9      	uxtb	r1, r3
 8020d60:	46d8      	mov	r8, fp
 8020d62:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 8020d66:	910b      	str	r1, [sp, #44]	; 0x2c
 8020d68:	4613      	mov	r3, r2
 8020d6a:	3304      	adds	r3, #4
 8020d6c:	9307      	str	r3, [sp, #28]
 8020d6e:	46c6      	mov	lr, r8
 8020d70:	4645      	mov	r5, r8
 8020d72:	4b75      	ldr	r3, [pc, #468]	; (8020f48 <_DrawBitmap+0x5c8>)
 8020d74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020d76:	681a      	ldr	r2, [r3, #0]
 8020d78:	f89b 3000 	ldrb.w	r3, [fp]
 8020d7c:	7c12      	ldrb	r2, [r2, #16]
 8020d7e:	408b      	lsls	r3, r1
 8020d80:	f002 0203 	and.w	r2, r2, #3
 8020d84:	9907      	ldr	r1, [sp, #28]
 8020d86:	2a01      	cmp	r2, #1
 8020d88:	b2dc      	uxtb	r4, r3
 8020d8a:	f1a1 0904 	sub.w	r9, r1, #4
 8020d8e:	f000 80b9 	beq.w	8020f04 <_DrawBitmap+0x584>
 8020d92:	d373      	bcc.n	8020e7c <_DrawBitmap+0x4fc>
 8020d94:	2a02      	cmp	r2, #2
 8020d96:	d161      	bne.n	8020e5c <_DrawBitmap+0x4dc>
 8020d98:	9908      	ldr	r1, [sp, #32]
 8020d9a:	9a06      	ldr	r2, [sp, #24]
 8020d9c:	440a      	add	r2, r1
 8020d9e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020da0:	9209      	str	r2, [sp, #36]	; 0x24
 8020da2:	2900      	cmp	r1, #0
 8020da4:	f000 80f2 	beq.w	8020f8c <_DrawBitmap+0x60c>
 8020da8:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8020dac:	d00a      	beq.n	8020dc4 <_DrawBitmap+0x444>
 8020dae:	0924      	lsrs	r4, r4, #4
 8020db0:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8020db4:	f8c9 3000 	str.w	r3, [r9]
 8020db8:	b125      	cbz	r5, 8020dc4 <_DrawBitmap+0x444>
 8020dba:	68ab      	ldr	r3, [r5, #8]
 8020dbc:	9905      	ldr	r1, [sp, #20]
 8020dbe:	681b      	ldr	r3, [r3, #0]
 8020dc0:	4628      	mov	r0, r5
 8020dc2:	4798      	blx	r3
 8020dc4:	9b05      	ldr	r3, [sp, #20]
 8020dc6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8020dca:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020dce:	3301      	adds	r3, #1
 8020dd0:	9302      	str	r3, [sp, #8]
 8020dd2:	9b03      	ldr	r3, [sp, #12]
 8020dd4:	f10b 0701 	add.w	r7, fp, #1
 8020dd8:	1e5e      	subs	r6, r3, #1
 8020dda:	2e01      	cmp	r6, #1
 8020ddc:	f340 80c5 	ble.w	8020f6a <_DrawBitmap+0x5ea>
 8020de0:	2d00      	cmp	r5, #0
 8020de2:	f000 80db 	beq.w	8020f9c <_DrawBitmap+0x61c>
 8020de6:	9b02      	ldr	r3, [sp, #8]
 8020de8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8020dec:	4632      	mov	r2, r6
 8020dee:	f109 0808 	add.w	r8, r9, #8
 8020df2:	960d      	str	r6, [sp, #52]	; 0x34
 8020df4:	4691      	mov	r9, r2
 8020df6:	461e      	mov	r6, r3
 8020df8:	e021      	b.n	8020e3e <_DrawBitmap+0x4be>
 8020dfa:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8020dfe:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8020e02:	f848 3c08 	str.w	r3, [r8, #-8]
 8020e06:	f8de 3000 	ldr.w	r3, [lr]
 8020e0a:	4798      	blx	r3
 8020e0c:	f014 040f 	ands.w	r4, r4, #15
 8020e10:	d009      	beq.n	8020e26 <_DrawBitmap+0x4a6>
 8020e12:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8020e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e18:	f848 3c04 	str.w	r3, [r8, #-4]
 8020e1c:	68ab      	ldr	r3, [r5, #8]
 8020e1e:	1c71      	adds	r1, r6, #1
 8020e20:	681b      	ldr	r3, [r3, #0]
 8020e22:	4628      	mov	r0, r5
 8020e24:	4798      	blx	r3
 8020e26:	f1a9 0902 	sub.w	r9, r9, #2
 8020e2a:	f1b9 0f01 	cmp.w	r9, #1
 8020e2e:	f106 0602 	add.w	r6, r6, #2
 8020e32:	f108 0808 	add.w	r8, r8, #8
 8020e36:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8020e3a:	f340 8087 	ble.w	8020f4c <_DrawBitmap+0x5cc>
 8020e3e:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8020e42:	ea4f 1314 	mov.w	r3, r4, lsr #4
 8020e46:	4631      	mov	r1, r6
 8020e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e4a:	4628      	mov	r0, r5
 8020e4c:	d1d5      	bne.n	8020dfa <_DrawBitmap+0x47a>
 8020e4e:	2c00      	cmp	r4, #0
 8020e50:	d0e9      	beq.n	8020e26 <_DrawBitmap+0x4a6>
 8020e52:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8020e56:	f848 3c04 	str.w	r3, [r8, #-4]
 8020e5a:	e7df      	b.n	8020e1c <_DrawBitmap+0x49c>
 8020e5c:	9b06      	ldr	r3, [sp, #24]
 8020e5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8020e60:	3301      	adds	r3, #1
 8020e62:	461a      	mov	r2, r3
 8020e64:	9306      	str	r3, [sp, #24]
 8020e66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020e68:	449b      	add	fp, r3
 8020e6a:	9b04      	ldr	r3, [sp, #16]
 8020e6c:	428a      	cmp	r2, r1
 8020e6e:	46a8      	mov	r8, r5
 8020e70:	444b      	add	r3, r9
 8020e72:	f6ff af7a 	blt.w	8020d6a <_DrawBitmap+0x3ea>
 8020e76:	46ab      	mov	fp, r5
 8020e78:	46de      	mov	lr, fp
 8020e7a:	e64c      	b.n	8020b16 <_DrawBitmap+0x196>
 8020e7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	f000 8089 	beq.w	8020f96 <_DrawBitmap+0x616>
 8020e84:	0924      	lsrs	r4, r4, #4
 8020e86:	9b03      	ldr	r3, [sp, #12]
 8020e88:	1e59      	subs	r1, r3, #1
 8020e8a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8020e8e:	f8c9 3000 	str.w	r3, [r9]
 8020e92:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020e96:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8020e9a:	f10b 0201 	add.w	r2, fp, #1
 8020e9e:	2901      	cmp	r1, #1
 8020ea0:	dd18      	ble.n	8020ed4 <_DrawBitmap+0x554>
 8020ea2:	104f      	asrs	r7, r1, #1
 8020ea4:	19d6      	adds	r6, r2, r7
 8020ea6:	f001 0101 	and.w	r1, r1, #1
 8020eaa:	f109 0308 	add.w	r3, r9, #8
 8020eae:	0920      	lsrs	r0, r4, #4
 8020eb0:	f004 040f 	and.w	r4, r4, #15
 8020eb4:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 8020eb8:	f843 0c08 	str.w	r0, [r3, #-8]
 8020ebc:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8020ec0:	f843 0c04 	str.w	r0, [r3, #-4]
 8020ec4:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8020ec8:	42b2      	cmp	r2, r6
 8020eca:	f103 0308 	add.w	r3, r3, #8
 8020ece:	d1ee      	bne.n	8020eae <_DrawBitmap+0x52e>
 8020ed0:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 8020ed4:	b121      	cbz	r1, 8020ee0 <_DrawBitmap+0x560>
 8020ed6:	0924      	lsrs	r4, r4, #4
 8020ed8:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8020edc:	f8c9 3000 	str.w	r3, [r9]
 8020ee0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020ee2:	9904      	ldr	r1, [sp, #16]
 8020ee4:	9b06      	ldr	r3, [sp, #24]
 8020ee6:	4493      	add	fp, r2
 8020ee8:	9a07      	ldr	r2, [sp, #28]
 8020eea:	440a      	add	r2, r1
 8020eec:	9207      	str	r2, [sp, #28]
 8020eee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8020ef0:	3301      	adds	r3, #1
 8020ef2:	429a      	cmp	r2, r3
 8020ef4:	9306      	str	r3, [sp, #24]
 8020ef6:	f73f af3c 	bgt.w	8020d72 <_DrawBitmap+0x3f2>
 8020efa:	f1be 0f00 	cmp.w	lr, #0
 8020efe:	f47f add9 	bne.w	8020ab4 <_DrawBitmap+0x134>
 8020f02:	e547      	b.n	8020994 <_DrawBitmap+0x14>
 8020f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f06:	9903      	ldr	r1, [sp, #12]
 8020f08:	4658      	mov	r0, fp
 8020f0a:	428b      	cmp	r3, r1
 8020f0c:	bfc8      	it	gt
 8020f0e:	b2cb      	uxtbgt	r3, r1
 8020f10:	1e5a      	subs	r2, r3, #1
 8020f12:	b2d2      	uxtb	r2, r2
 8020f14:	3201      	adds	r2, #1
 8020f16:	1ac9      	subs	r1, r1, r3
 8020f18:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8020f1c:	0123      	lsls	r3, r4, #4
 8020f1e:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8020f22:	b2dc      	uxtb	r4, r3
 8020f24:	d005      	beq.n	8020f32 <_DrawBitmap+0x5b2>
 8020f26:	f8d9 3000 	ldr.w	r3, [r9]
 8020f2a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8020f2e:	f8c9 3000 	str.w	r3, [r9]
 8020f32:	f109 0904 	add.w	r9, r9, #4
 8020f36:	4591      	cmp	r9, r2
 8020f38:	d1f0      	bne.n	8020f1c <_DrawBitmap+0x59c>
 8020f3a:	2900      	cmp	r1, #0
 8020f3c:	d0d0      	beq.n	8020ee0 <_DrawBitmap+0x560>
 8020f3e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8020f42:	2302      	movs	r3, #2
 8020f44:	e7e1      	b.n	8020f0a <_DrawBitmap+0x58a>
 8020f46:	bf00      	nop
 8020f48:	20000014 	.word	0x20000014
 8020f4c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8020f4e:	9902      	ldr	r1, [sp, #8]
 8020f50:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8020f54:	3e02      	subs	r6, #2
 8020f56:	0873      	lsrs	r3, r6, #1
 8020f58:	3102      	adds	r1, #2
 8020f5a:	1c5a      	adds	r2, r3, #1
 8020f5c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8020f60:	9102      	str	r1, [sp, #8]
 8020f62:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
 8020f66:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
 8020f6a:	b166      	cbz	r6, 8020f86 <_DrawBitmap+0x606>
 8020f6c:	0924      	lsrs	r4, r4, #4
 8020f6e:	d00a      	beq.n	8020f86 <_DrawBitmap+0x606>
 8020f70:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8020f74:	f8c9 3000 	str.w	r3, [r9]
 8020f78:	b12d      	cbz	r5, 8020f86 <_DrawBitmap+0x606>
 8020f7a:	68ab      	ldr	r3, [r5, #8]
 8020f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f7e:	9902      	ldr	r1, [sp, #8]
 8020f80:	681b      	ldr	r3, [r3, #0]
 8020f82:	4628      	mov	r0, r5
 8020f84:	4798      	blx	r3
 8020f86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020f88:	46ae      	mov	lr, r5
 8020f8a:	e7a9      	b.n	8020ee0 <_DrawBitmap+0x560>
 8020f8c:	9b05      	ldr	r3, [sp, #20]
 8020f8e:	9e03      	ldr	r6, [sp, #12]
 8020f90:	9302      	str	r3, [sp, #8]
 8020f92:	465f      	mov	r7, fp
 8020f94:	e721      	b.n	8020dda <_DrawBitmap+0x45a>
 8020f96:	9903      	ldr	r1, [sp, #12]
 8020f98:	465a      	mov	r2, fp
 8020f9a:	e780      	b.n	8020e9e <_DrawBitmap+0x51e>
 8020f9c:	3e02      	subs	r6, #2
 8020f9e:	0872      	lsrs	r2, r6, #1
 8020fa0:	1c51      	adds	r1, r2, #1
 8020fa2:	1878      	adds	r0, r7, r1
 8020fa4:	f109 0308 	add.w	r3, r9, #8
 8020fa8:	4694      	mov	ip, r2
 8020faa:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8020fae:	ea4f 1e14 	mov.w	lr, r4, lsr #4
 8020fb2:	d003      	beq.n	8020fbc <_DrawBitmap+0x63c>
 8020fb4:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 8020fb8:	f843 2c08 	str.w	r2, [r3, #-8]
 8020fbc:	f014 040f 	ands.w	r4, r4, #15
 8020fc0:	d003      	beq.n	8020fca <_DrawBitmap+0x64a>
 8020fc2:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 8020fc6:	f843 4c04 	str.w	r4, [r3, #-4]
 8020fca:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8020fce:	42b8      	cmp	r0, r7
 8020fd0:	f103 0308 	add.w	r3, r3, #8
 8020fd4:	d1e9      	bne.n	8020faa <_DrawBitmap+0x62a>
 8020fd6:	9b02      	ldr	r3, [sp, #8]
 8020fd8:	3302      	adds	r3, #2
 8020fda:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 8020fde:	9302      	str	r3, [sp, #8]
 8020fe0:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
 8020fe4:	eba6 064c 	sub.w	r6, r6, ip, lsl #1
 8020fe8:	e7bf      	b.n	8020f6a <_DrawBitmap+0x5ea>
 8020fea:	9306      	str	r3, [sp, #24]
 8020fec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020fee:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8020ff2:	9202      	str	r2, [sp, #8]
 8020ff4:	f1c3 0304 	rsb	r3, r3, #4
 8020ff8:	b2db      	uxtb	r3, r3
 8020ffa:	911f      	str	r1, [sp, #124]	; 0x7c
 8020ffc:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ffe:	46d0      	mov	r8, sl
 8021000:	46de      	mov	lr, fp
 8021002:	465f      	mov	r7, fp
 8021004:	4bab      	ldr	r3, [pc, #684]	; (80212b4 <_DrawBitmap+0x934>)
 8021006:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021008:	681b      	ldr	r3, [r3, #0]
 802100a:	7814      	ldrb	r4, [r2, #0]
 802100c:	7c1b      	ldrb	r3, [r3, #16]
 802100e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021010:	f003 0303 	and.w	r3, r3, #3
 8021014:	4094      	lsls	r4, r2
 8021016:	2b01      	cmp	r3, #1
 8021018:	b2e4      	uxtb	r4, r4
 802101a:	f000 808f 	beq.w	802113c <_DrawBitmap+0x7bc>
 802101e:	d358      	bcc.n	80210d2 <_DrawBitmap+0x752>
 8021020:	2b02      	cmp	r3, #2
 8021022:	f040 80aa 	bne.w	802117a <_DrawBitmap+0x7fa>
 8021026:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021028:	9209      	str	r2, [sp, #36]	; 0x24
 802102a:	9a05      	ldr	r2, [sp, #20]
 802102c:	9207      	str	r2, [sp, #28]
 802102e:	9906      	ldr	r1, [sp, #24]
 8021030:	9a08      	ldr	r2, [sp, #32]
 8021032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021034:	9d02      	ldr	r5, [sp, #8]
 8021036:	f8dd a00c 	ldr.w	sl, [sp, #12]
 802103a:	eb02 0b01 	add.w	fp, r2, r1
 802103e:	4553      	cmp	r3, sl
 8021040:	bfc8      	it	gt
 8021042:	fa5f f38a 	uxtbgt.w	r3, sl
 8021046:	ebc3 0a0a 	rsb	sl, r3, sl
 802104a:	3b01      	subs	r3, #1
 802104c:	b35f      	cbz	r7, 80210a6 <_DrawBitmap+0x726>
 802104e:	b2db      	uxtb	r3, r3
 8021050:	f103 0901 	add.w	r9, r3, #1
 8021054:	9e07      	ldr	r6, [sp, #28]
 8021056:	930a      	str	r3, [sp, #40]	; 0x28
 8021058:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 802105c:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8021060:	4631      	mov	r1, r6
 8021062:	ea4f 1394 	mov.w	r3, r4, lsr #6
 8021066:	f106 0601 	add.w	r6, r6, #1
 802106a:	465a      	mov	r2, fp
 802106c:	4638      	mov	r0, r7
 802106e:	d007      	beq.n	8021080 <_DrawBitmap+0x700>
 8021070:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8021074:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021078:	602b      	str	r3, [r5, #0]
 802107a:	f8de 3000 	ldr.w	r3, [lr]
 802107e:	4798      	blx	r3
 8021080:	3504      	adds	r5, #4
 8021082:	00a4      	lsls	r4, r4, #2
 8021084:	454d      	cmp	r5, r9
 8021086:	b2e4      	uxtb	r4, r4
 8021088:	d1e8      	bne.n	802105c <_DrawBitmap+0x6dc>
 802108a:	9b07      	ldr	r3, [sp, #28]
 802108c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802108e:	3301      	adds	r3, #1
 8021090:	441a      	add	r2, r3
 8021092:	9207      	str	r2, [sp, #28]
 8021094:	f1ba 0f00 	cmp.w	sl, #0
 8021098:	d03a      	beq.n	8021110 <_DrawBitmap+0x790>
 802109a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802109c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80210a0:	9309      	str	r3, [sp, #36]	; 0x24
 80210a2:	2304      	movs	r3, #4
 80210a4:	e7cb      	b.n	802103e <_DrawBitmap+0x6be>
 80210a6:	b2da      	uxtb	r2, r3
 80210a8:	1c50      	adds	r0, r2, #1
 80210aa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80210ae:	09a1      	lsrs	r1, r4, #6
 80210b0:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80210b4:	ea4f 0384 	mov.w	r3, r4, lsl #2
 80210b8:	b2dc      	uxtb	r4, r3
 80210ba:	bf1c      	itt	ne
 80210bc:	f858 3021 	ldrne.w	r3, [r8, r1, lsl #2]
 80210c0:	602b      	strne	r3, [r5, #0]
 80210c2:	3504      	adds	r5, #4
 80210c4:	42a8      	cmp	r0, r5
 80210c6:	d1f2      	bne.n	80210ae <_DrawBitmap+0x72e>
 80210c8:	9b07      	ldr	r3, [sp, #28]
 80210ca:	3301      	adds	r3, #1
 80210cc:	18d3      	adds	r3, r2, r3
 80210ce:	9307      	str	r3, [sp, #28]
 80210d0:	e7e0      	b.n	8021094 <_DrawBitmap+0x714>
 80210d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210d4:	9e02      	ldr	r6, [sp, #8]
 80210d6:	9d03      	ldr	r5, [sp, #12]
 80210d8:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 80210dc:	42ab      	cmp	r3, r5
 80210de:	bfc8      	it	gt
 80210e0:	b2eb      	uxtbgt	r3, r5
 80210e2:	1e58      	subs	r0, r3, #1
 80210e4:	b2c0      	uxtb	r0, r0
 80210e6:	1aed      	subs	r5, r5, r3
 80210e8:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 80210ec:	1f33      	subs	r3, r6, #4
 80210ee:	09a2      	lsrs	r2, r4, #6
 80210f0:	00a4      	lsls	r4, r4, #2
 80210f2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80210f6:	f843 2f04 	str.w	r2, [r3, #4]!
 80210fa:	428b      	cmp	r3, r1
 80210fc:	b2e4      	uxtb	r4, r4
 80210fe:	d1f6      	bne.n	80210ee <_DrawBitmap+0x76e>
 8021100:	3001      	adds	r0, #1
 8021102:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8021106:	b12d      	cbz	r5, 8021114 <_DrawBitmap+0x794>
 8021108:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 802110c:	2304      	movs	r3, #4
 802110e:	e7e5      	b.n	80210dc <_DrawBitmap+0x75c>
 8021110:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021112:	46be      	mov	lr, r7
 8021114:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021116:	991e      	ldr	r1, [sp, #120]	; 0x78
 8021118:	9b06      	ldr	r3, [sp, #24]
 802111a:	440a      	add	r2, r1
 802111c:	921f      	str	r2, [sp, #124]	; 0x7c
 802111e:	9904      	ldr	r1, [sp, #16]
 8021120:	9a02      	ldr	r2, [sp, #8]
 8021122:	440a      	add	r2, r1
 8021124:	9202      	str	r2, [sp, #8]
 8021126:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8021128:	3301      	adds	r3, #1
 802112a:	429a      	cmp	r2, r3
 802112c:	9306      	str	r3, [sp, #24]
 802112e:	f73f af69 	bgt.w	8021004 <_DrawBitmap+0x684>
 8021132:	f1be 0f00 	cmp.w	lr, #0
 8021136:	f47f acbd 	bne.w	8020ab4 <_DrawBitmap+0x134>
 802113a:	e42b      	b.n	8020994 <_DrawBitmap+0x14>
 802113c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802113e:	9b02      	ldr	r3, [sp, #8]
 8021140:	9803      	ldr	r0, [sp, #12]
 8021142:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8021144:	4282      	cmp	r2, r0
 8021146:	bfc8      	it	gt
 8021148:	b2c2      	uxtbgt	r2, r0
 802114a:	1e51      	subs	r1, r2, #1
 802114c:	b2c9      	uxtb	r1, r1
 802114e:	3101      	adds	r1, #1
 8021150:	1a80      	subs	r0, r0, r2
 8021152:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8021156:	00a2      	lsls	r2, r4, #2
 8021158:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 802115c:	b2d4      	uxtb	r4, r2
 802115e:	d003      	beq.n	8021168 <_DrawBitmap+0x7e8>
 8021160:	681a      	ldr	r2, [r3, #0]
 8021162:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 8021166:	601a      	str	r2, [r3, #0]
 8021168:	3304      	adds	r3, #4
 802116a:	428b      	cmp	r3, r1
 802116c:	d1f3      	bne.n	8021156 <_DrawBitmap+0x7d6>
 802116e:	2800      	cmp	r0, #0
 8021170:	d0d0      	beq.n	8021114 <_DrawBitmap+0x794>
 8021172:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8021176:	2204      	movs	r2, #4
 8021178:	e7e4      	b.n	8021144 <_DrawBitmap+0x7c4>
 802117a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802117c:	991e      	ldr	r1, [sp, #120]	; 0x78
 802117e:	9b06      	ldr	r3, [sp, #24]
 8021180:	440a      	add	r2, r1
 8021182:	921f      	str	r2, [sp, #124]	; 0x7c
 8021184:	9904      	ldr	r1, [sp, #16]
 8021186:	9a02      	ldr	r2, [sp, #8]
 8021188:	440a      	add	r2, r1
 802118a:	9202      	str	r2, [sp, #8]
 802118c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802118e:	3301      	adds	r3, #1
 8021190:	429a      	cmp	r2, r3
 8021192:	46bb      	mov	fp, r7
 8021194:	9306      	str	r3, [sp, #24]
 8021196:	f73f af33 	bgt.w	8021000 <_DrawBitmap+0x680>
 802119a:	46de      	mov	lr, fp
 802119c:	e4bb      	b.n	8020b16 <_DrawBitmap+0x196>
 802119e:	4b46      	ldr	r3, [pc, #280]	; (80212b8 <_DrawBitmap+0x938>)
 80211a0:	9a03      	ldr	r2, [sp, #12]
 80211a2:	681b      	ldr	r3, [r3, #0]
 80211a4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80211a6:	9802      	ldr	r0, [sp, #8]
 80211a8:	4798      	blx	r3
 80211aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80211ac:	4628      	mov	r0, r5
 80211ae:	e582      	b.n	8020cb6 <_DrawBitmap+0x336>
 80211b0:	9306      	str	r3, [sp, #24]
 80211b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80211b4:	f8df b104 	ldr.w	fp, [pc, #260]	; 80212bc <_DrawBitmap+0x93c>
 80211b8:	9202      	str	r2, [sp, #8]
 80211ba:	f1c3 0308 	rsb	r3, r3, #8
 80211be:	911f      	str	r1, [sp, #124]	; 0x7c
 80211c0:	930a      	str	r3, [sp, #40]	; 0x28
 80211c2:	4b3c      	ldr	r3, [pc, #240]	; (80212b4 <_DrawBitmap+0x934>)
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80211c8:	f7ef fd9a 	bl	8010d00 <GUI_ALLOC_LockH>
 80211cc:	4b39      	ldr	r3, [pc, #228]	; (80212b4 <_DrawBitmap+0x934>)
 80211ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80211d0:	681b      	ldr	r3, [r3, #0]
 80211d2:	7812      	ldrb	r2, [r2, #0]
 80211d4:	7c1b      	ldrb	r3, [r3, #16]
 80211d6:	f81b 4002 	ldrb.w	r4, [fp, r2]
 80211da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80211dc:	900f      	str	r0, [sp, #60]	; 0x3c
 80211de:	f003 0303 	and.w	r3, r3, #3
 80211e2:	2b02      	cmp	r3, #2
 80211e4:	fa44 f402 	asr.w	r4, r4, r2
 80211e8:	d048      	beq.n	802127c <_DrawBitmap+0x8fc>
 80211ea:	2b03      	cmp	r3, #3
 80211ec:	d020      	beq.n	8021230 <_DrawBitmap+0x8b0>
 80211ee:	2b01      	cmp	r3, #1
 80211f0:	d01e      	beq.n	8021230 <_DrawBitmap+0x8b0>
 80211f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80211f4:	9e02      	ldr	r6, [sp, #8]
 80211f6:	9d03      	ldr	r5, [sp, #12]
 80211f8:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80211fa:	42a8      	cmp	r0, r5
 80211fc:	bf28      	it	cs
 80211fe:	4628      	movcs	r0, r5
 8021200:	1a2d      	subs	r5, r5, r0
 8021202:	4602      	mov	r2, r0
 8021204:	4631      	mov	r1, r6
 8021206:	f004 0301 	and.w	r3, r4, #1
 802120a:	3a01      	subs	r2, #1
 802120c:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8021210:	f841 3b04 	str.w	r3, [r1], #4
 8021214:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8021218:	d1f5      	bne.n	8021206 <_DrawBitmap+0x886>
 802121a:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 802121e:	2d00      	cmp	r5, #0
 8021220:	f43f aced 	beq.w	8020bfe <_DrawBitmap+0x27e>
 8021224:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8021228:	2008      	movs	r0, #8
 802122a:	f81b 4003 	ldrb.w	r4, [fp, r3]
 802122e:	e7e4      	b.n	80211fa <_DrawBitmap+0x87a>
 8021230:	6803      	ldr	r3, [r0, #0]
 8021232:	691b      	ldr	r3, [r3, #16]
 8021234:	689b      	ldr	r3, [r3, #8]
 8021236:	4798      	blx	r3
 8021238:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802123a:	9f02      	ldr	r7, [sp, #8]
 802123c:	9e03      	ldr	r6, [sp, #12]
 802123e:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8021242:	42b5      	cmp	r5, r6
 8021244:	bf28      	it	cs
 8021246:	4635      	movcs	r5, r6
 8021248:	1b76      	subs	r6, r6, r5
 802124a:	462a      	mov	r2, r5
 802124c:	463b      	mov	r3, r7
 802124e:	f014 0f01 	tst.w	r4, #1
 8021252:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8021256:	d002      	beq.n	802125e <_DrawBitmap+0x8de>
 8021258:	6819      	ldr	r1, [r3, #0]
 802125a:	4041      	eors	r1, r0
 802125c:	6019      	str	r1, [r3, #0]
 802125e:	3a01      	subs	r2, #1
 8021260:	f103 0304 	add.w	r3, r3, #4
 8021264:	d1f3      	bne.n	802124e <_DrawBitmap+0x8ce>
 8021266:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 802126a:	2e00      	cmp	r6, #0
 802126c:	f43f acc7 	beq.w	8020bfe <_DrawBitmap+0x27e>
 8021270:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8021274:	2508      	movs	r5, #8
 8021276:	f81b 4003 	ldrb.w	r4, [fp, r3]
 802127a:	e7e2      	b.n	8021242 <_DrawBitmap+0x8c2>
 802127c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802127e:	9209      	str	r2, [sp, #36]	; 0x24
 8021280:	9908      	ldr	r1, [sp, #32]
 8021282:	9a06      	ldr	r2, [sp, #24]
 8021284:	f8da 3004 	ldr.w	r3, [sl, #4]
 8021288:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 802128c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802128e:	9e02      	ldr	r6, [sp, #8]
 8021290:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8021294:	9f05      	ldr	r7, [sp, #20]
 8021296:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 802129a:	440a      	add	r2, r1
 802129c:	9207      	str	r2, [sp, #28]
 802129e:	469a      	mov	sl, r3
 80212a0:	454d      	cmp	r5, r9
 80212a2:	bf28      	it	cs
 80212a4:	464d      	movcs	r5, r9
 80212a6:	ebc5 0909 	rsb	r9, r5, r9
 80212aa:	f1b8 0f00 	cmp.w	r8, #0
 80212ae:	d030      	beq.n	8021312 <_DrawBitmap+0x992>
 80212b0:	b974      	cbnz	r4, 80212d0 <_DrawBitmap+0x950>
 80212b2:	e02a      	b.n	802130a <_DrawBitmap+0x98a>
 80212b4:	20000014 	.word	0x20000014
 80212b8:	2000003c 	.word	0x2000003c
 80212bc:	0802760c 	.word	0x0802760c
 80212c0:	3d01      	subs	r5, #1
 80212c2:	f107 0701 	add.w	r7, r7, #1
 80212c6:	f106 0604 	add.w	r6, r6, #4
 80212ca:	d012      	beq.n	80212f2 <_DrawBitmap+0x972>
 80212cc:	0864      	lsrs	r4, r4, #1
 80212ce:	d01c      	beq.n	802130a <_DrawBitmap+0x98a>
 80212d0:	07e1      	lsls	r1, r4, #31
 80212d2:	d5f5      	bpl.n	80212c0 <_DrawBitmap+0x940>
 80212d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80212d8:	9a07      	ldr	r2, [sp, #28]
 80212da:	681b      	ldr	r3, [r3, #0]
 80212dc:	4639      	mov	r1, r7
 80212de:	4640      	mov	r0, r8
 80212e0:	4798      	blx	r3
 80212e2:	3d01      	subs	r5, #1
 80212e4:	f8c6 a000 	str.w	sl, [r6]
 80212e8:	f107 0701 	add.w	r7, r7, #1
 80212ec:	f106 0604 	add.w	r6, r6, #4
 80212f0:	d1ec      	bne.n	80212cc <_DrawBitmap+0x94c>
 80212f2:	f1b9 0f00 	cmp.w	r9, #0
 80212f6:	f43f ac80 	beq.w	8020bfa <_DrawBitmap+0x27a>
 80212fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80212fc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8021300:	9209      	str	r2, [sp, #36]	; 0x24
 8021302:	2508      	movs	r5, #8
 8021304:	f81b 4003 	ldrb.w	r4, [fp, r3]
 8021308:	e7ca      	b.n	80212a0 <_DrawBitmap+0x920>
 802130a:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 802130e:	442f      	add	r7, r5
 8021310:	e7ef      	b.n	80212f2 <_DrawBitmap+0x972>
 8021312:	4653      	mov	r3, sl
 8021314:	b914      	cbnz	r4, 802131c <_DrawBitmap+0x99c>
 8021316:	e00b      	b.n	8021330 <_DrawBitmap+0x9b0>
 8021318:	0864      	lsrs	r4, r4, #1
 802131a:	d008      	beq.n	802132e <_DrawBitmap+0x9ae>
 802131c:	07e2      	lsls	r2, r4, #31
 802131e:	bf48      	it	mi
 8021320:	6033      	strmi	r3, [r6, #0]
 8021322:	3d01      	subs	r5, #1
 8021324:	f106 0604 	add.w	r6, r6, #4
 8021328:	d1f6      	bne.n	8021318 <_DrawBitmap+0x998>
 802132a:	469a      	mov	sl, r3
 802132c:	e7e1      	b.n	80212f2 <_DrawBitmap+0x972>
 802132e:	469a      	mov	sl, r3
 8021330:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8021334:	e7dd      	b.n	80212f2 <_DrawBitmap+0x972>
 8021336:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021338:	9b02      	ldr	r3, [sp, #8]
 802133a:	f812 1b01 	ldrb.w	r1, [r2], #1
 802133e:	b101      	cbz	r1, 8021342 <_DrawBitmap+0x9c2>
 8021340:	6019      	str	r1, [r3, #0]
 8021342:	42a2      	cmp	r2, r4
 8021344:	f103 0304 	add.w	r3, r3, #4
 8021348:	d1f7      	bne.n	802133a <_DrawBitmap+0x9ba>
 802134a:	e4b3      	b.n	8020cb4 <_DrawBitmap+0x334>
 802134c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802134e:	2800      	cmp	r0, #0
 8021350:	f47f abb0 	bne.w	8020ab4 <_DrawBitmap+0x134>
 8021354:	f7ff bb1e 	b.w	8020994 <_DrawBitmap+0x14>

08021358 <_GetPixelIndex>:
 8021358:	b5f0      	push	{r4, r5, r6, r7, lr}
 802135a:	4b0e      	ldr	r3, [pc, #56]	; (8021394 <_GetPixelIndex+0x3c>)
 802135c:	681b      	ldr	r3, [r3, #0]
 802135e:	b083      	sub	sp, #12
 8021360:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8021362:	460e      	mov	r6, r1
 8021364:	4617      	mov	r7, r2
 8021366:	f7ef fccb 	bl	8010d00 <GUI_ALLOC_LockH>
 802136a:	4605      	mov	r5, r0
 802136c:	a802      	add	r0, sp, #8
 802136e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8021372:	68eb      	ldr	r3, [r5, #12]
 8021374:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 8021378:	f840 5d04 	str.w	r5, [r0, #-4]!
 802137c:	1abf      	subs	r7, r7, r2
 802137e:	fb03 f307 	mul.w	r3, r3, r7
 8021382:	3318      	adds	r3, #24
 8021384:	1b34      	subs	r4, r6, r4
 8021386:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802138a:	f7ef fccb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802138e:	5928      	ldr	r0, [r5, r4]
 8021390:	b003      	add	sp, #12
 8021392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021394:	20000014 	.word	0x20000014

08021398 <_SetPixelIndex>:
 8021398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802139c:	4c1b      	ldr	r4, [pc, #108]	; (802140c <_SetPixelIndex+0x74>)
 802139e:	6820      	ldr	r0, [r4, #0]
 80213a0:	b083      	sub	sp, #12
 80213a2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80213a4:	460f      	mov	r7, r1
 80213a6:	4690      	mov	r8, r2
 80213a8:	4699      	mov	r9, r3
 80213aa:	f7ef fca9 	bl	8010d00 <GUI_ALLOC_LockH>
 80213ae:	6823      	ldr	r3, [r4, #0]
 80213b0:	9000      	str	r0, [sp, #0]
 80213b2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80213b4:	f7ef fca4 	bl	8010d00 <GUI_ALLOC_LockH>
 80213b8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80213bc:	68c1      	ldr	r1, [r0, #12]
 80213be:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80213c2:	ae02      	add	r6, sp, #8
 80213c4:	ebc2 0208 	rsb	r2, r2, r8
 80213c8:	fb01 f202 	mul.w	r2, r1, r2
 80213cc:	f846 0d04 	str.w	r0, [r6, #-4]!
 80213d0:	3218      	adds	r2, #24
 80213d2:	1b3c      	subs	r4, r7, r4
 80213d4:	4605      	mov	r5, r0
 80213d6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80213da:	4630      	mov	r0, r6
 80213dc:	f7ef fca2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80213e0:	f845 9004 	str.w	r9, [r5, r4]
 80213e4:	9b00      	ldr	r3, [sp, #0]
 80213e6:	6958      	ldr	r0, [r3, #20]
 80213e8:	b150      	cbz	r0, 8021400 <_SetPixelIndex+0x68>
 80213ea:	f7ef fc89 	bl	8010d00 <GUI_ALLOC_LockH>
 80213ee:	9001      	str	r0, [sp, #4]
 80213f0:	6883      	ldr	r3, [r0, #8]
 80213f2:	4642      	mov	r2, r8
 80213f4:	4639      	mov	r1, r7
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	4798      	blx	r3
 80213fa:	4630      	mov	r0, r6
 80213fc:	f7ef fc92 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021400:	4668      	mov	r0, sp
 8021402:	f7ef fc8f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021406:	b003      	add	sp, #12
 8021408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802140c:	20000014 	.word	0x20000014

08021410 <_XorPixel>:
 8021410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021414:	4c1e      	ldr	r4, [pc, #120]	; (8021490 <_XorPixel+0x80>)
 8021416:	6823      	ldr	r3, [r4, #0]
 8021418:	b082      	sub	sp, #8
 802141a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 802141c:	460f      	mov	r7, r1
 802141e:	4690      	mov	r8, r2
 8021420:	f7ef fc6e 	bl	8010d00 <GUI_ALLOC_LockH>
 8021424:	6823      	ldr	r3, [r4, #0]
 8021426:	9000      	str	r0, [sp, #0]
 8021428:	6e18      	ldr	r0, [r3, #96]	; 0x60
 802142a:	f7ef fc69 	bl	8010d00 <GUI_ALLOC_LockH>
 802142e:	ae02      	add	r6, sp, #8
 8021430:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8021434:	68c2      	ldr	r2, [r0, #12]
 8021436:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 802143a:	f846 0d04 	str.w	r0, [r6, #-4]!
 802143e:	ebc3 0308 	rsb	r3, r3, r8
 8021442:	fb02 f303 	mul.w	r3, r2, r3
 8021446:	4605      	mov	r5, r0
 8021448:	3318      	adds	r3, #24
 802144a:	1b3c      	subs	r4, r7, r4
 802144c:	4630      	mov	r0, r6
 802144e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8021452:	f7ef fc67 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021456:	9b00      	ldr	r3, [sp, #0]
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	691b      	ldr	r3, [r3, #16]
 802145c:	689b      	ldr	r3, [r3, #8]
 802145e:	4798      	blx	r3
 8021460:	592b      	ldr	r3, [r5, r4]
 8021462:	9a00      	ldr	r2, [sp, #0]
 8021464:	4058      	eors	r0, r3
 8021466:	5128      	str	r0, [r5, r4]
 8021468:	6950      	ldr	r0, [r2, #20]
 802146a:	b150      	cbz	r0, 8021482 <_XorPixel+0x72>
 802146c:	f7ef fc48 	bl	8010d00 <GUI_ALLOC_LockH>
 8021470:	9001      	str	r0, [sp, #4]
 8021472:	6883      	ldr	r3, [r0, #8]
 8021474:	4642      	mov	r2, r8
 8021476:	4639      	mov	r1, r7
 8021478:	681b      	ldr	r3, [r3, #0]
 802147a:	4798      	blx	r3
 802147c:	4630      	mov	r0, r6
 802147e:	f7ef fc51 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021482:	4668      	mov	r0, sp
 8021484:	f7ef fc4e 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021488:	b002      	add	sp, #8
 802148a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802148e:	bf00      	nop
 8021490:	20000014 	.word	0x20000014

08021494 <_FillRect>:
 8021494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021498:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8021580 <_FillRect+0xec>
 802149c:	f8d8 0000 	ldr.w	r0, [r8]
 80214a0:	b087      	sub	sp, #28
 80214a2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80214a4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80214a8:	468a      	mov	sl, r1
 80214aa:	4616      	mov	r6, r2
 80214ac:	461f      	mov	r7, r3
 80214ae:	f7ef fc27 	bl	8010d00 <GUI_ALLOC_LockH>
 80214b2:	f8d8 3000 	ldr.w	r3, [r8]
 80214b6:	9004      	str	r0, [sp, #16]
 80214b8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80214ba:	f7ef fc21 	bl	8010d00 <GUI_ALLOC_LockH>
 80214be:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80214c2:	68c3      	ldr	r3, [r0, #12]
 80214c4:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 80214c8:	f8cd a00c 	str.w	sl, [sp, #12]
 80214cc:	f10d 0b18 	add.w	fp, sp, #24
 80214d0:	1ab2      	subs	r2, r6, r2
 80214d2:	fb03 f202 	mul.w	r2, r3, r2
 80214d6:	f84b 0d04 	str.w	r0, [fp, #-4]!
 80214da:	4653      	mov	r3, sl
 80214dc:	1b5d      	subs	r5, r3, r5
 80214de:	f102 0118 	add.w	r1, r2, #24
 80214e2:	4604      	mov	r4, r0
 80214e4:	eb01 0285 	add.w	r2, r1, r5, lsl #2
 80214e8:	4658      	mov	r0, fp
 80214ea:	18a5      	adds	r5, r4, r2
 80214ec:	f7ef fc1a 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80214f0:	9b04      	ldr	r3, [sp, #16]
 80214f2:	f8d8 2000 	ldr.w	r2, [r8]
 80214f6:	6958      	ldr	r0, [r3, #20]
 80214f8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80214fc:	9b03      	ldr	r3, [sp, #12]
 80214fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8021500:	1aff      	subs	r7, r7, r3
 8021502:	6814      	ldr	r4, [r2, #0]
 8021504:	3701      	adds	r7, #1
 8021506:	bb58      	cbnz	r0, 8021560 <_FillRect+0xcc>
 8021508:	454e      	cmp	r6, r9
 802150a:	dc10      	bgt.n	802152e <_FillRect+0x9a>
 802150c:	f8d8 3000 	ldr.w	r3, [r8]
 8021510:	7c1b      	ldrb	r3, [r3, #16]
 8021512:	07db      	lsls	r3, r3, #31
 8021514:	d411      	bmi.n	802153a <_FillRect+0xa6>
 8021516:	2f00      	cmp	r7, #0
 8021518:	dd05      	ble.n	8021526 <_FillRect+0x92>
 802151a:	463b      	mov	r3, r7
 802151c:	462a      	mov	r2, r5
 802151e:	3b01      	subs	r3, #1
 8021520:	f842 4b04 	str.w	r4, [r2], #4
 8021524:	d1fb      	bne.n	802151e <_FillRect+0x8a>
 8021526:	3601      	adds	r6, #1
 8021528:	45b1      	cmp	r9, r6
 802152a:	4455      	add	r5, sl
 802152c:	daee      	bge.n	802150c <_FillRect+0x78>
 802152e:	a804      	add	r0, sp, #16
 8021530:	f7ef fbf8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021534:	b007      	add	sp, #28
 8021536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802153a:	9b04      	ldr	r3, [sp, #16]
 802153c:	681b      	ldr	r3, [r3, #0]
 802153e:	691b      	ldr	r3, [r3, #16]
 8021540:	689b      	ldr	r3, [r3, #8]
 8021542:	4798      	blx	r3
 8021544:	4629      	mov	r1, r5
 8021546:	463a      	mov	r2, r7
 8021548:	680b      	ldr	r3, [r1, #0]
 802154a:	3a01      	subs	r2, #1
 802154c:	ea83 0300 	eor.w	r3, r3, r0
 8021550:	f841 3b04 	str.w	r3, [r1], #4
 8021554:	d1f8      	bne.n	8021548 <_FillRect+0xb4>
 8021556:	3601      	adds	r6, #1
 8021558:	45b1      	cmp	r9, r6
 802155a:	4455      	add	r5, sl
 802155c:	dad6      	bge.n	802150c <_FillRect+0x78>
 802155e:	e7e6      	b.n	802152e <_FillRect+0x9a>
 8021560:	f7ef fbce 	bl	8010d00 <GUI_ALLOC_LockH>
 8021564:	ebc6 0309 	rsb	r3, r6, r9
 8021568:	3301      	adds	r3, #1
 802156a:	9300      	str	r3, [sp, #0]
 802156c:	9903      	ldr	r1, [sp, #12]
 802156e:	9005      	str	r0, [sp, #20]
 8021570:	463b      	mov	r3, r7
 8021572:	4632      	mov	r2, r6
 8021574:	f7f6 fc82 	bl	8017e7c <GUI_USAGE_AddRect>
 8021578:	4658      	mov	r0, fp
 802157a:	f7ef fbd3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802157e:	e7c3      	b.n	8021508 <_FillRect+0x74>
 8021580:	20000014 	.word	0x20000014

08021584 <_DrawHLine>:
 8021584:	b500      	push	{lr}
 8021586:	b083      	sub	sp, #12
 8021588:	9200      	str	r2, [sp, #0]
 802158a:	f7ff ff83 	bl	8021494 <_FillRect>
 802158e:	b003      	add	sp, #12
 8021590:	f85d fb04 	ldr.w	pc, [sp], #4

08021594 <_DrawVLine>:
 8021594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021598:	4f35      	ldr	r7, [pc, #212]	; (8021670 <_DrawVLine+0xdc>)
 802159a:	6838      	ldr	r0, [r7, #0]
 802159c:	b085      	sub	sp, #20
 802159e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80215a0:	4689      	mov	r9, r1
 80215a2:	4615      	mov	r5, r2
 80215a4:	461e      	mov	r6, r3
 80215a6:	f7ef fbab 	bl	8010d00 <GUI_ALLOC_LockH>
 80215aa:	9001      	str	r0, [sp, #4]
 80215ac:	6940      	ldr	r0, [r0, #20]
 80215ae:	2800      	cmp	r0, #0
 80215b0:	d13b      	bne.n	802162a <_DrawVLine+0x96>
 80215b2:	683b      	ldr	r3, [r7, #0]
 80215b4:	9002      	str	r0, [sp, #8]
 80215b6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80215b8:	f7ef fba2 	bl	8010d00 <GUI_ALLOC_LockH>
 80215bc:	4602      	mov	r2, r0
 80215be:	a804      	add	r0, sp, #16
 80215c0:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 80215c4:	68d3      	ldr	r3, [r2, #12]
 80215c6:	f840 2d04 	str.w	r2, [r0, #-4]!
 80215ca:	1b2c      	subs	r4, r5, r4
 80215cc:	fb03 f304 	mul.w	r3, r3, r4
 80215d0:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80215d4:	3318      	adds	r3, #24
 80215d6:	ebc4 0409 	rsb	r4, r4, r9
 80215da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80215de:	18d4      	adds	r4, r2, r3
 80215e0:	f7ef fba0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80215e4:	683b      	ldr	r3, [r7, #0]
 80215e6:	9901      	ldr	r1, [sp, #4]
 80215e8:	7c1a      	ldrb	r2, [r3, #16]
 80215ea:	07d2      	lsls	r2, r2, #31
 80215ec:	d420      	bmi.n	8021630 <_DrawVLine+0x9c>
 80215ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80215f0:	9802      	ldr	r0, [sp, #8]
 80215f2:	f8d3 8000 	ldr.w	r8, [r3]
 80215f6:	68cf      	ldr	r7, [r1, #12]
 80215f8:	b908      	cbnz	r0, 80215fe <_DrawVLine+0x6a>
 80215fa:	e030      	b.n	802165e <_DrawVLine+0xca>
 80215fc:	9802      	ldr	r0, [sp, #8]
 80215fe:	6883      	ldr	r3, [r0, #8]
 8021600:	462a      	mov	r2, r5
 8021602:	681b      	ldr	r3, [r3, #0]
 8021604:	4649      	mov	r1, r9
 8021606:	3501      	adds	r5, #1
 8021608:	4798      	blx	r3
 802160a:	42ae      	cmp	r6, r5
 802160c:	f8c4 8000 	str.w	r8, [r4]
 8021610:	443c      	add	r4, r7
 8021612:	daf3      	bge.n	80215fc <_DrawVLine+0x68>
 8021614:	a801      	add	r0, sp, #4
 8021616:	f7ef fb85 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802161a:	9b02      	ldr	r3, [sp, #8]
 802161c:	b113      	cbz	r3, 8021624 <_DrawVLine+0x90>
 802161e:	a802      	add	r0, sp, #8
 8021620:	f7ef fb80 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021624:	b005      	add	sp, #20
 8021626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802162a:	f7ef fb69 	bl	8010d00 <GUI_ALLOC_LockH>
 802162e:	e7c0      	b.n	80215b2 <_DrawVLine+0x1e>
 8021630:	680b      	ldr	r3, [r1, #0]
 8021632:	691b      	ldr	r3, [r3, #16]
 8021634:	689b      	ldr	r3, [r3, #8]
 8021636:	4798      	blx	r3
 8021638:	4607      	mov	r7, r0
 802163a:	9b02      	ldr	r3, [sp, #8]
 802163c:	462a      	mov	r2, r5
 802163e:	4649      	mov	r1, r9
 8021640:	3501      	adds	r5, #1
 8021642:	4618      	mov	r0, r3
 8021644:	b113      	cbz	r3, 802164c <_DrawVLine+0xb8>
 8021646:	689b      	ldr	r3, [r3, #8]
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	4798      	blx	r3
 802164c:	9a01      	ldr	r2, [sp, #4]
 802164e:	6823      	ldr	r3, [r4, #0]
 8021650:	68d2      	ldr	r2, [r2, #12]
 8021652:	407b      	eors	r3, r7
 8021654:	42b5      	cmp	r5, r6
 8021656:	6023      	str	r3, [r4, #0]
 8021658:	4414      	add	r4, r2
 802165a:	ddee      	ble.n	802163a <_DrawVLine+0xa6>
 802165c:	e7da      	b.n	8021614 <_DrawVLine+0x80>
 802165e:	1b73      	subs	r3, r6, r5
 8021660:	3301      	adds	r3, #1
 8021662:	3b01      	subs	r3, #1
 8021664:	f8c4 8000 	str.w	r8, [r4]
 8021668:	443c      	add	r4, r7
 802166a:	d1fa      	bne.n	8021662 <_DrawVLine+0xce>
 802166c:	e7d2      	b.n	8021614 <_DrawVLine+0x80>
 802166e:	bf00      	nop
 8021670:	20000014 	.word	0x20000014

08021674 <GUI_MEMDEV_Draw>:
 8021674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021678:	b087      	sub	sp, #28
 802167a:	4606      	mov	r6, r0
 802167c:	4692      	mov	sl, r2
 802167e:	461c      	mov	r4, r3
 8021680:	4689      	mov	r9, r1
 8021682:	f7f1 fb25 	bl	8012cd0 <GUI_Lock>
 8021686:	4b56      	ldr	r3, [pc, #344]	; (80217e0 <GUI_MEMDEV_Draw+0x16c>)
 8021688:	681a      	ldr	r2, [r3, #0]
 802168a:	4b56      	ldr	r3, [pc, #344]	; (80217e4 <GUI_MEMDEV_Draw+0x170>)
 802168c:	7c57      	ldrb	r7, [r2, #17]
 802168e:	57db      	ldrsb	r3, [r3, r7]
 8021690:	2b01      	cmp	r3, #1
 8021692:	4638      	mov	r0, r7
 8021694:	f340 8097 	ble.w	80217c6 <GUI_MEMDEV_Draw+0x152>
 8021698:	f7f3 fbac 	bl	8014df4 <LCD_GetXSizeEx>
 802169c:	4605      	mov	r5, r0
 802169e:	4638      	mov	r0, r7
 80216a0:	f7f3 fbb8 	bl	8014e14 <LCD_GetYSizeEx>
 80216a4:	4607      	mov	r7, r0
 80216a6:	2e00      	cmp	r6, #0
 80216a8:	f000 808a 	beq.w	80217c0 <GUI_MEMDEV_Draw+0x14c>
 80216ac:	a905      	add	r1, sp, #20
 80216ae:	a804      	add	r0, sp, #16
 80216b0:	f7ef ff30 	bl	8011514 <GUI_GetOrg>
 80216b4:	9a04      	ldr	r2, [sp, #16]
 80216b6:	9b05      	ldr	r3, [sp, #20]
 80216b8:	f9b6 c000 	ldrsh.w	ip, [r6]
 80216bc:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80216c0:	f9b6 e004 	ldrsh.w	lr, [r6, #4]
 80216c4:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80216c8:	4415      	add	r5, r2
 80216ca:	441f      	add	r7, r3
 80216cc:	3d01      	subs	r5, #1
 80216ce:	ea2c 73ec 	bic.w	r3, ip, ip, asr #31
 80216d2:	3f01      	subs	r7, #1
 80216d4:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 80216d8:	9302      	str	r3, [sp, #8]
 80216da:	9203      	str	r2, [sp, #12]
 80216dc:	4575      	cmp	r5, lr
 80216de:	bfd4      	ite	le
 80216e0:	ebc3 0305 	rsble	r3, r3, r5
 80216e4:	ebc3 030e 	rsbgt	r3, r3, lr
 80216e8:	428f      	cmp	r7, r1
 80216ea:	bfd4      	ite	le
 80216ec:	ebc2 0207 	rsble	r2, r2, r7
 80216f0:	ebc2 0201 	rsbgt	r2, r2, r1
 80216f4:	461d      	mov	r5, r3
 80216f6:	4617      	mov	r7, r2
 80216f8:	3501      	adds	r5, #1
 80216fa:	3701      	adds	r7, #1
 80216fc:	b904      	cbnz	r4, 8021700 <GUI_MEMDEV_Draw+0x8c>
 80216fe:	427c      	negs	r4, r7
 8021700:	2d00      	cmp	r5, #0
 8021702:	dd4f      	ble.n	80217a4 <GUI_MEMDEV_Draw+0x130>
 8021704:	2f00      	cmp	r7, #0
 8021706:	dd4d      	ble.n	80217a4 <GUI_MEMDEV_Draw+0x130>
 8021708:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802170a:	9300      	str	r3, [sp, #0]
 802170c:	462a      	mov	r2, r5
 802170e:	4623      	mov	r3, r4
 8021710:	9903      	ldr	r1, [sp, #12]
 8021712:	9802      	ldr	r0, [sp, #8]
 8021714:	f7ff f87e 	bl	8020814 <GUI_MEMDEV_CreateEx>
 8021718:	4680      	mov	r8, r0
 802171a:	2800      	cmp	r0, #0
 802171c:	d048      	beq.n	80217b0 <GUI_MEMDEV_Draw+0x13c>
 802171e:	f000 f8a9 	bl	8021874 <GUI_MEMDEV_GetYSize>
 8021722:	4287      	cmp	r7, r0
 8021724:	4606      	mov	r6, r0
 8021726:	d004      	beq.n	8021732 <GUI_MEMDEV_Draw+0xbe>
 8021728:	4b2d      	ldr	r3, [pc, #180]	; (80217e0 <GUI_MEMDEV_Draw+0x16c>)
 802172a:	681b      	ldr	r3, [r3, #0]
 802172c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 802172e:	2800      	cmp	r0, #0
 8021730:	d151      	bne.n	80217d6 <GUI_MEMDEV_Draw+0x162>
 8021732:	4640      	mov	r0, r8
 8021734:	f7ff f8b6 	bl	80208a4 <GUI_MEMDEV_Select>
 8021738:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80217e8 <GUI_MEMDEV_Draw+0x174>
 802173c:	463d      	mov	r5, r7
 802173e:	2400      	movs	r4, #0
 8021740:	e00e      	b.n	8021760 <GUI_MEMDEV_Draw+0xec>
 8021742:	1bad      	subs	r5, r5, r6
 8021744:	b9ac      	cbnz	r4, 8021772 <GUI_MEMDEV_Draw+0xfe>
 8021746:	4650      	mov	r0, sl
 8021748:	47c8      	blx	r9
 802174a:	f8db 3000 	ldr.w	r3, [fp]
 802174e:	4434      	add	r4, r6
 8021750:	2000      	movs	r0, #0
 8021752:	b103      	cbz	r3, 8021756 <GUI_MEMDEV_Draw+0xe2>
 8021754:	4798      	blx	r3
 8021756:	4640      	mov	r0, r8
 8021758:	f7ff f8d4 	bl	8020904 <GUI_MEMDEV_CopyToLCD>
 802175c:	42a7      	cmp	r7, r4
 802175e:	dd12      	ble.n	8021786 <GUI_MEMDEV_Draw+0x112>
 8021760:	42ae      	cmp	r6, r5
 8021762:	ddee      	ble.n	8021742 <GUI_MEMDEV_Draw+0xce>
 8021764:	4629      	mov	r1, r5
 8021766:	4640      	mov	r0, r8
 8021768:	f000 f8a6 	bl	80218b8 <GUI_MEMDEV_ReduceYSize>
 802176c:	1bad      	subs	r5, r5, r6
 802176e:	2c00      	cmp	r4, #0
 8021770:	d0e9      	beq.n	8021746 <GUI_MEMDEV_Draw+0xd2>
 8021772:	9b03      	ldr	r3, [sp, #12]
 8021774:	9902      	ldr	r1, [sp, #8]
 8021776:	4640      	mov	r0, r8
 8021778:	191a      	adds	r2, r3, r4
 802177a:	f000 f8bd 	bl	80218f8 <GUI_MEMDEV_SetOrg>
 802177e:	4640      	mov	r0, r8
 8021780:	f000 f834 	bl	80217ec <GUI_MEMDEV_Clear>
 8021784:	e7df      	b.n	8021746 <GUI_MEMDEV_Draw+0xd2>
 8021786:	4640      	mov	r0, r8
 8021788:	f7ff f81a 	bl	80207c0 <GUI_MEMDEV_Delete>
 802178c:	2000      	movs	r0, #0
 802178e:	f7ff f889 	bl	80208a4 <GUI_MEMDEV_Select>
 8021792:	42b7      	cmp	r7, r6
 8021794:	d006      	beq.n	80217a4 <GUI_MEMDEV_Draw+0x130>
 8021796:	4b12      	ldr	r3, [pc, #72]	; (80217e0 <GUI_MEMDEV_Draw+0x16c>)
 8021798:	681b      	ldr	r3, [r3, #0]
 802179a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 802179c:	b110      	cbz	r0, 80217a4 <GUI_MEMDEV_Draw+0x130>
 802179e:	2133      	movs	r1, #51	; 0x33
 80217a0:	f7fb f878 	bl	801c894 <WM__SendMessageNoPara>
 80217a4:	f7f1 fa8a 	bl	8012cbc <GUI_Unlock>
 80217a8:	2000      	movs	r0, #0
 80217aa:	b007      	add	sp, #28
 80217ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217b0:	4650      	mov	r0, sl
 80217b2:	47c8      	blx	r9
 80217b4:	f7f1 fa82 	bl	8012cbc <GUI_Unlock>
 80217b8:	2001      	movs	r0, #1
 80217ba:	b007      	add	sp, #28
 80217bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217c0:	9603      	str	r6, [sp, #12]
 80217c2:	9602      	str	r6, [sp, #8]
 80217c4:	e79a      	b.n	80216fc <GUI_MEMDEV_Draw+0x88>
 80217c6:	f7f3 fb35 	bl	8014e34 <LCD_GetVXSizeEx>
 80217ca:	4605      	mov	r5, r0
 80217cc:	4638      	mov	r0, r7
 80217ce:	f7f3 fb41 	bl	8014e54 <LCD_GetVYSizeEx>
 80217d2:	4607      	mov	r7, r0
 80217d4:	e767      	b.n	80216a6 <GUI_MEMDEV_Draw+0x32>
 80217d6:	2132      	movs	r1, #50	; 0x32
 80217d8:	f7fb f85c 	bl	801c894 <WM__SendMessageNoPara>
 80217dc:	e7a9      	b.n	8021732 <GUI_MEMDEV_Draw+0xbe>
 80217de:	bf00      	nop
 80217e0:	20000014 	.word	0x20000014
 80217e4:	20035e14 	.word	0x20035e14
 80217e8:	2000091c 	.word	0x2000091c

080217ec <GUI_MEMDEV_Clear>:
 80217ec:	b510      	push	{r4, lr}
 80217ee:	b082      	sub	sp, #8
 80217f0:	b928      	cbnz	r0, 80217fe <GUI_MEMDEV_Clear+0x12>
 80217f2:	4b13      	ldr	r3, [pc, #76]	; (8021840 <GUI_MEMDEV_Clear+0x54>)
 80217f4:	681b      	ldr	r3, [r3, #0]
 80217f6:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80217f8:	b914      	cbnz	r4, 8021800 <GUI_MEMDEV_Clear+0x14>
 80217fa:	b002      	add	sp, #8
 80217fc:	bd10      	pop	{r4, pc}
 80217fe:	4604      	mov	r4, r0
 8021800:	f7f1 fa66 	bl	8012cd0 <GUI_Lock>
 8021804:	4620      	mov	r0, r4
 8021806:	f7ef fa7b 	bl	8010d00 <GUI_ALLOC_LockH>
 802180a:	ab02      	add	r3, sp, #8
 802180c:	6944      	ldr	r4, [r0, #20]
 802180e:	f843 0d08 	str.w	r0, [r3, #-8]!
 8021812:	4618      	mov	r0, r3
 8021814:	f7ef fa86 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021818:	b91c      	cbnz	r4, 8021822 <GUI_MEMDEV_Clear+0x36>
 802181a:	f7f1 fa4f 	bl	8012cbc <GUI_Unlock>
 802181e:	b002      	add	sp, #8
 8021820:	bd10      	pop	{r4, pc}
 8021822:	4620      	mov	r0, r4
 8021824:	f7ef fa6c 	bl	8010d00 <GUI_ALLOC_LockH>
 8021828:	ac02      	add	r4, sp, #8
 802182a:	6882      	ldr	r2, [r0, #8]
 802182c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8021830:	6893      	ldr	r3, [r2, #8]
 8021832:	4798      	blx	r3
 8021834:	4620      	mov	r0, r4
 8021836:	f7ef fa75 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802183a:	f7f1 fa3f 	bl	8012cbc <GUI_Unlock>
 802183e:	e7ee      	b.n	802181e <GUI_MEMDEV_Clear+0x32>
 8021840:	20000014 	.word	0x20000014

08021844 <GUI_MEMDEV_GetDataPtr>:
 8021844:	b1a0      	cbz	r0, 8021870 <GUI_MEMDEV_GetDataPtr+0x2c>
 8021846:	b510      	push	{r4, lr}
 8021848:	4604      	mov	r4, r0
 802184a:	b082      	sub	sp, #8
 802184c:	f7f1 fa40 	bl	8012cd0 <GUI_Lock>
 8021850:	4620      	mov	r0, r4
 8021852:	f7ef fa55 	bl	8010d00 <GUI_ALLOC_LockH>
 8021856:	ab02      	add	r3, sp, #8
 8021858:	f100 0418 	add.w	r4, r0, #24
 802185c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8021860:	4618      	mov	r0, r3
 8021862:	f7ef fa5f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021866:	f7f1 fa29 	bl	8012cbc <GUI_Unlock>
 802186a:	4620      	mov	r0, r4
 802186c:	b002      	add	sp, #8
 802186e:	bd10      	pop	{r4, pc}
 8021870:	4770      	bx	lr
 8021872:	bf00      	nop

08021874 <GUI_MEMDEV_GetYSize>:
 8021874:	b510      	push	{r4, lr}
 8021876:	4604      	mov	r4, r0
 8021878:	b082      	sub	sp, #8
 802187a:	f7f1 fa29 	bl	8012cd0 <GUI_Lock>
 802187e:	b17c      	cbz	r4, 80218a0 <GUI_MEMDEV_GetYSize+0x2c>
 8021880:	4620      	mov	r0, r4
 8021882:	f7ef fa3d 	bl	8010d00 <GUI_ALLOC_LockH>
 8021886:	ab02      	add	r3, sp, #8
 8021888:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 802188c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8021890:	4618      	mov	r0, r3
 8021892:	f7ef fa47 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021896:	f7f1 fa11 	bl	8012cbc <GUI_Unlock>
 802189a:	4620      	mov	r0, r4
 802189c:	b002      	add	sp, #8
 802189e:	bd10      	pop	{r4, pc}
 80218a0:	4b04      	ldr	r3, [pc, #16]	; (80218b4 <GUI_MEMDEV_GetYSize+0x40>)
 80218a2:	681b      	ldr	r3, [r3, #0]
 80218a4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80218a6:	2c00      	cmp	r4, #0
 80218a8:	d1ea      	bne.n	8021880 <GUI_MEMDEV_GetYSize+0xc>
 80218aa:	f7f1 fa07 	bl	8012cbc <GUI_Unlock>
 80218ae:	4620      	mov	r0, r4
 80218b0:	b002      	add	sp, #8
 80218b2:	bd10      	pop	{r4, pc}
 80218b4:	20000014 	.word	0x20000014

080218b8 <GUI_MEMDEV_ReduceYSize>:
 80218b8:	b530      	push	{r4, r5, lr}
 80218ba:	460d      	mov	r5, r1
 80218bc:	b083      	sub	sp, #12
 80218be:	b928      	cbnz	r0, 80218cc <GUI_MEMDEV_ReduceYSize+0x14>
 80218c0:	4b0c      	ldr	r3, [pc, #48]	; (80218f4 <GUI_MEMDEV_ReduceYSize+0x3c>)
 80218c2:	681b      	ldr	r3, [r3, #0]
 80218c4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80218c6:	b914      	cbnz	r4, 80218ce <GUI_MEMDEV_ReduceYSize+0x16>
 80218c8:	b003      	add	sp, #12
 80218ca:	bd30      	pop	{r4, r5, pc}
 80218cc:	4604      	mov	r4, r0
 80218ce:	f7f1 f9ff 	bl	8012cd0 <GUI_Lock>
 80218d2:	4620      	mov	r0, r4
 80218d4:	f7ef fa14 	bl	8010d00 <GUI_ALLOC_LockH>
 80218d8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80218dc:	9001      	str	r0, [sp, #4]
 80218de:	42ab      	cmp	r3, r5
 80218e0:	bfc8      	it	gt
 80218e2:	8145      	strhgt	r5, [r0, #10]
 80218e4:	a801      	add	r0, sp, #4
 80218e6:	f7ef fa1d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80218ea:	f7f1 f9e7 	bl	8012cbc <GUI_Unlock>
 80218ee:	b003      	add	sp, #12
 80218f0:	bd30      	pop	{r4, r5, pc}
 80218f2:	bf00      	nop
 80218f4:	20000014 	.word	0x20000014

080218f8 <GUI_MEMDEV_SetOrg>:
 80218f8:	b570      	push	{r4, r5, r6, lr}
 80218fa:	460d      	mov	r5, r1
 80218fc:	b082      	sub	sp, #8
 80218fe:	4616      	mov	r6, r2
 8021900:	b928      	cbnz	r0, 802190e <GUI_MEMDEV_SetOrg+0x16>
 8021902:	4b1a      	ldr	r3, [pc, #104]	; (802196c <GUI_MEMDEV_SetOrg+0x74>)
 8021904:	681b      	ldr	r3, [r3, #0]
 8021906:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8021908:	b914      	cbnz	r4, 8021910 <GUI_MEMDEV_SetOrg+0x18>
 802190a:	b002      	add	sp, #8
 802190c:	bd70      	pop	{r4, r5, r6, pc}
 802190e:	4604      	mov	r4, r0
 8021910:	f7f1 f9de 	bl	8012cd0 <GUI_Lock>
 8021914:	4620      	mov	r0, r4
 8021916:	f7ef f9f3 	bl	8010d00 <GUI_ALLOC_LockH>
 802191a:	b236      	sxth	r6, r6
 802191c:	b22d      	sxth	r5, r5
 802191e:	80c6      	strh	r6, [r0, #6]
 8021920:	8085      	strh	r5, [r0, #4]
 8021922:	9000      	str	r0, [sp, #0]
 8021924:	f7f3 f81c 	bl	8014960 <LCD_SetClipRectMax>
 8021928:	9b00      	ldr	r3, [sp, #0]
 802192a:	6958      	ldr	r0, [r3, #20]
 802192c:	b930      	cbnz	r0, 802193c <GUI_MEMDEV_SetOrg+0x44>
 802192e:	4668      	mov	r0, sp
 8021930:	f7ef f9f8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021934:	f7f1 f9c2 	bl	8012cbc <GUI_Unlock>
 8021938:	b002      	add	sp, #8
 802193a:	bd70      	pop	{r4, r5, r6, pc}
 802193c:	f7ef f9e0 	bl	8010d00 <GUI_ALLOC_LockH>
 8021940:	9a00      	ldr	r2, [sp, #0]
 8021942:	9001      	str	r0, [sp, #4]
 8021944:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8021948:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 802194c:	80c2      	strh	r2, [r0, #6]
 802194e:	8083      	strh	r3, [r0, #4]
 8021950:	b113      	cbz	r3, 8021958 <GUI_MEMDEV_SetOrg+0x60>
 8021952:	b10a      	cbz	r2, 8021958 <GUI_MEMDEV_SetOrg+0x60>
 8021954:	8005      	strh	r5, [r0, #0]
 8021956:	8046      	strh	r6, [r0, #2]
 8021958:	a801      	add	r0, sp, #4
 802195a:	f7ef f9e3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802195e:	4668      	mov	r0, sp
 8021960:	f7ef f9e0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021964:	f7f1 f9aa 	bl	8012cbc <GUI_Unlock>
 8021968:	e7e6      	b.n	8021938 <GUI_MEMDEV_SetOrg+0x40>
 802196a:	bf00      	nop
 802196c:	20000014 	.word	0x20000014

08021970 <GUI_MEMDEV_Paint1Static>:
 8021970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021974:	f8df b188 	ldr.w	fp, [pc, #392]	; 8021b00 <GUI_MEMDEV_Paint1Static+0x190>
 8021978:	b089      	sub	sp, #36	; 0x24
 802197a:	4606      	mov	r6, r0
 802197c:	2705      	movs	r7, #5
 802197e:	4630      	mov	r0, r6
 8021980:	f7ef f9be 	bl	8010d00 <GUI_ALLOC_LockH>
 8021984:	4603      	mov	r3, r0
 8021986:	a807      	add	r0, sp, #28
 8021988:	f9b3 8000 	ldrsh.w	r8, [r3]
 802198c:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8021990:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 8021994:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8021998:	9307      	str	r3, [sp, #28]
 802199a:	ebc8 0404 	rsb	r4, r8, r4
 802199e:	3401      	adds	r4, #1
 80219a0:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80219a4:	ebc9 0505 	rsb	r5, r9, r5
 80219a8:	f7ef f9bc 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80219ac:	2c00      	cmp	r4, #0
 80219ae:	f105 0501 	add.w	r5, r5, #1
 80219b2:	dd55      	ble.n	8021a60 <GUI_MEMDEV_Paint1Static+0xf0>
 80219b4:	2d00      	cmp	r5, #0
 80219b6:	dd53      	ble.n	8021a60 <GUI_MEMDEV_Paint1Static+0xf0>
 80219b8:	f1ba 0f00 	cmp.w	sl, #0
 80219bc:	d155      	bne.n	8021a6a <GUI_MEMDEV_Paint1Static+0xfa>
 80219be:	f7f9 fb75 	bl	801b0ac <WM_GetDesktopWindow>
 80219c2:	4286      	cmp	r6, r0
 80219c4:	d07f      	beq.n	8021ac6 <GUI_MEMDEV_Paint1Static+0x156>
 80219c6:	4b4a      	ldr	r3, [pc, #296]	; (8021af0 <GUI_MEMDEV_Paint1Static+0x180>)
 80219c8:	9301      	str	r3, [sp, #4]
 80219ca:	f04f 0a01 	mov.w	sl, #1
 80219ce:	4649      	mov	r1, r9
 80219d0:	4640      	mov	r0, r8
 80219d2:	462b      	mov	r3, r5
 80219d4:	4622      	mov	r2, r4
 80219d6:	f8cd b008 	str.w	fp, [sp, #8]
 80219da:	f8cd a000 	str.w	sl, [sp]
 80219de:	f7fe fe37 	bl	8020650 <GUI_MEMDEV__CreateFixed>
 80219e2:	4680      	mov	r8, r0
 80219e4:	4630      	mov	r0, r6
 80219e6:	f7ef f98b 	bl	8010d00 <GUI_ALLOC_LockH>
 80219ea:	9007      	str	r0, [sp, #28]
 80219ec:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 80219f0:	f1b8 0f00 	cmp.w	r8, #0
 80219f4:	d060      	beq.n	8021ab8 <GUI_MEMDEV_Paint1Static+0x148>
 80219f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80219f8:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8021b04 <GUI_MEMDEV_Paint1Static+0x194>
 80219fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021a00:	6283      	str	r3, [r0, #40]	; 0x28
 8021a02:	a807      	add	r0, sp, #28
 8021a04:	f7ef f98e 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021a08:	4640      	mov	r0, r8
 8021a0a:	f7fe ff4b 	bl	80208a4 <GUI_MEMDEV_Select>
 8021a0e:	9005      	str	r0, [sp, #20]
 8021a10:	4650      	mov	r0, sl
 8021a12:	f001 fd79 	bl	8023508 <GUI__AlphaPreserveTrans>
 8021a16:	4640      	mov	r0, r8
 8021a18:	f7ff ff14 	bl	8021844 <GUI_MEMDEV_GetDataPtr>
 8021a1c:	4a35      	ldr	r2, [pc, #212]	; (8021af4 <GUI_MEMDEV_Paint1Static+0x184>)
 8021a1e:	4b36      	ldr	r3, [pc, #216]	; (8021af8 <GUI_MEMDEV_Paint1Static+0x188>)
 8021a20:	7819      	ldrb	r1, [r3, #0]
 8021a22:	6813      	ldr	r3, [r2, #0]
 8021a24:	fb05 f204 	mul.w	r2, r5, r4
 8021a28:	0092      	lsls	r2, r2, #2
 8021a2a:	4c34      	ldr	r4, [pc, #208]	; (8021afc <GUI_MEMDEV_Paint1Static+0x18c>)
 8021a2c:	4798      	blx	r3
 8021a2e:	4630      	mov	r0, r6
 8021a30:	6825      	ldr	r5, [r4, #0]
 8021a32:	f8c9 6000 	str.w	r6, [r9]
 8021a36:	f7f9 fc41 	bl	801b2bc <WM_GetWindowOrgX>
 8021a3a:	6020      	str	r0, [r4, #0]
 8021a3c:	4630      	mov	r0, r6
 8021a3e:	f7f8 fde7 	bl	801a610 <WM__Paint1>
 8021a42:	2200      	movs	r2, #0
 8021a44:	4610      	mov	r0, r2
 8021a46:	6025      	str	r5, [r4, #0]
 8021a48:	f8c9 2000 	str.w	r2, [r9]
 8021a4c:	f001 fd5c 	bl	8023508 <GUI__AlphaPreserveTrans>
 8021a50:	9805      	ldr	r0, [sp, #20]
 8021a52:	f7fe ff27 	bl	80208a4 <GUI_MEMDEV_Select>
 8021a56:	4630      	mov	r0, r6
 8021a58:	f7ef f948 	bl	8010cec <GUI_ALLOC_h2p>
 8021a5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8021a5e:	b9f0      	cbnz	r0, 8021a9e <GUI_MEMDEV_Paint1Static+0x12e>
 8021a60:	3f01      	subs	r7, #1
 8021a62:	d18c      	bne.n	802197e <GUI_MEMDEV_Paint1Static+0xe>
 8021a64:	b009      	add	sp, #36	; 0x24
 8021a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a6a:	4650      	mov	r0, sl
 8021a6c:	f7ef f948 	bl	8010d00 <GUI_ALLOC_LockH>
 8021a70:	4603      	mov	r3, r0
 8021a72:	a808      	add	r0, sp, #32
 8021a74:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8021a78:	f840 3d08 	str.w	r3, [r0, #-8]!
 8021a7c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8021a80:	f7ef f950 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021a84:	45a8      	cmp	r8, r5
 8021a86:	d00f      	beq.n	8021aa8 <GUI_MEMDEV_Paint1Static+0x138>
 8021a88:	464a      	mov	r2, r9
 8021a8a:	4641      	mov	r1, r8
 8021a8c:	4650      	mov	r0, sl
 8021a8e:	f7ff ff33 	bl	80218f8 <GUI_MEMDEV_SetOrg>
 8021a92:	4630      	mov	r0, r6
 8021a94:	f7ef f92a 	bl	8010cec <GUI_ALLOC_h2p>
 8021a98:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8021a9a:	2800      	cmp	r0, #0
 8021a9c:	d0e0      	beq.n	8021a60 <GUI_MEMDEV_Paint1Static+0xf0>
 8021a9e:	f000 f925 	bl	8021cec <GUI_MEMDEV_Write>
 8021aa2:	b009      	add	sp, #36	; 0x24
 8021aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021aa8:	45a1      	cmp	r9, r4
 8021aaa:	d0d4      	beq.n	8021a56 <GUI_MEMDEV_Paint1Static+0xe6>
 8021aac:	464a      	mov	r2, r9
 8021aae:	4641      	mov	r1, r8
 8021ab0:	4650      	mov	r0, sl
 8021ab2:	f7ff ff21 	bl	80218f8 <GUI_MEMDEV_SetOrg>
 8021ab6:	e7ec      	b.n	8021a92 <GUI_MEMDEV_Paint1Static+0x122>
 8021ab8:	a807      	add	r0, sp, #28
 8021aba:	f7ef f933 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021abe:	4630      	mov	r0, r6
 8021ac0:	f7f8 fda6 	bl	801a610 <WM__Paint1>
 8021ac4:	e7cc      	b.n	8021a60 <GUI_MEMDEV_Paint1Static+0xf0>
 8021ac6:	f7f3 fa25 	bl	8014f14 <LCD_GetXSize>
 8021aca:	4682      	mov	sl, r0
 8021acc:	f7f3 fa38 	bl	8014f40 <LCD_GetYSize>
 8021ad0:	4554      	cmp	r4, sl
 8021ad2:	dc03      	bgt.n	8021adc <GUI_MEMDEV_Paint1Static+0x16c>
 8021ad4:	4285      	cmp	r5, r0
 8021ad6:	f77f af76 	ble.w	80219c6 <GUI_MEMDEV_Paint1Static+0x56>
 8021ada:	46a2      	mov	sl, r4
 8021adc:	4285      	cmp	r5, r0
 8021ade:	bfa8      	it	ge
 8021ae0:	4605      	movge	r5, r0
 8021ae2:	462a      	mov	r2, r5
 8021ae4:	4651      	mov	r1, sl
 8021ae6:	4630      	mov	r0, r6
 8021ae8:	f7f9 fde4 	bl	801b6b4 <WM_SetSize>
 8021aec:	4654      	mov	r4, sl
 8021aee:	e76a      	b.n	80219c6 <GUI_MEMDEV_Paint1Static+0x56>
 8021af0:	080289cc 	.word	0x080289cc
 8021af4:	20000040 	.word	0x20000040
 8021af8:	20000320 	.word	0x20000320
 8021afc:	20035dd4 	.word	0x20035dd4
 8021b00:	08026154 	.word	0x08026154
 8021b04:	20035e2c 	.word	0x20035e2c

08021b08 <GUI_USAGE_BM_AddPixel>:
 8021b08:	b470      	push	{r4, r5, r6}
 8021b0a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8021b0e:	6903      	ldr	r3, [r0, #16]
 8021b10:	f9b0 4000 	ldrsh.w	r4, [r0]
 8021b14:	1b92      	subs	r2, r2, r6
 8021b16:	fb03 f202 	mul.w	r2, r3, r2
 8021b1a:	1b09      	subs	r1, r1, r4
 8021b1c:	3214      	adds	r2, #20
 8021b1e:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 8021b22:	2580      	movs	r5, #128	; 0x80
 8021b24:	5c83      	ldrb	r3, [r0, r2]
 8021b26:	f001 0107 	and.w	r1, r1, #7
 8021b2a:	fa45 f101 	asr.w	r1, r5, r1
 8021b2e:	4319      	orrs	r1, r3
 8021b30:	5481      	strb	r1, [r0, r2]
 8021b32:	bc70      	pop	{r4, r5, r6}
 8021b34:	4770      	bx	lr
 8021b36:	bf00      	nop

08021b38 <GUI_USAGE_BM_GetNextDirty>:
 8021b38:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8021b3c:	4293      	cmp	r3, r2
 8021b3e:	dd3c      	ble.n	8021bba <GUI_USAGE_BM_GetNextDirty+0x82>
 8021b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021b42:	680d      	ldr	r5, [r1, #0]
 8021b44:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8021b48:	42bd      	cmp	r5, r7
 8021b4a:	da34      	bge.n	8021bb6 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8021b4c:	6906      	ldr	r6, [r0, #16]
 8021b4e:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 8021b52:	fb06 e602 	mla	r6, r6, r2, lr
 8021b56:	3614      	adds	r6, #20
 8021b58:	f005 0307 	and.w	r3, r5, #7
 8021b5c:	5d84      	ldrb	r4, [r0, r6]
 8021b5e:	fa04 f303 	lsl.w	r3, r4, r3
 8021b62:	3f01      	subs	r7, #1
 8021b64:	3601      	adds	r6, #1
 8021b66:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8021b6a:	ebce 02e7 	rsb	r2, lr, r7, asr #3
 8021b6e:	4430      	add	r0, r6
 8021b70:	d108      	bne.n	8021b84 <GUI_USAGE_BM_GetNextDirty+0x4c>
 8021b72:	b322      	cbz	r2, 8021bbe <GUI_USAGE_BM_GetNextDirty+0x86>
 8021b74:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021b78:	3508      	adds	r5, #8
 8021b7a:	f025 0507 	bic.w	r5, r5, #7
 8021b7e:	3a01      	subs	r2, #1
 8021b80:	2b00      	cmp	r3, #0
 8021b82:	d0f6      	beq.n	8021b72 <GUI_USAGE_BM_GetNextDirty+0x3a>
 8021b84:	061e      	lsls	r6, r3, #24
 8021b86:	d434      	bmi.n	8021bf2 <GUI_USAGE_BM_GetNextDirty+0xba>
 8021b88:	005b      	lsls	r3, r3, #1
 8021b8a:	b2db      	uxtb	r3, r3
 8021b8c:	061c      	lsls	r4, r3, #24
 8021b8e:	f105 0501 	add.w	r5, r5, #1
 8021b92:	d5f9      	bpl.n	8021b88 <GUI_USAGE_BM_GetNextDirty+0x50>
 8021b94:	065f      	lsls	r7, r3, #25
 8021b96:	462c      	mov	r4, r5
 8021b98:	d505      	bpl.n	8021ba6 <GUI_USAGE_BM_GetNextDirty+0x6e>
 8021b9a:	005b      	lsls	r3, r3, #1
 8021b9c:	b2db      	uxtb	r3, r3
 8021b9e:	065e      	lsls	r6, r3, #25
 8021ba0:	f104 0401 	add.w	r4, r4, #1
 8021ba4:	d4f9      	bmi.n	8021b9a <GUI_USAGE_BM_GetNextDirty+0x62>
 8021ba6:	f004 0307 	and.w	r3, r4, #7
 8021baa:	2b07      	cmp	r3, #7
 8021bac:	d009      	beq.n	8021bc2 <GUI_USAGE_BM_GetNextDirty+0x8a>
 8021bae:	1b62      	subs	r2, r4, r5
 8021bb0:	1c50      	adds	r0, r2, #1
 8021bb2:	600d      	str	r5, [r1, #0]
 8021bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021bb6:	2000      	movs	r0, #0
 8021bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021bba:	2000      	movs	r0, #0
 8021bbc:	4770      	bx	lr
 8021bbe:	4610      	mov	r0, r2
 8021bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021bc2:	2a00      	cmp	r2, #0
 8021bc4:	ddf3      	ble.n	8021bae <GUI_USAGE_BM_GetNextDirty+0x76>
 8021bc6:	7806      	ldrb	r6, [r0, #0]
 8021bc8:	2eff      	cmp	r6, #255	; 0xff
 8021bca:	f100 0701 	add.w	r7, r0, #1
 8021bce:	d10d      	bne.n	8021bec <GUI_USAGE_BM_GetNextDirty+0xb4>
 8021bd0:	1883      	adds	r3, r0, r2
 8021bd2:	e003      	b.n	8021bdc <GUI_USAGE_BM_GetNextDirty+0xa4>
 8021bd4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8021bd8:	2eff      	cmp	r6, #255	; 0xff
 8021bda:	d107      	bne.n	8021bec <GUI_USAGE_BM_GetNextDirty+0xb4>
 8021bdc:	42bb      	cmp	r3, r7
 8021bde:	f104 0408 	add.w	r4, r4, #8
 8021be2:	d1f7      	bne.n	8021bd4 <GUI_USAGE_BM_GetNextDirty+0x9c>
 8021be4:	e7e3      	b.n	8021bae <GUI_USAGE_BM_GetNextDirty+0x76>
 8021be6:	0076      	lsls	r6, r6, #1
 8021be8:	b2f6      	uxtb	r6, r6
 8021bea:	3401      	adds	r4, #1
 8021bec:	0633      	lsls	r3, r6, #24
 8021bee:	d4fa      	bmi.n	8021be6 <GUI_USAGE_BM_GetNextDirty+0xae>
 8021bf0:	e7dd      	b.n	8021bae <GUI_USAGE_BM_GetNextDirty+0x76>
 8021bf2:	2bff      	cmp	r3, #255	; 0xff
 8021bf4:	bf08      	it	eq
 8021bf6:	1dec      	addeq	r4, r5, #7
 8021bf8:	d0d5      	beq.n	8021ba6 <GUI_USAGE_BM_GetNextDirty+0x6e>
 8021bfa:	e7cb      	b.n	8021b94 <GUI_USAGE_BM_GetNextDirty+0x5c>

08021bfc <_GUI_USAGE_BM_Delete>:
 8021bfc:	f7ef ba16 	b.w	801102c <GUI_ALLOC_Free>

08021c00 <GUI_USAGE_BM_Clear>:
 8021c00:	4603      	mov	r3, r0
 8021c02:	2100      	movs	r1, #0
 8021c04:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8021c08:	691b      	ldr	r3, [r3, #16]
 8021c0a:	3014      	adds	r0, #20
 8021c0c:	fb03 f202 	mul.w	r2, r3, r2
 8021c10:	f003 bb80 	b.w	8025314 <memset>

08021c14 <GUI_USAGE_BM_AddHLine>:
 8021c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c16:	f9b0 4000 	ldrsh.w	r4, [r0]
 8021c1a:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8021c1e:	1b0c      	subs	r4, r1, r4
 8021c20:	42ac      	cmp	r4, r5
 8021c22:	da2b      	bge.n	8021c7c <GUI_USAGE_BM_AddHLine+0x68>
 8021c24:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8021c28:	6905      	ldr	r5, [r0, #16]
 8021c2a:	4423      	add	r3, r4
 8021c2c:	3b01      	subs	r3, #1
 8021c2e:	1a52      	subs	r2, r2, r1
 8021c30:	10e6      	asrs	r6, r4, #3
 8021c32:	fb05 6502 	mla	r5, r5, r2, r6
 8021c36:	43df      	mvns	r7, r3
 8021c38:	f007 0707 	and.w	r7, r7, #7
 8021c3c:	21ff      	movs	r1, #255	; 0xff
 8021c3e:	3514      	adds	r5, #20
 8021c40:	f004 0407 	and.w	r4, r4, #7
 8021c44:	fa01 f207 	lsl.w	r2, r1, r7
 8021c48:	fa41 f404 	asr.w	r4, r1, r4
 8021c4c:	ebd6 06e3 	rsbs	r6, r6, r3, asr #3
 8021c50:	b2d7      	uxtb	r7, r2
 8021c52:	b2e4      	uxtb	r4, r4
 8021c54:	eb00 0205 	add.w	r2, r0, r5
 8021c58:	5d43      	ldrb	r3, [r0, r5]
 8021c5a:	d010      	beq.n	8021c7e <GUI_USAGE_BM_AddHLine+0x6a>
 8021c5c:	3e01      	subs	r6, #1
 8021c5e:	431c      	orrs	r4, r3
 8021c60:	2e00      	cmp	r6, #0
 8021c62:	f102 0301 	add.w	r3, r2, #1
 8021c66:	5544      	strb	r4, [r0, r5]
 8021c68:	dd05      	ble.n	8021c76 <GUI_USAGE_BM_AddHLine+0x62>
 8021c6a:	4618      	mov	r0, r3
 8021c6c:	4632      	mov	r2, r6
 8021c6e:	f003 fb51 	bl	8025314 <memset>
 8021c72:	4603      	mov	r3, r0
 8021c74:	4433      	add	r3, r6
 8021c76:	781c      	ldrb	r4, [r3, #0]
 8021c78:	433c      	orrs	r4, r7
 8021c7a:	701c      	strb	r4, [r3, #0]
 8021c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c7e:	403c      	ands	r4, r7
 8021c80:	431c      	orrs	r4, r3
 8021c82:	5544      	strb	r4, [r0, r5]
 8021c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c86:	bf00      	nop

08021c88 <GUI_USAGE_BM_Create>:
 8021c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021c8c:	f102 040f 	add.w	r4, r2, #15
 8021c90:	1124      	asrs	r4, r4, #4
 8021c92:	0064      	lsls	r4, r4, #1
 8021c94:	461e      	mov	r6, r3
 8021c96:	fb03 f304 	mul.w	r3, r3, r4
 8021c9a:	b083      	sub	sp, #12
 8021c9c:	4680      	mov	r8, r0
 8021c9e:	f103 0014 	add.w	r0, r3, #20
 8021ca2:	4617      	mov	r7, r2
 8021ca4:	4689      	mov	r9, r1
 8021ca6:	f7ef fa81 	bl	80111ac <GUI_ALLOC_AllocZero>
 8021caa:	4605      	mov	r5, r0
 8021cac:	b1b8      	cbz	r0, 8021cde <GUI_USAGE_BM_Create+0x56>
 8021cae:	f7f1 f80f 	bl	8012cd0 <GUI_Lock>
 8021cb2:	4628      	mov	r0, r5
 8021cb4:	f7ef f824 	bl	8010d00 <GUI_ALLOC_LockH>
 8021cb8:	4601      	mov	r1, r0
 8021cba:	a802      	add	r0, sp, #8
 8021cbc:	4a0a      	ldr	r2, [pc, #40]	; (8021ce8 <GUI_USAGE_BM_Create+0x60>)
 8021cbe:	f840 1d04 	str.w	r1, [r0, #-4]!
 8021cc2:	2301      	movs	r3, #1
 8021cc4:	808f      	strh	r7, [r1, #4]
 8021cc6:	80ce      	strh	r6, [r1, #6]
 8021cc8:	610c      	str	r4, [r1, #16]
 8021cca:	f8a1 8000 	strh.w	r8, [r1]
 8021cce:	f8a1 9002 	strh.w	r9, [r1, #2]
 8021cd2:	608a      	str	r2, [r1, #8]
 8021cd4:	818b      	strh	r3, [r1, #12]
 8021cd6:	f7ef f825 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021cda:	f7f0 ffef 	bl	8012cbc <GUI_Unlock>
 8021cde:	4628      	mov	r0, r5
 8021ce0:	b003      	add	sp, #12
 8021ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021ce6:	bf00      	nop
 8021ce8:	08028a40 	.word	0x08028a40

08021cec <GUI_MEMDEV_Write>:
 8021cec:	b900      	cbnz	r0, 8021cf0 <GUI_MEMDEV_Write+0x4>
 8021cee:	4770      	bx	lr
 8021cf0:	b570      	push	{r4, r5, r6, lr}
 8021cf2:	4604      	mov	r4, r0
 8021cf4:	b084      	sub	sp, #16
 8021cf6:	f7f0 ffeb 	bl	8012cd0 <GUI_Lock>
 8021cfa:	4620      	mov	r0, r4
 8021cfc:	f7ef f800 	bl	8010d00 <GUI_ALLOC_LockH>
 8021d00:	4601      	mov	r1, r0
 8021d02:	a801      	add	r0, sp, #4
 8021d04:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 8021d08:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 8021d0c:	890a      	ldrh	r2, [r1, #8]
 8021d0e:	894b      	ldrh	r3, [r1, #10]
 8021d10:	9101      	str	r1, [sp, #4]
 8021d12:	4432      	add	r2, r6
 8021d14:	442b      	add	r3, r5
 8021d16:	3a01      	subs	r2, #1
 8021d18:	3b01      	subs	r3, #1
 8021d1a:	f8ad 6008 	strh.w	r6, [sp, #8]
 8021d1e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8021d22:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021d26:	f8ad 500a 	strh.w	r5, [sp, #10]
 8021d2a:	f7ee fffb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021d2e:	a802      	add	r0, sp, #8
 8021d30:	f7f8 fba2 	bl	801a478 <WM__InitIVRSearch>
 8021d34:	b140      	cbz	r0, 8021d48 <GUI_MEMDEV_Write+0x5c>
 8021d36:	462a      	mov	r2, r5
 8021d38:	4631      	mov	r1, r6
 8021d3a:	4620      	mov	r0, r4
 8021d3c:	f7fe fc6a 	bl	8020614 <GUI_MEMDEV__WriteToActiveAt>
 8021d40:	f7f8 fa74 	bl	801a22c <WM__GetNextIVR>
 8021d44:	2800      	cmp	r0, #0
 8021d46:	d1f6      	bne.n	8021d36 <GUI_MEMDEV_Write+0x4a>
 8021d48:	f7f0 ffb8 	bl	8012cbc <GUI_Unlock>
 8021d4c:	b004      	add	sp, #16
 8021d4e:	bd70      	pop	{r4, r5, r6, pc}

08021d50 <GUI_MEMDEV__WriteToActiveAlpha>:
 8021d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d54:	4d60      	ldr	r5, [pc, #384]	; (8021ed8 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 8021d56:	4e61      	ldr	r6, [pc, #388]	; (8021edc <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 8021d58:	682b      	ldr	r3, [r5, #0]
 8021d5a:	7c5b      	ldrb	r3, [r3, #17]
 8021d5c:	b091      	sub	sp, #68	; 0x44
 8021d5e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021d62:	9008      	str	r0, [sp, #32]
 8021d64:	4688      	mov	r8, r1
 8021d66:	4614      	mov	r4, r2
 8021d68:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8021d6c:	f7ee ffc8 	bl	8010d00 <GUI_ALLOC_LockH>
 8021d70:	4603      	mov	r3, r0
 8021d72:	a810      	add	r0, sp, #64	; 0x40
 8021d74:	681a      	ldr	r2, [r3, #0]
 8021d76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021d7a:	6912      	ldr	r2, [r2, #16]
 8021d7c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8021d80:	6852      	ldr	r2, [r2, #4]
 8021d82:	9106      	str	r1, [sp, #24]
 8021d84:	9207      	str	r2, [sp, #28]
 8021d86:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
 8021d8a:	f7ee ffcb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021d8e:	682b      	ldr	r3, [r5, #0]
 8021d90:	7c5b      	ldrb	r3, [r3, #17]
 8021d92:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8021d96:	68c3      	ldr	r3, [r0, #12]
 8021d98:	2108      	movs	r1, #8
 8021d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021d9c:	4798      	blx	r3
 8021d9e:	2817      	cmp	r0, #23
 8021da0:	d810      	bhi.n	8021dc4 <GUI_MEMDEV__WriteToActiveAlpha+0x74>
 8021da2:	2803      	cmp	r0, #3
 8021da4:	4606      	mov	r6, r0
 8021da6:	bf08      	it	eq
 8021da8:	2608      	moveq	r6, #8
 8021daa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8021dae:	9309      	str	r3, [sp, #36]	; 0x24
 8021db0:	2000      	movs	r0, #0
 8021db2:	f8d9 3000 	ldr.w	r3, [r9]
 8021db6:	930c      	str	r3, [sp, #48]	; 0x30
 8021db8:	f7f1 fd36 	bl	8013828 <GUI__AllocAlphaBuffer>
 8021dbc:	b120      	cbz	r0, 8021dc8 <GUI_MEMDEV__WriteToActiveAlpha+0x78>
 8021dbe:	b011      	add	sp, #68	; 0x44
 8021dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dc4:	2620      	movs	r6, #32
 8021dc6:	e7f0      	b.n	8021daa <GUI_MEMDEV__WriteToActiveAlpha+0x5a>
 8021dc8:	9906      	ldr	r1, [sp, #24]
 8021dca:	682a      	ldr	r2, [r5, #0]
 8021dcc:	eb08 0301 	add.w	r3, r8, r1
 8021dd0:	f9b2 500c 	ldrsh.w	r5, [r2, #12]
 8021dd4:	3b01      	subs	r3, #1
 8021dd6:	1b5d      	subs	r5, r3, r5
 8021dd8:	2d00      	cmp	r5, #0
 8021dda:	bfc4      	itt	gt
 8021ddc:	460b      	movgt	r3, r1
 8021dde:	1b5d      	subgt	r5, r3, r5
 8021de0:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8021de4:	bfd8      	it	le
 8021de6:	460d      	movle	r5, r1
 8021de8:	4598      	cmp	r8, r3
 8021dea:	bfbd      	ittte	lt
 8021dec:	ebc8 0103 	rsblt	r1, r8, r3
 8021df0:	1a6d      	sublt	r5, r5, r1
 8021df2:	4698      	movlt	r8, r3
 8021df4:	2100      	movge	r1, #0
 8021df6:	2d00      	cmp	r5, #0
 8021df8:	dde1      	ble.n	8021dbe <GUI_MEMDEV__WriteToActiveAlpha+0x6e>
 8021dfa:	eb04 030a 	add.w	r3, r4, sl
 8021dfe:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 8021e02:	3b01      	subs	r3, #1
 8021e04:	1a1b      	subs	r3, r3, r0
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	bfc8      	it	gt
 8021e0a:	ebc3 0a0a 	rsbgt	sl, r3, sl
 8021e0e:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 8021e12:	429c      	cmp	r4, r3
 8021e14:	bfbd      	ittte	lt
 8021e16:	1b1f      	sublt	r7, r3, r4
 8021e18:	ebc7 0a0a 	rsblt	sl, r7, sl
 8021e1c:	461c      	movlt	r4, r3
 8021e1e:	2700      	movge	r7, #0
 8021e20:	f1ba 0f00 	cmp.w	sl, #0
 8021e24:	ddcb      	ble.n	8021dbe <GUI_MEMDEV__WriteToActiveAlpha+0x6e>
 8021e26:	9b06      	ldr	r3, [sp, #24]
 8021e28:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8021e2c:	fb07 1703 	mla	r7, r7, r3, r1
 8021e30:	eb04 030a 	add.w	r3, r4, sl
 8021e34:	00bf      	lsls	r7, r7, #2
 8021e36:	930a      	str	r3, [sp, #40]	; 0x28
 8021e38:	46b2      	mov	sl, r6
 8021e3a:	e019      	b.n	8021e70 <GUI_MEMDEV__WriteToActiveAlpha+0x120>
 8021e3c:	2304      	movs	r3, #4
 8021e3e:	9a06      	ldr	r2, [sp, #24]
 8021e40:	4631      	mov	r1, r6
 8021e42:	4630      	mov	r0, r6
 8021e44:	47d8      	blx	fp
 8021e46:	2301      	movs	r3, #1
 8021e48:	2200      	movs	r2, #0
 8021e4a:	9205      	str	r2, [sp, #20]
 8021e4c:	9604      	str	r6, [sp, #16]
 8021e4e:	9203      	str	r2, [sp, #12]
 8021e50:	9301      	str	r3, [sp, #4]
 8021e52:	9300      	str	r3, [sp, #0]
 8021e54:	4621      	mov	r1, r4
 8021e56:	f8cd a008 	str.w	sl, [sp, #8]
 8021e5a:	462a      	mov	r2, r5
 8021e5c:	4640      	mov	r0, r8
 8021e5e:	441c      	add	r4, r3
 8021e60:	9e06      	ldr	r6, [sp, #24]
 8021e62:	f7f2 fbf7 	bl	8014654 <LCD_DrawBitmap>
 8021e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e68:	42a3      	cmp	r3, r4
 8021e6a:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 8021e6e:	d0a6      	beq.n	8021dbe <GUI_MEMDEV__WriteToActiveAlpha+0x6e>
 8021e70:	9808      	ldr	r0, [sp, #32]
 8021e72:	f7ff fce7 	bl	8021844 <GUI_MEMDEV_GetDataPtr>
 8021e76:	ab0f      	add	r3, sp, #60	; 0x3c
 8021e78:	9301      	str	r3, [sp, #4]
 8021e7a:	9b07      	ldr	r3, [sp, #28]
 8021e7c:	9300      	str	r3, [sp, #0]
 8021e7e:	19c2      	adds	r2, r0, r7
 8021e80:	462b      	mov	r3, r5
 8021e82:	4621      	mov	r1, r4
 8021e84:	4640      	mov	r0, r8
 8021e86:	f7f1 fb27 	bl	80134d8 <GUI__DoAlphaBlending>
 8021e8a:	4606      	mov	r6, r0
 8021e8c:	2800      	cmp	r0, #0
 8021e8e:	d096      	beq.n	8021dbe <GUI_MEMDEV__WriteToActiveAlpha+0x6e>
 8021e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e92:	461a      	mov	r2, r3
 8021e94:	4b12      	ldr	r3, [pc, #72]	; (8021ee0 <GUI_MEMDEV__WriteToActiveAlpha+0x190>)
 8021e96:	429a      	cmp	r2, r3
 8021e98:	d0d5      	beq.n	8021e46 <GUI_MEMDEV__WriteToActiveAlpha+0xf6>
 8021e9a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8021e9e:	4652      	mov	r2, sl
 8021ea0:	464b      	mov	r3, r9
 8021ea2:	4629      	mov	r1, r5
 8021ea4:	f7fd ff86 	bl	801fdb4 <GUI__CompactPixelIndicesEx>
 8021ea8:	2800      	cmp	r0, #0
 8021eaa:	d1cc      	bne.n	8021e46 <GUI_MEMDEV__WriteToActiveAlpha+0xf6>
 8021eac:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8021eb0:	f1bb 0f00 	cmp.w	fp, #0
 8021eb4:	d1c2      	bne.n	8021e3c <GUI_MEMDEV__WriteToActiveAlpha+0xec>
 8021eb6:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021eba:	950d      	str	r5, [sp, #52]	; 0x34
 8021ebc:	465d      	mov	r5, fp
 8021ebe:	46a3      	mov	fp, r4
 8021ec0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021ec2:	46b1      	mov	r9, r6
 8021ec4:	f8d9 0000 	ldr.w	r0, [r9]
 8021ec8:	47a0      	blx	r4
 8021eca:	3d01      	subs	r5, #1
 8021ecc:	f849 0b04 	str.w	r0, [r9], #4
 8021ed0:	d1f8      	bne.n	8021ec4 <GUI_MEMDEV__WriteToActiveAlpha+0x174>
 8021ed2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021ed4:	465c      	mov	r4, fp
 8021ed6:	e7b6      	b.n	8021e46 <GUI_MEMDEV__WriteToActiveAlpha+0xf6>
 8021ed8:	20000014 	.word	0x20000014
 8021edc:	20035df8 	.word	0x20035df8
 8021ee0:	0801e949 	.word	0x0801e949

08021ee4 <_cbInvalidateOne>:
 8021ee4:	f7f8 b834 	b.w	8019f50 <WM_InvalidateWindow>

08021ee8 <WM_BringToTop>:
 8021ee8:	b530      	push	{r4, r5, lr}
 8021eea:	4604      	mov	r4, r0
 8021eec:	b083      	sub	sp, #12
 8021eee:	f7f0 feef 	bl	8012cd0 <GUI_Lock>
 8021ef2:	b91c      	cbnz	r4, 8021efc <WM_BringToTop+0x14>
 8021ef4:	f7f0 fee2 	bl	8012cbc <GUI_Unlock>
 8021ef8:	b003      	add	sp, #12
 8021efa:	bd30      	pop	{r4, r5, pc}
 8021efc:	4620      	mov	r0, r4
 8021efe:	f7ee feff 	bl	8010d00 <GUI_ALLOC_LockH>
 8021f02:	6a03      	ldr	r3, [r0, #32]
 8021f04:	9000      	str	r0, [sp, #0]
 8021f06:	b343      	cbz	r3, 8021f5a <WM_BringToTop+0x72>
 8021f08:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8021f0a:	0712      	lsls	r2, r2, #28
 8021f0c:	d40d      	bmi.n	8021f2a <WM_BringToTop+0x42>
 8021f0e:	4618      	mov	r0, r3
 8021f10:	f7ee fef6 	bl	8010d00 <GUI_ALLOC_LockH>
 8021f14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8021f16:	9001      	str	r0, [sp, #4]
 8021f18:	071b      	lsls	r3, r3, #28
 8021f1a:	d525      	bpl.n	8021f68 <WM_BringToTop+0x80>
 8021f1c:	4668      	mov	r0, sp
 8021f1e:	f7ee ff01 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021f22:	a801      	add	r0, sp, #4
 8021f24:	f7ee fefe 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021f28:	e7e4      	b.n	8021ef4 <WM_BringToTop+0xc>
 8021f2a:	4603      	mov	r3, r0
 8021f2c:	699d      	ldr	r5, [r3, #24]
 8021f2e:	4668      	mov	r0, sp
 8021f30:	f7ee fef8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021f34:	4620      	mov	r0, r4
 8021f36:	f7f7 f92d 	bl	8019194 <WM__RemoveWindowFromList>
 8021f3a:	4629      	mov	r1, r5
 8021f3c:	4620      	mov	r0, r4
 8021f3e:	f7f7 f8bb 	bl	80190b8 <WM__InsertWindowIntoList>
 8021f42:	4620      	mov	r0, r4
 8021f44:	f7f8 f804 	bl	8019f50 <WM_InvalidateWindow>
 8021f48:	4620      	mov	r0, r4
 8021f4a:	2200      	movs	r2, #0
 8021f4c:	4909      	ldr	r1, [pc, #36]	; (8021f74 <WM_BringToTop+0x8c>)
 8021f4e:	f7f9 f867 	bl	801b020 <WM_ForEachDesc>
 8021f52:	f7f0 feb3 	bl	8012cbc <GUI_Unlock>
 8021f56:	b003      	add	sp, #12
 8021f58:	bd30      	pop	{r4, r5, pc}
 8021f5a:	4668      	mov	r0, sp
 8021f5c:	f7ee fee2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021f60:	f7f0 feac 	bl	8012cbc <GUI_Unlock>
 8021f64:	b003      	add	sp, #12
 8021f66:	bd30      	pop	{r4, r5, pc}
 8021f68:	a801      	add	r0, sp, #4
 8021f6a:	f7ee fedb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021f6e:	9b00      	ldr	r3, [sp, #0]
 8021f70:	e7dc      	b.n	8021f2c <WM_BringToTop+0x44>
 8021f72:	bf00      	nop
 8021f74:	08021ee5 	.word	0x08021ee5

08021f78 <WM_GetWindowSizeX>:
 8021f78:	b510      	push	{r4, lr}
 8021f7a:	4604      	mov	r4, r0
 8021f7c:	b082      	sub	sp, #8
 8021f7e:	f7f0 fea7 	bl	8012cd0 <GUI_Lock>
 8021f82:	b914      	cbnz	r4, 8021f8a <WM_GetWindowSizeX+0x12>
 8021f84:	f7f8 f94c 	bl	801a220 <WM_GetActiveWindow>
 8021f88:	4604      	mov	r4, r0
 8021f8a:	4620      	mov	r0, r4
 8021f8c:	f7ee feb8 	bl	8010d00 <GUI_ALLOC_LockH>
 8021f90:	aa02      	add	r2, sp, #8
 8021f92:	f9b0 4000 	ldrsh.w	r4, [r0]
 8021f96:	f842 0d04 	str.w	r0, [r2, #-4]!
 8021f9a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8021f9e:	4610      	mov	r0, r2
 8021fa0:	1b1c      	subs	r4, r3, r4
 8021fa2:	f7ee febf 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021fa6:	f7f0 fe89 	bl	8012cbc <GUI_Unlock>
 8021faa:	3401      	adds	r4, #1
 8021fac:	4620      	mov	r0, r4
 8021fae:	b002      	add	sp, #8
 8021fb0:	bd10      	pop	{r4, pc}
 8021fb2:	bf00      	nop

08021fb4 <WM_GetWindowSizeY>:
 8021fb4:	b510      	push	{r4, lr}
 8021fb6:	4604      	mov	r4, r0
 8021fb8:	b082      	sub	sp, #8
 8021fba:	f7f0 fe89 	bl	8012cd0 <GUI_Lock>
 8021fbe:	b914      	cbnz	r4, 8021fc6 <WM_GetWindowSizeY+0x12>
 8021fc0:	f7f8 f92e 	bl	801a220 <WM_GetActiveWindow>
 8021fc4:	4604      	mov	r4, r0
 8021fc6:	4620      	mov	r0, r4
 8021fc8:	f7ee fe9a 	bl	8010d00 <GUI_ALLOC_LockH>
 8021fcc:	aa02      	add	r2, sp, #8
 8021fce:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8021fd2:	f842 0d04 	str.w	r0, [r2, #-4]!
 8021fd6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8021fda:	4610      	mov	r0, r2
 8021fdc:	1b1c      	subs	r4, r3, r4
 8021fde:	f7ee fea1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8021fe2:	f7f0 fe6b 	bl	8012cbc <GUI_Unlock>
 8021fe6:	3401      	adds	r4, #1
 8021fe8:	4620      	mov	r0, r4
 8021fea:	b002      	add	sp, #8
 8021fec:	bd10      	pop	{r4, pc}
 8021fee:	bf00      	nop

08021ff0 <WM_PID__SetPrevState>:
 8021ff0:	b410      	push	{r4}
 8021ff2:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8021ff6:	c807      	ldmia	r0, {r0, r1, r2}
 8021ff8:	4b03      	ldr	r3, [pc, #12]	; (8022008 <WM_PID__SetPrevState+0x18>)
 8021ffa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8021ffe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8022002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022006:	4770      	bx	lr
 8022008:	20000920 	.word	0x20000920

0802200c <_Screen2hWin>:
 802200c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022010:	b099      	sub	sp, #100	; 0x64
 8022012:	9005      	str	r0, [sp, #20]
 8022014:	b910      	cbnz	r0, 802201c <_Screen2hWin+0x10>
 8022016:	b019      	add	sp, #100	; 0x64
 8022018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802201c:	4692      	mov	sl, r2
 802201e:	4699      	mov	r9, r3
 8022020:	468b      	mov	fp, r1
 8022022:	f7ee fe6d 	bl	8010d00 <GUI_ALLOC_LockH>
 8022026:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8022028:	900f      	str	r0, [sp, #60]	; 0x3c
 802202a:	079a      	lsls	r2, r3, #30
 802202c:	f140 8218 	bpl.w	8022460 <_Screen2hWin+0x454>
 8022030:	f9b0 3000 	ldrsh.w	r3, [r0]
 8022034:	459a      	cmp	sl, r3
 8022036:	f2c0 8213 	blt.w	8022460 <_Screen2hWin+0x454>
 802203a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802203e:	459a      	cmp	sl, r3
 8022040:	f300 820e 	bgt.w	8022460 <_Screen2hWin+0x454>
 8022044:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8022048:	4599      	cmp	r9, r3
 802204a:	f2c0 8209 	blt.w	8022460 <_Screen2hWin+0x454>
 802204e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8022052:	4599      	cmp	r9, r3
 8022054:	f300 8204 	bgt.w	8022460 <_Screen2hWin+0x454>
 8022058:	69c3      	ldr	r3, [r0, #28]
 802205a:	9308      	str	r3, [sp, #32]
 802205c:	2b00      	cmp	r3, #0
 802205e:	f000 81f1 	beq.w	8022444 <_Screen2hWin+0x438>
 8022062:	455b      	cmp	r3, fp
 8022064:	f000 81ee 	beq.w	8022444 <_Screen2hWin+0x438>
 8022068:	9b05      	ldr	r3, [sp, #20]
 802206a:	9808      	ldr	r0, [sp, #32]
 802206c:	930d      	str	r3, [sp, #52]	; 0x34
 802206e:	f7ee fe47 	bl	8010d00 <GUI_ALLOC_LockH>
 8022072:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8022074:	9010      	str	r0, [sp, #64]	; 0x40
 8022076:	079b      	lsls	r3, r3, #30
 8022078:	f140 81d6 	bpl.w	8022428 <_Screen2hWin+0x41c>
 802207c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8022080:	459a      	cmp	sl, r3
 8022082:	f2c0 81d1 	blt.w	8022428 <_Screen2hWin+0x41c>
 8022086:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802208a:	459a      	cmp	sl, r3
 802208c:	f300 81cc 	bgt.w	8022428 <_Screen2hWin+0x41c>
 8022090:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8022094:	4599      	cmp	r9, r3
 8022096:	f2c0 81c7 	blt.w	8022428 <_Screen2hWin+0x41c>
 802209a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802209e:	4599      	cmp	r9, r3
 80220a0:	f300 81c2 	bgt.w	8022428 <_Screen2hWin+0x41c>
 80220a4:	69c3      	ldr	r3, [r0, #28]
 80220a6:	9309      	str	r3, [sp, #36]	; 0x24
 80220a8:	2b00      	cmp	r3, #0
 80220aa:	f000 81d0 	beq.w	802244e <_Screen2hWin+0x442>
 80220ae:	459b      	cmp	fp, r3
 80220b0:	f000 81cd 	beq.w	802244e <_Screen2hWin+0x442>
 80220b4:	9b08      	ldr	r3, [sp, #32]
 80220b6:	9305      	str	r3, [sp, #20]
 80220b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80220ba:	f7ee fe21 	bl	8010d00 <GUI_ALLOC_LockH>
 80220be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80220c0:	9011      	str	r0, [sp, #68]	; 0x44
 80220c2:	079f      	lsls	r7, r3, #30
 80220c4:	f140 81a3 	bpl.w	802240e <_Screen2hWin+0x402>
 80220c8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80220cc:	459a      	cmp	sl, r3
 80220ce:	f2c0 819e 	blt.w	802240e <_Screen2hWin+0x402>
 80220d2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80220d6:	459a      	cmp	sl, r3
 80220d8:	f300 8199 	bgt.w	802240e <_Screen2hWin+0x402>
 80220dc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80220e0:	4599      	cmp	r9, r3
 80220e2:	f2c0 8194 	blt.w	802240e <_Screen2hWin+0x402>
 80220e6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80220ea:	4599      	cmp	r9, r3
 80220ec:	f300 818f 	bgt.w	802240e <_Screen2hWin+0x402>
 80220f0:	69c3      	ldr	r3, [r0, #28]
 80220f2:	930a      	str	r3, [sp, #40]	; 0x28
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	f000 81bb 	beq.w	8022470 <_Screen2hWin+0x464>
 80220fa:	459b      	cmp	fp, r3
 80220fc:	f000 81b8 	beq.w	8022470 <_Screen2hWin+0x464>
 8022100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022102:	930b      	str	r3, [sp, #44]	; 0x2c
 8022104:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022106:	f7ee fdfb 	bl	8010d00 <GUI_ALLOC_LockH>
 802210a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802210c:	9012      	str	r0, [sp, #72]	; 0x48
 802210e:	079e      	lsls	r6, r3, #30
 8022110:	f140 8176 	bpl.w	8022400 <_Screen2hWin+0x3f4>
 8022114:	f9b0 3000 	ldrsh.w	r3, [r0]
 8022118:	459a      	cmp	sl, r3
 802211a:	f2c0 8171 	blt.w	8022400 <_Screen2hWin+0x3f4>
 802211e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8022122:	459a      	cmp	sl, r3
 8022124:	f300 816c 	bgt.w	8022400 <_Screen2hWin+0x3f4>
 8022128:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802212c:	4599      	cmp	r9, r3
 802212e:	f2c0 8167 	blt.w	8022400 <_Screen2hWin+0x3f4>
 8022132:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8022136:	4599      	cmp	r9, r3
 8022138:	f300 8162 	bgt.w	8022400 <_Screen2hWin+0x3f4>
 802213c:	69c3      	ldr	r3, [r0, #28]
 802213e:	9306      	str	r3, [sp, #24]
 8022140:	2b00      	cmp	r3, #0
 8022142:	f000 8198 	beq.w	8022476 <_Screen2hWin+0x46a>
 8022146:	459b      	cmp	fp, r3
 8022148:	f000 8195 	beq.w	8022476 <_Screen2hWin+0x46a>
 802214c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802214e:	930c      	str	r3, [sp, #48]	; 0x30
 8022150:	9806      	ldr	r0, [sp, #24]
 8022152:	f7ee fdd5 	bl	8010d00 <GUI_ALLOC_LockH>
 8022156:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8022158:	9013      	str	r0, [sp, #76]	; 0x4c
 802215a:	079d      	lsls	r5, r3, #30
 802215c:	f140 8149 	bpl.w	80223f2 <_Screen2hWin+0x3e6>
 8022160:	f9b0 3000 	ldrsh.w	r3, [r0]
 8022164:	459a      	cmp	sl, r3
 8022166:	f2c0 8144 	blt.w	80223f2 <_Screen2hWin+0x3e6>
 802216a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802216e:	459a      	cmp	sl, r3
 8022170:	f300 813f 	bgt.w	80223f2 <_Screen2hWin+0x3e6>
 8022174:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8022178:	4599      	cmp	r9, r3
 802217a:	f2c0 813a 	blt.w	80223f2 <_Screen2hWin+0x3e6>
 802217e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8022182:	4599      	cmp	r9, r3
 8022184:	f300 8135 	bgt.w	80223f2 <_Screen2hWin+0x3e6>
 8022188:	69c3      	ldr	r3, [r0, #28]
 802218a:	9303      	str	r3, [sp, #12]
 802218c:	2b00      	cmp	r3, #0
 802218e:	f000 816c 	beq.w	802246a <_Screen2hWin+0x45e>
 8022192:	459b      	cmp	fp, r3
 8022194:	f000 8169 	beq.w	802246a <_Screen2hWin+0x45e>
 8022198:	9b06      	ldr	r3, [sp, #24]
 802219a:	9307      	str	r3, [sp, #28]
 802219c:	9803      	ldr	r0, [sp, #12]
 802219e:	f7ee fdaf 	bl	8010d00 <GUI_ALLOC_LockH>
 80221a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80221a4:	9014      	str	r0, [sp, #80]	; 0x50
 80221a6:	079c      	lsls	r4, r3, #30
 80221a8:	f140 811d 	bpl.w	80223e6 <_Screen2hWin+0x3da>
 80221ac:	f9b0 3000 	ldrsh.w	r3, [r0]
 80221b0:	459a      	cmp	sl, r3
 80221b2:	f2c0 8118 	blt.w	80223e6 <_Screen2hWin+0x3da>
 80221b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80221ba:	459a      	cmp	sl, r3
 80221bc:	f300 8113 	bgt.w	80223e6 <_Screen2hWin+0x3da>
 80221c0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80221c4:	4599      	cmp	r9, r3
 80221c6:	f2c0 810e 	blt.w	80223e6 <_Screen2hWin+0x3da>
 80221ca:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80221ce:	4599      	cmp	r9, r3
 80221d0:	f300 8109 	bgt.w	80223e6 <_Screen2hWin+0x3da>
 80221d4:	69c3      	ldr	r3, [r0, #28]
 80221d6:	9301      	str	r3, [sp, #4]
 80221d8:	2b00      	cmp	r3, #0
 80221da:	f000 8115 	beq.w	8022408 <_Screen2hWin+0x3fc>
 80221de:	459b      	cmp	fp, r3
 80221e0:	f000 8112 	beq.w	8022408 <_Screen2hWin+0x3fc>
 80221e4:	9b03      	ldr	r3, [sp, #12]
 80221e6:	9304      	str	r3, [sp, #16]
 80221e8:	9801      	ldr	r0, [sp, #4]
 80221ea:	f7ee fd89 	bl	8010d00 <GUI_ALLOC_LockH>
 80221ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80221f0:	9015      	str	r0, [sp, #84]	; 0x54
 80221f2:	0799      	lsls	r1, r3, #30
 80221f4:	f140 80f1 	bpl.w	80223da <_Screen2hWin+0x3ce>
 80221f8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80221fc:	459a      	cmp	sl, r3
 80221fe:	f2c0 80ec 	blt.w	80223da <_Screen2hWin+0x3ce>
 8022202:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8022206:	459a      	cmp	sl, r3
 8022208:	f300 80e7 	bgt.w	80223da <_Screen2hWin+0x3ce>
 802220c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8022210:	4599      	cmp	r9, r3
 8022212:	f2c0 80e2 	blt.w	80223da <_Screen2hWin+0x3ce>
 8022216:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802221a:	4599      	cmp	r9, r3
 802221c:	f300 80dd 	bgt.w	80223da <_Screen2hWin+0x3ce>
 8022220:	69c7      	ldr	r7, [r0, #28]
 8022222:	2f00      	cmp	r7, #0
 8022224:	f000 80e9 	beq.w	80223fa <_Screen2hWin+0x3ee>
 8022228:	45bb      	cmp	fp, r7
 802222a:	f000 80e6 	beq.w	80223fa <_Screen2hWin+0x3ee>
 802222e:	9b01      	ldr	r3, [sp, #4]
 8022230:	9302      	str	r3, [sp, #8]
 8022232:	4638      	mov	r0, r7
 8022234:	f7ee fd64 	bl	8010d00 <GUI_ALLOC_LockH>
 8022238:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802223a:	9016      	str	r0, [sp, #88]	; 0x58
 802223c:	079a      	lsls	r2, r3, #30
 802223e:	f140 80c8 	bpl.w	80223d2 <_Screen2hWin+0x3c6>
 8022242:	f9b0 3000 	ldrsh.w	r3, [r0]
 8022246:	459a      	cmp	sl, r3
 8022248:	f2c0 80c3 	blt.w	80223d2 <_Screen2hWin+0x3c6>
 802224c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8022250:	459a      	cmp	sl, r3
 8022252:	f300 80be 	bgt.w	80223d2 <_Screen2hWin+0x3c6>
 8022256:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802225a:	4599      	cmp	r9, r3
 802225c:	f2c0 80b9 	blt.w	80223d2 <_Screen2hWin+0x3c6>
 8022260:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8022264:	4599      	cmp	r9, r3
 8022266:	f300 80b4 	bgt.w	80223d2 <_Screen2hWin+0x3c6>
 802226a:	69c6      	ldr	r6, [r0, #28]
 802226c:	2e00      	cmp	r6, #0
 802226e:	f000 80be 	beq.w	80223ee <_Screen2hWin+0x3e2>
 8022272:	45b3      	cmp	fp, r6
 8022274:	bf18      	it	ne
 8022276:	46b8      	movne	r8, r7
 8022278:	f000 80b9 	beq.w	80223ee <_Screen2hWin+0x3e2>
 802227c:	4630      	mov	r0, r6
 802227e:	f7ee fd3f 	bl	8010d00 <GUI_ALLOC_LockH>
 8022282:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8022284:	9017      	str	r0, [sp, #92]	; 0x5c
 8022286:	079b      	lsls	r3, r3, #30
 8022288:	f140 809f 	bpl.w	80223ca <_Screen2hWin+0x3be>
 802228c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8022290:	459a      	cmp	sl, r3
 8022292:	f2c0 809a 	blt.w	80223ca <_Screen2hWin+0x3be>
 8022296:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802229a:	459a      	cmp	sl, r3
 802229c:	f300 8095 	bgt.w	80223ca <_Screen2hWin+0x3be>
 80222a0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80222a4:	4599      	cmp	r9, r3
 80222a6:	f2c0 8090 	blt.w	80223ca <_Screen2hWin+0x3be>
 80222aa:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80222ae:	4599      	cmp	r9, r3
 80222b0:	f300 808b 	bgt.w	80223ca <_Screen2hWin+0x3be>
 80222b4:	69c4      	ldr	r4, [r0, #28]
 80222b6:	2c00      	cmp	r4, #0
 80222b8:	f000 8093 	beq.w	80223e2 <_Screen2hWin+0x3d6>
 80222bc:	45a3      	cmp	fp, r4
 80222be:	bf18      	it	ne
 80222c0:	4635      	movne	r5, r6
 80222c2:	d102      	bne.n	80222ca <_Screen2hWin+0x2be>
 80222c4:	e08d      	b.n	80223e2 <_Screen2hWin+0x3d6>
 80222c6:	45a3      	cmp	fp, r4
 80222c8:	d00e      	beq.n	80222e8 <_Screen2hWin+0x2dc>
 80222ca:	464b      	mov	r3, r9
 80222cc:	4652      	mov	r2, sl
 80222ce:	4659      	mov	r1, fp
 80222d0:	4620      	mov	r0, r4
 80222d2:	f7ff fe9b 	bl	802200c <_Screen2hWin>
 80222d6:	2800      	cmp	r0, #0
 80222d8:	bf18      	it	ne
 80222da:	4605      	movne	r5, r0
 80222dc:	4620      	mov	r0, r4
 80222de:	f7ee fd05 	bl	8010cec <GUI_ALLOC_h2p>
 80222e2:	6a04      	ldr	r4, [r0, #32]
 80222e4:	2c00      	cmp	r4, #0
 80222e6:	d1ee      	bne.n	80222c6 <_Screen2hWin+0x2ba>
 80222e8:	a817      	add	r0, sp, #92	; 0x5c
 80222ea:	f7ee fd1b 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80222ee:	2d00      	cmp	r5, #0
 80222f0:	bf18      	it	ne
 80222f2:	46a8      	movne	r8, r5
 80222f4:	4630      	mov	r0, r6
 80222f6:	f7ee fcf9 	bl	8010cec <GUI_ALLOC_h2p>
 80222fa:	6a06      	ldr	r6, [r0, #32]
 80222fc:	b10e      	cbz	r6, 8022302 <_Screen2hWin+0x2f6>
 80222fe:	45b3      	cmp	fp, r6
 8022300:	d1bc      	bne.n	802227c <_Screen2hWin+0x270>
 8022302:	a816      	add	r0, sp, #88	; 0x58
 8022304:	f7ee fd0e 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022308:	9b02      	ldr	r3, [sp, #8]
 802230a:	f1b8 0f00 	cmp.w	r8, #0
 802230e:	bf18      	it	ne
 8022310:	4643      	movne	r3, r8
 8022312:	9302      	str	r3, [sp, #8]
 8022314:	4638      	mov	r0, r7
 8022316:	f7ee fce9 	bl	8010cec <GUI_ALLOC_h2p>
 802231a:	6a07      	ldr	r7, [r0, #32]
 802231c:	b10f      	cbz	r7, 8022322 <_Screen2hWin+0x316>
 802231e:	45bb      	cmp	fp, r7
 8022320:	d187      	bne.n	8022232 <_Screen2hWin+0x226>
 8022322:	a815      	add	r0, sp, #84	; 0x54
 8022324:	f7ee fcfe 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022328:	9a02      	ldr	r2, [sp, #8]
 802232a:	9904      	ldr	r1, [sp, #16]
 802232c:	4613      	mov	r3, r2
 802232e:	2a00      	cmp	r2, #0
 8022330:	bf08      	it	eq
 8022332:	460b      	moveq	r3, r1
 8022334:	9304      	str	r3, [sp, #16]
 8022336:	9801      	ldr	r0, [sp, #4]
 8022338:	f7ee fcd8 	bl	8010cec <GUI_ALLOC_h2p>
 802233c:	6a03      	ldr	r3, [r0, #32]
 802233e:	9301      	str	r3, [sp, #4]
 8022340:	b113      	cbz	r3, 8022348 <_Screen2hWin+0x33c>
 8022342:	459b      	cmp	fp, r3
 8022344:	f47f af50 	bne.w	80221e8 <_Screen2hWin+0x1dc>
 8022348:	a814      	add	r0, sp, #80	; 0x50
 802234a:	f7ee fceb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802234e:	9a04      	ldr	r2, [sp, #16]
 8022350:	9907      	ldr	r1, [sp, #28]
 8022352:	4613      	mov	r3, r2
 8022354:	2a00      	cmp	r2, #0
 8022356:	bf08      	it	eq
 8022358:	460b      	moveq	r3, r1
 802235a:	9307      	str	r3, [sp, #28]
 802235c:	9803      	ldr	r0, [sp, #12]
 802235e:	f7ee fcc5 	bl	8010cec <GUI_ALLOC_h2p>
 8022362:	6a03      	ldr	r3, [r0, #32]
 8022364:	9303      	str	r3, [sp, #12]
 8022366:	b113      	cbz	r3, 802236e <_Screen2hWin+0x362>
 8022368:	459b      	cmp	fp, r3
 802236a:	f47f af17 	bne.w	802219c <_Screen2hWin+0x190>
 802236e:	a813      	add	r0, sp, #76	; 0x4c
 8022370:	f7ee fcd8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022374:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022376:	9a07      	ldr	r2, [sp, #28]
 8022378:	2a00      	cmp	r2, #0
 802237a:	bf08      	it	eq
 802237c:	460a      	moveq	r2, r1
 802237e:	920c      	str	r2, [sp, #48]	; 0x30
 8022380:	9806      	ldr	r0, [sp, #24]
 8022382:	f7ee fcb3 	bl	8010cec <GUI_ALLOC_h2p>
 8022386:	6a03      	ldr	r3, [r0, #32]
 8022388:	9306      	str	r3, [sp, #24]
 802238a:	b113      	cbz	r3, 8022392 <_Screen2hWin+0x386>
 802238c:	459b      	cmp	fp, r3
 802238e:	f47f aedf 	bne.w	8022150 <_Screen2hWin+0x144>
 8022392:	a812      	add	r0, sp, #72	; 0x48
 8022394:	f7ee fcc6 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802239a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802239c:	2a00      	cmp	r2, #0
 802239e:	bf08      	it	eq
 80223a0:	460a      	moveq	r2, r1
 80223a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80223a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80223a6:	f7ee fca1 	bl	8010cec <GUI_ALLOC_h2p>
 80223aa:	6a03      	ldr	r3, [r0, #32]
 80223ac:	930a      	str	r3, [sp, #40]	; 0x28
 80223ae:	b113      	cbz	r3, 80223b6 <_Screen2hWin+0x3aa>
 80223b0:	459b      	cmp	fp, r3
 80223b2:	f47f aea7 	bne.w	8022104 <_Screen2hWin+0xf8>
 80223b6:	a811      	add	r0, sp, #68	; 0x44
 80223b8:	f7ee fcb4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80223bc:	9905      	ldr	r1, [sp, #20]
 80223be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80223c0:	2a00      	cmp	r2, #0
 80223c2:	bf08      	it	eq
 80223c4:	460a      	moveq	r2, r1
 80223c6:	9205      	str	r2, [sp, #20]
 80223c8:	e024      	b.n	8022414 <_Screen2hWin+0x408>
 80223ca:	a817      	add	r0, sp, #92	; 0x5c
 80223cc:	f7ee fcaa 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80223d0:	e790      	b.n	80222f4 <_Screen2hWin+0x2e8>
 80223d2:	a816      	add	r0, sp, #88	; 0x58
 80223d4:	f7ee fca6 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80223d8:	e79c      	b.n	8022314 <_Screen2hWin+0x308>
 80223da:	a815      	add	r0, sp, #84	; 0x54
 80223dc:	f7ee fca2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80223e0:	e7a9      	b.n	8022336 <_Screen2hWin+0x32a>
 80223e2:	4635      	mov	r5, r6
 80223e4:	e780      	b.n	80222e8 <_Screen2hWin+0x2dc>
 80223e6:	a814      	add	r0, sp, #80	; 0x50
 80223e8:	f7ee fc9c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80223ec:	e7b6      	b.n	802235c <_Screen2hWin+0x350>
 80223ee:	46b8      	mov	r8, r7
 80223f0:	e787      	b.n	8022302 <_Screen2hWin+0x2f6>
 80223f2:	a813      	add	r0, sp, #76	; 0x4c
 80223f4:	f7ee fc96 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80223f8:	e7c2      	b.n	8022380 <_Screen2hWin+0x374>
 80223fa:	9b01      	ldr	r3, [sp, #4]
 80223fc:	9302      	str	r3, [sp, #8]
 80223fe:	e790      	b.n	8022322 <_Screen2hWin+0x316>
 8022400:	a812      	add	r0, sp, #72	; 0x48
 8022402:	f7ee fc8f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022406:	e7cd      	b.n	80223a4 <_Screen2hWin+0x398>
 8022408:	9b03      	ldr	r3, [sp, #12]
 802240a:	9304      	str	r3, [sp, #16]
 802240c:	e79c      	b.n	8022348 <_Screen2hWin+0x33c>
 802240e:	a811      	add	r0, sp, #68	; 0x44
 8022410:	f7ee fc88 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022416:	f7ee fc69 	bl	8010cec <GUI_ALLOC_h2p>
 802241a:	6a03      	ldr	r3, [r0, #32]
 802241c:	9309      	str	r3, [sp, #36]	; 0x24
 802241e:	b1c3      	cbz	r3, 8022452 <_Screen2hWin+0x446>
 8022420:	459b      	cmp	fp, r3
 8022422:	f47f ae49 	bne.w	80220b8 <_Screen2hWin+0xac>
 8022426:	e014      	b.n	8022452 <_Screen2hWin+0x446>
 8022428:	a810      	add	r0, sp, #64	; 0x40
 802242a:	f7ee fc7b 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802242e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022430:	9305      	str	r3, [sp, #20]
 8022432:	9808      	ldr	r0, [sp, #32]
 8022434:	f7ee fc5a 	bl	8010cec <GUI_ALLOC_h2p>
 8022438:	6a03      	ldr	r3, [r0, #32]
 802243a:	9308      	str	r3, [sp, #32]
 802243c:	b113      	cbz	r3, 8022444 <_Screen2hWin+0x438>
 802243e:	459b      	cmp	fp, r3
 8022440:	f47f ae12 	bne.w	8022068 <_Screen2hWin+0x5c>
 8022444:	a80f      	add	r0, sp, #60	; 0x3c
 8022446:	f7ee fc6d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802244a:	9805      	ldr	r0, [sp, #20]
 802244c:	e5e3      	b.n	8022016 <_Screen2hWin+0xa>
 802244e:	9b08      	ldr	r3, [sp, #32]
 8022450:	9305      	str	r3, [sp, #20]
 8022452:	a810      	add	r0, sp, #64	; 0x40
 8022454:	f7ee fc66 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022458:	9b05      	ldr	r3, [sp, #20]
 802245a:	2b00      	cmp	r3, #0
 802245c:	d1e9      	bne.n	8022432 <_Screen2hWin+0x426>
 802245e:	e7e6      	b.n	802242e <_Screen2hWin+0x422>
 8022460:	a80f      	add	r0, sp, #60	; 0x3c
 8022462:	f7ee fc5f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022466:	2000      	movs	r0, #0
 8022468:	e5d5      	b.n	8022016 <_Screen2hWin+0xa>
 802246a:	9b06      	ldr	r3, [sp, #24]
 802246c:	9307      	str	r3, [sp, #28]
 802246e:	e77e      	b.n	802236e <_Screen2hWin+0x362>
 8022470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022472:	930b      	str	r3, [sp, #44]	; 0x2c
 8022474:	e79f      	b.n	80223b6 <_Screen2hWin+0x3aa>
 8022476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022478:	930c      	str	r3, [sp, #48]	; 0x30
 802247a:	e78a      	b.n	8022392 <_Screen2hWin+0x386>

0802247c <WM_Screen2hWin>:
 802247c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802247e:	b083      	sub	sp, #12
 8022480:	4606      	mov	r6, r0
 8022482:	460f      	mov	r7, r1
 8022484:	f7f0 fc24 	bl	8012cd0 <GUI_Lock>
 8022488:	4b21      	ldr	r3, [pc, #132]	; (8022510 <WM_Screen2hWin+0x94>)
 802248a:	6818      	ldr	r0, [r3, #0]
 802248c:	f7f8 fe1a 	bl	801b0c4 <WM_GetDesktopWindowEx>
 8022490:	4605      	mov	r5, r0
 8022492:	b920      	cbnz	r0, 802249e <WM_Screen2hWin+0x22>
 8022494:	f7f0 fc12 	bl	8012cbc <GUI_Unlock>
 8022498:	4628      	mov	r0, r5
 802249a:	b003      	add	sp, #12
 802249c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802249e:	f7ee fc2f 	bl	8010d00 <GUI_ALLOC_LockH>
 80224a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80224a4:	9001      	str	r0, [sp, #4]
 80224a6:	079b      	lsls	r3, r3, #30
 80224a8:	d528      	bpl.n	80224fc <WM_Screen2hWin+0x80>
 80224aa:	f9b0 3000 	ldrsh.w	r3, [r0]
 80224ae:	429e      	cmp	r6, r3
 80224b0:	db24      	blt.n	80224fc <WM_Screen2hWin+0x80>
 80224b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80224b6:	429e      	cmp	r6, r3
 80224b8:	dc20      	bgt.n	80224fc <WM_Screen2hWin+0x80>
 80224ba:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80224be:	429f      	cmp	r7, r3
 80224c0:	db1c      	blt.n	80224fc <WM_Screen2hWin+0x80>
 80224c2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80224c6:	429f      	cmp	r7, r3
 80224c8:	dc18      	bgt.n	80224fc <WM_Screen2hWin+0x80>
 80224ca:	69c4      	ldr	r4, [r0, #28]
 80224cc:	b174      	cbz	r4, 80224ec <WM_Screen2hWin+0x70>
 80224ce:	463b      	mov	r3, r7
 80224d0:	4632      	mov	r2, r6
 80224d2:	2100      	movs	r1, #0
 80224d4:	4620      	mov	r0, r4
 80224d6:	f7ff fd99 	bl	802200c <_Screen2hWin>
 80224da:	2800      	cmp	r0, #0
 80224dc:	bf18      	it	ne
 80224de:	4605      	movne	r5, r0
 80224e0:	4620      	mov	r0, r4
 80224e2:	f7ee fc03 	bl	8010cec <GUI_ALLOC_h2p>
 80224e6:	6a04      	ldr	r4, [r0, #32]
 80224e8:	2c00      	cmp	r4, #0
 80224ea:	d1f0      	bne.n	80224ce <WM_Screen2hWin+0x52>
 80224ec:	a801      	add	r0, sp, #4
 80224ee:	f7ee fc19 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80224f2:	f7f0 fbe3 	bl	8012cbc <GUI_Unlock>
 80224f6:	4628      	mov	r0, r5
 80224f8:	b003      	add	sp, #12
 80224fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80224fc:	a801      	add	r0, sp, #4
 80224fe:	f7ee fc11 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022502:	f7f0 fbdb 	bl	8012cbc <GUI_Unlock>
 8022506:	2500      	movs	r5, #0
 8022508:	4628      	mov	r0, r5
 802250a:	b003      	add	sp, #12
 802250c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802250e:	bf00      	nop
 8022510:	20035e4c 	.word	0x20035e4c

08022514 <WM_SetFocusOnNextChild>:
 8022514:	b570      	push	{r4, r5, r6, lr}
 8022516:	b910      	cbnz	r0, 802251e <WM_SetFocusOnNextChild+0xa>
 8022518:	4604      	mov	r4, r0
 802251a:	4620      	mov	r0, r4
 802251c:	bd70      	pop	{r4, r5, r6, pc}
 802251e:	4606      	mov	r6, r0
 8022520:	f7f0 fbd6 	bl	8012cd0 <GUI_Lock>
 8022524:	4630      	mov	r0, r6
 8022526:	f7fa f8d5 	bl	801c6d4 <WM__GetFocusedChild>
 802252a:	4604      	mov	r4, r0
 802252c:	2800      	cmp	r0, #0
 802252e:	d131      	bne.n	8022594 <WM_SetFocusOnNextChild+0x80>
 8022530:	4630      	mov	r0, r6
 8022532:	f7ee fbdb 	bl	8010cec <GUI_ALLOC_h2p>
 8022536:	69c5      	ldr	r5, [r0, #28]
 8022538:	42ac      	cmp	r4, r5
 802253a:	bf08      	it	eq
 802253c:	2500      	moveq	r5, #0
 802253e:	462c      	mov	r4, r5
 8022540:	e00f      	b.n	8022562 <WM_SetFocusOnNextChild+0x4e>
 8022542:	4620      	mov	r0, r4
 8022544:	b30c      	cbz	r4, 802258a <WM_SetFocusOnNextChild+0x76>
 8022546:	f7ee fbd1 	bl	8010cec <GUI_ALLOC_h2p>
 802254a:	6a03      	ldr	r3, [r0, #32]
 802254c:	b91b      	cbnz	r3, 8022556 <WM_SetFocusOnNextChild+0x42>
 802254e:	4630      	mov	r0, r6
 8022550:	f7ee fbcc 	bl	8010cec <GUI_ALLOC_h2p>
 8022554:	69c3      	ldr	r3, [r0, #28]
 8022556:	429c      	cmp	r4, r3
 8022558:	bf14      	ite	ne
 802255a:	461c      	movne	r4, r3
 802255c:	2400      	moveq	r4, #0
 802255e:	42a5      	cmp	r5, r4
 8022560:	d004      	beq.n	802256c <WM_SetFocusOnNextChild+0x58>
 8022562:	4620      	mov	r0, r4
 8022564:	f7f8 ff56 	bl	801b414 <WM_IsFocusable>
 8022568:	2800      	cmp	r0, #0
 802256a:	d0ea      	beq.n	8022542 <WM_SetFocusOnNextChild+0x2e>
 802256c:	b16c      	cbz	r4, 802258a <WM_SetFocusOnNextChild+0x76>
 802256e:	4d0c      	ldr	r5, [pc, #48]	; (80225a0 <WM_SetFocusOnNextChild+0x8c>)
 8022570:	4620      	mov	r0, r4
 8022572:	682e      	ldr	r6, [r5, #0]
 8022574:	f7f7 fe3a 	bl	801a1ec <WM__GetTopLevelLayer>
 8022578:	1c42      	adds	r2, r0, #1
 802257a:	4603      	mov	r3, r0
 802257c:	d006      	beq.n	802258c <WM_SetFocusOnNextChild+0x78>
 802257e:	4620      	mov	r0, r4
 8022580:	602b      	str	r3, [r5, #0]
 8022582:	f7f9 f82b 	bl	801b5dc <WM_SetFocus>
 8022586:	602e      	str	r6, [r5, #0]
 8022588:	b100      	cbz	r0, 802258c <WM_SetFocusOnNextChild+0x78>
 802258a:	2400      	movs	r4, #0
 802258c:	f7f0 fb96 	bl	8012cbc <GUI_Unlock>
 8022590:	4620      	mov	r0, r4
 8022592:	bd70      	pop	{r4, r5, r6, pc}
 8022594:	f7ee fbaa 	bl	8010cec <GUI_ALLOC_h2p>
 8022598:	6a05      	ldr	r5, [r0, #32]
 802259a:	2d00      	cmp	r5, #0
 802259c:	d1cc      	bne.n	8022538 <WM_SetFocusOnNextChild+0x24>
 802259e:	e7c7      	b.n	8022530 <WM_SetFocusOnNextChild+0x1c>
 80225a0:	20035e4c 	.word	0x20035e4c

080225a4 <WM_SetFocusOnPrevChild>:
 80225a4:	b538      	push	{r3, r4, r5, lr}
 80225a6:	4604      	mov	r4, r0
 80225a8:	b908      	cbnz	r0, 80225ae <WM_SetFocusOnPrevChild+0xa>
 80225aa:	4620      	mov	r0, r4
 80225ac:	bd38      	pop	{r3, r4, r5, pc}
 80225ae:	f7f0 fb8f 	bl	8012cd0 <GUI_Lock>
 80225b2:	4620      	mov	r0, r4
 80225b4:	f7fa f88e 	bl	801c6d4 <WM__GetFocusedChild>
 80225b8:	4604      	mov	r4, r0
 80225ba:	bb28      	cbnz	r0, 8022608 <WM_SetFocusOnPrevChild+0x64>
 80225bc:	4620      	mov	r0, r4
 80225be:	f7fa f8af 	bl	801c720 <WM__GetLastSibling>
 80225c2:	4605      	mov	r5, r0
 80225c4:	42ac      	cmp	r4, r5
 80225c6:	bf08      	it	eq
 80225c8:	2500      	moveq	r5, #0
 80225ca:	462c      	mov	r4, r5
 80225cc:	e00d      	b.n	80225ea <WM_SetFocusOnPrevChild+0x46>
 80225ce:	4620      	mov	r0, r4
 80225d0:	b184      	cbz	r4, 80225f4 <WM_SetFocusOnPrevChild+0x50>
 80225d2:	f7fa f8cf 	bl	801c774 <WM__GetPrevSibling>
 80225d6:	b910      	cbnz	r0, 80225de <WM_SetFocusOnPrevChild+0x3a>
 80225d8:	4620      	mov	r0, r4
 80225da:	f7fa f8a1 	bl	801c720 <WM__GetLastSibling>
 80225de:	4284      	cmp	r4, r0
 80225e0:	bf14      	ite	ne
 80225e2:	4604      	movne	r4, r0
 80225e4:	2400      	moveq	r4, #0
 80225e6:	42a5      	cmp	r5, r4
 80225e8:	d004      	beq.n	80225f4 <WM_SetFocusOnPrevChild+0x50>
 80225ea:	4620      	mov	r0, r4
 80225ec:	f7f8 ff12 	bl	801b414 <WM_IsFocusable>
 80225f0:	2800      	cmp	r0, #0
 80225f2:	d0ec      	beq.n	80225ce <WM_SetFocusOnPrevChild+0x2a>
 80225f4:	4620      	mov	r0, r4
 80225f6:	f7f8 fff1 	bl	801b5dc <WM_SetFocus>
 80225fa:	2800      	cmp	r0, #0
 80225fc:	bf18      	it	ne
 80225fe:	2400      	movne	r4, #0
 8022600:	f7f0 fb5c 	bl	8012cbc <GUI_Unlock>
 8022604:	4620      	mov	r0, r4
 8022606:	bd38      	pop	{r3, r4, r5, pc}
 8022608:	f7fa f8b4 	bl	801c774 <WM__GetPrevSibling>
 802260c:	4605      	mov	r5, r0
 802260e:	2800      	cmp	r0, #0
 8022610:	d1d8      	bne.n	80225c4 <WM_SetFocusOnPrevChild+0x20>
 8022612:	e7d3      	b.n	80225bc <WM_SetFocusOnPrevChild+0x18>

08022614 <WM_SetHasTrans>:
 8022614:	b530      	push	{r4, r5, lr}
 8022616:	4604      	mov	r4, r0
 8022618:	b083      	sub	sp, #12
 802261a:	f7f0 fb59 	bl	8012cd0 <GUI_Lock>
 802261e:	b91c      	cbnz	r4, 8022628 <WM_SetHasTrans+0x14>
 8022620:	f7f0 fb4c 	bl	8012cbc <GUI_Unlock>
 8022624:	b003      	add	sp, #12
 8022626:	bd30      	pop	{r4, r5, pc}
 8022628:	4620      	mov	r0, r4
 802262a:	f7ee fb69 	bl	8010d00 <GUI_ALLOC_LockH>
 802262e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8022630:	9001      	str	r0, [sp, #4]
 8022632:	07db      	lsls	r3, r3, #31
 8022634:	d506      	bpl.n	8022644 <WM_SetHasTrans+0x30>
 8022636:	a801      	add	r0, sp, #4
 8022638:	f7ee fb74 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802263c:	f7f0 fb3e 	bl	8012cbc <GUI_Unlock>
 8022640:	b003      	add	sp, #12
 8022642:	bd30      	pop	{r4, r5, pc}
 8022644:	4620      	mov	r0, r4
 8022646:	f7f9 f9bd 	bl	801b9c4 <WM_ValidateWindow>
 802264a:	9d01      	ldr	r5, [sp, #4]
 802264c:	4905      	ldr	r1, [pc, #20]	; (8022664 <WM_SetHasTrans+0x50>)
 802264e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8022650:	680b      	ldr	r3, [r1, #0]
 8022652:	f042 0201 	orr.w	r2, r2, #1
 8022656:	3301      	adds	r3, #1
 8022658:	4620      	mov	r0, r4
 802265a:	62aa      	str	r2, [r5, #40]	; 0x28
 802265c:	600b      	str	r3, [r1, #0]
 802265e:	f7f7 fc77 	bl	8019f50 <WM_InvalidateWindow>
 8022662:	e7e8      	b.n	8022636 <WM_SetHasTrans+0x22>
 8022664:	20035e7c 	.word	0x20035e7c

08022668 <WM_GetHasTrans>:
 8022668:	b510      	push	{r4, lr}
 802266a:	4604      	mov	r4, r0
 802266c:	f7f0 fb30 	bl	8012cd0 <GUI_Lock>
 8022670:	b12c      	cbz	r4, 802267e <WM_GetHasTrans+0x16>
 8022672:	4620      	mov	r0, r4
 8022674:	f7ee fb3a 	bl	8010cec <GUI_ALLOC_h2p>
 8022678:	6a84      	ldr	r4, [r0, #40]	; 0x28
 802267a:	f004 0401 	and.w	r4, r4, #1
 802267e:	f7f0 fb1d 	bl	8012cbc <GUI_Unlock>
 8022682:	4620      	mov	r0, r4
 8022684:	bd10      	pop	{r4, pc}
 8022686:	bf00      	nop

08022688 <DROPDOWN__GetpItemLocked>:
 8022688:	b530      	push	{r4, r5, lr}
 802268a:	b083      	sub	sp, #12
 802268c:	460c      	mov	r4, r1
 802268e:	f7ee fb37 	bl	8010d00 <GUI_ALLOC_LockH>
 8022692:	ad02      	add	r5, sp, #8
 8022694:	4621      	mov	r1, r4
 8022696:	f845 0d04 	str.w	r0, [r5, #-4]!
 802269a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 802269c:	f000 f8d8 	bl	8022850 <GUI_ARRAY_GethItem>
 80226a0:	4604      	mov	r4, r0
 80226a2:	4628      	mov	r0, r5
 80226a4:	f7ee fb3e 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80226a8:	4620      	mov	r0, r4
 80226aa:	b10c      	cbz	r4, 80226b0 <DROPDOWN__GetpItemLocked+0x28>
 80226ac:	f7ee fb28 	bl	8010d00 <GUI_ALLOC_LockH>
 80226b0:	b003      	add	sp, #12
 80226b2:	bd30      	pop	{r4, r5, pc}

080226b4 <DROPDOWN_SetUpMode>:
 80226b4:	b530      	push	{r4, r5, lr}
 80226b6:	4604      	mov	r4, r0
 80226b8:	b083      	sub	sp, #12
 80226ba:	b910      	cbnz	r0, 80226c2 <DROPDOWN_SetUpMode+0xe>
 80226bc:	4620      	mov	r0, r4
 80226be:	b003      	add	sp, #12
 80226c0:	bd30      	pop	{r4, r5, pc}
 80226c2:	460d      	mov	r5, r1
 80226c4:	f7f0 fb04 	bl	8012cd0 <GUI_Lock>
 80226c8:	4620      	mov	r0, r4
 80226ca:	f7ee fb19 	bl	8010d00 <GUI_ALLOC_LockH>
 80226ce:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 80226d2:	9001      	str	r0, [sp, #4]
 80226d4:	f3c3 0440 	ubfx	r4, r3, #1, #1
 80226d8:	b95d      	cbnz	r5, 80226f2 <DROPDOWN_SetUpMode+0x3e>
 80226da:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80226de:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 80226e2:	a801      	add	r0, sp, #4
 80226e4:	f7ee fb1e 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80226e8:	f7f0 fae8 	bl	8012cbc <GUI_Unlock>
 80226ec:	4620      	mov	r0, r4
 80226ee:	b003      	add	sp, #12
 80226f0:	bd30      	pop	{r4, r5, pc}
 80226f2:	f043 0302 	orr.w	r3, r3, #2
 80226f6:	e7f2      	b.n	80226de <DROPDOWN_SetUpMode+0x2a>

080226f8 <DROPDOWN_SetTextAlign>:
 80226f8:	b900      	cbnz	r0, 80226fc <DROPDOWN_SetTextAlign+0x4>
 80226fa:	4770      	bx	lr
 80226fc:	b530      	push	{r4, r5, lr}
 80226fe:	4604      	mov	r4, r0
 8022700:	b083      	sub	sp, #12
 8022702:	460d      	mov	r5, r1
 8022704:	f7f0 fae4 	bl	8012cd0 <GUI_Lock>
 8022708:	4620      	mov	r0, r4
 802270a:	f7ee faf9 	bl	8010d00 <GUI_ALLOC_LockH>
 802270e:	ab02      	add	r3, sp, #8
 8022710:	f8a0 5082 	strh.w	r5, [r0, #130]	; 0x82
 8022714:	f843 0d04 	str.w	r0, [r3, #-4]!
 8022718:	4618      	mov	r0, r3
 802271a:	f7ee fb03 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802271e:	4620      	mov	r0, r4
 8022720:	f7f7 fc16 	bl	8019f50 <WM_InvalidateWindow>
 8022724:	f7f0 faca 	bl	8012cbc <GUI_Unlock>
 8022728:	b003      	add	sp, #12
 802272a:	bd30      	pop	{r4, r5, pc}

0802272c <GUI_ARRAY_GetNumItems>:
 802272c:	b510      	push	{r4, lr}
 802272e:	b082      	sub	sp, #8
 8022730:	b918      	cbnz	r0, 802273a <GUI_ARRAY_GetNumItems+0xe>
 8022732:	4604      	mov	r4, r0
 8022734:	4620      	mov	r0, r4
 8022736:	b002      	add	sp, #8
 8022738:	bd10      	pop	{r4, pc}
 802273a:	f7ee fae1 	bl	8010d00 <GUI_ALLOC_LockH>
 802273e:	ab02      	add	r3, sp, #8
 8022740:	8804      	ldrh	r4, [r0, #0]
 8022742:	f843 0d04 	str.w	r0, [r3, #-4]!
 8022746:	4618      	mov	r0, r3
 8022748:	f7ee faec 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802274c:	4620      	mov	r0, r4
 802274e:	b002      	add	sp, #8
 8022750:	bd10      	pop	{r4, pc}
 8022752:	bf00      	nop

08022754 <GUI_ARRAY_AddItem>:
 8022754:	b3a0      	cbz	r0, 80227c0 <GUI_ARRAY_AddItem+0x6c>
 8022756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802275a:	4604      	mov	r4, r0
 802275c:	b082      	sub	sp, #8
 802275e:	4608      	mov	r0, r1
 8022760:	bb7a      	cbnz	r2, 80227c2 <GUI_ARRAY_AddItem+0x6e>
 8022762:	4615      	mov	r5, r2
 8022764:	4620      	mov	r0, r4
 8022766:	f7ee facb 	bl	8010d00 <GUI_ALLOC_LockH>
 802276a:	ae02      	add	r6, sp, #8
 802276c:	8807      	ldrh	r7, [r0, #0]
 802276e:	f846 0d08 	str.w	r0, [r6, #-8]!
 8022772:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8022776:	4630      	mov	r0, r6
 8022778:	f7ee fad4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802277c:	1c79      	adds	r1, r7, #1
 802277e:	4640      	mov	r0, r8
 8022780:	0089      	lsls	r1, r1, #2
 8022782:	f7ee fd55 	bl	8011230 <GUI_ALLOC_Realloc>
 8022786:	4680      	mov	r8, r0
 8022788:	b360      	cbz	r0, 80227e4 <GUI_ARRAY_AddItem+0x90>
 802278a:	f7ee fab9 	bl	8010d00 <GUI_ALLOC_LockH>
 802278e:	ab02      	add	r3, sp, #8
 8022790:	f843 0d04 	str.w	r0, [r3, #-4]!
 8022794:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
 8022798:	4618      	mov	r0, r3
 802279a:	f7ee fac3 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802279e:	4620      	mov	r0, r4
 80227a0:	f7ee faae 	bl	8010d00 <GUI_ALLOC_LockH>
 80227a4:	8802      	ldrh	r2, [r0, #0]
 80227a6:	9000      	str	r0, [sp, #0]
 80227a8:	4603      	mov	r3, r0
 80227aa:	3201      	adds	r2, #1
 80227ac:	f8c0 8004 	str.w	r8, [r0, #4]
 80227b0:	4630      	mov	r0, r6
 80227b2:	801a      	strh	r2, [r3, #0]
 80227b4:	f7ee fab6 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80227b8:	2000      	movs	r0, #0
 80227ba:	b002      	add	sp, #8
 80227bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80227c0:	4770      	bx	lr
 80227c2:	4611      	mov	r1, r2
 80227c4:	f7ee fcaa 	bl	801111c <GUI_ALLOC_AllocInit>
 80227c8:	4605      	mov	r5, r0
 80227ca:	2800      	cmp	r0, #0
 80227cc:	d1ca      	bne.n	8022764 <GUI_ARRAY_AddItem+0x10>
 80227ce:	4620      	mov	r0, r4
 80227d0:	f7ee fa96 	bl	8010d00 <GUI_ALLOC_LockH>
 80227d4:	ab02      	add	r3, sp, #8
 80227d6:	f843 0d08 	str.w	r0, [r3, #-8]!
 80227da:	4618      	mov	r0, r3
 80227dc:	f7ee faa2 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80227e0:	2001      	movs	r0, #1
 80227e2:	e7ea      	b.n	80227ba <GUI_ARRAY_AddItem+0x66>
 80227e4:	4628      	mov	r0, r5
 80227e6:	f7ee fc21 	bl	801102c <GUI_ALLOC_Free>
 80227ea:	2001      	movs	r0, #1
 80227ec:	e7e5      	b.n	80227ba <GUI_ARRAY_AddItem+0x66>
 80227ee:	bf00      	nop

080227f0 <GUI_ARRAY_Delete>:
 80227f0:	b900      	cbnz	r0, 80227f4 <GUI_ARRAY_Delete+0x4>
 80227f2:	4770      	bx	lr
 80227f4:	b530      	push	{r4, r5, lr}
 80227f6:	b083      	sub	sp, #12
 80227f8:	4605      	mov	r5, r0
 80227fa:	f7ee fa81 	bl	8010d00 <GUI_ALLOC_LockH>
 80227fe:	9000      	str	r0, [sp, #0]
 8022800:	6840      	ldr	r0, [r0, #4]
 8022802:	b938      	cbnz	r0, 8022814 <GUI_ARRAY_Delete+0x24>
 8022804:	4668      	mov	r0, sp
 8022806:	f7ee fa8d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802280a:	4628      	mov	r0, r5
 802280c:	f7ee fc0e 	bl	801102c <GUI_ALLOC_Free>
 8022810:	b003      	add	sp, #12
 8022812:	bd30      	pop	{r4, r5, pc}
 8022814:	f7ee fa74 	bl	8010d00 <GUI_ALLOC_LockH>
 8022818:	9b00      	ldr	r3, [sp, #0]
 802281a:	9001      	str	r0, [sp, #4]
 802281c:	881b      	ldrh	r3, [r3, #0]
 802281e:	b15b      	cbz	r3, 8022838 <GUI_ARRAY_Delete+0x48>
 8022820:	2400      	movs	r4, #0
 8022822:	e000      	b.n	8022826 <GUI_ARRAY_Delete+0x36>
 8022824:	9801      	ldr	r0, [sp, #4]
 8022826:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 802282a:	f7ee fc1f 	bl	801106c <GUI_ALLOC_FreePtr>
 802282e:	9b00      	ldr	r3, [sp, #0]
 8022830:	881b      	ldrh	r3, [r3, #0]
 8022832:	3401      	adds	r4, #1
 8022834:	42a3      	cmp	r3, r4
 8022836:	dcf5      	bgt.n	8022824 <GUI_ARRAY_Delete+0x34>
 8022838:	a801      	add	r0, sp, #4
 802283a:	f7ee fa73 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802283e:	9800      	ldr	r0, [sp, #0]
 8022840:	3004      	adds	r0, #4
 8022842:	f7ee fc13 	bl	801106c <GUI_ALLOC_FreePtr>
 8022846:	9b00      	ldr	r3, [sp, #0]
 8022848:	2200      	movs	r2, #0
 802284a:	801a      	strh	r2, [r3, #0]
 802284c:	e7da      	b.n	8022804 <GUI_ARRAY_Delete+0x14>
 802284e:	bf00      	nop

08022850 <GUI_ARRAY_GethItem>:
 8022850:	b510      	push	{r4, lr}
 8022852:	b082      	sub	sp, #8
 8022854:	b918      	cbnz	r0, 802285e <GUI_ARRAY_GethItem+0xe>
 8022856:	4604      	mov	r4, r0
 8022858:	4620      	mov	r0, r4
 802285a:	b002      	add	sp, #8
 802285c:	bd10      	pop	{r4, pc}
 802285e:	460c      	mov	r4, r1
 8022860:	f7ee fa4e 	bl	8010d00 <GUI_ALLOC_LockH>
 8022864:	8803      	ldrh	r3, [r0, #0]
 8022866:	9000      	str	r0, [sp, #0]
 8022868:	429c      	cmp	r4, r3
 802286a:	d306      	bcc.n	802287a <GUI_ARRAY_GethItem+0x2a>
 802286c:	2400      	movs	r4, #0
 802286e:	4668      	mov	r0, sp
 8022870:	f7ee fa58 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022874:	4620      	mov	r0, r4
 8022876:	b002      	add	sp, #8
 8022878:	bd10      	pop	{r4, pc}
 802287a:	6840      	ldr	r0, [r0, #4]
 802287c:	b908      	cbnz	r0, 8022882 <GUI_ARRAY_GethItem+0x32>
 802287e:	4604      	mov	r4, r0
 8022880:	e7f5      	b.n	802286e <GUI_ARRAY_GethItem+0x1e>
 8022882:	f7ee fa3d 	bl	8010d00 <GUI_ALLOC_LockH>
 8022886:	ab02      	add	r3, sp, #8
 8022888:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 802288c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8022890:	4618      	mov	r0, r3
 8022892:	f7ee fa47 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022896:	e7ea      	b.n	802286e <GUI_ARRAY_GethItem+0x1e>

08022898 <GUI_ARRAY_GetpItemLocked>:
 8022898:	b510      	push	{r4, lr}
 802289a:	b082      	sub	sp, #8
 802289c:	b308      	cbz	r0, 80228e2 <GUI_ARRAY_GetpItemLocked+0x4a>
 802289e:	460c      	mov	r4, r1
 80228a0:	f7ee fa2e 	bl	8010d00 <GUI_ALLOC_LockH>
 80228a4:	8803      	ldrh	r3, [r0, #0]
 80228a6:	9000      	str	r0, [sp, #0]
 80228a8:	429c      	cmp	r4, r3
 80228aa:	d306      	bcc.n	80228ba <GUI_ARRAY_GetpItemLocked+0x22>
 80228ac:	2400      	movs	r4, #0
 80228ae:	4668      	mov	r0, sp
 80228b0:	f7ee fa38 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80228b4:	4620      	mov	r0, r4
 80228b6:	b002      	add	sp, #8
 80228b8:	bd10      	pop	{r4, pc}
 80228ba:	6840      	ldr	r0, [r0, #4]
 80228bc:	2800      	cmp	r0, #0
 80228be:	d0f5      	beq.n	80228ac <GUI_ARRAY_GetpItemLocked+0x14>
 80228c0:	f7ee fa1e 	bl	8010d00 <GUI_ALLOC_LockH>
 80228c4:	ab02      	add	r3, sp, #8
 80228c6:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80228ca:	f843 0d04 	str.w	r0, [r3, #-4]!
 80228ce:	4618      	mov	r0, r3
 80228d0:	f7ee fa28 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80228d4:	2c00      	cmp	r4, #0
 80228d6:	d0e9      	beq.n	80228ac <GUI_ARRAY_GetpItemLocked+0x14>
 80228d8:	4620      	mov	r0, r4
 80228da:	f7ee fa11 	bl	8010d00 <GUI_ALLOC_LockH>
 80228de:	4604      	mov	r4, r0
 80228e0:	e7e5      	b.n	80228ae <GUI_ARRAY_GetpItemLocked+0x16>
 80228e2:	4604      	mov	r4, r0
 80228e4:	4620      	mov	r0, r4
 80228e6:	b002      	add	sp, #8
 80228e8:	bd10      	pop	{r4, pc}
 80228ea:	bf00      	nop

080228ec <GUI_ARRAY_Create>:
 80228ec:	2008      	movs	r0, #8
 80228ee:	f7ee bc5d 	b.w	80111ac <GUI_ALLOC_AllocZero>
 80228f2:	bf00      	nop

080228f4 <HEADER_SetItemWidth>:
 80228f4:	b1d8      	cbz	r0, 802292e <HEADER_SetItemWidth+0x3a>
 80228f6:	2a00      	cmp	r2, #0
 80228f8:	db19      	blt.n	802292e <HEADER_SetItemWidth+0x3a>
 80228fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228fc:	4605      	mov	r5, r0
 80228fe:	b087      	sub	sp, #28
 8022900:	460e      	mov	r6, r1
 8022902:	4614      	mov	r4, r2
 8022904:	f7f0 f9e4 	bl	8012cd0 <GUI_Lock>
 8022908:	4628      	mov	r0, r5
 802290a:	f7ee f9f9 	bl	8010d00 <GUI_ALLOC_LockH>
 802290e:	ab06      	add	r3, sp, #24
 8022910:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8022912:	f843 0d18 	str.w	r0, [r3, #-24]!
 8022916:	4618      	mov	r0, r3
 8022918:	f7ee fa04 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802291c:	4638      	mov	r0, r7
 802291e:	f7ff ff05 	bl	802272c <GUI_ARRAY_GetNumItems>
 8022922:	4286      	cmp	r6, r0
 8022924:	d304      	bcc.n	8022930 <HEADER_SetItemWidth+0x3c>
 8022926:	f7f0 f9c9 	bl	8012cbc <GUI_Unlock>
 802292a:	b007      	add	sp, #28
 802292c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802292e:	4770      	bx	lr
 8022930:	4631      	mov	r1, r6
 8022932:	4638      	mov	r0, r7
 8022934:	f7ff ffb0 	bl	8022898 <GUI_ARRAY_GetpItemLocked>
 8022938:	9001      	str	r0, [sp, #4]
 802293a:	b1b8      	cbz	r0, 802296c <HEADER_SetItemWidth+0x78>
 802293c:	6004      	str	r4, [r0, #0]
 802293e:	a801      	add	r0, sp, #4
 8022940:	f7ee f9f0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022944:	4628      	mov	r0, r5
 8022946:	f7f8 fcd5 	bl	801b2f4 <WM_GetParent>
 802294a:	2325      	movs	r3, #37	; 0x25
 802294c:	9003      	str	r0, [sp, #12]
 802294e:	4628      	mov	r0, r5
 8022950:	9302      	str	r3, [sp, #8]
 8022952:	9504      	str	r5, [sp, #16]
 8022954:	f7f7 fafc 	bl	8019f50 <WM_InvalidateWindow>
 8022958:	a902      	add	r1, sp, #8
 802295a:	9803      	ldr	r0, [sp, #12]
 802295c:	f7f9 ff58 	bl	801c810 <WM__SendMessage>
 8022960:	4628      	mov	r0, r5
 8022962:	f7f8 fcc7 	bl	801b2f4 <WM_GetParent>
 8022966:	f7f7 faf3 	bl	8019f50 <WM_InvalidateWindow>
 802296a:	e7dc      	b.n	8022926 <HEADER_SetItemWidth+0x32>
 802296c:	a801      	add	r0, sp, #4
 802296e:	f7ee f9d9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022972:	e7d8      	b.n	8022926 <HEADER_SetItemWidth+0x32>

08022974 <HEADER_GetItemWidth>:
 8022974:	b530      	push	{r4, r5, lr}
 8022976:	4604      	mov	r4, r0
 8022978:	b083      	sub	sp, #12
 802297a:	b910      	cbnz	r0, 8022982 <HEADER_GetItemWidth+0xe>
 802297c:	4620      	mov	r0, r4
 802297e:	b003      	add	sp, #12
 8022980:	bd30      	pop	{r4, r5, pc}
 8022982:	460d      	mov	r5, r1
 8022984:	f7f0 f9a4 	bl	8012cd0 <GUI_Lock>
 8022988:	4620      	mov	r0, r4
 802298a:	f7ee f9b9 	bl	8010d00 <GUI_ALLOC_LockH>
 802298e:	9001      	str	r0, [sp, #4]
 8022990:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8022992:	f7ff fecb 	bl	802272c <GUI_ARRAY_GetNumItems>
 8022996:	4285      	cmp	r5, r0
 8022998:	d308      	bcc.n	80229ac <HEADER_GetItemWidth+0x38>
 802299a:	2400      	movs	r4, #0
 802299c:	a801      	add	r0, sp, #4
 802299e:	f7ee f9c1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80229a2:	f7f0 f98b 	bl	8012cbc <GUI_Unlock>
 80229a6:	4620      	mov	r0, r4
 80229a8:	b003      	add	sp, #12
 80229aa:	bd30      	pop	{r4, r5, pc}
 80229ac:	9b01      	ldr	r3, [sp, #4]
 80229ae:	4629      	mov	r1, r5
 80229b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80229b2:	f7ff ff71 	bl	8022898 <GUI_ARRAY_GetpItemLocked>
 80229b6:	ab02      	add	r3, sp, #8
 80229b8:	6804      	ldr	r4, [r0, #0]
 80229ba:	f843 0d08 	str.w	r0, [r3, #-8]!
 80229be:	4618      	mov	r0, r3
 80229c0:	f7ee f9b0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80229c4:	e7ea      	b.n	802299c <HEADER_GetItemWidth+0x28>
 80229c6:	bf00      	nop

080229c8 <_Create>:
 80229c8:	b530      	push	{r4, r5, lr}
 80229ca:	b08b      	sub	sp, #44	; 0x2c
 80229cc:	4605      	mov	r5, r0
 80229ce:	f7ee f997 	bl	8010d00 <GUI_ALLOC_LockH>
 80229d2:	ab0a      	add	r3, sp, #40	; 0x28
 80229d4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80229d6:	f843 0d28 	str.w	r0, [r3, #-40]!
 80229da:	4618      	mov	r0, r3
 80229dc:	6894      	ldr	r4, [r2, #8]
 80229de:	f7ee f9a1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80229e2:	a80a      	add	r0, sp, #40	; 0x28
 80229e4:	2200      	movs	r2, #0
 80229e6:	6823      	ldr	r3, [r4, #0]
 80229e8:	f840 5d24 	str.w	r5, [r0, #-36]!
 80229ec:	9202      	str	r2, [sp, #8]
 80229ee:	4798      	blx	r3
 80229f0:	b00b      	add	sp, #44	; 0x2c
 80229f2:	bd30      	pop	{r4, r5, pc}

080229f4 <_Paint>:
 80229f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229f8:	b093      	sub	sp, #76	; 0x4c
 80229fa:	4605      	mov	r5, r0
 80229fc:	f7ee f980 	bl	8010d00 <GUI_ALLOC_LockH>
 8022a00:	4604      	mov	r4, r0
 8022a02:	a812      	add	r0, sp, #72	; 0x48
 8022a04:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8022a06:	9300      	str	r3, [sp, #0]
 8022a08:	461f      	mov	r7, r3
 8022a0a:	f840 4d3c 	str.w	r4, [r0, #-60]!
 8022a0e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8022a10:	9301      	str	r3, [sp, #4]
 8022a12:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8022a14:	f8d4 a068 	ldr.w	sl, [r4, #104]	; 0x68
 8022a18:	f8d4 8058 	ldr.w	r8, [r4, #88]	; 0x58
 8022a1c:	f7ee f982 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022a20:	4638      	mov	r0, r7
 8022a22:	f7ff fe83 	bl	802272c <GUI_ARRAY_GetNumItems>
 8022a26:	a907      	add	r1, sp, #28
 8022a28:	4681      	mov	r9, r0
 8022a2a:	4620      	mov	r0, r4
 8022a2c:	f7fb fb1a 	bl	801e064 <WIDGET__GetClientRect>
 8022a30:	f1c8 0400 	rsb	r4, r8, #0
 8022a34:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8022a38:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8022a3c:	9509      	str	r5, [sp, #36]	; 0x24
 8022a3e:	f1b9 0f00 	cmp.w	r9, #0
 8022a42:	940f      	str	r4, [sp, #60]	; 0x3c
 8022a44:	940d      	str	r4, [sp, #52]	; 0x34
 8022a46:	920e      	str	r2, [sp, #56]	; 0x38
 8022a48:	f8ad 2016 	strh.w	r2, [sp, #22]
 8022a4c:	9310      	str	r3, [sp, #64]	; 0x40
 8022a4e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8022a52:	dd3d      	ble.n	8022ad0 <_Paint+0xdc>
 8022a54:	2500      	movs	r5, #0
 8022a56:	e012      	b.n	8022a7e <_Paint+0x8a>
 8022a58:	2312      	movs	r3, #18
 8022a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8022a5c:	a809      	add	r0, sp, #36	; 0x24
 8022a5e:	47b0      	blx	r6
 8022a60:	9b01      	ldr	r3, [sp, #4]
 8022a62:	42ab      	cmp	r3, r5
 8022a64:	f105 0501 	add.w	r5, r5, #1
 8022a68:	d04a      	beq.n	8022b00 <_Paint+0x10c>
 8022a6a:	2000      	movs	r0, #0
 8022a6c:	f7f8 fe54 	bl	801b718 <WM_SetUserClipRect>
 8022a70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a74:	1ad3      	subs	r3, r2, r3
 8022a76:	3301      	adds	r3, #1
 8022a78:	45a9      	cmp	r9, r5
 8022a7a:	441c      	add	r4, r3
 8022a7c:	d029      	beq.n	8022ad2 <_Paint+0xde>
 8022a7e:	4629      	mov	r1, r5
 8022a80:	9800      	ldr	r0, [sp, #0]
 8022a82:	f7ff ff09 	bl	8022898 <GUI_ARRAY_GetpItemLocked>
 8022a86:	4602      	mov	r2, r0
 8022a88:	a804      	add	r0, sp, #16
 8022a8a:	f8d2 b000 	ldr.w	fp, [r2]
 8022a8e:	6897      	ldr	r7, [r2, #8]
 8022a90:	9204      	str	r2, [sp, #16]
 8022a92:	f7ee f947 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022a96:	45aa      	cmp	sl, r5
 8022a98:	bfcc      	ite	gt
 8022a9a:	4641      	movgt	r1, r8
 8022a9c:	2100      	movle	r1, #0
 8022a9e:	440c      	add	r4, r1
 8022aa0:	eb0b 0304 	add.w	r3, fp, r4
 8022aa4:	3b01      	subs	r3, #1
 8022aa6:	a805      	add	r0, sp, #20
 8022aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8022aaa:	f8ad 3018 	strh.w	r3, [sp, #24]
 8022aae:	940d      	str	r4, [sp, #52]	; 0x34
 8022ab0:	f8ad 4014 	strh.w	r4, [sp, #20]
 8022ab4:	f7f8 fe30 	bl	801b718 <WM_SetUserClipRect>
 8022ab8:	2305      	movs	r3, #5
 8022aba:	950b      	str	r5, [sp, #44]	; 0x2c
 8022abc:	930a      	str	r3, [sp, #40]	; 0x28
 8022abe:	a809      	add	r0, sp, #36	; 0x24
 8022ac0:	47b0      	blx	r6
 8022ac2:	2f00      	cmp	r7, #0
 8022ac4:	d0c8      	beq.n	8022a58 <_Paint+0x64>
 8022ac6:	2306      	movs	r3, #6
 8022ac8:	930a      	str	r3, [sp, #40]	; 0x28
 8022aca:	a809      	add	r0, sp, #36	; 0x24
 8022acc:	47b0      	blx	r6
 8022ace:	e7c3      	b.n	8022a58 <_Paint+0x64>
 8022ad0:	4622      	mov	r2, r4
 8022ad2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8022ad6:	4293      	cmp	r3, r2
 8022ad8:	dd0f      	ble.n	8022afa <_Paint+0x106>
 8022ada:	a805      	add	r0, sp, #20
 8022adc:	930f      	str	r3, [sp, #60]	; 0x3c
 8022ade:	f8ad 3018 	strh.w	r3, [sp, #24]
 8022ae2:	940d      	str	r4, [sp, #52]	; 0x34
 8022ae4:	f8ad 4014 	strh.w	r4, [sp, #20]
 8022ae8:	f7f8 fe16 	bl	801b718 <WM_SetUserClipRect>
 8022aec:	230c      	movs	r3, #12
 8022aee:	930a      	str	r3, [sp, #40]	; 0x28
 8022af0:	a809      	add	r0, sp, #36	; 0x24
 8022af2:	47b0      	blx	r6
 8022af4:	2000      	movs	r0, #0
 8022af6:	f7f8 fe0f 	bl	801b718 <WM_SetUserClipRect>
 8022afa:	b013      	add	sp, #76	; 0x4c
 8022afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b00:	2302      	movs	r3, #2
 8022b02:	930a      	str	r3, [sp, #40]	; 0x28
 8022b04:	a809      	add	r0, sp, #36	; 0x24
 8022b06:	47b0      	blx	r6
 8022b08:	e7af      	b.n	8022a6a <_Paint+0x76>
 8022b0a:	bf00      	nop

08022b0c <HEADER_DrawSkinFlex>:
 8022b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022b10:	6843      	ldr	r3, [r0, #4]
 8022b12:	3b02      	subs	r3, #2
 8022b14:	b086      	sub	sp, #24
 8022b16:	4604      	mov	r4, r0
 8022b18:	2b10      	cmp	r3, #16
 8022b1a:	d84a      	bhi.n	8022bb2 <HEADER_DrawSkinFlex+0xa6>
 8022b1c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8022b20:	004900a4 	.word	0x004900a4
 8022b24:	01130049 	.word	0x01130049
 8022b28:	00490011 	.word	0x00490011
 8022b2c:	00490049 	.word	0x00490049
 8022b30:	00490049 	.word	0x00490049
 8022b34:	004900e2 	.word	0x004900e2
 8022b38:	00490049 	.word	0x00490049
 8022b3c:	00490049 	.word	0x00490049
 8022b40:	004d      	.short	0x004d
 8022b42:	6800      	ldr	r0, [r0, #0]
 8022b44:	f7ee f8dc 	bl	8010d00 <GUI_ALLOC_LockH>
 8022b48:	ab06      	add	r3, sp, #24
 8022b4a:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8022b4c:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8022b50:	4618      	mov	r0, r3
 8022b52:	f7ee f8e7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022b56:	4628      	mov	r0, r5
 8022b58:	68a1      	ldr	r1, [r4, #8]
 8022b5a:	f7ff fe9d 	bl	8022898 <GUI_ARRAY_GetpItemLocked>
 8022b5e:	9004      	str	r0, [sp, #16]
 8022b60:	b338      	cbz	r0, 8022bb2 <HEADER_DrawSkinFlex+0xa6>
 8022b62:	6885      	ldr	r5, [r0, #8]
 8022b64:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8022b68:	6807      	ldr	r7, [r0, #0]
 8022b6a:	a804      	add	r0, sp, #16
 8022b6c:	f7ee f8da 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022b70:	4628      	mov	r0, r5
 8022b72:	f7fb f889 	bl	801dc88 <GUI_DRAW__GetXSize>
 8022b76:	4680      	mov	r8, r0
 8022b78:	4628      	mov	r0, r5
 8022b7a:	f7fb f899 	bl	801dcb0 <GUI_DRAW__GetYSize>
 8022b7e:	f006 0303 	and.w	r3, r6, #3
 8022b82:	2b01      	cmp	r3, #1
 8022b84:	f000 811e 	beq.w	8022dc4 <HEADER_DrawSkinFlex+0x2b8>
 8022b88:	2b02      	cmp	r3, #2
 8022b8a:	f000 8115 	beq.w	8022db8 <HEADER_DrawSkinFlex+0x2ac>
 8022b8e:	2200      	movs	r2, #0
 8022b90:	f006 060c 	and.w	r6, r6, #12
 8022b94:	2e04      	cmp	r6, #4
 8022b96:	6963      	ldr	r3, [r4, #20]
 8022b98:	f000 811f 	beq.w	8022dda <HEADER_DrawSkinFlex+0x2ce>
 8022b9c:	2e0c      	cmp	r6, #12
 8022b9e:	f000 8114 	beq.w	8022dca <HEADER_DrawSkinFlex+0x2be>
 8022ba2:	2000      	movs	r0, #0
 8022ba4:	6926      	ldr	r6, [r4, #16]
 8022ba6:	6821      	ldr	r1, [r4, #0]
 8022ba8:	4403      	add	r3, r0
 8022baa:	4432      	add	r2, r6
 8022bac:	4628      	mov	r0, r5
 8022bae:	f7fb f84f 	bl	801dc50 <GUI_DRAW__Draw>
 8022bb2:	2000      	movs	r0, #0
 8022bb4:	b006      	add	sp, #24
 8022bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022bba:	6800      	ldr	r0, [r0, #0]
 8022bbc:	f7ee f8a0 	bl	8010d00 <GUI_ALLOC_LockH>
 8022bc0:	4603      	mov	r3, r0
 8022bc2:	a806      	add	r0, sp, #24
 8022bc4:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8022bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022bc8:	f840 3d10 	str.w	r3, [r0, #-16]!
 8022bcc:	6817      	ldr	r7, [r2, #0]
 8022bce:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
 8022bd2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8022bd4:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
 8022bd8:	f7ee f8a4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022bdc:	4628      	mov	r0, r5
 8022bde:	68a1      	ldr	r1, [r4, #8]
 8022be0:	f7ff fe5a 	bl	8022898 <GUI_ARRAY_GetpItemLocked>
 8022be4:	4605      	mov	r5, r0
 8022be6:	9003      	str	r0, [sp, #12]
 8022be8:	2800      	cmp	r0, #0
 8022bea:	d0e2      	beq.n	8022bb2 <HEADER_DrawSkinFlex+0xa6>
 8022bec:	a803      	add	r0, sp, #12
 8022bee:	f9b5 a004 	ldrsh.w	sl, [r5, #4]
 8022bf2:	f7ee f897 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022bf6:	6963      	ldr	r3, [r4, #20]
 8022bf8:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022bfc:	463a      	mov	r2, r7
 8022bfe:	a904      	add	r1, sp, #16
 8022c00:	6927      	ldr	r7, [r4, #16]
 8022c02:	69e3      	ldr	r3, [r4, #28]
 8022c04:	f8ad 7010 	strh.w	r7, [sp, #16]
 8022c08:	4608      	mov	r0, r1
 8022c0a:	69a7      	ldr	r7, [r4, #24]
 8022c0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022c10:	f8ad 7014 	strh.w	r7, [sp, #20]
 8022c14:	f7f1 f936 	bl	8013e84 <GUI__ReduceRect>
 8022c18:	68a3      	ldr	r3, [r4, #8]
 8022c1a:	4599      	cmp	r9, r3
 8022c1c:	f105 050c 	add.w	r5, r5, #12
 8022c20:	d110      	bne.n	8022c44 <HEADER_DrawSkinFlex+0x138>
 8022c22:	6961      	ldr	r1, [r4, #20]
 8022c24:	69e2      	ldr	r2, [r4, #28]
 8022c26:	4b6f      	ldr	r3, [pc, #444]	; (8022de4 <HEADER_DrawSkinFlex+0x2d8>)
 8022c28:	1a52      	subs	r2, r2, r1
 8022c2a:	3a04      	subs	r2, #4
 8022c2c:	fb83 1302 	smull	r1, r3, r3, r2
 8022c30:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022c34:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8022c38:	3b01      	subs	r3, #1
 8022c3a:	1e4a      	subs	r2, r1, #1
 8022c3c:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8022c40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022c44:	4640      	mov	r0, r8
 8022c46:	f7ee fdb9 	bl	80117bc <GUI_SetColor>
 8022c4a:	2002      	movs	r0, #2
 8022c4c:	f7ee fe48 	bl	80118e0 <GUI_SetTextMode>
 8022c50:	4630      	mov	r0, r6
 8022c52:	f7ee fe15 	bl	8011880 <GUI_SetFont>
 8022c56:	4628      	mov	r0, r5
 8022c58:	4652      	mov	r2, sl
 8022c5a:	a904      	add	r1, sp, #16
 8022c5c:	f7ef fc48 	bl	80124f0 <GUI_DispStringInRect>
 8022c60:	2000      	movs	r0, #0
 8022c62:	b006      	add	sp, #24
 8022c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c68:	6800      	ldr	r0, [r0, #0]
 8022c6a:	4d5e      	ldr	r5, [pc, #376]	; (8022de4 <HEADER_DrawSkinFlex+0x2d8>)
 8022c6c:	f7ee f848 	bl	8010d00 <GUI_ALLOC_LockH>
 8022c70:	ab06      	add	r3, sp, #24
 8022c72:	6e46      	ldr	r6, [r0, #100]	; 0x64
 8022c74:	f843 0d08 	str.w	r0, [r3, #-8]!
 8022c78:	4618      	mov	r0, r3
 8022c7a:	f7ee f853 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022c7e:	69e2      	ldr	r2, [r4, #28]
 8022c80:	6963      	ldr	r3, [r4, #20]
 8022c82:	4959      	ldr	r1, [pc, #356]	; (8022de8 <HEADER_DrawSkinFlex+0x2dc>)
 8022c84:	69a7      	ldr	r7, [r4, #24]
 8022c86:	6988      	ldr	r0, [r1, #24]
 8022c88:	1ad3      	subs	r3, r2, r3
 8022c8a:	3b04      	subs	r3, #4
 8022c8c:	fb85 2503 	smull	r2, r5, r5, r3
 8022c90:	eba5 73e3 	sub.w	r3, r5, r3, asr #31
 8022c94:	1e5d      	subs	r5, r3, #1
 8022c96:	f106 0801 	add.w	r8, r6, #1
 8022c9a:	f7ee fd8f 	bl	80117bc <GUI_SetColor>
 8022c9e:	eba6 0286 	sub.w	r2, r6, r6, lsl #2
 8022ca2:	69e1      	ldr	r1, [r4, #28]
 8022ca4:	6966      	ldr	r6, [r4, #20]
 8022ca6:	106b      	asrs	r3, r5, #1
 8022ca8:	4490      	add	r8, r2
 8022caa:	fb08 f303 	mul.w	r3, r8, r3
 8022cae:	3f04      	subs	r7, #4
 8022cb0:	1b8e      	subs	r6, r1, r6
 8022cb2:	2d00      	cmp	r5, #0
 8022cb4:	ebc3 0666 	rsb	r6, r3, r6, asr #1
 8022cb8:	eba7 0305 	sub.w	r3, r7, r5
 8022cbc:	f6ff af79 	blt.w	8022bb2 <HEADER_DrawSkinFlex+0xa6>
 8022cc0:	1b5c      	subs	r4, r3, r5
 8022cc2:	463d      	mov	r5, r7
 8022cc4:	1c5f      	adds	r7, r3, #1
 8022cc6:	462a      	mov	r2, r5
 8022cc8:	4621      	mov	r1, r4
 8022cca:	4630      	mov	r0, r6
 8022ccc:	3401      	adds	r4, #1
 8022cce:	f7ef fd4b 	bl	8012768 <GUI_DrawHLine>
 8022cd2:	42a7      	cmp	r7, r4
 8022cd4:	f105 35ff 	add.w	r5, r5, #4294967295
 8022cd8:	4446      	add	r6, r8
 8022cda:	d1f4      	bne.n	8022cc6 <HEADER_DrawSkinFlex+0x1ba>
 8022cdc:	2000      	movs	r0, #0
 8022cde:	b006      	add	sp, #24
 8022ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ce4:	4e40      	ldr	r6, [pc, #256]	; (8022de8 <HEADER_DrawSkinFlex+0x2dc>)
 8022ce6:	6943      	ldr	r3, [r0, #20]
 8022ce8:	69c5      	ldr	r5, [r0, #28]
 8022cea:	6830      	ldr	r0, [r6, #0]
 8022cec:	441d      	add	r5, r3
 8022cee:	f7ee fd65 	bl	80117bc <GUI_SetColor>
 8022cf2:	69a2      	ldr	r2, [r4, #24]
 8022cf4:	6921      	ldr	r1, [r4, #16]
 8022cf6:	69e0      	ldr	r0, [r4, #28]
 8022cf8:	f7ef fd36 	bl	8012768 <GUI_DrawHLine>
 8022cfc:	6870      	ldr	r0, [r6, #4]
 8022cfe:	f7ee fd5d 	bl	80117bc <GUI_SetColor>
 8022d02:	69e2      	ldr	r2, [r4, #28]
 8022d04:	6961      	ldr	r1, [r4, #20]
 8022d06:	6920      	ldr	r0, [r4, #16]
 8022d08:	3a01      	subs	r2, #1
 8022d0a:	f7ef fd83 	bl	8012814 <GUI_DrawVLine>
 8022d0e:	f104 0010 	add.w	r0, r4, #16
 8022d12:	c807      	ldmia	r0, {r0, r1, r2}
 8022d14:	68f3      	ldr	r3, [r6, #12]
 8022d16:	9301      	str	r3, [sp, #4]
 8022d18:	68b3      	ldr	r3, [r6, #8]
 8022d1a:	9300      	str	r3, [sp, #0]
 8022d1c:	106d      	asrs	r5, r5, #1
 8022d1e:	1e6b      	subs	r3, r5, #1
 8022d20:	3001      	adds	r0, #1
 8022d22:	f7fc f95d 	bl	801efe0 <GUI_DrawGradientV>
 8022d26:	69e3      	ldr	r3, [r4, #28]
 8022d28:	6920      	ldr	r0, [r4, #16]
 8022d2a:	69a2      	ldr	r2, [r4, #24]
 8022d2c:	6971      	ldr	r1, [r6, #20]
 8022d2e:	6934      	ldr	r4, [r6, #16]
 8022d30:	9400      	str	r4, [sp, #0]
 8022d32:	9101      	str	r1, [sp, #4]
 8022d34:	3b01      	subs	r3, #1
 8022d36:	4629      	mov	r1, r5
 8022d38:	3001      	adds	r0, #1
 8022d3a:	f7fc f951 	bl	801efe0 <GUI_DrawGradientV>
 8022d3e:	2000      	movs	r0, #0
 8022d40:	b006      	add	sp, #24
 8022d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d46:	4e28      	ldr	r6, [pc, #160]	; (8022de8 <HEADER_DrawSkinFlex+0x2dc>)
 8022d48:	6943      	ldr	r3, [r0, #20]
 8022d4a:	69c5      	ldr	r5, [r0, #28]
 8022d4c:	6830      	ldr	r0, [r6, #0]
 8022d4e:	441d      	add	r5, r3
 8022d50:	f7ee fd34 	bl	80117bc <GUI_SetColor>
 8022d54:	69e2      	ldr	r2, [r4, #28]
 8022d56:	6961      	ldr	r1, [r4, #20]
 8022d58:	69a0      	ldr	r0, [r4, #24]
 8022d5a:	3a01      	subs	r2, #1
 8022d5c:	f7ef fd5a 	bl	8012814 <GUI_DrawVLine>
 8022d60:	69a2      	ldr	r2, [r4, #24]
 8022d62:	6921      	ldr	r1, [r4, #16]
 8022d64:	69e0      	ldr	r0, [r4, #28]
 8022d66:	f7ef fcff 	bl	8012768 <GUI_DrawHLine>
 8022d6a:	6870      	ldr	r0, [r6, #4]
 8022d6c:	f7ee fd26 	bl	80117bc <GUI_SetColor>
 8022d70:	69e2      	ldr	r2, [r4, #28]
 8022d72:	6961      	ldr	r1, [r4, #20]
 8022d74:	6920      	ldr	r0, [r4, #16]
 8022d76:	3a01      	subs	r2, #1
 8022d78:	f7ef fd4c 	bl	8012814 <GUI_DrawVLine>
 8022d7c:	f104 0010 	add.w	r0, r4, #16
 8022d80:	c807      	ldmia	r0, {r0, r1, r2}
 8022d82:	68f3      	ldr	r3, [r6, #12]
 8022d84:	9301      	str	r3, [sp, #4]
 8022d86:	68b3      	ldr	r3, [r6, #8]
 8022d88:	9300      	str	r3, [sp, #0]
 8022d8a:	106d      	asrs	r5, r5, #1
 8022d8c:	1e6b      	subs	r3, r5, #1
 8022d8e:	3a01      	subs	r2, #1
 8022d90:	3001      	adds	r0, #1
 8022d92:	f7fc f925 	bl	801efe0 <GUI_DrawGradientV>
 8022d96:	69e3      	ldr	r3, [r4, #28]
 8022d98:	69a2      	ldr	r2, [r4, #24]
 8022d9a:	6920      	ldr	r0, [r4, #16]
 8022d9c:	6971      	ldr	r1, [r6, #20]
 8022d9e:	6934      	ldr	r4, [r6, #16]
 8022da0:	9400      	str	r4, [sp, #0]
 8022da2:	9101      	str	r1, [sp, #4]
 8022da4:	3b01      	subs	r3, #1
 8022da6:	4629      	mov	r1, r5
 8022da8:	3a01      	subs	r2, #1
 8022daa:	3001      	adds	r0, #1
 8022dac:	f7fc f918 	bl	801efe0 <GUI_DrawGradientV>
 8022db0:	2000      	movs	r0, #0
 8022db2:	b006      	add	sp, #24
 8022db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022db8:	ebc8 0207 	rsb	r2, r8, r7
 8022dbc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8022dc0:	1052      	asrs	r2, r2, #1
 8022dc2:	e6e5      	b.n	8022b90 <HEADER_DrawSkinFlex+0x84>
 8022dc4:	ebc8 0207 	rsb	r2, r8, r7
 8022dc8:	e6e2      	b.n	8022b90 <HEADER_DrawSkinFlex+0x84>
 8022dca:	69e1      	ldr	r1, [r4, #28]
 8022dcc:	1ac9      	subs	r1, r1, r3
 8022dce:	3101      	adds	r1, #1
 8022dd0:	1a08      	subs	r0, r1, r0
 8022dd2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8022dd6:	1040      	asrs	r0, r0, #1
 8022dd8:	e6e4      	b.n	8022ba4 <HEADER_DrawSkinFlex+0x98>
 8022dda:	69e1      	ldr	r1, [r4, #28]
 8022ddc:	1ac9      	subs	r1, r1, r3
 8022dde:	3101      	adds	r1, #1
 8022de0:	1a08      	subs	r0, r1, r0
 8022de2:	e6df      	b.n	8022ba4 <HEADER_DrawSkinFlex+0x98>
 8022de4:	55555556 	.word	0x55555556
 8022de8:	2000038c 	.word	0x2000038c

08022dec <SCROLLBAR__Rect2VRect>:
 8022dec:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8022dee:	071b      	lsls	r3, r3, #28
 8022df0:	d516      	bpl.n	8022e20 <SCROLLBAR__Rect2VRect+0x34>
 8022df2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8022df6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8022dfa:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 8022dfe:	b470      	push	{r4, r5, r6}
 8022e00:	1ad3      	subs	r3, r2, r3
 8022e02:	f9b1 4000 	ldrsh.w	r4, [r1]
 8022e06:	88ce      	ldrh	r6, [r1, #6]
 8022e08:	884d      	ldrh	r5, [r1, #2]
 8022e0a:	808e      	strh	r6, [r1, #4]
 8022e0c:	3301      	adds	r3, #1
 8022e0e:	b29b      	uxth	r3, r3
 8022e10:	43e4      	mvns	r4, r4
 8022e12:	43c2      	mvns	r2, r0
 8022e14:	800d      	strh	r5, [r1, #0]
 8022e16:	1918      	adds	r0, r3, r4
 8022e18:	bc70      	pop	{r4, r5, r6}
 8022e1a:	4413      	add	r3, r2
 8022e1c:	80c8      	strh	r0, [r1, #6]
 8022e1e:	804b      	strh	r3, [r1, #2]
 8022e20:	4770      	bx	lr
 8022e22:	bf00      	nop

08022e24 <_Create>:
 8022e24:	b530      	push	{r4, r5, lr}
 8022e26:	b08d      	sub	sp, #52	; 0x34
 8022e28:	4605      	mov	r5, r0
 8022e2a:	f7ed ff69 	bl	8010d00 <GUI_ALLOC_LockH>
 8022e2e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8022e30:	4909      	ldr	r1, [pc, #36]	; (8022e58 <_Create+0x34>)
 8022e32:	6481      	str	r1, [r0, #72]	; 0x48
 8022e34:	4603      	mov	r3, r0
 8022e36:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8022e3a:	4668      	mov	r0, sp
 8022e3c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8022e3e:	9300      	str	r3, [sp, #0]
 8022e40:	9201      	str	r2, [sp, #4]
 8022e42:	f7ed ff6f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022e46:	2200      	movs	r2, #0
 8022e48:	ab01      	add	r3, sp, #4
 8022e4a:	9503      	str	r5, [sp, #12]
 8022e4c:	9204      	str	r2, [sp, #16]
 8022e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022e50:	a803      	add	r0, sp, #12
 8022e52:	47a0      	blx	r4
 8022e54:	b00d      	add	sp, #52	; 0x34
 8022e56:	bd30      	pop	{r4, r5, pc}
 8022e58:	08022e5d 	.word	0x08022e5d

08022e5c <_CalcPositions>:
 8022e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e60:	b090      	sub	sp, #64	; 0x40
 8022e62:	460c      	mov	r4, r1
 8022e64:	4606      	mov	r6, r0
 8022e66:	f7ed ff4b 	bl	8010d00 <GUI_ALLOC_LockH>
 8022e6a:	4605      	mov	r5, r0
 8022e6c:	c803      	ldmia	r0, {r0, r1}
 8022e6e:	af03      	add	r7, sp, #12
 8022e70:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8022e72:	9500      	str	r5, [sp, #0]
 8022e74:	e887 0003 	stmia.w	r7, {r0, r1}
 8022e78:	f003 0308 	and.w	r3, r3, #8
 8022e7c:	b29b      	uxth	r3, r3
 8022e7e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8022e82:	f9bd 900e 	ldrsh.w	r9, [sp, #14]
 8022e86:	2b00      	cmp	r3, #0
 8022e88:	d06f      	beq.n	8022f6a <_CalcPositions+0x10e>
 8022e8a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8022e8e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8022e92:	4696      	mov	lr, r2
 8022e94:	3300      	adds	r3, #0
 8022e96:	bf18      	it	ne
 8022e98:	2301      	movne	r3, #1
 8022e9a:	2019      	movs	r0, #25
 8022e9c:	a901      	add	r1, sp, #4
 8022e9e:	9301      	str	r3, [sp, #4]
 8022ea0:	61a2      	str	r2, [r4, #24]
 8022ea2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8022ea4:	9607      	str	r6, [sp, #28]
 8022ea6:	9008      	str	r0, [sp, #32]
 8022ea8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8022eac:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8022eb0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8022eb4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8022eb8:	910f      	str	r1, [sp, #60]	; 0x3c
 8022eba:	a807      	add	r0, sp, #28
 8022ebc:	4798      	blx	r3
 8022ebe:	9a00      	ldr	r2, [sp, #0]
 8022ec0:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 8022ec4:	2bff      	cmp	r3, #255	; 0xff
 8022ec6:	4606      	mov	r6, r0
 8022ec8:	d055      	beq.n	8022f76 <_CalcPositions+0x11a>
 8022eca:	2bfe      	cmp	r3, #254	; 0xfe
 8022ecc:	d05c      	beq.n	8022f88 <_CalcPositions+0x12c>
 8022ece:	f1c9 0200 	rsb	r2, r9, #0
 8022ed2:	f1c8 0100 	rsb	r1, r8, #0
 8022ed6:	4638      	mov	r0, r7
 8022ed8:	f7ee fb72 	bl	80115c0 <GUI_MoveRect>
 8022edc:	4639      	mov	r1, r7
 8022ede:	9800      	ldr	r0, [sp, #0]
 8022ee0:	f7ff ff84 	bl	8022dec <SCROLLBAR__Rect2VRect>
 8022ee4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8022ee8:	f9bd 8010 	ldrsh.w	r8, [sp, #16]
 8022eec:	9b00      	ldr	r3, [sp, #0]
 8022eee:	ebc2 0808 	rsb	r8, r2, r8
 8022ef2:	f8d3 a04c 	ldr.w	sl, [r3, #76]	; 0x4c
 8022ef6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8022ef8:	f108 0501 	add.w	r5, r8, #1
 8022efc:	eba5 0546 	sub.w	r5, r5, r6, lsl #1
 8022f00:	4651      	mov	r1, sl
 8022f02:	fb00 f005 	mul.w	r0, r0, r5
 8022f06:	f7f0 fed9 	bl	8013cbc <GUI__DivideRound32>
 8022f0a:	4b32      	ldr	r3, [pc, #200]	; (8022fd4 <_CalcPositions+0x178>)
 8022f0c:	f8c4 8014 	str.w	r8, [r4, #20]
 8022f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022f14:	1c5a      	adds	r2, r3, #1
 8022f16:	4290      	cmp	r0, r2
 8022f18:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8022f1c:	bfd8      	it	le
 8022f1e:	1c98      	addle	r0, r3, #2
 8022f20:	42a8      	cmp	r0, r5
 8022f22:	f859 3d40 	ldr.w	r3, [r9, #-64]!
 8022f26:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8022f2a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8022f2c:	bfa8      	it	ge
 8022f2e:	4628      	movge	r0, r5
 8022f30:	4607      	mov	r7, r0
 8022f32:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8022f34:	6022      	str	r2, [r4, #0]
 8022f36:	ebc7 0805 	rsb	r8, r7, r5
 8022f3a:	1e73      	subs	r3, r6, #1
 8022f3c:	4435      	add	r5, r6
 8022f3e:	ebc1 010a 	rsb	r1, r1, sl
 8022f42:	6063      	str	r3, [r4, #4]
 8022f44:	fb00 f008 	mul.w	r0, r0, r8
 8022f48:	6125      	str	r5, [r4, #16]
 8022f4a:	f7f0 feb7 	bl	8013cbc <GUI__DivideRound32>
 8022f4e:	4430      	add	r0, r6
 8022f50:	19c2      	adds	r2, r0, r7
 8022f52:	3a01      	subs	r2, #1
 8022f54:	60a0      	str	r0, [r4, #8]
 8022f56:	60e2      	str	r2, [r4, #12]
 8022f58:	f8c4 801c 	str.w	r8, [r4, #28]
 8022f5c:	4648      	mov	r0, r9
 8022f5e:	6227      	str	r7, [r4, #32]
 8022f60:	f7ed fee0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8022f64:	b010      	add	sp, #64	; 0x40
 8022f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022f6a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022f6e:	f9bd e012 	ldrsh.w	lr, [sp, #18]
 8022f72:	4694      	mov	ip, r2
 8022f74:	e78e      	b.n	8022e94 <_CalcPositions+0x38>
 8022f76:	6990      	ldr	r0, [r2, #24]
 8022f78:	f7f8 f9fa 	bl	801b370 <WM_GetScrollbarV>
 8022f7c:	b9c0      	cbnz	r0, 8022fb0 <_CalcPositions+0x154>
 8022f7e:	9a00      	ldr	r2, [sp, #0]
 8022f80:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 8022f84:	2bfe      	cmp	r3, #254	; 0xfe
 8022f86:	d1a2      	bne.n	8022ece <_CalcPositions+0x72>
 8022f88:	6990      	ldr	r0, [r2, #24]
 8022f8a:	f7f8 f9c1 	bl	801b310 <WM_GetScrollbarH>
 8022f8e:	2800      	cmp	r0, #0
 8022f90:	d09d      	beq.n	8022ece <_CalcPositions+0x72>
 8022f92:	a905      	add	r1, sp, #20
 8022f94:	f7f8 fa1c 	bl	801b3d0 <WM_GetWindowRectEx>
 8022f98:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8022f9c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8022fa0:	429a      	cmp	r2, r3
 8022fa2:	d194      	bne.n	8022ece <_CalcPositions+0x72>
 8022fa4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8022fa8:	3b01      	subs	r3, #1
 8022faa:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022fae:	e78e      	b.n	8022ece <_CalcPositions+0x72>
 8022fb0:	a905      	add	r1, sp, #20
 8022fb2:	f7f8 fa0d 	bl	801b3d0 <WM_GetWindowRectEx>
 8022fb6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022fba:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8022fbe:	429a      	cmp	r2, r3
 8022fc0:	d1dd      	bne.n	8022f7e <_CalcPositions+0x122>
 8022fc2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022fc6:	9a00      	ldr	r2, [sp, #0]
 8022fc8:	3901      	subs	r1, #1
 8022fca:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	; 0x30
 8022fce:	f8ad 1010 	strh.w	r1, [sp, #16]
 8022fd2:	e77a      	b.n	8022eca <_CalcPositions+0x6e>
 8022fd4:	200003c0 	.word	0x200003c0

08022fd8 <_Paint>:
 8022fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022fda:	b099      	sub	sp, #100	; 0x64
 8022fdc:	4606      	mov	r6, r0
 8022fde:	f7ed fe8f 	bl	8010d00 <GUI_ALLOC_LockH>
 8022fe2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8022fe4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8022fe6:	9001      	str	r0, [sp, #4]
 8022fe8:	4605      	mov	r5, r0
 8022fea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8022fee:	a906      	add	r1, sp, #24
 8022ff0:	4630      	mov	r0, r6
 8022ff2:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8022ff4:	9304      	str	r3, [sp, #16]
 8022ff6:	9205      	str	r2, [sp, #20]
 8022ff8:	f7ff ff30 	bl	8022e5c <_CalcPositions>
 8022ffc:	a801      	add	r0, sp, #4
 8022ffe:	f7ed fe91 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023002:	4628      	mov	r0, r5
 8023004:	a902      	add	r1, sp, #8
 8023006:	f7fb f82d 	bl	801e064 <WIDGET__GetClientRect>
 802300a:	9a06      	ldr	r2, [sp, #24]
 802300c:	9b07      	ldr	r3, [sp, #28]
 802300e:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 8023012:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8023016:	9213      	str	r2, [sp, #76]	; 0x4c
 8023018:	2108      	movs	r1, #8
 802301a:	a804      	add	r0, sp, #16
 802301c:	9017      	str	r0, [sp, #92]	; 0x5c
 802301e:	9110      	str	r1, [sp, #64]	; 0x40
 8023020:	9315      	str	r3, [sp, #84]	; 0x54
 8023022:	960f      	str	r6, [sp, #60]	; 0x3c
 8023024:	9714      	str	r7, [sp, #80]	; 0x50
 8023026:	9516      	str	r5, [sp, #88]	; 0x58
 8023028:	a80f      	add	r0, sp, #60	; 0x3c
 802302a:	47a0      	blx	r4
 802302c:	9a07      	ldr	r2, [sp, #28]
 802302e:	9b08      	ldr	r3, [sp, #32]
 8023030:	3201      	adds	r2, #1
 8023032:	3b01      	subs	r3, #1
 8023034:	2110      	movs	r1, #16
 8023036:	9213      	str	r2, [sp, #76]	; 0x4c
 8023038:	9315      	str	r3, [sp, #84]	; 0x54
 802303a:	9110      	str	r1, [sp, #64]	; 0x40
 802303c:	a80f      	add	r0, sp, #60	; 0x3c
 802303e:	47a0      	blx	r4
 8023040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023044:	3201      	adds	r2, #1
 8023046:	3b01      	subs	r3, #1
 8023048:	2111      	movs	r1, #17
 802304a:	9213      	str	r2, [sp, #76]	; 0x4c
 802304c:	9315      	str	r3, [sp, #84]	; 0x54
 802304e:	9110      	str	r1, [sp, #64]	; 0x40
 8023050:	a80f      	add	r0, sp, #60	; 0x3c
 8023052:	47a0      	blx	r4
 8023054:	2113      	movs	r1, #19
 8023056:	9a08      	ldr	r2, [sp, #32]
 8023058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802305a:	9110      	str	r1, [sp, #64]	; 0x40
 802305c:	9213      	str	r2, [sp, #76]	; 0x4c
 802305e:	9315      	str	r3, [sp, #84]	; 0x54
 8023060:	a80f      	add	r0, sp, #60	; 0x3c
 8023062:	47a0      	blx	r4
 8023064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023068:	9213      	str	r2, [sp, #76]	; 0x4c
 802306a:	2109      	movs	r1, #9
 802306c:	9315      	str	r3, [sp, #84]	; 0x54
 802306e:	9110      	str	r1, [sp, #64]	; 0x40
 8023070:	a80f      	add	r0, sp, #60	; 0x3c
 8023072:	47a0      	blx	r4
 8023074:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023078:	4293      	cmp	r3, r2
 802307a:	d006      	beq.n	802308a <_Paint+0xb2>
 802307c:	3301      	adds	r3, #1
 802307e:	210c      	movs	r1, #12
 8023080:	9313      	str	r3, [sp, #76]	; 0x4c
 8023082:	9215      	str	r2, [sp, #84]	; 0x54
 8023084:	a80f      	add	r0, sp, #60	; 0x3c
 8023086:	9110      	str	r1, [sp, #64]	; 0x40
 8023088:	47a0      	blx	r4
 802308a:	b019      	add	sp, #100	; 0x64
 802308c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802308e:	bf00      	nop

08023090 <_DrawGraspH>:
 8023090:	4603      	mov	r3, r0
 8023092:	b570      	push	{r4, r5, r6, lr}
 8023094:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8023098:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 802309c:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 80230a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80230a4:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80230a6:	1b56      	subs	r6, r2, r5
 80230a8:	3603      	adds	r6, #3
 80230aa:	441c      	add	r4, r3
 80230ac:	10b6      	asrs	r6, r6, #2
 80230ae:	4435      	add	r5, r6
 80230b0:	1064      	asrs	r4, r4, #1
 80230b2:	1b96      	subs	r6, r2, r6
 80230b4:	f7ee fb82 	bl	80117bc <GUI_SetColor>
 80230b8:	4632      	mov	r2, r6
 80230ba:	4629      	mov	r1, r5
 80230bc:	4620      	mov	r0, r4
 80230be:	f7ef fba9 	bl	8012814 <GUI_DrawVLine>
 80230c2:	4632      	mov	r2, r6
 80230c4:	4629      	mov	r1, r5
 80230c6:	1ca0      	adds	r0, r4, #2
 80230c8:	f7ef fba4 	bl	8012814 <GUI_DrawVLine>
 80230cc:	4632      	mov	r2, r6
 80230ce:	4629      	mov	r1, r5
 80230d0:	1d20      	adds	r0, r4, #4
 80230d2:	f7ef fb9f 	bl	8012814 <GUI_DrawVLine>
 80230d6:	4632      	mov	r2, r6
 80230d8:	4629      	mov	r1, r5
 80230da:	1ea0      	subs	r0, r4, #2
 80230dc:	f7ef fb9a 	bl	8012814 <GUI_DrawVLine>
 80230e0:	4632      	mov	r2, r6
 80230e2:	4629      	mov	r1, r5
 80230e4:	1f20      	subs	r0, r4, #4
 80230e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80230ea:	f7ef bb93 	b.w	8012814 <GUI_DrawVLine>
 80230ee:	bf00      	nop

080230f0 <_DrawGraspV>:
 80230f0:	4603      	mov	r3, r0
 80230f2:	b570      	push	{r4, r5, r6, lr}
 80230f4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80230f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80230fc:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8023100:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8023104:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8023106:	1b56      	subs	r6, r2, r5
 8023108:	3603      	adds	r6, #3
 802310a:	441c      	add	r4, r3
 802310c:	10b6      	asrs	r6, r6, #2
 802310e:	4435      	add	r5, r6
 8023110:	1064      	asrs	r4, r4, #1
 8023112:	1b96      	subs	r6, r2, r6
 8023114:	f7ee fb52 	bl	80117bc <GUI_SetColor>
 8023118:	4632      	mov	r2, r6
 802311a:	4629      	mov	r1, r5
 802311c:	4620      	mov	r0, r4
 802311e:	f7ef fb23 	bl	8012768 <GUI_DrawHLine>
 8023122:	4632      	mov	r2, r6
 8023124:	4629      	mov	r1, r5
 8023126:	1ca0      	adds	r0, r4, #2
 8023128:	f7ef fb1e 	bl	8012768 <GUI_DrawHLine>
 802312c:	4632      	mov	r2, r6
 802312e:	4629      	mov	r1, r5
 8023130:	1d20      	adds	r0, r4, #4
 8023132:	f7ef fb19 	bl	8012768 <GUI_DrawHLine>
 8023136:	4632      	mov	r2, r6
 8023138:	4629      	mov	r1, r5
 802313a:	1ea0      	subs	r0, r4, #2
 802313c:	f7ef fb14 	bl	8012768 <GUI_DrawHLine>
 8023140:	4632      	mov	r2, r6
 8023142:	4629      	mov	r1, r5
 8023144:	1f20      	subs	r0, r4, #4
 8023146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802314a:	f7ef bb0d 	b.w	8012768 <GUI_DrawHLine>
 802314e:	bf00      	nop

08023150 <_DrawFrame>:
 8023150:	b538      	push	{r3, r4, r5, lr}
 8023152:	4604      	mov	r4, r0
 8023154:	6808      	ldr	r0, [r1, #0]
 8023156:	460d      	mov	r5, r1
 8023158:	f7ee fb30 	bl	80117bc <GUI_SetColor>
 802315c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8023160:	f9b4 1000 	ldrsh.w	r1, [r4]
 8023164:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8023168:	3a01      	subs	r2, #1
 802316a:	3101      	adds	r1, #1
 802316c:	f7ef fafc 	bl	8012768 <GUI_DrawHLine>
 8023170:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8023174:	f9b4 1000 	ldrsh.w	r1, [r4]
 8023178:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802317c:	3a01      	subs	r2, #1
 802317e:	3101      	adds	r1, #1
 8023180:	f7ef faf2 	bl	8012768 <GUI_DrawHLine>
 8023184:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8023188:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802318c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023190:	3a01      	subs	r2, #1
 8023192:	3101      	adds	r1, #1
 8023194:	f7ef fb3e 	bl	8012814 <GUI_DrawVLine>
 8023198:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 802319c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80231a0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80231a4:	3a01      	subs	r2, #1
 80231a6:	3101      	adds	r1, #1
 80231a8:	f7ef fb34 	bl	8012814 <GUI_DrawVLine>
 80231ac:	6868      	ldr	r0, [r5, #4]
 80231ae:	f7ee fb05 	bl	80117bc <GUI_SetColor>
 80231b2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80231b6:	f9b4 1000 	ldrsh.w	r1, [r4]
 80231ba:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80231be:	3a01      	subs	r2, #1
 80231c0:	3101      	adds	r1, #1
 80231c2:	3001      	adds	r0, #1
 80231c4:	f7ef fad0 	bl	8012768 <GUI_DrawHLine>
 80231c8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80231cc:	f9b4 1000 	ldrsh.w	r1, [r4]
 80231d0:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80231d4:	3a01      	subs	r2, #1
 80231d6:	3101      	adds	r1, #1
 80231d8:	3801      	subs	r0, #1
 80231da:	f7ef fac5 	bl	8012768 <GUI_DrawHLine>
 80231de:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80231e2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80231e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80231ea:	3a02      	subs	r2, #2
 80231ec:	3102      	adds	r1, #2
 80231ee:	3001      	adds	r0, #1
 80231f0:	f7ef fb10 	bl	8012814 <GUI_DrawVLine>
 80231f4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80231f8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80231fc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023200:	3a02      	subs	r2, #2
 8023202:	3102      	adds	r1, #2
 8023204:	3801      	subs	r0, #1
 8023206:	f7ef fb05 	bl	8012814 <GUI_DrawVLine>
 802320a:	68a8      	ldr	r0, [r5, #8]
 802320c:	f7ee fad6 	bl	80117bc <GUI_SetColor>
 8023210:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8023214:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023218:	f7ef fad2 	bl	80127c0 <GUI_DrawPixel>
 802321c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8023220:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023224:	f7ef facc 	bl	80127c0 <GUI_DrawPixel>
 8023228:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802322c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023230:	f7ef fac6 	bl	80127c0 <GUI_DrawPixel>
 8023234:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8023238:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802323c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023240:	f7ef babe 	b.w	80127c0 <GUI_DrawPixel>

08023244 <_DrawBackgroundH>:
 8023244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023246:	4604      	mov	r4, r0
 8023248:	b083      	sub	sp, #12
 802324a:	460d      	mov	r5, r1
 802324c:	f7ff ff80 	bl	8023150 <_DrawFrame>
 8023250:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8023254:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023258:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802325c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023260:	68ee      	ldr	r6, [r5, #12]
 8023262:	692f      	ldr	r7, [r5, #16]
 8023264:	9701      	str	r7, [sp, #4]
 8023266:	440b      	add	r3, r1
 8023268:	9600      	str	r6, [sp, #0]
 802326a:	105b      	asrs	r3, r3, #1
 802326c:	3102      	adds	r1, #2
 802326e:	3a02      	subs	r2, #2
 8023270:	3002      	adds	r0, #2
 8023272:	f7fb feb5 	bl	801efe0 <GUI_DrawGradientV>
 8023276:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802327a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802327e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8023282:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023286:	69ae      	ldr	r6, [r5, #24]
 8023288:	696c      	ldr	r4, [r5, #20]
 802328a:	9400      	str	r4, [sp, #0]
 802328c:	4419      	add	r1, r3
 802328e:	1049      	asrs	r1, r1, #1
 8023290:	9601      	str	r6, [sp, #4]
 8023292:	3101      	adds	r1, #1
 8023294:	3b02      	subs	r3, #2
 8023296:	3a02      	subs	r2, #2
 8023298:	3002      	adds	r0, #2
 802329a:	f7fb fea1 	bl	801efe0 <GUI_DrawGradientV>
 802329e:	b003      	add	sp, #12
 80232a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80232a2:	bf00      	nop

080232a4 <_DrawBackgroundV>:
 80232a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80232a6:	4604      	mov	r4, r0
 80232a8:	b083      	sub	sp, #12
 80232aa:	460d      	mov	r5, r1
 80232ac:	f7ff ff50 	bl	8023150 <_DrawFrame>
 80232b0:	f9b4 0000 	ldrsh.w	r0, [r4]
 80232b4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80232b8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80232bc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80232c0:	68ee      	ldr	r6, [r5, #12]
 80232c2:	692f      	ldr	r7, [r5, #16]
 80232c4:	9701      	str	r7, [sp, #4]
 80232c6:	4402      	add	r2, r0
 80232c8:	9600      	str	r6, [sp, #0]
 80232ca:	1052      	asrs	r2, r2, #1
 80232cc:	3002      	adds	r0, #2
 80232ce:	3b02      	subs	r3, #2
 80232d0:	3102      	adds	r1, #2
 80232d2:	f7fb ff59 	bl	801f188 <GUI_DrawGradientH>
 80232d6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80232da:	f9b4 0000 	ldrsh.w	r0, [r4]
 80232de:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80232e2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80232e6:	69ae      	ldr	r6, [r5, #24]
 80232e8:	696c      	ldr	r4, [r5, #20]
 80232ea:	9400      	str	r4, [sp, #0]
 80232ec:	4410      	add	r0, r2
 80232ee:	1040      	asrs	r0, r0, #1
 80232f0:	9601      	str	r6, [sp, #4]
 80232f2:	3001      	adds	r0, #1
 80232f4:	3a02      	subs	r2, #2
 80232f6:	3b02      	subs	r3, #2
 80232f8:	3102      	adds	r1, #2
 80232fa:	f7fb ff45 	bl	801f188 <GUI_DrawGradientH>
 80232fe:	b003      	add	sp, #12
 8023300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023302:	bf00      	nop

08023304 <SCROLLBAR_DrawSkinFlex>:
 8023304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023308:	4604      	mov	r4, r0
 802330a:	b089      	sub	sp, #36	; 0x24
 802330c:	6800      	ldr	r0, [r0, #0]
 802330e:	f7ed fcf7 	bl	8010d00 <GUI_ALLOC_LockH>
 8023312:	4681      	mov	r9, r0
 8023314:	a808      	add	r0, sp, #32
 8023316:	f840 9d0c 	str.w	r9, [r0, #-12]!
 802331a:	f7ed fd03 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802331e:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8023322:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 8023326:	f8d8 3000 	ldr.w	r3, [r8]
 802332a:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 802332e:	f9b4 5018 	ldrsh.w	r5, [r4, #24]
 8023332:	f9b4 a01c 	ldrsh.w	sl, [r4, #28]
 8023336:	f8ad 6018 	strh.w	r6, [sp, #24]
 802333a:	f8ad 701a 	strh.w	r7, [sp, #26]
 802333e:	f8ad 501c 	strh.w	r5, [sp, #28]
 8023342:	f8ad a01e 	strh.w	sl, [sp, #30]
 8023346:	2b00      	cmp	r3, #0
 8023348:	d132      	bne.n	80233b0 <SCROLLBAR_DrawSkinFlex+0xac>
 802334a:	4a66      	ldr	r2, [pc, #408]	; (80234e4 <SCROLLBAR_DrawSkinFlex+0x1e0>)
 802334c:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8023500 <SCROLLBAR_DrawSkinFlex+0x1fc>
 8023350:	4b65      	ldr	r3, [pc, #404]	; (80234e8 <SCROLLBAR_DrawSkinFlex+0x1e4>)
 8023352:	6861      	ldr	r1, [r4, #4]
 8023354:	3908      	subs	r1, #8
 8023356:	2911      	cmp	r1, #17
 8023358:	d826      	bhi.n	80233a8 <SCROLLBAR_DrawSkinFlex+0xa4>
 802335a:	e8df f001 	tbb	[pc, r1]
 802335e:	7c3c      	.short	0x7c3c
 8023360:	256a2525 	.word	0x256a2525
 8023364:	6a6a2525 	.word	0x6a6a2525
 8023368:	25250925 	.word	0x25250925
 802336c:	33252525 	.word	0x33252525
 8023370:	485e      	ldr	r0, [pc, #376]	; (80234ec <SCROLLBAR_DrawSkinFlex+0x1e8>)
 8023372:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8023376:	9203      	str	r2, [sp, #12]
 8023378:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
 802337c:	2c03      	cmp	r4, #3
 802337e:	bf14      	ite	ne
 8023380:	4604      	movne	r4, r0
 8023382:	460c      	moveq	r4, r1
 8023384:	4621      	mov	r1, r4
 8023386:	a806      	add	r0, sp, #24
 8023388:	4798      	blx	r3
 802338a:	f8d8 3000 	ldr.w	r3, [r8]
 802338e:	9a03      	ldr	r2, [sp, #12]
 8023390:	2b00      	cmp	r3, #0
 8023392:	f000 8092 	beq.w	80234ba <SCROLLBAR_DrawSkinFlex+0x1b6>
 8023396:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 802339a:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 802339e:	1a5b      	subs	r3, r3, r1
 80233a0:	3301      	adds	r3, #1
 80233a2:	2b0e      	cmp	r3, #14
 80233a4:	f300 8099 	bgt.w	80234da <SCROLLBAR_DrawSkinFlex+0x1d6>
 80233a8:	2000      	movs	r0, #0
 80233aa:	b009      	add	sp, #36	; 0x24
 80233ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233b0:	aa06      	add	r2, sp, #24
 80233b2:	4611      	mov	r1, r2
 80233b4:	4648      	mov	r0, r9
 80233b6:	f7fa fe3f 	bl	801e038 <WIDGET__RotateRect90>
 80233ba:	f8df b148 	ldr.w	fp, [pc, #328]	; 8023504 <SCROLLBAR_DrawSkinFlex+0x200>
 80233be:	4a4c      	ldr	r2, [pc, #304]	; (80234f0 <SCROLLBAR_DrawSkinFlex+0x1ec>)
 80233c0:	4b4c      	ldr	r3, [pc, #304]	; (80234f4 <SCROLLBAR_DrawSkinFlex+0x1f0>)
 80233c2:	e7c6      	b.n	8023352 <SCROLLBAR_DrawSkinFlex+0x4e>
 80233c4:	f8d8 3000 	ldr.w	r3, [r8]
 80233c8:	2b00      	cmp	r3, #0
 80233ca:	d071      	beq.n	80234b0 <SCROLLBAR_DrawSkinFlex+0x1ac>
 80233cc:	69a3      	ldr	r3, [r4, #24]
 80233ce:	6920      	ldr	r0, [r4, #16]
 80233d0:	1a18      	subs	r0, r3, r0
 80233d2:	3001      	adds	r0, #1
 80233d4:	e7e9      	b.n	80233aa <SCROLLBAR_DrawSkinFlex+0xa6>
 80233d6:	4a45      	ldr	r2, [pc, #276]	; (80234ec <SCROLLBAR_DrawSkinFlex+0x1e8>)
 80233d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80233dc:	f1a2 042c 	sub.w	r4, r2, #44	; 0x2c
 80233e0:	2902      	cmp	r1, #2
 80233e2:	bf18      	it	ne
 80233e4:	4614      	movne	r4, r2
 80233e6:	4621      	mov	r1, r4
 80233e8:	a806      	add	r0, sp, #24
 80233ea:	4798      	blx	r3
 80233ec:	f8d8 3000 	ldr.w	r3, [r8]
 80233f0:	2b00      	cmp	r3, #0
 80233f2:	d069      	beq.n	80234c8 <SCROLLBAR_DrawSkinFlex+0x1c4>
 80233f4:	1bad      	subs	r5, r5, r6
 80233f6:	ebc7 070a 	rsb	r7, r7, sl
 80233fa:	3501      	adds	r5, #1
 80233fc:	3701      	adds	r7, #1
 80233fe:	4b3e      	ldr	r3, [pc, #248]	; (80234f8 <SCROLLBAR_DrawSkinFlex+0x1f4>)
 8023400:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8023402:	1f2c      	subs	r4, r5, #4
 8023404:	fb83 2304 	smull	r2, r3, r3, r4
 8023408:	eba3 74e4 	sub.w	r4, r3, r4, asr #31
 802340c:	f7ee f9d6 	bl	80117bc <GUI_SetColor>
 8023410:	1b29      	subs	r1, r5, r4
 8023412:	eba5 0561 	sub.w	r5, r5, r1, asr #1
 8023416:	1e69      	subs	r1, r5, #1
 8023418:	f04f 35ff 	mov.w	r5, #4294967295
 802341c:	4648      	mov	r0, r9
 802341e:	107a      	asrs	r2, r7, #1
 8023420:	4431      	add	r1, r6
 8023422:	4623      	mov	r3, r4
 8023424:	9500      	str	r5, [sp, #0]
 8023426:	f7fb f803 	bl	801e430 <WIDGET__DrawTriangle>
 802342a:	2000      	movs	r0, #0
 802342c:	b009      	add	sp, #36	; 0x24
 802342e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023432:	4c32      	ldr	r4, [pc, #200]	; (80234fc <SCROLLBAR_DrawSkinFlex+0x1f8>)
 8023434:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8023438:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 802343a:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 802343c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8023440:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8023444:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8023448:	e88d 0030 	stmia.w	sp, {r4, r5}
 802344c:	47d8      	blx	fp
 802344e:	2000      	movs	r0, #0
 8023450:	b009      	add	sp, #36	; 0x24
 8023452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023456:	4a25      	ldr	r2, [pc, #148]	; (80234ec <SCROLLBAR_DrawSkinFlex+0x1e8>)
 8023458:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802345c:	f1a2 0b2c 	sub.w	fp, r2, #44	; 0x2c
 8023460:	2901      	cmp	r1, #1
 8023462:	bf18      	it	ne
 8023464:	4693      	movne	fp, r2
 8023466:	4659      	mov	r1, fp
 8023468:	a806      	add	r0, sp, #24
 802346a:	4798      	blx	r3
 802346c:	f8d8 3000 	ldr.w	r3, [r8]
 8023470:	b37b      	cbz	r3, 80234d2 <SCROLLBAR_DrawSkinFlex+0x1ce>
 8023472:	1bae      	subs	r6, r5, r6
 8023474:	3601      	adds	r6, #1
 8023476:	ebc7 070a 	rsb	r7, r7, sl
 802347a:	4b1f      	ldr	r3, [pc, #124]	; (80234f8 <SCROLLBAR_DrawSkinFlex+0x1f4>)
 802347c:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 8023480:	1f34      	subs	r4, r6, #4
 8023482:	fb83 2304 	smull	r2, r3, r3, r4
 8023486:	eba3 74e4 	sub.w	r4, r3, r4, asr #31
 802348a:	f7ee f997 	bl	80117bc <GUI_SetColor>
 802348e:	1b31      	subs	r1, r6, r4
 8023490:	eba6 0661 	sub.w	r6, r6, r1, asr #1
 8023494:	1e71      	subs	r1, r6, #1
 8023496:	2601      	movs	r6, #1
 8023498:	4648      	mov	r0, r9
 802349a:	fa47 f206 	asr.w	r2, r7, r6
 802349e:	1a69      	subs	r1, r5, r1
 80234a0:	4623      	mov	r3, r4
 80234a2:	9600      	str	r6, [sp, #0]
 80234a4:	f7fa ffc4 	bl	801e430 <WIDGET__DrawTriangle>
 80234a8:	2000      	movs	r0, #0
 80234aa:	b009      	add	sp, #36	; 0x24
 80234ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234b0:	69e3      	ldr	r3, [r4, #28]
 80234b2:	6960      	ldr	r0, [r4, #20]
 80234b4:	1a18      	subs	r0, r3, r0
 80234b6:	3001      	adds	r0, #1
 80234b8:	e777      	b.n	80233aa <SCROLLBAR_DrawSkinFlex+0xa6>
 80234ba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80234be:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80234c2:	1a5b      	subs	r3, r3, r1
 80234c4:	3301      	adds	r3, #1
 80234c6:	e76c      	b.n	80233a2 <SCROLLBAR_DrawSkinFlex+0x9e>
 80234c8:	ebc7 070a 	rsb	r7, r7, sl
 80234cc:	1c7d      	adds	r5, r7, #1
 80234ce:	462f      	mov	r7, r5
 80234d0:	e795      	b.n	80233fe <SCROLLBAR_DrawSkinFlex+0xfa>
 80234d2:	ebc7 070a 	rsb	r7, r7, sl
 80234d6:	1c7e      	adds	r6, r7, #1
 80234d8:	e7cf      	b.n	802347a <SCROLLBAR_DrawSkinFlex+0x176>
 80234da:	a806      	add	r0, sp, #24
 80234dc:	4621      	mov	r1, r4
 80234de:	4790      	blx	r2
 80234e0:	2000      	movs	r0, #0
 80234e2:	e762      	b.n	80233aa <SCROLLBAR_DrawSkinFlex+0xa6>
 80234e4:	08023091 	.word	0x08023091
 80234e8:	08023245 	.word	0x08023245
 80234ec:	200003fc 	.word	0x200003fc
 80234f0:	080230f1 	.word	0x080230f1
 80234f4:	080232a5 	.word	0x080232a5
 80234f8:	55555556 	.word	0x55555556
 80234fc:	200003d0 	.word	0x200003d0
 8023500:	0801efe1 	.word	0x0801efe1
 8023504:	0801f189 	.word	0x0801f189

08023508 <GUI__AlphaPreserveTrans>:
 8023508:	b510      	push	{r4, lr}
 802350a:	4b09      	ldr	r3, [pc, #36]	; (8023530 <GUI__AlphaPreserveTrans+0x28>)
 802350c:	781c      	ldrb	r4, [r3, #0]
 802350e:	b938      	cbnz	r0, 8023520 <GUI__AlphaPreserveTrans+0x18>
 8023510:	4602      	mov	r2, r0
 8023512:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023516:	701a      	strb	r2, [r3, #0]
 8023518:	f7f1 fb72 	bl	8014c00 <LCD_AA_SetAndMask>
 802351c:	4620      	mov	r0, r4
 802351e:	bd10      	pop	{r4, pc}
 8023520:	2201      	movs	r2, #1
 8023522:	f04f 30ff 	mov.w	r0, #4294967295
 8023526:	701a      	strb	r2, [r3, #0]
 8023528:	f7f1 fb6a 	bl	8014c00 <LCD_AA_SetAndMask>
 802352c:	4620      	mov	r0, r4
 802352e:	bd10      	pop	{r4, pc}
 8023530:	20035ddc 	.word	0x20035ddc

08023534 <_AdjustControlls>:
 8023534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023538:	b087      	sub	sp, #28
 802353a:	4689      	mov	r9, r1
 802353c:	4680      	mov	r8, r0
 802353e:	f7f7 fda7 	bl	801b090 <WM_GetClientWindow>
 8023542:	a904      	add	r1, sp, #16
 8023544:	4606      	mov	r6, r0
 8023546:	f7f7 fd7b 	bl	801b040 <WM_GetClientRectEx>
 802354a:	4630      	mov	r0, r6
 802354c:	f1b9 0f00 	cmp.w	r9, #0
 8023550:	f000 80ac 	beq.w	80236ac <_AdjustControlls+0x178>
 8023554:	f7f7 fec0 	bl	801b2d8 <WM_GetWindowOrgY>
 8023558:	4f59      	ldr	r7, [pc, #356]	; (80236c0 <_AdjustControlls+0x18c>)
 802355a:	4605      	mov	r5, r0
 802355c:	2102      	movs	r1, #2
 802355e:	4640      	mov	r0, r8
 8023560:	f7f7 fe0e 	bl	801b180 <WM_GetDialogItem>
 8023564:	4682      	mov	sl, r0
 8023566:	4630      	mov	r0, r6
 8023568:	f7f7 fea8 	bl	801b2bc <WM_GetWindowOrgX>
 802356c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8023570:	4404      	add	r4, r0
 8023572:	4650      	mov	r0, sl
 8023574:	f7fe fd00 	bl	8021f78 <WM_GetWindowSizeX>
 8023578:	1a24      	subs	r4, r4, r0
 802357a:	3c04      	subs	r4, #4
 802357c:	462a      	mov	r2, r5
 802357e:	4650      	mov	r0, sl
 8023580:	4621      	mov	r1, r4
 8023582:	f7f8 fc15 	bl	801bdb0 <WM_MoveTo>
 8023586:	2101      	movs	r1, #1
 8023588:	4640      	mov	r0, r8
 802358a:	f7f7 fdf9 	bl	801b180 <WM_GetDialogItem>
 802358e:	4682      	mov	sl, r0
 8023590:	f7fe fcf2 	bl	8021f78 <WM_GetWindowSizeX>
 8023594:	3005      	adds	r0, #5
 8023596:	1a24      	subs	r4, r4, r0
 8023598:	462a      	mov	r2, r5
 802359a:	4650      	mov	r0, sl
 802359c:	4621      	mov	r1, r4
 802359e:	f7f8 fc07 	bl	801bdb0 <WM_MoveTo>
 80235a2:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80235a6:	4640      	mov	r0, r8
 80235a8:	f7f7 fdea 	bl	801b180 <WM_GetDialogItem>
 80235ac:	4682      	mov	sl, r0
 80235ae:	f7fe fce3 	bl	8021f78 <WM_GetWindowSizeX>
 80235b2:	3005      	adds	r0, #5
 80235b4:	1a24      	subs	r4, r4, r0
 80235b6:	462a      	mov	r2, r5
 80235b8:	4650      	mov	r0, sl
 80235ba:	4621      	mov	r1, r4
 80235bc:	f7f8 fbf8 	bl	801bdb0 <WM_MoveTo>
 80235c0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80235c4:	4640      	mov	r0, r8
 80235c6:	f7f7 fddb 	bl	801b180 <WM_GetDialogItem>
 80235ca:	4682      	mov	sl, r0
 80235cc:	4630      	mov	r0, r6
 80235ce:	f7f7 fe75 	bl	801b2bc <WM_GetWindowOrgX>
 80235d2:	683a      	ldr	r2, [r7, #0]
 80235d4:	9203      	str	r2, [sp, #12]
 80235d6:	4683      	mov	fp, r0
 80235d8:	4630      	mov	r0, r6
 80235da:	f7f7 fe6f 	bl	801b2bc <WM_GetWindowOrgX>
 80235de:	9a03      	ldr	r2, [sp, #12]
 80235e0:	9200      	str	r2, [sp, #0]
 80235e2:	eba4 030b 	sub.w	r3, r4, fp
 80235e6:	462a      	mov	r2, r5
 80235e8:	3b0a      	subs	r3, #10
 80235ea:	1d41      	adds	r1, r0, #5
 80235ec:	4650      	mov	r0, sl
 80235ee:	f7f8 f8a3 	bl	801b738 <WM_SetWindowPos>
 80235f2:	4650      	mov	r0, sl
 80235f4:	f089 0101 	eor.w	r1, r9, #1
 80235f8:	f7ff f85c 	bl	80226b4 <DROPDOWN_SetUpMode>
 80235fc:	4650      	mov	r0, sl
 80235fe:	210c      	movs	r1, #12
 8023600:	f7ff f87a 	bl	80226f8 <DROPDOWN_SetTextAlign>
 8023604:	4640      	mov	r0, r8
 8023606:	f44f 7100 	mov.w	r1, #512	; 0x200
 802360a:	f7f7 fdb9 	bl	801b180 <WM_GetDialogItem>
 802360e:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8023612:	683b      	ldr	r3, [r7, #0]
 8023614:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8023618:	4680      	mov	r8, r0
 802361a:	4630      	mov	r0, r6
 802361c:	1ae4      	subs	r4, r4, r3
 802361e:	f7f7 fe4d 	bl	801b2bc <WM_GetWindowOrgX>
 8023622:	3c01      	subs	r4, #1
 8023624:	4682      	mov	sl, r0
 8023626:	4630      	mov	r0, r6
 8023628:	f1b9 0f00 	cmp.w	r9, #0
 802362c:	d03a      	beq.n	80236a4 <_AdjustControlls+0x170>
 802362e:	f7f7 fe53 	bl	801b2d8 <WM_GetWindowOrgY>
 8023632:	683a      	ldr	r2, [r7, #0]
 8023634:	4402      	add	r2, r0
 8023636:	462b      	mov	r3, r5
 8023638:	4651      	mov	r1, sl
 802363a:	9400      	str	r4, [sp, #0]
 802363c:	4640      	mov	r0, r8
 802363e:	f7f8 f87b 	bl	801b738 <WM_SetWindowPos>
 8023642:	f7fa fbd7 	bl	801ddf4 <SCROLLBAR_GetDefaultWidth>
 8023646:	4681      	mov	r9, r0
 8023648:	4640      	mov	r0, r8
 802364a:	f7fa fb73 	bl	801dd34 <LISTVIEW_GetNumColumns>
 802364e:	4604      	mov	r4, r0
 8023650:	4640      	mov	r0, r8
 8023652:	f7fa fb59 	bl	801dd08 <LISTVIEW_GetHeader>
 8023656:	2c00      	cmp	r4, #0
 8023658:	4607      	mov	r7, r0
 802365a:	dd20      	ble.n	802369e <_AdjustControlls+0x16a>
 802365c:	2600      	movs	r6, #0
 802365e:	4635      	mov	r5, r6
 8023660:	4629      	mov	r1, r5
 8023662:	4638      	mov	r0, r7
 8023664:	f7ff f986 	bl	8022974 <HEADER_GetItemWidth>
 8023668:	3501      	adds	r5, #1
 802366a:	42ac      	cmp	r4, r5
 802366c:	4406      	add	r6, r0
 802366e:	d1f7      	bne.n	8023660 <_AdjustControlls+0x12c>
 8023670:	f04f 0a00 	mov.w	sl, #0
 8023674:	4651      	mov	r1, sl
 8023676:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 802367a:	4638      	mov	r0, r7
 802367c:	f7ff f97a 	bl	8022974 <HEADER_GetItemWidth>
 8023680:	eba4 0409 	sub.w	r4, r4, r9
 8023684:	1b64      	subs	r4, r4, r5
 8023686:	4651      	mov	r1, sl
 8023688:	fb00 f204 	mul.w	r2, r0, r4
 802368c:	f10a 0a01 	add.w	sl, sl, #1
 8023690:	fb92 f2f6 	sdiv	r2, r2, r6
 8023694:	4640      	mov	r0, r8
 8023696:	f7fa fb67 	bl	801dd68 <LISTVIEW_SetColumnWidth>
 802369a:	45aa      	cmp	sl, r5
 802369c:	d1ea      	bne.n	8023674 <_AdjustControlls+0x140>
 802369e:	b007      	add	sp, #28
 80236a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236a4:	f7f7 fe18 	bl	801b2d8 <WM_GetWindowOrgY>
 80236a8:	4602      	mov	r2, r0
 80236aa:	e7c4      	b.n	8023636 <_AdjustControlls+0x102>
 80236ac:	f7f7 fe14 	bl	801b2d8 <WM_GetWindowOrgY>
 80236b0:	4f03      	ldr	r7, [pc, #12]	; (80236c0 <_AdjustControlls+0x18c>)
 80236b2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80236b6:	683a      	ldr	r2, [r7, #0]
 80236b8:	181d      	adds	r5, r3, r0
 80236ba:	1aad      	subs	r5, r5, r2
 80236bc:	3501      	adds	r5, #1
 80236be:	e74d      	b.n	802355c <_AdjustControlls+0x28>
 80236c0:	20000428 	.word	0x20000428

080236c4 <_AdjustControllsBottom>:
 80236c4:	2100      	movs	r1, #0
 80236c6:	f7ff bf35 	b.w	8023534 <_AdjustControlls>
 80236ca:	bf00      	nop

080236cc <ST_CHOOSEFILE_SetButtonSize>:
 80236cc:	4b01      	ldr	r3, [pc, #4]	; (80236d4 <ST_CHOOSEFILE_SetButtonSize+0x8>)
 80236ce:	6158      	str	r0, [r3, #20]
 80236d0:	6019      	str	r1, [r3, #0]
 80236d2:	4770      	bx	lr
 80236d4:	20000428 	.word	0x20000428

080236d8 <ST_CHOOSEFILE_SetButtonBitmaps>:
 80236d8:	4b02      	ldr	r3, [pc, #8]	; (80236e4 <ST_CHOOSEFILE_SetButtonBitmaps+0xc>)
 80236da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80236de:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80236e2:	4770      	bx	lr
 80236e4:	20000428 	.word	0x20000428

080236e8 <ST_CHOOSEFILE_SetDelim>:
 80236e8:	4b01      	ldr	r3, [pc, #4]	; (80236f0 <ST_CHOOSEFILE_SetDelim+0x8>)
 80236ea:	7318      	strb	r0, [r3, #12]
 80236ec:	4770      	bx	lr
 80236ee:	bf00      	nop
 80236f0:	20000428 	.word	0x20000428

080236f4 <_Create>:
 80236f4:	4770      	bx	lr
 80236f6:	bf00      	nop

080236f8 <_Paint>:
 80236f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236fc:	b08f      	sub	sp, #60	; 0x3c
 80236fe:	9007      	str	r0, [sp, #28]
 8023700:	f7ed fafe 	bl	8010d00 <GUI_ALLOC_LockH>
 8023704:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8023706:	9008      	str	r0, [sp, #32]
 8023708:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 802370a:	f7ff f80f 	bl	802272c <GUI_ARRAY_GetNumItems>
 802370e:	9b08      	ldr	r3, [sp, #32]
 8023710:	9003      	str	r0, [sp, #12]
 8023712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023714:	4605      	mov	r5, r0
 8023716:	48c9      	ldr	r0, [pc, #804]	; (8023a3c <_Paint+0x344>)
 8023718:	681c      	ldr	r4, [r3, #0]
 802371a:	f7f1 f9eb 	bl	8014af4 <LCD_SetBkColor>
 802371e:	9b08      	ldr	r3, [sp, #32]
 8023720:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8023722:	f7ee f8ad 	bl	8011880 <GUI_SetFont>
 8023726:	f7ee f98d 	bl	8011a44 <GUI_Clear>
 802372a:	a80c      	add	r0, sp, #48	; 0x30
 802372c:	427f      	negs	r7, r7
 802372e:	f7ed fead 	bl	801148c <GUI_GetClientRect>
 8023732:	2d00      	cmp	r5, #0
 8023734:	f000 81b0 	beq.w	8023a98 <_Paint+0x3a0>
 8023738:	0063      	lsls	r3, r4, #1
 802373a:	9304      	str	r3, [sp, #16]
 802373c:	b2a3      	uxth	r3, r4
 802373e:	9305      	str	r3, [sp, #20]
 8023740:	ab0a      	add	r3, sp, #40	; 0x28
 8023742:	9300      	str	r3, [sp, #0]
 8023744:	ab08      	add	r3, sp, #32
 8023746:	2500      	movs	r5, #0
 8023748:	9306      	str	r3, [sp, #24]
 802374a:	9b08      	ldr	r3, [sp, #32]
 802374c:	4629      	mov	r1, r5
 802374e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8023750:	f7ff f8a2 	bl	8022898 <GUI_ARRAY_GetpItemLocked>
 8023754:	9009      	str	r0, [sp, #36]	; 0x24
 8023756:	9800      	ldr	r0, [sp, #0]
 8023758:	f7ed fe98 	bl	801148c <GUI_GetClientRect>
 802375c:	9b08      	ldr	r3, [sp, #32]
 802375e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8023762:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8023764:	42aa      	cmp	r2, r5
 8023766:	bf88      	it	hi
 8023768:	6d9b      	ldrhi	r3, [r3, #88]	; 0x58
 802376a:	4ab5      	ldr	r2, [pc, #724]	; (8023a40 <_Paint+0x348>)
 802376c:	bf88      	it	hi
 802376e:	18ff      	addhi	r7, r7, r3
 8023770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023772:	681c      	ldr	r4, [r3, #0]
 8023774:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8023778:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 802377c:	1af6      	subs	r6, r6, r3
 802377e:	9b04      	ldr	r3, [sp, #16]
 8023780:	443c      	add	r4, r7
 8023782:	1af3      	subs	r3, r6, r3
 8023784:	fb82 2603 	smull	r2, r6, r2, r3
 8023788:	b2a4      	uxth	r4, r4
 802378a:	eba6 73e3 	sub.w	r3, r6, r3, asr #31
 802378e:	fa0f f884 	sxth.w	r8, r4
 8023792:	a80c      	add	r0, sp, #48	; 0x30
 8023794:	9301      	str	r3, [sp, #4]
 8023796:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 802379a:	f7f7 ffbd 	bl	801b718 <WM_SetUserClipRect>
 802379e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237a0:	9a01      	ldr	r2, [sp, #4]
 80237a2:	6898      	ldr	r0, [r3, #8]
 80237a4:	f102 3aff 	add.w	sl, r2, #4294967295
 80237a8:	2800      	cmp	r0, #0
 80237aa:	d04e      	beq.n	802384a <_Paint+0x152>
 80237ac:	889a      	ldrh	r2, [r3, #4]
 80237ae:	f002 0103 	and.w	r1, r2, #3
 80237b2:	2901      	cmp	r1, #1
 80237b4:	f000 8137 	beq.w	8023a26 <_Paint+0x32e>
 80237b8:	2902      	cmp	r1, #2
 80237ba:	f040 8120 	bne.w	80239fe <_Paint+0x306>
 80237be:	f8d3 9000 	ldr.w	r9, [r3]
 80237c2:	f7fa fa61 	bl	801dc88 <GUI_DRAW__GetXSize>
 80237c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237c8:	eba9 0000 	sub.w	r0, r9, r0
 80237cc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80237d0:	889a      	ldrh	r2, [r3, #4]
 80237d2:	eb07 0960 	add.w	r9, r7, r0, asr #1
 80237d6:	f002 020c 	and.w	r2, r2, #12
 80237da:	2a04      	cmp	r2, #4
 80237dc:	f000 8115 	beq.w	8023a0a <_Paint+0x312>
 80237e0:	2a0c      	cmp	r2, #12
 80237e2:	f040 810a 	bne.w	80239fa <_Paint+0x302>
 80237e6:	f9bd b02e 	ldrsh.w	fp, [sp, #46]	; 0x2e
 80237ea:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80237ee:	6898      	ldr	r0, [r3, #8]
 80237f0:	ebab 0b02 	sub.w	fp, fp, r2
 80237f4:	f7fa fa5c 	bl	801dcb0 <GUI_DRAW__GetYSize>
 80237f8:	f10b 0b01 	add.w	fp, fp, #1
 80237fc:	ebab 0000 	sub.w	r0, fp, r0
 8023800:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8023804:	1043      	asrs	r3, r0, #1
 8023806:	9800      	ldr	r0, [sp, #0]
 8023808:	9302      	str	r3, [sp, #8]
 802380a:	f7f7 ff85 	bl	801b718 <WM_SetUserClipRect>
 802380e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023810:	a809      	add	r0, sp, #36	; 0x24
 8023812:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8023816:	f7ed fa85 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802381a:	9806      	ldr	r0, [sp, #24]
 802381c:	f7ed fa82 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023820:	464a      	mov	r2, r9
 8023822:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8023826:	9b02      	ldr	r3, [sp, #8]
 8023828:	4649      	mov	r1, r9
 802382a:	4658      	mov	r0, fp
 802382c:	f7fa fa10 	bl	801dc50 <GUI_DRAW__Draw>
 8023830:	4648      	mov	r0, r9
 8023832:	f7ed fa65 	bl	8010d00 <GUI_ALLOC_LockH>
 8023836:	4629      	mov	r1, r5
 8023838:	4603      	mov	r3, r0
 802383a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 802383c:	9308      	str	r3, [sp, #32]
 802383e:	f7ff f82b 	bl	8022898 <GUI_ARRAY_GetpItemLocked>
 8023842:	9009      	str	r0, [sp, #36]	; 0x24
 8023844:	2000      	movs	r0, #0
 8023846:	f7f7 ff67 	bl	801b718 <WM_SetUserClipRect>
 802384a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802384e:	f7ed ffb5 	bl	80117bc <GUI_SetColor>
 8023852:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8023856:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 802385a:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 802385e:	3a05      	subs	r2, #5
 8023860:	3105      	adds	r1, #5
 8023862:	f7ee ffd7 	bl	8012814 <GUI_DrawVLine>
 8023866:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 802386a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 802386e:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8023872:	3001      	adds	r0, #1
 8023874:	f7ee ffce 	bl	8012814 <GUI_DrawVLine>
 8023878:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 802387c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8023880:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 8023884:	3a05      	subs	r2, #5
 8023886:	3105      	adds	r1, #5
 8023888:	3002      	adds	r0, #2
 802388a:	f7ee ffc3 	bl	8012814 <GUI_DrawVLine>
 802388e:	4a6d      	ldr	r2, [pc, #436]	; (8023a44 <_Paint+0x34c>)
 8023890:	4b6d      	ldr	r3, [pc, #436]	; (8023a48 <_Paint+0x350>)
 8023892:	6816      	ldr	r6, [r2, #0]
 8023894:	9602      	str	r6, [sp, #8]
 8023896:	681b      	ldr	r3, [r3, #0]
 8023898:	9e05      	ldr	r6, [sp, #20]
 802389a:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 802389e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80238a2:	4433      	add	r3, r6
 80238a4:	4632      	mov	r2, r6
 80238a6:	b29b      	uxth	r3, r3
 80238a8:	9e02      	ldr	r6, [sp, #8]
 80238aa:	eb03 0c01 	add.w	ip, r3, r1
 80238ae:	1ac3      	subs	r3, r0, r3
 80238b0:	1a41      	subs	r1, r0, r1
 80238b2:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80238b6:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 80238ba:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 80238be:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80238c2:	4416      	add	r6, r2
 80238c4:	9b08      	ldr	r3, [sp, #32]
 80238c6:	b2b2      	uxth	r2, r6
 80238c8:	eb02 0e00 	add.w	lr, r2, r0
 80238cc:	ebac 0202 	sub.w	r2, ip, r2
 80238d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80238d2:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80238d6:	440f      	add	r7, r1
 80238d8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80238dc:	f7f1 f910 	bl	8014b00 <LCD_SetColor>
 80238e0:	9b08      	ldr	r3, [sp, #32]
 80238e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80238e4:	42ab      	cmp	r3, r5
 80238e6:	d045      	beq.n	8023974 <_Paint+0x27c>
 80238e8:	f04f 0900 	mov.w	r9, #0
 80238ec:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80238f0:	2002      	movs	r0, #2
 80238f2:	eba3 0309 	sub.w	r3, r3, r9
 80238f6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80238fa:	f7ed fff1 	bl	80118e0 <GUI_SetTextMode>
 80238fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023900:	9900      	ldr	r1, [sp, #0]
 8023902:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8023906:	300c      	adds	r0, #12
 8023908:	f7ee fdf2 	bl	80124f0 <GUI_DispStringInRect>
 802390c:	9b08      	ldr	r3, [sp, #32]
 802390e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8023912:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8023914:	4489      	add	r9, r1
 8023916:	4295      	cmp	r5, r2
 8023918:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 802391c:	d037      	beq.n	802398e <_Paint+0x296>
 802391e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8023920:	42aa      	cmp	r2, r5
 8023922:	d91e      	bls.n	8023962 <_Paint+0x26a>
 8023924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023926:	3401      	adds	r4, #1
 8023928:	a809      	add	r0, sp, #36	; 0x24
 802392a:	1aff      	subs	r7, r7, r3
 802392c:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 8023930:	f7ed f9f8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023934:	9b03      	ldr	r3, [sp, #12]
 8023936:	3501      	adds	r5, #1
 8023938:	42ab      	cmp	r3, r5
 802393a:	f47f af06 	bne.w	802374a <_Paint+0x52>
 802393e:	2000      	movs	r0, #0
 8023940:	f7f7 feea 	bl	801b718 <WM_SetUserClipRect>
 8023944:	9800      	ldr	r0, [sp, #0]
 8023946:	f7ed fda1 	bl	801148c <GUI_GetClientRect>
 802394a:	f640 73ff 	movw	r3, #4095	; 0xfff
 802394e:	9806      	ldr	r0, [sp, #24]
 8023950:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8023954:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8023958:	f7ed f9e4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802395c:	b00f      	add	sp, #60	; 0x3c
 802395e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023962:	a809      	add	r0, sp, #36	; 0x24
 8023964:	f7ed f9de 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023968:	9b03      	ldr	r3, [sp, #12]
 802396a:	3501      	adds	r5, #1
 802396c:	42ab      	cmp	r3, r5
 802396e:	f47f aeec 	bne.w	802374a <_Paint+0x52>
 8023972:	e7e4      	b.n	802393e <_Paint+0x246>
 8023974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023976:	889b      	ldrh	r3, [r3, #4]
 8023978:	f003 0303 	and.w	r3, r3, #3
 802397c:	2b01      	cmp	r3, #1
 802397e:	d1b3      	bne.n	80238e8 <_Paint+0x1f0>
 8023980:	ea4f 094a 	mov.w	r9, sl, lsl #1
 8023984:	f109 0901 	add.w	r9, r9, #1
 8023988:	fa1f f989 	uxth.w	r9, r9
 802398c:	e7ae      	b.n	80238ec <_Paint+0x1f4>
 802398e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8023990:	f7f1 f8b6 	bl	8014b00 <LCD_SetColor>
 8023994:	a80c      	add	r0, sp, #48	; 0x30
 8023996:	f7f7 febf 	bl	801b718 <WM_SetUserClipRect>
 802399a:	9b08      	ldr	r3, [sp, #32]
 802399c:	f9bd 902e 	ldrsh.w	r9, [sp, #46]	; 0x2e
 80239a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80239a2:	f1a8 0804 	sub.w	r8, r8, #4
 80239a6:	eba8 0b0a 	sub.w	fp, r8, sl
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	d14e      	bne.n	8023a4c <_Paint+0x354>
 80239ae:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80239b2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80239b6:	eba9 0903 	sub.w	r9, r9, r3
 80239ba:	f7ed feff 	bl	80117bc <GUI_SetColor>
 80239be:	f1ba 0f00 	cmp.w	sl, #0
 80239c2:	ea4f 0969 	mov.w	r9, r9, asr #1
 80239c6:	db13      	blt.n	80239f0 <_Paint+0x2f8>
 80239c8:	9b01      	ldr	r3, [sp, #4]
 80239ca:	f1c9 0a01 	rsb	sl, r9, #1
 80239ce:	ebab 0b03 	sub.w	fp, fp, r3
 80239d2:	444b      	add	r3, r9
 80239d4:	461e      	mov	r6, r3
 80239d6:	44d3      	add	fp, sl
 80239d8:	4642      	mov	r2, r8
 80239da:	eb0b 0109 	add.w	r1, fp, r9
 80239de:	4648      	mov	r0, r9
 80239e0:	f109 0901 	add.w	r9, r9, #1
 80239e4:	f7ee fec0 	bl	8012768 <GUI_DrawHLine>
 80239e8:	45b1      	cmp	r9, r6
 80239ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80239ee:	d1f3      	bne.n	80239d8 <_Paint+0x2e0>
 80239f0:	2000      	movs	r0, #0
 80239f2:	f7f7 fe91 	bl	801b718 <WM_SetUserClipRect>
 80239f6:	9b08      	ldr	r3, [sp, #32]
 80239f8:	e791      	b.n	802391e <_Paint+0x226>
 80239fa:	2300      	movs	r3, #0
 80239fc:	e703      	b.n	8023806 <_Paint+0x10e>
 80239fe:	f002 020c 	and.w	r2, r2, #12
 8023a02:	2a04      	cmp	r2, #4
 8023a04:	46b9      	mov	r9, r7
 8023a06:	f47f aeeb 	bne.w	80237e0 <_Paint+0xe8>
 8023a0a:	f9bd b02e 	ldrsh.w	fp, [sp, #46]	; 0x2e
 8023a0e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8023a12:	6898      	ldr	r0, [r3, #8]
 8023a14:	ebab 0302 	sub.w	r3, fp, r2
 8023a18:	f103 0b01 	add.w	fp, r3, #1
 8023a1c:	f7fa f948 	bl	801dcb0 <GUI_DRAW__GetYSize>
 8023a20:	ebab 0300 	sub.w	r3, fp, r0
 8023a24:	e6ef      	b.n	8023806 <_Paint+0x10e>
 8023a26:	f8d3 9000 	ldr.w	r9, [r3]
 8023a2a:	f7fa f92d 	bl	801dc88 <GUI_DRAW__GetXSize>
 8023a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a30:	eba9 0900 	sub.w	r9, r9, r0
 8023a34:	44b9      	add	r9, r7
 8023a36:	889a      	ldrh	r2, [r3, #4]
 8023a38:	e6cd      	b.n	80237d6 <_Paint+0xde>
 8023a3a:	bf00      	nop
 8023a3c:	00dca939 	.word	0x00dca939
 8023a40:	55555556 	.word	0x55555556
 8023a44:	2000093c 	.word	0x2000093c
 8023a48:	2000037c 	.word	0x2000037c
 8023a4c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8023a50:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023a54:	eba9 0903 	sub.w	r9, r9, r3
 8023a58:	f7ed feb0 	bl	80117bc <GUI_SetColor>
 8023a5c:	f1ba 0f00 	cmp.w	sl, #0
 8023a60:	eb0a 0969 	add.w	r9, sl, r9, asr #1
 8023a64:	dbc4      	blt.n	80239f0 <_Paint+0x2f8>
 8023a66:	9b01      	ldr	r3, [sp, #4]
 8023a68:	ebaa 0809 	sub.w	r8, sl, r9
 8023a6c:	eba9 0603 	sub.w	r6, r9, r3
 8023a70:	44d8      	add	r8, fp
 8023a72:	ebab 0a0a 	sub.w	sl, fp, sl
 8023a76:	eb08 0209 	add.w	r2, r8, r9
 8023a7a:	4651      	mov	r1, sl
 8023a7c:	4648      	mov	r0, r9
 8023a7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8023a82:	f7ee fe71 	bl	8012768 <GUI_DrawHLine>
 8023a86:	454e      	cmp	r6, r9
 8023a88:	f10a 0a01 	add.w	sl, sl, #1
 8023a8c:	d1f3      	bne.n	8023a76 <_Paint+0x37e>
 8023a8e:	2000      	movs	r0, #0
 8023a90:	f7f7 fe42 	bl	801b718 <WM_SetUserClipRect>
 8023a94:	9b08      	ldr	r3, [sp, #32]
 8023a96:	e742      	b.n	802391e <_Paint+0x226>
 8023a98:	ab0a      	add	r3, sp, #40	; 0x28
 8023a9a:	9300      	str	r3, [sp, #0]
 8023a9c:	ab08      	add	r3, sp, #32
 8023a9e:	9306      	str	r3, [sp, #24]
 8023aa0:	e74d      	b.n	802393e <_Paint+0x246>
 8023aa2:	bf00      	nop

08023aa4 <HEADER_SetDefaultSTSkin>:
 8023aa4:	4b01      	ldr	r3, [pc, #4]	; (8023aac <HEADER_SetDefaultSTSkin+0x8>)
 8023aa6:	4a02      	ldr	r2, [pc, #8]	; (8023ab0 <HEADER_SetDefaultSTSkin+0xc>)
 8023aa8:	601a      	str	r2, [r3, #0]
 8023aaa:	4770      	bx	lr
 8023aac:	20000378 	.word	0x20000378
 8023ab0:	08028bb4 	.word	0x08028bb4

08023ab4 <_Create>:
 8023ab4:	b500      	push	{lr}
 8023ab6:	b083      	sub	sp, #12
 8023ab8:	f7ed f922 	bl	8010d00 <GUI_ALLOC_LockH>
 8023abc:	ab02      	add	r3, sp, #8
 8023abe:	4a05      	ldr	r2, [pc, #20]	; (8023ad4 <_Create+0x20>)
 8023ac0:	f843 0d04 	str.w	r0, [r3, #-4]!
 8023ac4:	6482      	str	r2, [r0, #72]	; 0x48
 8023ac6:	4618      	mov	r0, r3
 8023ac8:	f7ed f92c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023acc:	b003      	add	sp, #12
 8023ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8023ad2:	bf00      	nop
 8023ad4:	08023ad9 	.word	0x08023ad9

08023ad8 <_CalcPositions>:
 8023ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023adc:	b086      	sub	sp, #24
 8023ade:	460c      	mov	r4, r1
 8023ae0:	f7ed f90e 	bl	8010d00 <GUI_ALLOC_LockH>
 8023ae4:	4603      	mov	r3, r0
 8023ae6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8023aea:	ad02      	add	r5, sp, #8
 8023aec:	e885 0003 	stmia.w	r5, {r0, r1}
 8023af0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8023af2:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 8023af6:	9301      	str	r3, [sp, #4]
 8023af8:	0712      	lsls	r2, r2, #28
 8023afa:	bf4c      	ite	mi
 8023afc:	f9bd 200e 	ldrshmi.w	r2, [sp, #14]
 8023b00:	f9bd 200c 	ldrshpl.w	r2, [sp, #12]
 8023b04:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
 8023b08:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 8023b0c:	61a2      	str	r2, [r4, #24]
 8023b0e:	29ff      	cmp	r1, #255	; 0xff
 8023b10:	d053      	beq.n	8023bba <_CalcPositions+0xe2>
 8023b12:	29fe      	cmp	r1, #254	; 0xfe
 8023b14:	d05a      	beq.n	8023bcc <_CalcPositions+0xf4>
 8023b16:	427a      	negs	r2, r7
 8023b18:	4271      	negs	r1, r6
 8023b1a:	4628      	mov	r0, r5
 8023b1c:	f7ed fd50 	bl	80115c0 <GUI_MoveRect>
 8023b20:	4629      	mov	r1, r5
 8023b22:	9801      	ldr	r0, [sp, #4]
 8023b24:	f7ff f962 	bl	8022dec <SCROLLBAR__Rect2VRect>
 8023b28:	9e01      	ldr	r6, [sp, #4]
 8023b2a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8023b2e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8023b32:	f8d6 804c 	ldr.w	r8, [r6, #76]	; 0x4c
 8023b36:	4630      	mov	r0, r6
 8023b38:	1aff      	subs	r7, r7, r3
 8023b3a:	f7fa faaf 	bl	801e09c <WIDGET__GetXSize>
 8023b3e:	4605      	mov	r5, r0
 8023b40:	4630      	mov	r0, r6
 8023b42:	f7fa fab9 	bl	801e0b8 <WIDGET__GetYSize>
 8023b46:	9b01      	ldr	r3, [sp, #4]
 8023b48:	0840      	lsrs	r0, r0, #1
 8023b4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8023b4c:	1c7e      	adds	r6, r7, #1
 8023b4e:	1d43      	adds	r3, r0, #5
 8023b50:	3d05      	subs	r5, #5
 8023b52:	429d      	cmp	r5, r3
 8023b54:	fb02 f006 	mul.w	r0, r2, r6
 8023b58:	4641      	mov	r1, r8
 8023b5a:	bf28      	it	cs
 8023b5c:	461d      	movcs	r5, r3
 8023b5e:	f7f0 f8ad 	bl	8013cbc <GUI__DivideRound32>
 8023b62:	4b2d      	ldr	r3, [pc, #180]	; (8023c18 <_CalcPositions+0x140>)
 8023b64:	6167      	str	r7, [r4, #20]
 8023b66:	f10d 0918 	add.w	r9, sp, #24
 8023b6a:	f9b3 7000 	ldrsh.w	r7, [r3]
 8023b6e:	f859 3d14 	ldr.w	r3, [r9, #-20]!
 8023b72:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8023b76:	6022      	str	r2, [r4, #0]
 8023b78:	4287      	cmp	r7, r0
 8023b7a:	bfb8      	it	lt
 8023b7c:	4607      	movlt	r7, r0
 8023b7e:	42b7      	cmp	r7, r6
 8023b80:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8023b84:	bfa8      	it	ge
 8023b86:	4637      	movge	r7, r6
 8023b88:	eba6 0a07 	sub.w	sl, r6, r7
 8023b8c:	1b76      	subs	r6, r6, r5
 8023b8e:	3d01      	subs	r5, #1
 8023b90:	eba8 0101 	sub.w	r1, r8, r1
 8023b94:	fb00 f00a 	mul.w	r0, r0, sl
 8023b98:	6126      	str	r6, [r4, #16]
 8023b9a:	6065      	str	r5, [r4, #4]
 8023b9c:	f7f0 f88e 	bl	8013cbc <GUI__DivideRound32>
 8023ba0:	19c3      	adds	r3, r0, r7
 8023ba2:	4602      	mov	r2, r0
 8023ba4:	3b01      	subs	r3, #1
 8023ba6:	e9c4 a707 	strd	sl, r7, [r4, #28]
 8023baa:	60e3      	str	r3, [r4, #12]
 8023bac:	4648      	mov	r0, r9
 8023bae:	60a2      	str	r2, [r4, #8]
 8023bb0:	f7ed f8b8 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023bb4:	b006      	add	sp, #24
 8023bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bba:	6998      	ldr	r0, [r3, #24]
 8023bbc:	f7f7 fbd8 	bl	801b370 <WM_GetScrollbarV>
 8023bc0:	b9c0      	cbnz	r0, 8023bf4 <_CalcPositions+0x11c>
 8023bc2:	9b01      	ldr	r3, [sp, #4]
 8023bc4:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 8023bc8:	29fe      	cmp	r1, #254	; 0xfe
 8023bca:	d1a4      	bne.n	8023b16 <_CalcPositions+0x3e>
 8023bcc:	6998      	ldr	r0, [r3, #24]
 8023bce:	f7f7 fb9f 	bl	801b310 <WM_GetScrollbarH>
 8023bd2:	2800      	cmp	r0, #0
 8023bd4:	d09f      	beq.n	8023b16 <_CalcPositions+0x3e>
 8023bd6:	a904      	add	r1, sp, #16
 8023bd8:	f7f7 fbfa 	bl	801b3d0 <WM_GetWindowRectEx>
 8023bdc:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8023be0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8023be4:	429a      	cmp	r2, r3
 8023be6:	d196      	bne.n	8023b16 <_CalcPositions+0x3e>
 8023be8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8023bec:	3b01      	subs	r3, #1
 8023bee:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023bf2:	e790      	b.n	8023b16 <_CalcPositions+0x3e>
 8023bf4:	a904      	add	r1, sp, #16
 8023bf6:	f7f7 fbeb 	bl	801b3d0 <WM_GetWindowRectEx>
 8023bfa:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8023bfe:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8023c02:	429a      	cmp	r2, r3
 8023c04:	d1dd      	bne.n	8023bc2 <_CalcPositions+0xea>
 8023c06:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023c0a:	9b01      	ldr	r3, [sp, #4]
 8023c0c:	3a01      	subs	r2, #1
 8023c0e:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 8023c12:	f8ad 200c 	strh.w	r2, [sp, #12]
 8023c16:	e77c      	b.n	8023b12 <_CalcPositions+0x3a>
 8023c18:	200003c0 	.word	0x200003c0

08023c1c <_Paint>:
 8023c1c:	b530      	push	{r4, r5, lr}
 8023c1e:	b091      	sub	sp, #68	; 0x44
 8023c20:	4604      	mov	r4, r0
 8023c22:	f7ed f86d 	bl	8010d00 <GUI_ALLOC_LockH>
 8023c26:	a907      	add	r1, sp, #28
 8023c28:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8023c2a:	9000      	str	r0, [sp, #0]
 8023c2c:	4620      	mov	r0, r4
 8023c2e:	ac03      	add	r4, sp, #12
 8023c30:	4798      	blx	r3
 8023c32:	4621      	mov	r1, r4
 8023c34:	9800      	ldr	r0, [sp, #0]
 8023c36:	f7fa fa15 	bl	801e064 <WIDGET__GetClientRect>
 8023c3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023c3e:	ac01      	add	r4, sp, #4
 8023c40:	e884 0003 	stmia.w	r4, {r0, r1}
 8023c44:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023c48:	f7f0 ff5a 	bl	8014b00 <LCD_SetColor>
 8023c4c:	4621      	mov	r1, r4
 8023c4e:	9800      	ldr	r0, [sp, #0]
 8023c50:	f7fa fbcc 	bl	801e3ec <WIDGET__FillRectEx>
 8023c54:	4821      	ldr	r0, [pc, #132]	; (8023cdc <_Paint+0xc0>)
 8023c56:	f7f0 ff53 	bl	8014b00 <LCD_SetColor>
 8023c5a:	9800      	ldr	r0, [sp, #0]
 8023c5c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8023c5e:	071b      	lsls	r3, r3, #28
 8023c60:	d436      	bmi.n	8023cd0 <_Paint+0xb4>
 8023c62:	4620      	mov	r0, r4
 8023c64:	f7fa febc 	bl	801e9e0 <GUI_DrawRectEx>
 8023c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023c6c:	4621      	mov	r1, r4
 8023c6e:	9800      	ldr	r0, [sp, #0]
 8023c70:	f8ad 2004 	strh.w	r2, [sp, #4]
 8023c74:	f8ad 3008 	strh.w	r3, [sp, #8]
 8023c78:	f7fa fbb8 	bl	801e3ec <WIDGET__FillRectEx>
 8023c7c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8023c80:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8023c84:	1a9b      	subs	r3, r3, r2
 8023c86:	2b05      	cmp	r3, #5
 8023c88:	dd1d      	ble.n	8023cc6 <_Paint+0xaa>
 8023c8a:	2400      	movs	r4, #0
 8023c8c:	2001      	movs	r0, #1
 8023c8e:	f7ed fd3b 	bl	8011708 <GUI_SetPenSize>
 8023c92:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023c96:	f7ed fd91 	bl	80117bc <GUI_SetColor>
 8023c9a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8023c9e:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8023ca2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8023ca6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8023caa:	9800      	ldr	r0, [sp, #0]
 8023cac:	4429      	add	r1, r5
 8023cae:	3904      	subs	r1, #4
 8023cb0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8023cb4:	eb04 0161 	add.w	r1, r4, r1, asr #1
 8023cb8:	3b02      	subs	r3, #2
 8023cba:	3402      	adds	r4, #2
 8023cbc:	3202      	adds	r2, #2
 8023cbe:	f7fa fb7b 	bl	801e3b8 <WIDGET__DrawVLine>
 8023cc2:	2c06      	cmp	r4, #6
 8023cc4:	d1e2      	bne.n	8023c8c <_Paint+0x70>
 8023cc6:	4668      	mov	r0, sp
 8023cc8:	f7ed f82c 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023ccc:	b011      	add	sp, #68	; 0x44
 8023cce:	bd30      	pop	{r4, r5, pc}
 8023cd0:	a905      	add	r1, sp, #20
 8023cd2:	4622      	mov	r2, r4
 8023cd4:	f7fa f9b0 	bl	801e038 <WIDGET__RotateRect90>
 8023cd8:	a805      	add	r0, sp, #20
 8023cda:	e7c3      	b.n	8023c64 <_Paint+0x48>
 8023cdc:	00dca939 	.word	0x00dca939

08023ce0 <SCROLLBAR_SetDefaultSTSkin>:
 8023ce0:	4b01      	ldr	r3, [pc, #4]	; (8023ce8 <SCROLLBAR_SetDefaultSTSkin+0x8>)
 8023ce2:	4a02      	ldr	r2, [pc, #8]	; (8023cec <SCROLLBAR_SetDefaultSTSkin+0xc>)
 8023ce4:	601a      	str	r2, [r3, #0]
 8023ce6:	4770      	bx	lr
 8023ce8:	200003bc 	.word	0x200003bc
 8023cec:	08028bc0 	.word	0x08028bc0

08023cf0 <_GetImageSizes>:
 8023cf0:	b410      	push	{r4}
 8023cf2:	8843      	ldrh	r3, [r0, #2]
 8023cf4:	8804      	ldrh	r4, [r0, #0]
 8023cf6:	600c      	str	r4, [r1, #0]
 8023cf8:	6013      	str	r3, [r2, #0]
 8023cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023cfe:	4770      	bx	lr

08023d00 <_cbButtonBack>:
 8023d00:	b500      	push	{lr}
 8023d02:	6802      	ldr	r2, [r0, #0]
 8023d04:	2a0f      	cmp	r2, #15
 8023d06:	b083      	sub	sp, #12
 8023d08:	d004      	beq.n	8023d14 <_cbButtonBack+0x14>
 8023d0a:	f7f8 fef1 	bl	801caf0 <BUTTON_Callback>
 8023d0e:	b003      	add	sp, #12
 8023d10:	f85d fb04 	ldr.w	pc, [sp], #4
 8023d14:	6840      	ldr	r0, [r0, #4]
 8023d16:	f7fa f9e5 	bl	801e0e4 <WIDGET_GetState>
 8023d1a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023d1e:	f7ed fd41 	bl	80117a4 <GUI_SetBkColor>
 8023d22:	f7ed fe8f 	bl	8011a44 <GUI_Clear>
 8023d26:	4668      	mov	r0, sp
 8023d28:	f7f7 f998 	bl	801b05c <WM_GetClientRect>
 8023d2c:	480c      	ldr	r0, [pc, #48]	; (8023d60 <_cbButtonBack+0x60>)
 8023d2e:	f7ed fd45 	bl	80117bc <GUI_SetColor>
 8023d32:	2232      	movs	r2, #50	; 0x32
 8023d34:	4611      	mov	r1, r2
 8023d36:	200a      	movs	r0, #10
 8023d38:	f7eb fe86 	bl	800fa48 <GUI_AA_FillCircle>
 8023d3c:	4808      	ldr	r0, [pc, #32]	; (8023d60 <_cbButtonBack+0x60>)
 8023d3e:	f7ed fd31 	bl	80117a4 <GUI_SetBkColor>
 8023d42:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023d46:	f7ed fd39 	bl	80117bc <GUI_SetColor>
 8023d4a:	4806      	ldr	r0, [pc, #24]	; (8023d64 <_cbButtonBack+0x64>)
 8023d4c:	f7ed fd98 	bl	8011880 <GUI_SetFont>
 8023d50:	2219      	movs	r2, #25
 8023d52:	2105      	movs	r1, #5
 8023d54:	4804      	ldr	r0, [pc, #16]	; (8023d68 <_cbButtonBack+0x68>)
 8023d56:	f7ee faef 	bl	8012338 <GUI_DispStringAt>
 8023d5a:	b003      	add	sp, #12
 8023d5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8023d60:	00dca939 	.word	0x00dca939
 8023d64:	0807a008 	.word	0x0807a008
 8023d68:	0807e7fc 	.word	0x0807e7fc

08023d6c <_cbButtonNext>:
 8023d6c:	b510      	push	{r4, lr}
 8023d6e:	6804      	ldr	r4, [r0, #0]
 8023d70:	2c0f      	cmp	r4, #15
 8023d72:	b082      	sub	sp, #8
 8023d74:	d003      	beq.n	8023d7e <_cbButtonNext+0x12>
 8023d76:	f7f8 febb 	bl	801caf0 <BUTTON_Callback>
 8023d7a:	b002      	add	sp, #8
 8023d7c:	bd10      	pop	{r4, pc}
 8023d7e:	6840      	ldr	r0, [r0, #4]
 8023d80:	f7fa f9b0 	bl	801e0e4 <WIDGET_GetState>
 8023d84:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023d88:	f7ed fd0c 	bl	80117a4 <GUI_SetBkColor>
 8023d8c:	f7ed fe5a 	bl	8011a44 <GUI_Clear>
 8023d90:	4668      	mov	r0, sp
 8023d92:	f7f7 f963 	bl	801b05c <WM_GetClientRect>
 8023d96:	480c      	ldr	r0, [pc, #48]	; (8023dc8 <_cbButtonNext+0x5c>)
 8023d98:	f7ed fd10 	bl	80117bc <GUI_SetColor>
 8023d9c:	2232      	movs	r2, #50	; 0x32
 8023d9e:	4611      	mov	r1, r2
 8023da0:	4610      	mov	r0, r2
 8023da2:	f7eb fe51 	bl	800fa48 <GUI_AA_FillCircle>
 8023da6:	4808      	ldr	r0, [pc, #32]	; (8023dc8 <_cbButtonNext+0x5c>)
 8023da8:	f7ed fcfc 	bl	80117a4 <GUI_SetBkColor>
 8023dac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023db0:	f7ed fd04 	bl	80117bc <GUI_SetColor>
 8023db4:	4805      	ldr	r0, [pc, #20]	; (8023dcc <_cbButtonNext+0x60>)
 8023db6:	f7ed fd63 	bl	8011880 <GUI_SetFont>
 8023dba:	4621      	mov	r1, r4
 8023dbc:	2219      	movs	r2, #25
 8023dbe:	4804      	ldr	r0, [pc, #16]	; (8023dd0 <_cbButtonNext+0x64>)
 8023dc0:	f7ee faba 	bl	8012338 <GUI_DispStringAt>
 8023dc4:	b002      	add	sp, #8
 8023dc6:	bd10      	pop	{r4, pc}
 8023dc8:	00dca939 	.word	0x00dca939
 8023dcc:	0807a008 	.word	0x0807a008
 8023dd0:	0807e804 	.word	0x0807e804

08023dd4 <_DrawBitmap>:
 8023dd4:	f7ee bc1a 	b.w	801260c <GUI_DrawBitmap>

08023dd8 <_DrawText>:
 8023dd8:	b410      	push	{r4}
 8023dda:	4604      	mov	r4, r0
 8023ddc:	4610      	mov	r0, r2
 8023dde:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8023de2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8023de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023dea:	f7ee bba9 	b.w	8012540 <GUI_DispStringInRectWrap>
 8023dee:	bf00      	nop

08023df0 <_DrawDualText>:
 8023df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023df4:	b08b      	sub	sp, #44	; 0x2c
 8023df6:	2300      	movs	r3, #0
 8023df8:	460e      	mov	r6, r1
 8023dfa:	4615      	mov	r5, r2
 8023dfc:	4607      	mov	r7, r0
 8023dfe:	4610      	mov	r0, r2
 8023e00:	2220      	movs	r2, #32
 8023e02:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8023e06:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8023e0a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8023e0e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8023e12:	9200      	str	r2, [sp, #0]
 8023e14:	9205      	str	r2, [sp, #20]
 8023e16:	f7ee fb97 	bl	8012548 <GUI_GetStringDistX>
 8023e1a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8023e1e:	f9b6 2000 	ldrsh.w	r2, [r6]
 8023e22:	1a18      	subs	r0, r3, r0
 8023e24:	1a80      	subs	r0, r0, r2
 8023e26:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8023e2a:	eb02 0060 	add.w	r0, r2, r0, asr #1
 8023e2e:	8030      	strh	r0, [r6, #0]
 8023e30:	4628      	mov	r0, r5
 8023e32:	f7dc f9e5 	bl	8000200 <strlen>
 8023e36:	2800      	cmp	r0, #0
 8023e38:	d057      	beq.n	8023eea <_DrawDualText+0xfa>
 8023e3a:	782b      	ldrb	r3, [r5, #0]
 8023e3c:	f88d 3000 	strb.w	r3, [sp]
 8023e40:	2b20      	cmp	r3, #32
 8023e42:	d052      	beq.n	8023eea <_DrawDualText+0xfa>
 8023e44:	46e9      	mov	r9, sp
 8023e46:	3001      	adds	r0, #1
 8023e48:	4649      	mov	r1, r9
 8023e4a:	462a      	mov	r2, r5
 8023e4c:	2402      	movs	r4, #2
 8023e4e:	e006      	b.n	8023e5e <_DrawDualText+0x6e>
 8023e50:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8023e54:	f801 3f01 	strb.w	r3, [r1, #1]!
 8023e58:	2b20      	cmp	r3, #32
 8023e5a:	d005      	beq.n	8023e68 <_DrawDualText+0x78>
 8023e5c:	4664      	mov	r4, ip
 8023e5e:	4284      	cmp	r4, r0
 8023e60:	46a0      	mov	r8, r4
 8023e62:	f104 0c01 	add.w	ip, r4, #1
 8023e66:	d1f3      	bne.n	8023e50 <_DrawDualText+0x60>
 8023e68:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8023e6c:	4648      	mov	r0, r9
 8023e6e:	2204      	movs	r2, #4
 8023e70:	4631      	mov	r1, r6
 8023e72:	f7ee fb65 	bl	8012540 <GUI_DispStringInRectWrap>
 8023e76:	4648      	mov	r0, r9
 8023e78:	f7ee fb66 	bl	8012548 <GUI_GetStringDistX>
 8023e7c:	5d2b      	ldrb	r3, [r5, r4]
 8023e7e:	4681      	mov	r9, r0
 8023e80:	b383      	cbz	r3, 8023ee4 <_DrawDualText+0xf4>
 8023e82:	ac05      	add	r4, sp, #20
 8023e84:	eb05 0208 	add.w	r2, r5, r8
 8023e88:	4620      	mov	r0, r4
 8023e8a:	2100      	movs	r1, #0
 8023e8c:	f800 3b01 	strb.w	r3, [r0], #1
 8023e90:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8023e94:	3101      	adds	r1, #1
 8023e96:	2b00      	cmp	r3, #0
 8023e98:	d1f8      	bne.n	8023e8c <_DrawDualText+0x9c>
 8023e9a:	ab0a      	add	r3, sp, #40	; 0x28
 8023e9c:	4419      	add	r1, r3
 8023e9e:	2300      	movs	r3, #0
 8023ea0:	f801 3c14 	strb.w	r3, [r1, #-20]
 8023ea4:	f7ed fb02 	bl	80114ac <GUI_GetColor>
 8023ea8:	4680      	mov	r8, r0
 8023eaa:	f7ed fb17 	bl	80114dc <GUI_GetFont>
 8023eae:	4605      	mov	r5, r0
 8023eb0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8023eb2:	f7ed fc83 	bl	80117bc <GUI_SetColor>
 8023eb6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8023eb8:	f7ed fce2 	bl	8011880 <GUI_SetFont>
 8023ebc:	8832      	ldrh	r2, [r6, #0]
 8023ebe:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8023ec2:	4491      	add	r9, r2
 8023ec4:	4631      	mov	r1, r6
 8023ec6:	2204      	movs	r2, #4
 8023ec8:	4620      	mov	r0, r4
 8023eca:	f8a6 9000 	strh.w	r9, [r6]
 8023ece:	f7ee fb37 	bl	8012540 <GUI_DispStringInRectWrap>
 8023ed2:	4640      	mov	r0, r8
 8023ed4:	f7ed fc72 	bl	80117bc <GUI_SetColor>
 8023ed8:	4628      	mov	r0, r5
 8023eda:	f7ed fcd1 	bl	8011880 <GUI_SetFont>
 8023ede:	b00b      	add	sp, #44	; 0x2c
 8023ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023ee4:	4619      	mov	r1, r3
 8023ee6:	ac05      	add	r4, sp, #20
 8023ee8:	e7d7      	b.n	8023e9a <_DrawDualText+0xaa>
 8023eea:	f04f 0801 	mov.w	r8, #1
 8023eee:	4644      	mov	r4, r8
 8023ef0:	46e9      	mov	r9, sp
 8023ef2:	e7b9      	b.n	8023e68 <_DrawDualText+0x78>

08023ef4 <_GetRelRectFromIndex>:
 8023ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023ef8:	b082      	sub	sp, #8
 8023efa:	460e      	mov	r6, r1
 8023efc:	4617      	mov	r7, r2
 8023efe:	4680      	mov	r8, r0
 8023f00:	f7ec fefe 	bl	8010d00 <GUI_ALLOC_LockH>
 8023f04:	f10d 0908 	add.w	r9, sp, #8
 8023f08:	f849 0d04 	str.w	r0, [r9, #-4]!
 8023f0c:	4648      	mov	r0, r9
 8023f0e:	f7ec ff09 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023f12:	4640      	mov	r0, r8
 8023f14:	f7ec fef4 	bl	8010d00 <GUI_ALLOC_LockH>
 8023f18:	4603      	mov	r3, r0
 8023f1a:	4648      	mov	r0, r9
 8023f1c:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8023f20:	f9b3 4000 	ldrsh.w	r4, [r3]
 8023f24:	9301      	str	r3, [sp, #4]
 8023f26:	f7ec fefd 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023f2a:	4640      	mov	r0, r8
 8023f2c:	f7ec fee8 	bl	8010d00 <GUI_ALLOC_LockH>
 8023f30:	1b2c      	subs	r4, r5, r4
 8023f32:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8023f34:	6f05      	ldr	r5, [r0, #112]	; 0x70
 8023f36:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8023f3a:	9001      	str	r0, [sp, #4]
 8023f3c:	3401      	adds	r4, #1
 8023f3e:	4648      	mov	r0, r9
 8023f40:	441a      	add	r2, r3
 8023f42:	1b64      	subs	r4, r4, r5
 8023f44:	fb94 f4f2 	sdiv	r4, r4, r2
 8023f48:	f7ec feec 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023f4c:	4640      	mov	r0, r8
 8023f4e:	f7ec fed7 	bl	8010d00 <GUI_ALLOC_LockH>
 8023f52:	4682      	mov	sl, r0
 8023f54:	4640      	mov	r0, r8
 8023f56:	f8cd a000 	str.w	sl, [sp]
 8023f5a:	f7ec fed1 	bl	8010d00 <GUI_ALLOC_LockH>
 8023f5e:	4602      	mov	r2, r0
 8023f60:	4648      	mov	r0, r9
 8023f62:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
 8023f66:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
 8023f6a:	9201      	str	r2, [sp, #4]
 8023f6c:	f7ec feda 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023f70:	eba5 0308 	sub.w	r3, r5, r8
 8023f74:	f8da 1074 	ldr.w	r1, [sl, #116]	; 0x74
 8023f78:	f8da 5094 	ldr.w	r5, [sl, #148]	; 0x94
 8023f7c:	f8da 207c 	ldr.w	r2, [sl, #124]	; 0x7c
 8023f80:	3301      	adds	r3, #1
 8023f82:	1a5b      	subs	r3, r3, r1
 8023f84:	4415      	add	r5, r2
 8023f86:	fb93 f3f5 	sdiv	r3, r3, r5
 8023f8a:	bb3c      	cbnz	r4, 8023fdc <_GetRelRectFromIndex+0xe8>
 8023f8c:	46b8      	mov	r8, r7
 8023f8e:	a802      	add	r0, sp, #8
 8023f90:	fb04 7e18 	mls	lr, r4, r8, r7
 8023f94:	f850 5d08 	ldr.w	r5, [r0, #-8]!
 8023f98:	f8d5 7090 	ldr.w	r7, [r5, #144]	; 0x90
 8023f9c:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8023f9e:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8023fa2:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
 8023fa6:	187c      	adds	r4, r7, r1
 8023fa8:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8023fac:	fb01 8313 	mls	r3, r1, r3, r8
 8023fb0:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8023fb2:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 8023fb4:	4411      	add	r1, r2
 8023fb6:	fb14 c40e 	smlabb	r4, r4, lr, ip
 8023fba:	fb11 5303 	smlabb	r3, r1, r3, r5
 8023fbe:	b29b      	uxth	r3, r3
 8023fc0:	b2a4      	uxth	r4, r4
 8023fc2:	3f01      	subs	r7, #1
 8023fc4:	3a01      	subs	r2, #1
 8023fc6:	441a      	add	r2, r3
 8023fc8:	4427      	add	r7, r4
 8023fca:	8034      	strh	r4, [r6, #0]
 8023fcc:	80b7      	strh	r7, [r6, #4]
 8023fce:	8073      	strh	r3, [r6, #2]
 8023fd0:	80f2      	strh	r2, [r6, #6]
 8023fd2:	f7ec fea7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8023fd6:	b002      	add	sp, #8
 8023fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023fdc:	fb97 f8f4 	sdiv	r8, r7, r4
 8023fe0:	e7d5      	b.n	8023f8e <_GetRelRectFromIndex+0x9a>
 8023fe2:	bf00      	nop

08023fe4 <ST_AnimatedIconView_Callback>:
 8023fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fe8:	6844      	ldr	r4, [r0, #4]
 8023fea:	b09b      	sub	sp, #108	; 0x6c
 8023fec:	4606      	mov	r6, r0
 8023fee:	4601      	mov	r1, r0
 8023ff0:	4620      	mov	r0, r4
 8023ff2:	f7fa f8f5 	bl	801e1e0 <WIDGET_HandleActive>
 8023ff6:	b168      	cbz	r0, 8024014 <ST_AnimatedIconView_Callback+0x30>
 8023ff8:	6833      	ldr	r3, [r6, #0]
 8023ffa:	2b11      	cmp	r3, #17
 8023ffc:	f000 80e8 	beq.w	80241d0 <ST_AnimatedIconView_Callback+0x1ec>
 8024000:	dc0b      	bgt.n	802401a <ST_AnimatedIconView_Callback+0x36>
 8024002:	2b0e      	cmp	r3, #14
 8024004:	f000 808a 	beq.w	802411c <ST_AnimatedIconView_Callback+0x138>
 8024008:	2b0f      	cmp	r3, #15
 802400a:	f000 810a 	beq.w	8024222 <ST_AnimatedIconView_Callback+0x23e>
 802400e:	2b0b      	cmp	r3, #11
 8024010:	f000 80f8 	beq.w	8024204 <ST_AnimatedIconView_Callback+0x220>
 8024014:	b01b      	add	sp, #108	; 0x6c
 8024016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802401a:	f240 1213 	movw	r2, #275	; 0x113
 802401e:	4293      	cmp	r3, r2
 8024020:	f000 80c1 	beq.w	80241a6 <ST_AnimatedIconView_Callback+0x1c2>
 8024024:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8024028:	f000 826b 	beq.w	8024502 <ST_AnimatedIconView_Callback+0x51e>
 802402c:	2b26      	cmp	r3, #38	; 0x26
 802402e:	d1f1      	bne.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 8024030:	68b0      	ldr	r0, [r6, #8]
 8024032:	f7f7 f925 	bl	801b280 <WM_GetId>
 8024036:	f5b0 7fb8 	cmp.w	r0, #368	; 0x170
 802403a:	68f3      	ldr	r3, [r6, #12]
 802403c:	f000 826a 	beq.w	8024514 <ST_AnimatedIconView_Callback+0x530>
 8024040:	f240 1271 	movw	r2, #369	; 0x171
 8024044:	4290      	cmp	r0, r2
 8024046:	d1e5      	bne.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 8024048:	2b01      	cmp	r3, #1
 802404a:	d1e3      	bne.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 802404c:	4620      	mov	r0, r4
 802404e:	f7ec fe57 	bl	8010d00 <GUI_ALLOC_LockH>
 8024052:	9014      	str	r0, [sp, #80]	; 0x50
 8024054:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8024058:	f7fe fb68 	bl	802272c <GUI_ARRAY_GetNumItems>
 802405c:	4680      	mov	r8, r0
 802405e:	4620      	mov	r0, r4
 8024060:	f7ec fe4e 	bl	8010d00 <GUI_ALLOC_LockH>
 8024064:	ad1a      	add	r5, sp, #104	; 0x68
 8024066:	f9b0 9000 	ldrsh.w	r9, [r0]
 802406a:	f845 0d10 	str.w	r0, [r5, #-16]!
 802406e:	4603      	mov	r3, r0
 8024070:	4628      	mov	r0, r5
 8024072:	f9b3 7004 	ldrsh.w	r7, [r3, #4]
 8024076:	f7ec fe55 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802407a:	4620      	mov	r0, r4
 802407c:	f7ec fe40 	bl	8010d00 <GUI_ALLOC_LockH>
 8024080:	eba7 0309 	sub.w	r3, r7, r9
 8024084:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8024088:	6f81      	ldr	r1, [r0, #120]	; 0x78
 802408a:	6f07      	ldr	r7, [r0, #112]	; 0x70
 802408c:	9016      	str	r0, [sp, #88]	; 0x58
 802408e:	3301      	adds	r3, #1
 8024090:	4628      	mov	r0, r5
 8024092:	eb02 0901 	add.w	r9, r2, r1
 8024096:	1bdb      	subs	r3, r3, r7
 8024098:	fb93 f9f9 	sdiv	r9, r3, r9
 802409c:	f7ec fe42 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80240a0:	4620      	mov	r0, r4
 80240a2:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 80240a6:	f7ec fe2b 	bl	8010d00 <GUI_ALLOC_LockH>
 80240aa:	4603      	mov	r3, r0
 80240ac:	4628      	mov	r0, r5
 80240ae:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80240b2:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 80240b6:	9316      	str	r3, [sp, #88]	; 0x58
 80240b8:	f7ec fe34 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80240bc:	eba7 030b 	sub.w	r3, r7, fp
 80240c0:	f8da 0074 	ldr.w	r0, [sl, #116]	; 0x74
 80240c4:	f8da 2094 	ldr.w	r2, [sl, #148]	; 0x94
 80240c8:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 80240cc:	3301      	adds	r3, #1
 80240ce:	440a      	add	r2, r1
 80240d0:	1a1b      	subs	r3, r3, r0
 80240d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80240d6:	fb09 f303 	mul.w	r3, r9, r3
 80240da:	fb98 f2f3 	sdiv	r2, r8, r3
 80240de:	fb03 8312 	mls	r3, r3, r2, r8
 80240e2:	b903      	cbnz	r3, 80240e6 <ST_AnimatedIconView_Callback+0x102>
 80240e4:	3a01      	subs	r2, #1
 80240e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80240e8:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 80240ec:	2f00      	cmp	r7, #0
 80240ee:	dd91      	ble.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 80240f0:	3f01      	subs	r7, #1
 80240f2:	3a01      	subs	r2, #1
 80240f4:	4297      	cmp	r7, r2
 80240f6:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
 80240fa:	f000 837b 	beq.w	80247f4 <ST_AnimatedIconView_Callback+0x810>
 80240fe:	2f00      	cmp	r7, #0
 8024100:	f040 826b 	bne.w	80245da <ST_AnimatedIconView_Callback+0x5f6>
 8024104:	f240 1171 	movw	r1, #369	; 0x171
 8024108:	4620      	mov	r0, r4
 802410a:	f7f7 f839 	bl	801b180 <WM_GetDialogItem>
 802410e:	f7f6 f869 	bl	801a1e4 <WM_DeleteWindow>
 8024112:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024114:	2201      	movs	r2, #1
 8024116:	e9c3 272c 	strd	r2, r7, [r3, #176]	; 0xb0
 802411a:	e25e      	b.n	80245da <ST_AnimatedIconView_Callback+0x5f6>
 802411c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8024120:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8024124:	2b00      	cmp	r3, #0
 8024126:	f43f af75 	beq.w	8024014 <ST_AnimatedIconView_Callback+0x30>
 802412a:	4620      	mov	r0, r4
 802412c:	f7ec fde8 	bl	8010d00 <GUI_ALLOC_LockH>
 8024130:	9012      	str	r0, [sp, #72]	; 0x48
 8024132:	4620      	mov	r0, r4
 8024134:	f7ec fde4 	bl	8010d00 <GUI_ALLOC_LockH>
 8024138:	ad1a      	add	r5, sp, #104	; 0x68
 802413a:	f9b0 9000 	ldrsh.w	r9, [r0]
 802413e:	f845 0d10 	str.w	r0, [r5, #-16]!
 8024142:	4602      	mov	r2, r0
 8024144:	4628      	mov	r0, r5
 8024146:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 802414a:	f7ec fdeb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802414e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024150:	e9d2 0123 	ldrd	r0, r1, [r2, #140]	; 0x8c
 8024154:	eba7 0309 	sub.w	r3, r7, r9
 8024158:	6f97      	ldr	r7, [r2, #120]	; 0x78
 802415a:	3301      	adds	r3, #1
 802415c:	443b      	add	r3, r7
 802415e:	440f      	add	r7, r1
 8024160:	fb93 f7f7 	sdiv	r7, r3, r7
 8024164:	f7fe fae2 	bl	802272c <GUI_ARRAY_GetNumItems>
 8024168:	4681      	mov	r9, r0
 802416a:	a81a      	add	r0, sp, #104	; 0x68
 802416c:	f8d8 8000 	ldr.w	r8, [r8]
 8024170:	f850 3d20 	ldr.w	r3, [r0, #-32]!
 8024174:	f8d3 a098 	ldr.w	sl, [r3, #152]	; 0x98
 8024178:	f7ec fdd4 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802417c:	f1ba 0f00 	cmp.w	sl, #0
 8024180:	f1a8 0810 	sub.w	r8, r8, #16
 8024184:	f2c0 836d 	blt.w	8024862 <ST_AnimatedIconView_Callback+0x87e>
 8024188:	f1b8 0f08 	cmp.w	r8, #8
 802418c:	f200 8362 	bhi.w	8024854 <ST_AnimatedIconView_Callback+0x870>
 8024190:	e8df f018 	tbh	[pc, r8, lsl #1]
 8024194:	031a0320 	.word	0x031a0320
 8024198:	03280312 	.word	0x03280312
 802419c:	03600360 	.word	0x03600360
 80241a0:	030e0360 	.word	0x030e0360
 80241a4:	02e0      	.short	0x02e0
 80241a6:	4620      	mov	r0, r4
 80241a8:	f7ec fdaa 	bl	8010d00 <GUI_ALLOC_LockH>
 80241ac:	ad1a      	add	r5, sp, #104	; 0x68
 80241ae:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
 80241b2:	f845 0d18 	str.w	r0, [r5, #-24]!
 80241b6:	68f0      	ldr	r0, [r6, #12]
 80241b8:	f7f7 fee8 	bl	801bf8c <WM_RestartTimer>
 80241bc:	4628      	mov	r0, r5
 80241be:	f7ec fdb1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80241c2:	4620      	mov	r0, r4
 80241c4:	f7f5 fec4 	bl	8019f50 <WM_InvalidateWindow>
 80241c8:	6870      	ldr	r0, [r6, #4]
 80241ca:	f7f7 f995 	bl	801b4f8 <WM_Update>
 80241ce:	e721      	b.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 80241d0:	68f2      	ldr	r2, [r6, #12]
 80241d2:	8913      	ldrh	r3, [r2, #8]
 80241d4:	2b01      	cmp	r3, #1
 80241d6:	f000 8215 	beq.w	8024604 <ST_AnimatedIconView_Callback+0x620>
 80241da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80241de:	f47f af19 	bne.w	8024014 <ST_AnimatedIconView_Callback+0x30>
 80241e2:	4620      	mov	r0, r4
 80241e4:	f7ec fd8c 	bl	8010d00 <GUI_ALLOC_LockH>
 80241e8:	ab1a      	add	r3, sp, #104	; 0x68
 80241ea:	2201      	movs	r2, #1
 80241ec:	f843 0d10 	str.w	r0, [r3, #-16]!
 80241f0:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
 80241f4:	4618      	mov	r0, r3
 80241f6:	f7ec fd95 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80241fa:	4620      	mov	r0, r4
 80241fc:	2102      	movs	r1, #2
 80241fe:	f7f7 f935 	bl	801b46c <WM_NotifyParent>
 8024202:	e707      	b.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 8024204:	4620      	mov	r0, r4
 8024206:	f7ec fd7b 	bl	8010d00 <GUI_ALLOC_LockH>
 802420a:	ac1a      	add	r4, sp, #104	; 0x68
 802420c:	4603      	mov	r3, r0
 802420e:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8024212:	f844 3d10 	str.w	r3, [r4, #-16]!
 8024216:	f7fe faeb 	bl	80227f0 <GUI_ARRAY_Delete>
 802421a:	4620      	mov	r0, r4
 802421c:	f7ec fd82 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024220:	e6f8      	b.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 8024222:	4620      	mov	r0, r4
 8024224:	f7ec fd6c 	bl	8010d00 <GUI_ALLOC_LockH>
 8024228:	4603      	mov	r3, r0
 802422a:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 802422e:	900c      	str	r0, [sp, #48]	; 0x30
 8024230:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 8024234:	9208      	str	r2, [sp, #32]
 8024236:	f8d0 9054 	ldr.w	r9, [r0, #84]	; 0x54
 802423a:	f8d0 708c 	ldr.w	r7, [r0, #140]	; 0x8c
 802423e:	f9b0 c000 	ldrsh.w	ip, [r0]
 8024242:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8024246:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8024248:	9005      	str	r0, [sp, #20]
 802424a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 802424e:	9006      	str	r0, [sp, #24]
 8024250:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8024254:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8024258:	9007      	str	r0, [sp, #28]
 802425a:	b921      	cbnz	r1, 8024266 <ST_AnimatedIconView_Callback+0x282>
 802425c:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8024260:	3901      	subs	r1, #1
 8024262:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
 8024266:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8024268:	9116      	str	r1, [sp, #88]	; 0x58
 802426a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 802426c:	9017      	str	r0, [sp, #92]	; 0x5c
 802426e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8024270:	68f1      	ldr	r1, [r6, #12]
 8024272:	9009      	str	r0, [sp, #36]	; 0x24
 8024274:	4606      	mov	r6, r0
 8024276:	6808      	ldr	r0, [r1, #0]
 8024278:	6849      	ldr	r1, [r1, #4]
 802427a:	9618      	str	r6, [sp, #96]	; 0x60
 802427c:	ae14      	add	r6, sp, #80	; 0x50
 802427e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024280:	9319      	str	r3, [sp, #100]	; 0x64
 8024282:	4252      	negs	r2, r2
 8024284:	c603      	stmia	r6!, {r0, r1}
 8024286:	f1cc 0100 	rsb	r1, ip, #0
 802428a:	a814      	add	r0, sp, #80	; 0x50
 802428c:	f7ed f998 	bl	80115c0 <GUI_MoveRect>
 8024290:	4620      	mov	r0, r4
 8024292:	f7ec fd35 	bl	8010d00 <GUI_ALLOC_LockH>
 8024296:	e9d0 2300 	ldrd	r2, r3, [r0]
 802429a:	9012      	str	r0, [sp, #72]	; 0x48
 802429c:	a812      	add	r0, sp, #72	; 0x48
 802429e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80242a2:	f7ec fd3f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80242a6:	a814      	add	r0, sp, #80	; 0x50
 80242a8:	a910      	add	r1, sp, #64	; 0x40
 80242aa:	f7ef fd2b 	bl	8013d04 <GUI__IntersectRect>
 80242ae:	4620      	mov	r0, r4
 80242b0:	f7fe f9da 	bl	8022668 <WM_GetHasTrans>
 80242b4:	2800      	cmp	r0, #0
 80242b6:	f000 8197 	beq.w	80245e8 <ST_AnimatedIconView_Callback+0x604>
 80242ba:	4638      	mov	r0, r7
 80242bc:	f7fe fa36 	bl	802272c <GUI_ARRAY_GetNumItems>
 80242c0:	4680      	mov	r8, r0
 80242c2:	4620      	mov	r0, r4
 80242c4:	f7ec fd1c 	bl	8010d00 <GUI_ALLOC_LockH>
 80242c8:	4602      	mov	r2, r0
 80242ca:	a812      	add	r0, sp, #72	; 0x48
 80242cc:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 80242d0:	f9b2 9000 	ldrsh.w	r9, [r2]
 80242d4:	9212      	str	r2, [sp, #72]	; 0x48
 80242d6:	f7ec fd25 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80242da:	4620      	mov	r0, r4
 80242dc:	f7ec fd10 	bl	8010d00 <GUI_ALLOC_LockH>
 80242e0:	eba6 0909 	sub.w	r9, r6, r9
 80242e4:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80242e6:	6f06      	ldr	r6, [r0, #112]	; 0x70
 80242e8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80242ec:	9012      	str	r0, [sp, #72]	; 0x48
 80242ee:	f109 0901 	add.w	r9, r9, #1
 80242f2:	a812      	add	r0, sp, #72	; 0x48
 80242f4:	440a      	add	r2, r1
 80242f6:	eba9 0906 	sub.w	r9, r9, r6
 80242fa:	fb99 f9f2 	sdiv	r9, r9, r2
 80242fe:	f7ec fd11 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024302:	4620      	mov	r0, r4
 8024304:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024306:	f7ec fcfb 	bl	8010d00 <GUI_ALLOC_LockH>
 802430a:	4601      	mov	r1, r0
 802430c:	a812      	add	r0, sp, #72	; 0x48
 802430e:	f9b1 b006 	ldrsh.w	fp, [r1, #6]
 8024312:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
 8024316:	9112      	str	r1, [sp, #72]	; 0x48
 8024318:	f7ec fd04 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802431c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 802431e:	f8d6 1094 	ldr.w	r1, [r6, #148]	; 0x94
 8024322:	6ff6      	ldr	r6, [r6, #124]	; 0x7c
 8024324:	ebab 020a 	sub.w	r2, fp, sl
 8024328:	3201      	adds	r2, #1
 802432a:	4431      	add	r1, r6
 802432c:	1ad2      	subs	r2, r2, r3
 802432e:	2002      	movs	r0, #2
 8024330:	fb92 fbf1 	sdiv	fp, r2, r1
 8024334:	fb09 f60b 	mul.w	r6, r9, fp
 8024338:	fb05 6606 	mla	r6, r5, r6, r6
 802433c:	f7ed fad0 	bl	80118e0 <GUI_SetTextMode>
 8024340:	9805      	ldr	r0, [sp, #20]
 8024342:	f7ed fa9d 	bl	8011880 <GUI_SetFont>
 8024346:	fb09 f505 	mul.w	r5, r9, r5
 802434a:	4546      	cmp	r6, r8
 802434c:	bfa8      	it	ge
 802434e:	4646      	movge	r6, r8
 8024350:	fb0b f505 	mul.w	r5, fp, r5
 8024354:	42b5      	cmp	r5, r6
 8024356:	f280 80be 	bge.w	80244d6 <ST_AnimatedIconView_Callback+0x4f2>
 802435a:	46a0      	mov	r8, r4
 802435c:	e009      	b.n	8024372 <ST_AnimatedIconView_Callback+0x38e>
 802435e:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8024362:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 8024366:	429a      	cmp	r2, r3
 8024368:	da28      	bge.n	80243bc <ST_AnimatedIconView_Callback+0x3d8>
 802436a:	3501      	adds	r5, #1
 802436c:	42b5      	cmp	r5, r6
 802436e:	f000 80b2 	beq.w	80244d6 <ST_AnimatedIconView_Callback+0x4f2>
 8024372:	462a      	mov	r2, r5
 8024374:	a912      	add	r1, sp, #72	; 0x48
 8024376:	4640      	mov	r0, r8
 8024378:	f7ff fdbc 	bl	8023ef4 <_GetRelRectFromIndex>
 802437c:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 8024380:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8024384:	429a      	cmp	r2, r3
 8024386:	f300 80b8 	bgt.w	80244fa <ST_AnimatedIconView_Callback+0x516>
 802438a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802438c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8024390:	2b00      	cmp	r3, #0
 8024392:	d1e4      	bne.n	802435e <ST_AnimatedIconView_Callback+0x37a>
 8024394:	4619      	mov	r1, r3
 8024396:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 802439a:	4640      	mov	r0, r8
 802439c:	f7f7 fdb6 	bl	801bf0c <WM_CreateTimer>
 80243a0:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 80243a4:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 80243a8:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 80243ac:	429a      	cmp	r2, r3
 80243ae:	dbdc      	blt.n	802436a <ST_AnimatedIconView_Callback+0x386>
 80243b0:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 80243b4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80243b8:	429a      	cmp	r2, r3
 80243ba:	dcd6      	bgt.n	802436a <ST_AnimatedIconView_Callback+0x386>
 80243bc:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 80243c0:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 80243c4:	429a      	cmp	r2, r3
 80243c6:	dbd0      	blt.n	802436a <ST_AnimatedIconView_Callback+0x386>
 80243c8:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 80243cc:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 80243d0:	429a      	cmp	r2, r3
 80243d2:	dcca      	bgt.n	802436a <ST_AnimatedIconView_Callback+0x386>
 80243d4:	4629      	mov	r1, r5
 80243d6:	4638      	mov	r0, r7
 80243d8:	f7fe fa5e 	bl	8022898 <GUI_ARRAY_GetpItemLocked>
 80243dc:	f8d0 9000 	ldr.w	r9, [r0]
 80243e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80243e2:	f1b9 0f00 	cmp.w	r9, #0
 80243e6:	d054      	beq.n	8024492 <ST_AnimatedIconView_Callback+0x4ae>
 80243e8:	e9d0 3404 	ldrd	r3, r4, [r0, #16]
 80243ec:	9a07      	ldr	r2, [sp, #28]
 80243ee:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80243f2:	2a00      	cmp	r2, #0
 80243f4:	bf08      	it	eq
 80243f6:	461c      	moveq	r4, r3
 80243f8:	a80b      	add	r0, sp, #44	; 0x2c
 80243fa:	f7ec fc93 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80243fe:	a90d      	add	r1, sp, #52	; 0x34
 8024400:	aa0e      	add	r2, sp, #56	; 0x38
 8024402:	6820      	ldr	r0, [r4, #0]
 8024404:	47d0      	blx	sl
 8024406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024408:	9305      	str	r3, [sp, #20]
 802440a:	4640      	mov	r0, r8
 802440c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8024410:	f7ec fc76 	bl	8010d00 <GUI_ALLOC_LockH>
 8024414:	aa1a      	add	r2, sp, #104	; 0x68
 8024416:	f8d0 a084 	ldr.w	sl, [r0, #132]	; 0x84
 802441a:	f842 0d2c 	str.w	r0, [r2, #-44]!
 802441e:	4610      	mov	r0, r2
 8024420:	f7ec fc80 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024424:	fa5f f38a 	uxtb.w	r3, sl
 8024428:	f003 0103 	and.w	r1, r3, #3
 802442c:	2901      	cmp	r1, #1
 802442e:	f003 030c 	and.w	r3, r3, #12
 8024432:	f000 824a 	beq.w	80248ca <ST_AnimatedIconView_Callback+0x8e6>
 8024436:	2902      	cmp	r1, #2
 8024438:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 802443c:	f000 824f 	beq.w	80248de <ST_AnimatedIconView_Callback+0x8fa>
 8024440:	f9bd 1048 	ldrsh.w	r1, [sp, #72]	; 0x48
 8024444:	9805      	ldr	r0, [sp, #20]
 8024446:	1a52      	subs	r2, r2, r1
 8024448:	1a12      	subs	r2, r2, r0
 802444a:	3201      	adds	r2, #1
 802444c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8024450:	eb01 0a62 	add.w	sl, r1, r2, asr #1
 8024454:	2b08      	cmp	r3, #8
 8024456:	f000 823b 	beq.w	80248d0 <ST_AnimatedIconView_Callback+0x8ec>
 802445a:	2b04      	cmp	r3, #4
 802445c:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8024460:	f000 8243 	beq.w	80248ea <ST_AnimatedIconView_Callback+0x906>
 8024464:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8024468:	1a53      	subs	r3, r2, r1
 802446a:	eba3 030b 	sub.w	r3, r3, fp
 802446e:	3301      	adds	r3, #1
 8024470:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8024474:	eb01 0b63 	add.w	fp, r1, r3, asr #1
 8024478:	4629      	mov	r1, r5
 802447a:	4638      	mov	r0, r7
 802447c:	f7fe fa0c 	bl	8022898 <GUI_ARRAY_GetpItemLocked>
 8024480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024482:	900b      	str	r0, [sp, #44]	; 0x2c
 8024484:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8024488:	465a      	mov	r2, fp
 802448a:	4651      	mov	r1, sl
 802448c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8024490:	47c8      	blx	r9
 8024492:	4640      	mov	r0, r8
 8024494:	f7f8 f9b2 	bl	801c7fc <WM__IsEnabled>
 8024498:	2800      	cmp	r0, #0
 802449a:	f000 81e0 	beq.w	802485e <ST_AnimatedIconView_Callback+0x87a>
 802449e:	9b08      	ldr	r3, [sp, #32]
 80244a0:	1b5b      	subs	r3, r3, r5
 80244a2:	fab3 f383 	clz	r3, r3
 80244a6:	095b      	lsrs	r3, r3, #5
 80244a8:	aa1a      	add	r2, sp, #104	; 0x68
 80244aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80244ae:	f853 0c10 	ldr.w	r0, [r3, #-16]
 80244b2:	f7ed f983 	bl	80117bc <GUI_SetColor>
 80244b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80244b8:	685c      	ldr	r4, [r3, #4]
 80244ba:	b144      	cbz	r4, 80244ce <ST_AnimatedIconView_Callback+0x4ea>
 80244bc:	9906      	ldr	r1, [sp, #24]
 80244be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80244c0:	2901      	cmp	r1, #1
 80244c2:	f103 021c 	add.w	r2, r3, #28
 80244c6:	f000 81fc 	beq.w	80248c2 <ST_AnimatedIconView_Callback+0x8de>
 80244ca:	a912      	add	r1, sp, #72	; 0x48
 80244cc:	47a0      	blx	r4
 80244ce:	a80b      	add	r0, sp, #44	; 0x2c
 80244d0:	f7ec fc28 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80244d4:	e749      	b.n	802436a <ST_AnimatedIconView_Callback+0x386>
 80244d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80244d8:	e9d2 1333 	ldrd	r1, r3, [r2, #204]	; 0xcc
 80244dc:	3301      	adds	r3, #1
 80244de:	428b      	cmp	r3, r1
 80244e0:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
 80244e4:	db09      	blt.n	80244fa <ST_AnimatedIconView_Callback+0x516>
 80244e6:	2400      	movs	r4, #0
 80244e8:	f8c2 40d0 	str.w	r4, [r2, #208]	; 0xd0
 80244ec:	f8d2 00c8 	ldr.w	r0, [r2, #200]	; 0xc8
 80244f0:	f7f7 fcf0 	bl	801bed4 <WM_DeleteTimer>
 80244f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80244f6:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 80244fa:	a80c      	add	r0, sp, #48	; 0x30
 80244fc:	f7ec fc12 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024500:	e588      	b.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 8024502:	68f3      	ldr	r3, [r6, #12]
 8024504:	2b00      	cmp	r3, #0
 8024506:	f47f ad85 	bne.w	8024014 <ST_AnimatedIconView_Callback+0x30>
 802450a:	4620      	mov	r0, r4
 802450c:	2103      	movs	r1, #3
 802450e:	f7f6 ffad 	bl	801b46c <WM_NotifyParent>
 8024512:	e57f      	b.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 8024514:	2b01      	cmp	r3, #1
 8024516:	f47f ad7d 	bne.w	8024014 <ST_AnimatedIconView_Callback+0x30>
 802451a:	4620      	mov	r0, r4
 802451c:	f7ec fbf0 	bl	8010d00 <GUI_ALLOC_LockH>
 8024520:	9014      	str	r0, [sp, #80]	; 0x50
 8024522:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8024526:	f7fe f901 	bl	802272c <GUI_ARRAY_GetNumItems>
 802452a:	4681      	mov	r9, r0
 802452c:	4620      	mov	r0, r4
 802452e:	f7ec fbe7 	bl	8010d00 <GUI_ALLOC_LockH>
 8024532:	ad1a      	add	r5, sp, #104	; 0x68
 8024534:	f9b0 8000 	ldrsh.w	r8, [r0]
 8024538:	f845 0d10 	str.w	r0, [r5, #-16]!
 802453c:	4603      	mov	r3, r0
 802453e:	4628      	mov	r0, r5
 8024540:	f9b3 7004 	ldrsh.w	r7, [r3, #4]
 8024544:	f7ec fbee 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024548:	4620      	mov	r0, r4
 802454a:	f7ec fbd9 	bl	8010d00 <GUI_ALLOC_LockH>
 802454e:	eba7 0308 	sub.w	r3, r7, r8
 8024552:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8024556:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8024558:	6f07      	ldr	r7, [r0, #112]	; 0x70
 802455a:	9016      	str	r0, [sp, #88]	; 0x58
 802455c:	3301      	adds	r3, #1
 802455e:	4628      	mov	r0, r5
 8024560:	eb02 0801 	add.w	r8, r2, r1
 8024564:	1bdb      	subs	r3, r3, r7
 8024566:	fb93 f8f8 	sdiv	r8, r3, r8
 802456a:	f7ec fbdb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802456e:	4620      	mov	r0, r4
 8024570:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8024574:	f7ec fbc4 	bl	8010d00 <GUI_ALLOC_LockH>
 8024578:	4603      	mov	r3, r0
 802457a:	4628      	mov	r0, r5
 802457c:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8024580:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 8024584:	9316      	str	r3, [sp, #88]	; 0x58
 8024586:	f7ec fbcd 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802458a:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 802458e:	f8da 0074 	ldr.w	r0, [sl, #116]	; 0x74
 8024592:	f8da 2094 	ldr.w	r2, [sl, #148]	; 0x94
 8024596:	eba7 030b 	sub.w	r3, r7, fp
 802459a:	3301      	adds	r3, #1
 802459c:	440a      	add	r2, r1
 802459e:	1a1b      	subs	r3, r3, r0
 80245a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80245a4:	fb08 f303 	mul.w	r3, r8, r3
 80245a8:	fb99 f2f3 	sdiv	r2, r9, r3
 80245ac:	fb03 9112 	mls	r1, r3, r2, r9
 80245b0:	2900      	cmp	r1, #0
 80245b2:	f000 8183 	beq.w	80248bc <ST_AnimatedIconView_Callback+0x8d8>
 80245b6:	4690      	mov	r8, r2
 80245b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80245ba:	f8d2 70ac 	ldr.w	r7, [r2, #172]	; 0xac
 80245be:	3701      	adds	r7, #1
 80245c0:	fb07 f303 	mul.w	r3, r7, r3
 80245c4:	454b      	cmp	r3, r9
 80245c6:	f6bf ad25 	bge.w	8024014 <ST_AnimatedIconView_Callback+0x30>
 80245ca:	2f01      	cmp	r7, #1
 80245cc:	f8c2 70ac 	str.w	r7, [r2, #172]	; 0xac
 80245d0:	f000 8190 	beq.w	80248f4 <ST_AnimatedIconView_Callback+0x910>
 80245d4:	45b8      	cmp	r8, r7
 80245d6:	f000 81b5 	beq.w	8024944 <ST_AnimatedIconView_Callback+0x960>
 80245da:	6870      	ldr	r0, [r6, #4]
 80245dc:	f7f5 fcb8 	bl	8019f50 <WM_InvalidateWindow>
 80245e0:	a814      	add	r0, sp, #80	; 0x50
 80245e2:	f7ec fb9f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80245e6:	e515      	b.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 80245e8:	4648      	mov	r0, r9
 80245ea:	f7ed f8db 	bl	80117a4 <GUI_SetBkColor>
 80245ee:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80245f2:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80245f6:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
 80245fa:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 80245fe:	f7ed f9eb 	bl	80119d8 <GUI_ClearRect>
 8024602:	e65a      	b.n	80242ba <ST_AnimatedIconView_Callback+0x2d6>
 8024604:	4620      	mov	r0, r4
 8024606:	e9d2 b700 	ldrd	fp, r7, [r2]
 802460a:	f7ec fb79 	bl	8010d00 <GUI_ALLOC_LockH>
 802460e:	9014      	str	r0, [sp, #80]	; 0x50
 8024610:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8024614:	f7fe f88a 	bl	802272c <GUI_ARRAY_GetNumItems>
 8024618:	4682      	mov	sl, r0
 802461a:	4620      	mov	r0, r4
 802461c:	f7ec fb70 	bl	8010d00 <GUI_ALLOC_LockH>
 8024620:	ad1a      	add	r5, sp, #104	; 0x68
 8024622:	f9b0 8000 	ldrsh.w	r8, [r0]
 8024626:	f845 0d10 	str.w	r0, [r5, #-16]!
 802462a:	4603      	mov	r3, r0
 802462c:	4628      	mov	r0, r5
 802462e:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8024632:	f7ec fb77 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024636:	4620      	mov	r0, r4
 8024638:	f7ec fb62 	bl	8010d00 <GUI_ALLOC_LockH>
 802463c:	eba6 0808 	sub.w	r8, r6, r8
 8024640:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8024642:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8024644:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8024648:	9016      	str	r0, [sp, #88]	; 0x58
 802464a:	f108 0801 	add.w	r8, r8, #1
 802464e:	4628      	mov	r0, r5
 8024650:	4413      	add	r3, r2
 8024652:	eba8 0801 	sub.w	r8, r8, r1
 8024656:	fb98 f8f3 	sdiv	r8, r8, r3
 802465a:	f7ec fb63 	bl	8010d24 <GUI_ALLOC_UnlockH>
 802465e:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8024662:	f8d9 3074 	ldr.w	r3, [r9, #116]	; 0x74
 8024666:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 802466a:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
 802466e:	f8d9 6078 	ldr.w	r6, [r9, #120]	; 0x78
 8024672:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
 8024676:	1afb      	subs	r3, r7, r3
 8024678:	f8d9 707c 	ldr.w	r7, [r9, #124]	; 0x7c
 802467c:	ebab 0b00 	sub.w	fp, fp, r0
 8024680:	4620      	mov	r0, r4
 8024682:	19cf      	adds	r7, r1, r7
 8024684:	4432      	add	r2, r6
 8024686:	fb93 f7f7 	sdiv	r7, r3, r7
 802468a:	fb9b fbf2 	sdiv	fp, fp, r2
 802468e:	f7ec fb37 	bl	8010d00 <GUI_ALLOC_LockH>
 8024692:	4603      	mov	r3, r0
 8024694:	4628      	mov	r0, r5
 8024696:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 802469a:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 802469e:	9205      	str	r2, [sp, #20]
 80246a0:	9316      	str	r3, [sp, #88]	; 0x58
 80246a2:	f7ec fb3f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80246a6:	9a05      	ldr	r2, [sp, #20]
 80246a8:	f8d9 1074 	ldr.w	r1, [r9, #116]	; 0x74
 80246ac:	f8d9 3094 	ldr.w	r3, [r9, #148]	; 0x94
 80246b0:	1ab6      	subs	r6, r6, r2
 80246b2:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
 80246b6:	3601      	adds	r6, #1
 80246b8:	45c3      	cmp	fp, r8
 80246ba:	eba6 0601 	sub.w	r6, r6, r1
 80246be:	4413      	add	r3, r2
 80246c0:	a814      	add	r0, sp, #80	; 0x50
 80246c2:	fb96 f6f3 	sdiv	r6, r6, r3
 80246c6:	f300 8107 	bgt.w	80248d8 <ST_AnimatedIconView_Callback+0x8f4>
 80246ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80246cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80246d0:	fb03 7606 	mla	r6, r3, r6, r7
 80246d4:	fb08 b606 	mla	r6, r8, r6, fp
 80246d8:	45b2      	cmp	sl, r6
 80246da:	f2c0 80fd 	blt.w	80248d8 <ST_AnimatedIconView_Callback+0x8f4>
 80246de:	f7ec fb21 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80246e2:	2e00      	cmp	r6, #0
 80246e4:	db24      	blt.n	8024730 <ST_AnimatedIconView_Callback+0x74c>
 80246e6:	4620      	mov	r0, r4
 80246e8:	f7ec fb0a 	bl	8010d00 <GUI_ALLOC_LockH>
 80246ec:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 80246f0:	9014      	str	r0, [sp, #80]	; 0x50
 80246f2:	4296      	cmp	r6, r2
 80246f4:	f000 80ef 	beq.w	80248d6 <ST_AnimatedIconView_Callback+0x8f2>
 80246f8:	f8c0 6098 	str.w	r6, [r0, #152]	; 0x98
 80246fc:	4629      	mov	r1, r5
 80246fe:	4620      	mov	r0, r4
 8024700:	f7ff fbf8 	bl	8023ef4 <_GetRelRectFromIndex>
 8024704:	4629      	mov	r1, r5
 8024706:	4620      	mov	r0, r4
 8024708:	f7f5 fc1e 	bl	8019f48 <WM_InvalidateRect>
 802470c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802470e:	4629      	mov	r1, r5
 8024710:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8024714:	4620      	mov	r0, r4
 8024716:	f7ff fbed 	bl	8023ef4 <_GetRelRectFromIndex>
 802471a:	4629      	mov	r1, r5
 802471c:	4620      	mov	r0, r4
 802471e:	f7f5 fc13 	bl	8019f48 <WM_InvalidateRect>
 8024722:	a814      	add	r0, sp, #80	; 0x50
 8024724:	f7ec fafe 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024728:	2104      	movs	r1, #4
 802472a:	4620      	mov	r0, r4
 802472c:	f7f6 fe9e 	bl	801b46c <WM_NotifyParent>
 8024730:	4620      	mov	r0, r4
 8024732:	f7ec fae5 	bl	8010d00 <GUI_ALLOC_LockH>
 8024736:	4603      	mov	r3, r0
 8024738:	2200      	movs	r2, #0
 802473a:	9016      	str	r0, [sp, #88]	; 0x58
 802473c:	4628      	mov	r0, r5
 802473e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8024742:	f7ec faef 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024746:	4620      	mov	r0, r4
 8024748:	2101      	movs	r1, #1
 802474a:	f7f6 fe8f 	bl	801b46c <WM_NotifyParent>
 802474e:	e461      	b.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 8024750:	f04f 0a00 	mov.w	sl, #0
 8024754:	46d0      	mov	r8, sl
 8024756:	f109 3aff 	add.w	sl, r9, #4294967295
 802475a:	45c2      	cmp	sl, r8
 802475c:	f43f ac5a 	beq.w	8024014 <ST_AnimatedIconView_Callback+0x30>
 8024760:	4620      	mov	r0, r4
 8024762:	f7ec facd 	bl	8010d00 <GUI_ALLOC_LockH>
 8024766:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 802476a:	9014      	str	r0, [sp, #80]	; 0x50
 802476c:	4552      	cmp	r2, sl
 802476e:	f43f af37 	beq.w	80245e0 <ST_AnimatedIconView_Callback+0x5fc>
 8024772:	f8c0 a098 	str.w	sl, [r0, #152]	; 0x98
 8024776:	4629      	mov	r1, r5
 8024778:	4620      	mov	r0, r4
 802477a:	ae1a      	add	r6, sp, #104	; 0x68
 802477c:	f7ff fbba 	bl	8023ef4 <_GetRelRectFromIndex>
 8024780:	4629      	mov	r1, r5
 8024782:	4620      	mov	r0, r4
 8024784:	f7f5 fbe0 	bl	8019f48 <WM_InvalidateRect>
 8024788:	f856 3d18 	ldr.w	r3, [r6, #-24]!
 802478c:	4629      	mov	r1, r5
 802478e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8024792:	4620      	mov	r0, r4
 8024794:	f7ff fbae 	bl	8023ef4 <_GetRelRectFromIndex>
 8024798:	4629      	mov	r1, r5
 802479a:	4620      	mov	r0, r4
 802479c:	f7f5 fbd4 	bl	8019f48 <WM_InvalidateRect>
 80247a0:	4630      	mov	r0, r6
 80247a2:	f7ec fabf 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80247a6:	4620      	mov	r0, r4
 80247a8:	2104      	movs	r1, #4
 80247aa:	f7f6 fe5f 	bl	801b46c <WM_NotifyParent>
 80247ae:	e431      	b.n	8024014 <ST_AnimatedIconView_Callback+0x30>
 80247b0:	46d0      	mov	r8, sl
 80247b2:	f04f 0a00 	mov.w	sl, #0
 80247b6:	e7d0      	b.n	802475a <ST_AnimatedIconView_Callback+0x776>
 80247b8:	46d0      	mov	r8, sl
 80247ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80247be:	45c1      	cmp	r9, r8
 80247c0:	ddcb      	ble.n	802475a <ST_AnimatedIconView_Callback+0x776>
 80247c2:	f108 0a01 	add.w	sl, r8, #1
 80247c6:	e7c8      	b.n	802475a <ST_AnimatedIconView_Callback+0x776>
 80247c8:	46d0      	mov	r8, sl
 80247ca:	4547      	cmp	r7, r8
 80247cc:	dcc5      	bgt.n	802475a <ST_AnimatedIconView_Callback+0x776>
 80247ce:	eba8 0a07 	sub.w	sl, r8, r7
 80247d2:	e7c2      	b.n	802475a <ST_AnimatedIconView_Callback+0x776>
 80247d4:	f1ba 0f00 	cmp.w	sl, #0
 80247d8:	f43f ac1c 	beq.w	8024014 <ST_AnimatedIconView_Callback+0x30>
 80247dc:	46d0      	mov	r8, sl
 80247de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80247e2:	e7ba      	b.n	802475a <ST_AnimatedIconView_Callback+0x776>
 80247e4:	eb07 030a 	add.w	r3, r7, sl
 80247e8:	4599      	cmp	r9, r3
 80247ea:	f77f ac13 	ble.w	8024014 <ST_AnimatedIconView_Callback+0x30>
 80247ee:	46d0      	mov	r8, sl
 80247f0:	469a      	mov	sl, r3
 80247f2:	e7b2      	b.n	802475a <ST_AnimatedIconView_Callback+0x776>
 80247f4:	4620      	mov	r0, r4
 80247f6:	f7ec fa83 	bl	8010d00 <GUI_ALLOC_LockH>
 80247fa:	4603      	mov	r3, r0
 80247fc:	4628      	mov	r0, r5
 80247fe:	f9b3 8000 	ldrsh.w	r8, [r3]
 8024802:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8024806:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 802480a:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 802480e:	9316      	str	r3, [sp, #88]	; 0x58
 8024810:	f7ec fa88 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024814:	eba5 0008 	sub.w	r0, r5, r8
 8024818:	4d4e      	ldr	r5, [pc, #312]	; (8024954 <ST_AnimatedIconView_Callback+0x970>)
 802481a:	9400      	str	r4, [sp, #0]
 802481c:	233c      	movs	r3, #60	; 0x3c
 802481e:	eba7 0109 	sub.w	r1, r7, r9
 8024822:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8024826:	e9cd 2501 	strd	r2, r5, [sp, #4]
 802482a:	393b      	subs	r1, #59	; 0x3b
 802482c:	461a      	mov	r2, r3
 802482e:	383b      	subs	r0, #59	; 0x3b
 8024830:	f7f8 fa5a 	bl	801cce8 <BUTTON_CreateAsChild>
 8024834:	2101      	movs	r1, #1
 8024836:	4605      	mov	r5, r0
 8024838:	f7f9 fca2 	bl	801e180 <WIDGET_SetFocusable>
 802483c:	4946      	ldr	r1, [pc, #280]	; (8024958 <ST_AnimatedIconView_Callback+0x974>)
 802483e:	4628      	mov	r0, r5
 8024840:	f7f6 feae 	bl	801b5a0 <WM_SetCallback>
 8024844:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024846:	2101      	movs	r1, #1
 8024848:	2200      	movs	r2, #0
 802484a:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 802484e:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
 8024852:	e454      	b.n	80240fe <ST_AnimatedIconView_Callback+0x11a>
 8024854:	46d0      	mov	r8, sl
 8024856:	4630      	mov	r0, r6
 8024858:	f7f6 f960 	bl	801ab1c <WM_DefaultProc>
 802485c:	e77d      	b.n	802475a <ST_AnimatedIconView_Callback+0x776>
 802485e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024860:	e627      	b.n	80244b2 <ST_AnimatedIconView_Callback+0x4ce>
 8024862:	f1b8 0f08 	cmp.w	r8, #8
 8024866:	d826      	bhi.n	80248b6 <ST_AnimatedIconView_Callback+0x8d2>
 8024868:	a301      	add	r3, pc, #4	; (adr r3, 8024870 <ST_AnimatedIconView_Callback+0x88c>)
 802486a:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
 802486e:	bf00      	nop
 8024870:	08024761 	.word	0x08024761
 8024874:	080248a3 	.word	0x080248a3
 8024878:	0802489d 	.word	0x0802489d
 802487c:	080248a9 	.word	0x080248a9
 8024880:	080248b7 	.word	0x080248b7
 8024884:	080248b7 	.word	0x080248b7
 8024888:	080248b7 	.word	0x080248b7
 802488c:	08024895 	.word	0x08024895
 8024890:	08024751 	.word	0x08024751
 8024894:	f04f 0800 	mov.w	r8, #0
 8024898:	46c2      	mov	sl, r8
 802489a:	e75e      	b.n	802475a <ST_AnimatedIconView_Callback+0x776>
 802489c:	f04f 0800 	mov.w	r8, #0
 80248a0:	e78b      	b.n	80247ba <ST_AnimatedIconView_Callback+0x7d6>
 80248a2:	f04f 0800 	mov.w	r8, #0
 80248a6:	e790      	b.n	80247ca <ST_AnimatedIconView_Callback+0x7e6>
 80248a8:	454f      	cmp	r7, r9
 80248aa:	f6bf af59 	bge.w	8024760 <ST_AnimatedIconView_Callback+0x77c>
 80248ae:	46ba      	mov	sl, r7
 80248b0:	f04f 0800 	mov.w	r8, #0
 80248b4:	e751      	b.n	802475a <ST_AnimatedIconView_Callback+0x776>
 80248b6:	f04f 0800 	mov.w	r8, #0
 80248ba:	e7cc      	b.n	8024856 <ST_AnimatedIconView_Callback+0x872>
 80248bc:	f102 38ff 	add.w	r8, r2, #4294967295
 80248c0:	e67a      	b.n	80245b8 <ST_AnimatedIconView_Callback+0x5d4>
 80248c2:	689b      	ldr	r3, [r3, #8]
 80248c4:	a912      	add	r1, sp, #72	; 0x48
 80248c6:	4798      	blx	r3
 80248c8:	e601      	b.n	80244ce <ST_AnimatedIconView_Callback+0x4ea>
 80248ca:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
 80248ce:	e5c1      	b.n	8024454 <ST_AnimatedIconView_Callback+0x470>
 80248d0:	f9bd b04a 	ldrsh.w	fp, [sp, #74]	; 0x4a
 80248d4:	e5d0      	b.n	8024478 <ST_AnimatedIconView_Callback+0x494>
 80248d6:	a814      	add	r0, sp, #80	; 0x50
 80248d8:	f7ec fa24 	bl	8010d24 <GUI_ALLOC_UnlockH>
 80248dc:	e728      	b.n	8024730 <ST_AnimatedIconView_Callback+0x74c>
 80248de:	9905      	ldr	r1, [sp, #20]
 80248e0:	eba2 0a01 	sub.w	sl, r2, r1
 80248e4:	f10a 0a01 	add.w	sl, sl, #1
 80248e8:	e5b4      	b.n	8024454 <ST_AnimatedIconView_Callback+0x470>
 80248ea:	eba2 020b 	sub.w	r2, r2, fp
 80248ee:	f102 0b01 	add.w	fp, r2, #1
 80248f2:	e5c1      	b.n	8024478 <ST_AnimatedIconView_Callback+0x494>
 80248f4:	4620      	mov	r0, r4
 80248f6:	f7ec fa03 	bl	8010d00 <GUI_ALLOC_LockH>
 80248fa:	4603      	mov	r3, r0
 80248fc:	4628      	mov	r0, r5
 80248fe:	f9b3 a002 	ldrsh.w	sl, [r3, #2]
 8024902:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8024906:	f9b3 9000 	ldrsh.w	r9, [r3]
 802490a:	9316      	str	r3, [sp, #88]	; 0x58
 802490c:	f7ec fa0a 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024910:	233c      	movs	r3, #60	; 0x3c
 8024912:	eba5 010a 	sub.w	r1, r5, sl
 8024916:	f240 1271 	movw	r2, #369	; 0x171
 802491a:	2502      	movs	r5, #2
 802491c:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8024920:	393b      	subs	r1, #59	; 0x3b
 8024922:	461a      	mov	r2, r3
 8024924:	4648      	mov	r0, r9
 8024926:	9400      	str	r4, [sp, #0]
 8024928:	f7f8 f9de 	bl	801cce8 <BUTTON_CreateAsChild>
 802492c:	4639      	mov	r1, r7
 802492e:	4605      	mov	r5, r0
 8024930:	f7f9 fc26 	bl	801e180 <WIDGET_SetFocusable>
 8024934:	4628      	mov	r0, r5
 8024936:	4909      	ldr	r1, [pc, #36]	; (802495c <ST_AnimatedIconView_Callback+0x978>)
 8024938:	f7f6 fe32 	bl	801b5a0 <WM_SetCallback>
 802493c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802493e:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 8024942:	e647      	b.n	80245d4 <ST_AnimatedIconView_Callback+0x5f0>
 8024944:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8024948:	4620      	mov	r0, r4
 802494a:	f7f6 fc19 	bl	801b180 <WM_GetDialogItem>
 802494e:	f7f5 fc49 	bl	801a1e4 <WM_DeleteWindow>
 8024952:	e642      	b.n	80245da <ST_AnimatedIconView_Callback+0x5f6>
 8024954:	00080002 	.word	0x00080002
 8024958:	08023d6d 	.word	0x08023d6d
 802495c:	08023d01 	.word	0x08023d01

08024960 <ST_AnimatedIconView_CreateEx>:
 8024960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024962:	b089      	sub	sp, #36	; 0x24
 8024964:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8024968:	9401      	str	r4, [sp, #4]
 802496a:	4c3e      	ldr	r4, [pc, #248]	; (8024a64 <ST_AnimatedIconView_CreateEx+0x104>)
 802496c:	9500      	str	r5, [sp, #0]
 802496e:	25a8      	movs	r5, #168	; 0xa8
 8024970:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8024974:	f7f5 fb48 	bl	801a008 <WM_CreateWindowAsChild>
 8024978:	4607      	mov	r7, r0
 802497a:	b910      	cbnz	r0, 8024982 <ST_AnimatedIconView_CreateEx+0x22>
 802497c:	4638      	mov	r0, r7
 802497e:	b009      	add	sp, #36	; 0x24
 8024980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024982:	f7fd ffb3 	bl	80228ec <GUI_ARRAY_Create>
 8024986:	4604      	mov	r4, r0
 8024988:	4638      	mov	r0, r7
 802498a:	f7ec f9b9 	bl	8010d00 <GUI_ALLOC_LockH>
 802498e:	2210      	movs	r2, #16
 8024990:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
 8024994:	9911      	ldr	r1, [sp, #68]	; 0x44
 8024996:	9004      	str	r0, [sp, #16]
 8024998:	f7f9 fb9c 	bl	801e0d4 <WIDGET__Init>
 802499c:	f10d 0c20 	add.w	ip, sp, #32
 80249a0:	4d31      	ldr	r5, [pc, #196]	; (8024a68 <ST_AnimatedIconView_CreateEx+0x108>)
 80249a2:	f85c 6d10 	ldr.w	r6, [ip, #-16]!
 80249a6:	4b31      	ldr	r3, [pc, #196]	; (8024a6c <ST_AnimatedIconView_CreateEx+0x10c>)
 80249a8:	62f3      	str	r3, [r6, #44]	; 0x2c
 80249aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80249ac:	f04f 3eff 	mov.w	lr, #4294967295
 80249b0:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 80249b4:	f8c6 e098 	str.w	lr, [r6, #152]	; 0x98
 80249b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80249ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80249bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80249be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80249c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80249c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80249c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80249ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80249cc:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80249d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80249d2:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
 80249d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80249d8:	f8a6 309c 	strh.w	r3, [r6, #156]	; 0x9c
 80249dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80249de:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 80249e2:	2500      	movs	r5, #0
 80249e4:	f04f 0e01 	mov.w	lr, #1
 80249e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80249ea:	f8c6 30cc 	str.w	r3, [r6, #204]	; 0xcc
 80249ee:	4660      	mov	r0, ip
 80249f0:	f8c6 e0bc 	str.w	lr, [r6, #188]	; 0xbc
 80249f4:	f8c6 50ac 	str.w	r5, [r6, #172]	; 0xac
 80249f8:	f8c6 50c0 	str.w	r5, [r6, #192]	; 0xc0
 80249fc:	f8c6 50c8 	str.w	r5, [r6, #200]	; 0xc8
 8024a00:	f8c6 50d0 	str.w	r5, [r6, #208]	; 0xd0
 8024a04:	f7ec f98e 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024a08:	4638      	mov	r0, r7
 8024a0a:	f7ec f979 	bl	8010d00 <GUI_ALLOC_LockH>
 8024a0e:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8024a12:	9005      	str	r0, [sp, #20]
 8024a14:	b302      	cbz	r2, 8024a58 <ST_AnimatedIconView_CreateEx+0xf8>
 8024a16:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
 8024a1a:	a906      	add	r1, sp, #24
 8024a1c:	4638      	mov	r0, r7
 8024a1e:	ac08      	add	r4, sp, #32
 8024a20:	f7ff fa68 	bl	8023ef4 <_GetRelRectFromIndex>
 8024a24:	a906      	add	r1, sp, #24
 8024a26:	4638      	mov	r0, r7
 8024a28:	f7f5 fa8e 	bl	8019f48 <WM_InvalidateRect>
 8024a2c:	f854 3d0c 	ldr.w	r3, [r4, #-12]!
 8024a30:	a906      	add	r1, sp, #24
 8024a32:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8024a36:	4638      	mov	r0, r7
 8024a38:	f7ff fa5c 	bl	8023ef4 <_GetRelRectFromIndex>
 8024a3c:	a906      	add	r1, sp, #24
 8024a3e:	4638      	mov	r0, r7
 8024a40:	f7f5 fa82 	bl	8019f48 <WM_InvalidateRect>
 8024a44:	4620      	mov	r0, r4
 8024a46:	f7ec f96d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024a4a:	4638      	mov	r0, r7
 8024a4c:	2104      	movs	r1, #4
 8024a4e:	f7f6 fd0d 	bl	801b46c <WM_NotifyParent>
 8024a52:	4638      	mov	r0, r7
 8024a54:	b009      	add	sp, #36	; 0x24
 8024a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a58:	a805      	add	r0, sp, #20
 8024a5a:	f7ec f963 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024a5e:	4638      	mov	r0, r7
 8024a60:	b009      	add	sp, #36	; 0x24
 8024a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a64:	08023fe5 	.word	0x08023fe5
 8024a68:	20000458 	.word	0x20000458
 8024a6c:	080260ec 	.word	0x080260ec

08024a70 <ST_AnimatedIconView_SetBkColor>:
 8024a70:	b900      	cbnz	r0, 8024a74 <ST_AnimatedIconView_SetBkColor+0x4>
 8024a72:	4770      	bx	lr
 8024a74:	b570      	push	{r4, r5, r6, lr}
 8024a76:	b082      	sub	sp, #8
 8024a78:	460c      	mov	r4, r1
 8024a7a:	4606      	mov	r6, r0
 8024a7c:	4615      	mov	r5, r2
 8024a7e:	f7ec f93f 	bl	8010d00 <GUI_ALLOC_LockH>
 8024a82:	2c02      	cmp	r4, #2
 8024a84:	9001      	str	r0, [sp, #4]
 8024a86:	d808      	bhi.n	8024a9a <ST_AnimatedIconView_SetBkColor+0x2a>
 8024a88:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8024a8c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8024a8e:	42ab      	cmp	r3, r5
 8024a90:	d003      	beq.n	8024a9a <ST_AnimatedIconView_SetBkColor+0x2a>
 8024a92:	654d      	str	r5, [r1, #84]	; 0x54
 8024a94:	4630      	mov	r0, r6
 8024a96:	f7f5 fa5b 	bl	8019f50 <WM_InvalidateWindow>
 8024a9a:	a801      	add	r0, sp, #4
 8024a9c:	f7ec f942 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024aa0:	b002      	add	sp, #8
 8024aa2:	bd70      	pop	{r4, r5, r6, pc}

08024aa4 <ST_AnimatedIconView_SetTextColor>:
 8024aa4:	b900      	cbnz	r0, 8024aa8 <ST_AnimatedIconView_SetTextColor+0x4>
 8024aa6:	4770      	bx	lr
 8024aa8:	b570      	push	{r4, r5, r6, lr}
 8024aaa:	b082      	sub	sp, #8
 8024aac:	460c      	mov	r4, r1
 8024aae:	4606      	mov	r6, r0
 8024ab0:	4615      	mov	r5, r2
 8024ab2:	f7ec f925 	bl	8010d00 <GUI_ALLOC_LockH>
 8024ab6:	2300      	movs	r3, #0
 8024ab8:	2c03      	cmp	r4, #3
 8024aba:	9001      	str	r0, [sp, #4]
 8024abc:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 8024ac0:	d808      	bhi.n	8024ad4 <ST_AnimatedIconView_SetTextColor+0x30>
 8024ac2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8024ac6:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8024ac8:	42ab      	cmp	r3, r5
 8024aca:	d003      	beq.n	8024ad4 <ST_AnimatedIconView_SetTextColor+0x30>
 8024acc:	660d      	str	r5, [r1, #96]	; 0x60
 8024ace:	4630      	mov	r0, r6
 8024ad0:	f7f5 fa3e 	bl	8019f50 <WM_InvalidateWindow>
 8024ad4:	a801      	add	r0, sp, #4
 8024ad6:	f7ec f925 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024ada:	b002      	add	sp, #8
 8024adc:	bd70      	pop	{r4, r5, r6, pc}
 8024ade:	bf00      	nop

08024ae0 <ST_AnimatedIconView_SetDualTextColor>:
 8024ae0:	b900      	cbnz	r0, 8024ae4 <ST_AnimatedIconView_SetDualTextColor+0x4>
 8024ae2:	4770      	bx	lr
 8024ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ae6:	b083      	sub	sp, #12
 8024ae8:	461f      	mov	r7, r3
 8024aea:	460c      	mov	r4, r1
 8024aec:	4606      	mov	r6, r0
 8024aee:	4615      	mov	r5, r2
 8024af0:	f7ec f906 	bl	8010d00 <GUI_ALLOC_LockH>
 8024af4:	2301      	movs	r3, #1
 8024af6:	2c03      	cmp	r4, #3
 8024af8:	9001      	str	r0, [sp, #4]
 8024afa:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 8024afe:	d810      	bhi.n	8024b22 <ST_AnimatedIconView_SetDualTextColor+0x42>
 8024b00:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8024b04:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8024b06:	42ab      	cmp	r3, r5
 8024b08:	d004      	beq.n	8024b14 <ST_AnimatedIconView_SetDualTextColor+0x34>
 8024b0a:	4630      	mov	r0, r6
 8024b0c:	660d      	str	r5, [r1, #96]	; 0x60
 8024b0e:	f7f5 fa1f 	bl	8019f50 <WM_InvalidateWindow>
 8024b12:	9801      	ldr	r0, [sp, #4]
 8024b14:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8024b16:	42bb      	cmp	r3, r7
 8024b18:	d003      	beq.n	8024b22 <ST_AnimatedIconView_SetDualTextColor+0x42>
 8024b1a:	66c7      	str	r7, [r0, #108]	; 0x6c
 8024b1c:	4630      	mov	r0, r6
 8024b1e:	f7f5 fa17 	bl	8019f50 <WM_InvalidateWindow>
 8024b22:	a801      	add	r0, sp, #4
 8024b24:	f7ec f8fe 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024b28:	b003      	add	sp, #12
 8024b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024b2c <ST_AnimatedIconView_SetDualFont>:
 8024b2c:	b900      	cbnz	r0, 8024b30 <ST_AnimatedIconView_SetDualFont+0x4>
 8024b2e:	4770      	bx	lr
 8024b30:	b570      	push	{r4, r5, r6, lr}
 8024b32:	b082      	sub	sp, #8
 8024b34:	460d      	mov	r5, r1
 8024b36:	4606      	mov	r6, r0
 8024b38:	4614      	mov	r4, r2
 8024b3a:	f7ec f8e1 	bl	8010d00 <GUI_ALLOC_LockH>
 8024b3e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8024b40:	9001      	str	r0, [sp, #4]
 8024b42:	42ab      	cmp	r3, r5
 8024b44:	d004      	beq.n	8024b50 <ST_AnimatedIconView_SetDualFont+0x24>
 8024b46:	64c5      	str	r5, [r0, #76]	; 0x4c
 8024b48:	4630      	mov	r0, r6
 8024b4a:	f7f5 fa01 	bl	8019f50 <WM_InvalidateWindow>
 8024b4e:	9801      	ldr	r0, [sp, #4]
 8024b50:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8024b52:	42a3      	cmp	r3, r4
 8024b54:	d003      	beq.n	8024b5e <ST_AnimatedIconView_SetDualFont+0x32>
 8024b56:	6504      	str	r4, [r0, #80]	; 0x50
 8024b58:	4630      	mov	r0, r6
 8024b5a:	f7f5 f9f9 	bl	8019f50 <WM_InvalidateWindow>
 8024b5e:	a801      	add	r0, sp, #4
 8024b60:	f7ec f8e0 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024b64:	b002      	add	sp, #8
 8024b66:	bd70      	pop	{r4, r5, r6, pc}

08024b68 <ST_AnimatedIconView_SetFrame>:
 8024b68:	b900      	cbnz	r0, 8024b6c <ST_AnimatedIconView_SetFrame+0x4>
 8024b6a:	4770      	bx	lr
 8024b6c:	b570      	push	{r4, r5, r6, lr}
 8024b6e:	b082      	sub	sp, #8
 8024b70:	4606      	mov	r6, r0
 8024b72:	4615      	mov	r5, r2
 8024b74:	460c      	mov	r4, r1
 8024b76:	f7ec f8c3 	bl	8010d00 <GUI_ALLOC_LockH>
 8024b7a:	9001      	str	r0, [sp, #4]
 8024b7c:	b16c      	cbz	r4, 8024b9a <ST_AnimatedIconView_SetFrame+0x32>
 8024b7e:	2c01      	cmp	r4, #1
 8024b80:	d106      	bne.n	8024b90 <ST_AnimatedIconView_SetFrame+0x28>
 8024b82:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8024b84:	42ab      	cmp	r3, r5
 8024b86:	d003      	beq.n	8024b90 <ST_AnimatedIconView_SetFrame+0x28>
 8024b88:	6745      	str	r5, [r0, #116]	; 0x74
 8024b8a:	4630      	mov	r0, r6
 8024b8c:	f7f5 f9e0 	bl	8019f50 <WM_InvalidateWindow>
 8024b90:	a801      	add	r0, sp, #4
 8024b92:	f7ec f8c7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024b96:	b002      	add	sp, #8
 8024b98:	bd70      	pop	{r4, r5, r6, pc}
 8024b9a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8024b9c:	42ab      	cmp	r3, r5
 8024b9e:	d0f7      	beq.n	8024b90 <ST_AnimatedIconView_SetFrame+0x28>
 8024ba0:	6705      	str	r5, [r0, #112]	; 0x70
 8024ba2:	4630      	mov	r0, r6
 8024ba4:	f7f5 f9d4 	bl	8019f50 <WM_InvalidateWindow>
 8024ba8:	e7f2      	b.n	8024b90 <ST_AnimatedIconView_SetFrame+0x28>
 8024baa:	bf00      	nop

08024bac <ST_AnimatedIconView_SetSpace>:
 8024bac:	b900      	cbnz	r0, 8024bb0 <ST_AnimatedIconView_SetSpace+0x4>
 8024bae:	4770      	bx	lr
 8024bb0:	b570      	push	{r4, r5, r6, lr}
 8024bb2:	b082      	sub	sp, #8
 8024bb4:	4606      	mov	r6, r0
 8024bb6:	4615      	mov	r5, r2
 8024bb8:	460c      	mov	r4, r1
 8024bba:	f7ec f8a1 	bl	8010d00 <GUI_ALLOC_LockH>
 8024bbe:	9001      	str	r0, [sp, #4]
 8024bc0:	b16c      	cbz	r4, 8024bde <ST_AnimatedIconView_SetSpace+0x32>
 8024bc2:	2c01      	cmp	r4, #1
 8024bc4:	d106      	bne.n	8024bd4 <ST_AnimatedIconView_SetSpace+0x28>
 8024bc6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8024bc8:	42ab      	cmp	r3, r5
 8024bca:	d003      	beq.n	8024bd4 <ST_AnimatedIconView_SetSpace+0x28>
 8024bcc:	67c5      	str	r5, [r0, #124]	; 0x7c
 8024bce:	4630      	mov	r0, r6
 8024bd0:	f7f5 f9be 	bl	8019f50 <WM_InvalidateWindow>
 8024bd4:	a801      	add	r0, sp, #4
 8024bd6:	f7ec f8a5 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024bda:	b002      	add	sp, #8
 8024bdc:	bd70      	pop	{r4, r5, r6, pc}
 8024bde:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8024be0:	42ab      	cmp	r3, r5
 8024be2:	d0f7      	beq.n	8024bd4 <ST_AnimatedIconView_SetSpace+0x28>
 8024be4:	6785      	str	r5, [r0, #120]	; 0x78
 8024be6:	4630      	mov	r0, r6
 8024be8:	f7f5 f9b2 	bl	8019f50 <WM_InvalidateWindow>
 8024bec:	e7f2      	b.n	8024bd4 <ST_AnimatedIconView_SetSpace+0x28>
 8024bee:	bf00      	nop

08024bf0 <ST_AnimatedIconView_GetSel>:
 8024bf0:	b510      	push	{r4, lr}
 8024bf2:	b082      	sub	sp, #8
 8024bf4:	b918      	cbnz	r0, 8024bfe <ST_AnimatedIconView_GetSel+0xe>
 8024bf6:	4604      	mov	r4, r0
 8024bf8:	4620      	mov	r0, r4
 8024bfa:	b002      	add	sp, #8
 8024bfc:	bd10      	pop	{r4, pc}
 8024bfe:	f7ec f87f 	bl	8010d00 <GUI_ALLOC_LockH>
 8024c02:	ab02      	add	r3, sp, #8
 8024c04:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 8024c08:	f843 0d04 	str.w	r0, [r3, #-4]!
 8024c0c:	4618      	mov	r0, r3
 8024c0e:	f7ec f889 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024c12:	4620      	mov	r0, r4
 8024c14:	b002      	add	sp, #8
 8024c16:	bd10      	pop	{r4, pc}

08024c18 <ST_AnimatedIconView_SetSel>:
 8024c18:	b900      	cbnz	r0, 8024c1c <ST_AnimatedIconView_SetSel+0x4>
 8024c1a:	4770      	bx	lr
 8024c1c:	b530      	push	{r4, r5, lr}
 8024c1e:	b085      	sub	sp, #20
 8024c20:	460d      	mov	r5, r1
 8024c22:	4604      	mov	r4, r0
 8024c24:	f7ec f86c 	bl	8010d00 <GUI_ALLOC_LockH>
 8024c28:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8024c2c:	9001      	str	r0, [sp, #4]
 8024c2e:	4295      	cmp	r5, r2
 8024c30:	d01f      	beq.n	8024c72 <ST_AnimatedIconView_SetSel+0x5a>
 8024c32:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
 8024c36:	a902      	add	r1, sp, #8
 8024c38:	4620      	mov	r0, r4
 8024c3a:	ad04      	add	r5, sp, #16
 8024c3c:	f7ff f95a 	bl	8023ef4 <_GetRelRectFromIndex>
 8024c40:	a902      	add	r1, sp, #8
 8024c42:	4620      	mov	r0, r4
 8024c44:	f7f5 f980 	bl	8019f48 <WM_InvalidateRect>
 8024c48:	f855 3d0c 	ldr.w	r3, [r5, #-12]!
 8024c4c:	a902      	add	r1, sp, #8
 8024c4e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8024c52:	4620      	mov	r0, r4
 8024c54:	f7ff f94e 	bl	8023ef4 <_GetRelRectFromIndex>
 8024c58:	a902      	add	r1, sp, #8
 8024c5a:	4620      	mov	r0, r4
 8024c5c:	f7f5 f974 	bl	8019f48 <WM_InvalidateRect>
 8024c60:	4628      	mov	r0, r5
 8024c62:	f7ec f85f 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024c66:	4620      	mov	r0, r4
 8024c68:	2104      	movs	r1, #4
 8024c6a:	f7f6 fbff 	bl	801b46c <WM_NotifyParent>
 8024c6e:	b005      	add	sp, #20
 8024c70:	bd30      	pop	{r4, r5, pc}
 8024c72:	a801      	add	r0, sp, #4
 8024c74:	f7ec f856 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024c78:	b005      	add	sp, #20
 8024c7a:	bd30      	pop	{r4, r5, pc}

08024c7c <ST_AnimatedIconView_AddIcon>:
 8024c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c80:	b091      	sub	sp, #68	; 0x44
 8024c82:	b920      	cbnz	r0, 8024c8e <ST_AnimatedIconView_AddIcon+0x12>
 8024c84:	2501      	movs	r5, #1
 8024c86:	4628      	mov	r0, r5
 8024c88:	b011      	add	sp, #68	; 0x44
 8024c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c8e:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8024e4c <ST_AnimatedIconView_AddIcon+0x1d0>
 8024c92:	4f68      	ldr	r7, [pc, #416]	; (8024e34 <ST_AnimatedIconView_AddIcon+0x1b8>)
 8024c94:	4d68      	ldr	r5, [pc, #416]	; (8024e38 <ST_AnimatedIconView_AddIcon+0x1bc>)
 8024c96:	910c      	str	r1, [sp, #48]	; 0x30
 8024c98:	461e      	mov	r6, r3
 8024c9a:	4b68      	ldr	r3, [pc, #416]	; (8024e3c <ST_AnimatedIconView_AddIcon+0x1c0>)
 8024c9c:	920d      	str	r2, [sp, #52]	; 0x34
 8024c9e:	e9cd c708 	strd	ip, r7, [sp, #32]
 8024ca2:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
 8024ca6:	4604      	mov	r4, r0
 8024ca8:	f7ec f82a 	bl	8010d00 <GUI_ALLOC_LockH>
 8024cac:	aa10      	add	r2, sp, #64	; 0x40
 8024cae:	f8d0 708c 	ldr.w	r7, [r0, #140]	; 0x8c
 8024cb2:	f842 0d2c 	str.w	r0, [r2, #-44]!
 8024cb6:	4610      	mov	r0, r2
 8024cb8:	f7ec f834 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024cbc:	4638      	mov	r0, r7
 8024cbe:	f7fd fd35 	bl	802272c <GUI_ARRAY_GetNumItems>
 8024cc2:	4680      	mov	r8, r0
 8024cc4:	4630      	mov	r0, r6
 8024cc6:	f7db fa9b 	bl	8000200 <strlen>
 8024cca:	a908      	add	r1, sp, #32
 8024ccc:	f100 0221 	add.w	r2, r0, #33	; 0x21
 8024cd0:	4638      	mov	r0, r7
 8024cd2:	f7fd fd3f 	bl	8022754 <GUI_ARRAY_AddItem>
 8024cd6:	4605      	mov	r5, r0
 8024cd8:	2800      	cmp	r0, #0
 8024cda:	f000 809b 	beq.w	8024e14 <ST_AnimatedIconView_AddIcon+0x198>
 8024cde:	4f58      	ldr	r7, [pc, #352]	; (8024e40 <ST_AnimatedIconView_AddIcon+0x1c4>)
 8024ce0:	683b      	ldr	r3, [r7, #0]
 8024ce2:	b143      	cbz	r3, 8024cf6 <ST_AnimatedIconView_AddIcon+0x7a>
 8024ce4:	a806      	add	r0, sp, #24
 8024ce6:	f7ec f81d 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024cea:	2300      	movs	r3, #0
 8024cec:	4628      	mov	r0, r5
 8024cee:	603b      	str	r3, [r7, #0]
 8024cf0:	b011      	add	sp, #68	; 0x44
 8024cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cf6:	2301      	movs	r3, #1
 8024cf8:	4620      	mov	r0, r4
 8024cfa:	603b      	str	r3, [r7, #0]
 8024cfc:	f7ec f800 	bl	8010d00 <GUI_ALLOC_LockH>
 8024d00:	4681      	mov	r9, r0
 8024d02:	4620      	mov	r0, r4
 8024d04:	f8cd 9018 	str.w	r9, [sp, #24]
 8024d08:	f7eb fffa 	bl	8010d00 <GUI_ALLOC_LockH>
 8024d0c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8024d10:	f848 0d24 	str.w	r0, [r8, #-36]!
 8024d14:	4640      	mov	r0, r8
 8024d16:	f7ec f805 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024d1a:	4620      	mov	r0, r4
 8024d1c:	f7eb fff0 	bl	8010d00 <GUI_ALLOC_LockH>
 8024d20:	4603      	mov	r3, r0
 8024d22:	4640      	mov	r0, r8
 8024d24:	f9b3 a000 	ldrsh.w	sl, [r3]
 8024d28:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8024d2c:	9307      	str	r3, [sp, #28]
 8024d2e:	f7eb fff9 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024d32:	4620      	mov	r0, r4
 8024d34:	f7eb ffe4 	bl	8010d00 <GUI_ALLOC_LockH>
 8024d38:	eba6 060a 	sub.w	r6, r6, sl
 8024d3c:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8024d3e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8024d40:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8024d44:	9007      	str	r0, [sp, #28]
 8024d46:	3601      	adds	r6, #1
 8024d48:	4640      	mov	r0, r8
 8024d4a:	1a76      	subs	r6, r6, r1
 8024d4c:	4413      	add	r3, r2
 8024d4e:	fb96 f6f3 	sdiv	r6, r6, r3
 8024d52:	f7eb ffe7 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024d56:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
 8024d5a:	f7fd fce7 	bl	802272c <GUI_ARRAY_GetNumItems>
 8024d5e:	4430      	add	r0, r6
 8024d60:	f100 39ff 	add.w	r9, r0, #4294967295
 8024d64:	b10e      	cbz	r6, 8024d6a <ST_AnimatedIconView_AddIcon+0xee>
 8024d66:	fb99 f9f6 	sdiv	r9, r9, r6
 8024d6a:	4620      	mov	r0, r4
 8024d6c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8024d70:	f7eb ffc6 	bl	8010d00 <GUI_ALLOC_LockH>
 8024d74:	4603      	mov	r3, r0
 8024d76:	4640      	mov	r0, r8
 8024d78:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8024d7c:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 8024d80:	9307      	str	r3, [sp, #28]
 8024d82:	eba6 060b 	sub.w	r6, r6, fp
 8024d86:	f7eb ffcd 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024d8a:	f8da 1074 	ldr.w	r1, [sl, #116]	; 0x74
 8024d8e:	f8da 207c 	ldr.w	r2, [sl, #124]	; 0x7c
 8024d92:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
 8024d96:	3601      	adds	r6, #1
 8024d98:	4620      	mov	r0, r4
 8024d9a:	1a76      	subs	r6, r6, r1
 8024d9c:	4413      	add	r3, r2
 8024d9e:	fb96 f6f3 	sdiv	r6, r6, r3
 8024da2:	f7eb ffad 	bl	8010d00 <GUI_ALLOC_LockH>
 8024da6:	9007      	str	r0, [sp, #28]
 8024da8:	4640      	mov	r0, r8
 8024daa:	f7eb ffbb 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024dae:	454e      	cmp	r6, r9
 8024db0:	da98      	bge.n	8024ce4 <ST_AnimatedIconView_AddIcon+0x68>
 8024db2:	687b      	ldr	r3, [r7, #4]
 8024db4:	9a06      	ldr	r2, [sp, #24]
 8024db6:	1c59      	adds	r1, r3, #1
 8024db8:	2b00      	cmp	r3, #0
 8024dba:	6079      	str	r1, [r7, #4]
 8024dbc:	f8c2 90a8 	str.w	r9, [r2, #168]	; 0xa8
 8024dc0:	dc90      	bgt.n	8024ce4 <ST_AnimatedIconView_AddIcon+0x68>
 8024dc2:	4620      	mov	r0, r4
 8024dc4:	f7eb ff9c 	bl	8010d00 <GUI_ALLOC_LockH>
 8024dc8:	4603      	mov	r3, r0
 8024dca:	4640      	mov	r0, r8
 8024dcc:	f9b3 9000 	ldrsh.w	r9, [r3]
 8024dd0:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8024dd4:	f9b3 a002 	ldrsh.w	sl, [r3, #2]
 8024dd8:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8024ddc:	9307      	str	r3, [sp, #28]
 8024dde:	f7eb ffa1 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024de2:	eba6 0009 	sub.w	r0, r6, r9
 8024de6:	4e17      	ldr	r6, [pc, #92]	; (8024e44 <ST_AnimatedIconView_AddIcon+0x1c8>)
 8024de8:	9400      	str	r4, [sp, #0]
 8024dea:	233c      	movs	r3, #60	; 0x3c
 8024dec:	eba8 010a 	sub.w	r1, r8, sl
 8024df0:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8024df4:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8024df8:	393b      	subs	r1, #59	; 0x3b
 8024dfa:	461a      	mov	r2, r3
 8024dfc:	383b      	subs	r0, #59	; 0x3b
 8024dfe:	f7f7 ff73 	bl	801cce8 <BUTTON_CreateAsChild>
 8024e02:	2101      	movs	r1, #1
 8024e04:	4604      	mov	r4, r0
 8024e06:	f7f9 f9bb 	bl	801e180 <WIDGET_SetFocusable>
 8024e0a:	4620      	mov	r0, r4
 8024e0c:	490e      	ldr	r1, [pc, #56]	; (8024e48 <ST_AnimatedIconView_AddIcon+0x1cc>)
 8024e0e:	f7f6 fbc7 	bl	801b5a0 <WM_SetCallback>
 8024e12:	e767      	b.n	8024ce4 <ST_AnimatedIconView_AddIcon+0x68>
 8024e14:	4641      	mov	r1, r8
 8024e16:	4638      	mov	r0, r7
 8024e18:	f7fd fd3e 	bl	8022898 <GUI_ARRAY_GetpItemLocked>
 8024e1c:	af10      	add	r7, sp, #64	; 0x40
 8024e1e:	4631      	mov	r1, r6
 8024e20:	f847 0d30 	str.w	r0, [r7, #-48]!
 8024e24:	301c      	adds	r0, #28
 8024e26:	f000 faa1 	bl	802536c <strcpy>
 8024e2a:	4638      	mov	r0, r7
 8024e2c:	f7eb ff7a 	bl	8010d24 <GUI_ALLOC_UnlockH>
 8024e30:	e755      	b.n	8024cde <ST_AnimatedIconView_AddIcon+0x62>
 8024e32:	bf00      	nop
 8024e34:	08023dd9 	.word	0x08023dd9
 8024e38:	08023df1 	.word	0x08023df1
 8024e3c:	08023cf1 	.word	0x08023cf1
 8024e40:	20000940 	.word	0x20000940
 8024e44:	00080002 	.word	0x00080002
 8024e48:	08023d6d 	.word	0x08023d6d
 8024e4c:	08023dd5 	.word	0x08023dd5

08024e50 <GUIPROP_AA4_EXT_DispChar>:
 8024e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024e54:	4f30      	ldr	r7, [pc, #192]	; (8024f18 <GUIPROP_AA4_EXT_DispChar+0xc8>)
 8024e56:	683b      	ldr	r3, [r7, #0]
 8024e58:	69da      	ldr	r2, [r3, #28]
 8024e5a:	f9b3 502a 	ldrsh.w	r5, [r3, #42]	; 0x2a
 8024e5e:	b087      	sub	sp, #28
 8024e60:	4604      	mov	r4, r0
 8024e62:	4601      	mov	r1, r0
 8024e64:	69d0      	ldr	r0, [r2, #28]
 8024e66:	f000 f85b 	bl	8024f20 <GUIPROP_EXT__FindChar>
 8024e6a:	2800      	cmp	r0, #0
 8024e6c:	d03d      	beq.n	8024eea <GUIPROP_AA4_EXT_DispChar+0x9a>
 8024e6e:	8803      	ldrh	r3, [r0, #0]
 8024e70:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8024e74:	1ae4      	subs	r4, r4, r3
 8024e76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024e7a:	00a4      	lsls	r4, r4, #2
 8024e7c:	4628      	mov	r0, r5
 8024e7e:	f818 6004 	ldrb.w	r6, [r8, r4]
 8024e82:	f7ef fa19 	bl	80142b8 <LCD_SetDrawMode>
 8024e86:	4b25      	ldr	r3, [pc, #148]	; (8024f1c <GUIPROP_AA4_EXT_DispChar+0xcc>)
 8024e88:	f818 2004 	ldrb.w	r2, [r8, r4]
 8024e8c:	f8d3 e000 	ldr.w	lr, [r3]
 8024e90:	683b      	ldr	r3, [r7, #0]
 8024e92:	3601      	adds	r6, #1
 8024e94:	1076      	asrs	r6, r6, #1
 8024e96:	4681      	mov	r9, r0
 8024e98:	eb08 0504 	add.w	r5, r8, r4
 8024e9c:	f1be 0f00 	cmp.w	lr, #0
 8024ea0:	d026      	beq.n	8024ef0 <GUIPROP_AA4_EXT_DispChar+0xa0>
 8024ea2:	f9b3 4024 	ldrsh.w	r4, [r3, #36]	; 0x24
 8024ea6:	f995 1003 	ldrsb.w	r1, [r5, #3]
 8024eaa:	f9b3 c022 	ldrsh.w	ip, [r3, #34]	; 0x22
 8024eae:	f995 0002 	ldrsb.w	r0, [r5, #2]
 8024eb2:	786b      	ldrb	r3, [r5, #1]
 8024eb4:	f04f 0800 	mov.w	r8, #0
 8024eb8:	f8cd 8014 	str.w	r8, [sp, #20]
 8024ebc:	4421      	add	r1, r4
 8024ebe:	68ac      	ldr	r4, [r5, #8]
 8024ec0:	9404      	str	r4, [sp, #16]
 8024ec2:	f04f 0804 	mov.w	r8, #4
 8024ec6:	2401      	movs	r4, #1
 8024ec8:	9603      	str	r6, [sp, #12]
 8024eca:	f8cd 8008 	str.w	r8, [sp, #8]
 8024ece:	9401      	str	r4, [sp, #4]
 8024ed0:	9400      	str	r4, [sp, #0]
 8024ed2:	4460      	add	r0, ip
 8024ed4:	f8de 4000 	ldr.w	r4, [lr]
 8024ed8:	47a0      	blx	r4
 8024eda:	4648      	mov	r0, r9
 8024edc:	f7ef f9ec 	bl	80142b8 <LCD_SetDrawMode>
 8024ee0:	683a      	ldr	r2, [r7, #0]
 8024ee2:	7929      	ldrb	r1, [r5, #4]
 8024ee4:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8024ee6:	440b      	add	r3, r1
 8024ee8:	8453      	strh	r3, [r2, #34]	; 0x22
 8024eea:	b007      	add	sp, #28
 8024eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024ef0:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 8024ef4:	f9b3 4022 	ldrsh.w	r4, [r3, #34]	; 0x22
 8024ef8:	f995 1003 	ldrsb.w	r1, [r5, #3]
 8024efc:	f995 0002 	ldrsb.w	r0, [r5, #2]
 8024f00:	f895 c001 	ldrb.w	ip, [r5, #1]
 8024f04:	68ab      	ldr	r3, [r5, #8]
 8024f06:	9301      	str	r3, [sp, #4]
 8024f08:	4471      	add	r1, lr
 8024f0a:	4420      	add	r0, r4
 8024f0c:	4663      	mov	r3, ip
 8024f0e:	9600      	str	r6, [sp, #0]
 8024f10:	f000 f95e 	bl	80251d0 <GUI_AA__DrawCharAA4>
 8024f14:	e7e1      	b.n	8024eda <GUIPROP_AA4_EXT_DispChar+0x8a>
 8024f16:	bf00      	nop
 8024f18:	20000014 	.word	0x20000014
 8024f1c:	20035e0c 	.word	0x20035e0c

08024f20 <GUIPROP_EXT__FindChar>:
 8024f20:	b140      	cbz	r0, 8024f34 <GUIPROP_EXT__FindChar+0x14>
 8024f22:	8803      	ldrh	r3, [r0, #0]
 8024f24:	428b      	cmp	r3, r1
 8024f26:	d802      	bhi.n	8024f2e <GUIPROP_EXT__FindChar+0xe>
 8024f28:	8843      	ldrh	r3, [r0, #2]
 8024f2a:	428b      	cmp	r3, r1
 8024f2c:	d202      	bcs.n	8024f34 <GUIPROP_EXT__FindChar+0x14>
 8024f2e:	6880      	ldr	r0, [r0, #8]
 8024f30:	2800      	cmp	r0, #0
 8024f32:	d1f6      	bne.n	8024f22 <GUIPROP_EXT__FindChar+0x2>
 8024f34:	4770      	bx	lr
 8024f36:	bf00      	nop

08024f38 <GUIPROP_EXT_GetCharDistX>:
 8024f38:	4b11      	ldr	r3, [pc, #68]	; (8024f80 <GUIPROP_EXT_GetCharDistX+0x48>)
 8024f3a:	b470      	push	{r4, r5, r6}
 8024f3c:	681b      	ldr	r3, [r3, #0]
 8024f3e:	69dd      	ldr	r5, [r3, #28]
 8024f40:	69eb      	ldr	r3, [r5, #28]
 8024f42:	b143      	cbz	r3, 8024f56 <GUIPROP_EXT_GetCharDistX+0x1e>
 8024f44:	881a      	ldrh	r2, [r3, #0]
 8024f46:	4290      	cmp	r0, r2
 8024f48:	d302      	bcc.n	8024f50 <GUIPROP_EXT_GetCharDistX+0x18>
 8024f4a:	885c      	ldrh	r4, [r3, #2]
 8024f4c:	4284      	cmp	r4, r0
 8024f4e:	d205      	bcs.n	8024f5c <GUIPROP_EXT_GetCharDistX+0x24>
 8024f50:	689b      	ldr	r3, [r3, #8]
 8024f52:	2b00      	cmp	r3, #0
 8024f54:	d1f6      	bne.n	8024f44 <GUIPROP_EXT_GetCharDistX+0xc>
 8024f56:	4618      	mov	r0, r3
 8024f58:	bc70      	pop	{r4, r5, r6}
 8024f5a:	4770      	bx	lr
 8024f5c:	1a80      	subs	r0, r0, r2
 8024f5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024f62:	685e      	ldr	r6, [r3, #4]
 8024f64:	7eac      	ldrb	r4, [r5, #26]
 8024f66:	0082      	lsls	r2, r0, #2
 8024f68:	18b3      	adds	r3, r6, r2
 8024f6a:	791b      	ldrb	r3, [r3, #4]
 8024f6c:	fb13 f004 	smulbb	r0, r3, r4
 8024f70:	2900      	cmp	r1, #0
 8024f72:	d0f1      	beq.n	8024f58 <GUIPROP_EXT_GetCharDistX+0x20>
 8024f74:	5cb3      	ldrb	r3, [r6, r2]
 8024f76:	fb14 f303 	smulbb	r3, r4, r3
 8024f7a:	600b      	str	r3, [r1, #0]
 8024f7c:	bc70      	pop	{r4, r5, r6}
 8024f7e:	4770      	bx	lr
 8024f80:	20000014 	.word	0x20000014

08024f84 <GUIPROP_EXT_GetFontInfo>:
 8024f84:	2301      	movs	r3, #1
 8024f86:	800b      	strh	r3, [r1, #0]
 8024f88:	4770      	bx	lr
 8024f8a:	bf00      	nop

08024f8c <GUIPROP_EXT_IsInFont>:
 8024f8c:	69c0      	ldr	r0, [r0, #28]
 8024f8e:	b150      	cbz	r0, 8024fa6 <GUIPROP_EXT_IsInFont+0x1a>
 8024f90:	8803      	ldrh	r3, [r0, #0]
 8024f92:	428b      	cmp	r3, r1
 8024f94:	d802      	bhi.n	8024f9c <GUIPROP_EXT_IsInFont+0x10>
 8024f96:	8843      	ldrh	r3, [r0, #2]
 8024f98:	428b      	cmp	r3, r1
 8024f9a:	d203      	bcs.n	8024fa4 <GUIPROP_EXT_IsInFont+0x18>
 8024f9c:	6880      	ldr	r0, [r0, #8]
 8024f9e:	2800      	cmp	r0, #0
 8024fa0:	d1f6      	bne.n	8024f90 <GUIPROP_EXT_IsInFont+0x4>
 8024fa2:	4770      	bx	lr
 8024fa4:	2001      	movs	r0, #1
 8024fa6:	4770      	bx	lr

08024fa8 <GUIPROP_EXT_GetCharInfo>:
 8024fa8:	4b11      	ldr	r3, [pc, #68]	; (8024ff0 <GUIPROP_EXT_GetCharInfo+0x48>)
 8024faa:	681b      	ldr	r3, [r3, #0]
 8024fac:	69db      	ldr	r3, [r3, #28]
 8024fae:	69db      	ldr	r3, [r3, #28]
 8024fb0:	b1db      	cbz	r3, 8024fea <GUIPROP_EXT_GetCharInfo+0x42>
 8024fb2:	b410      	push	{r4}
 8024fb4:	460c      	mov	r4, r1
 8024fb6:	881a      	ldrh	r2, [r3, #0]
 8024fb8:	4290      	cmp	r0, r2
 8024fba:	d302      	bcc.n	8024fc2 <GUIPROP_EXT_GetCharInfo+0x1a>
 8024fbc:	8859      	ldrh	r1, [r3, #2]
 8024fbe:	4281      	cmp	r1, r0
 8024fc0:	d206      	bcs.n	8024fd0 <GUIPROP_EXT_GetCharInfo+0x28>
 8024fc2:	689b      	ldr	r3, [r3, #8]
 8024fc4:	2b00      	cmp	r3, #0
 8024fc6:	d1f6      	bne.n	8024fb6 <GUIPROP_EXT_GetCharInfo+0xe>
 8024fc8:	2001      	movs	r0, #1
 8024fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024fce:	4770      	bx	lr
 8024fd0:	1a82      	subs	r2, r0, r2
 8024fd2:	685b      	ldr	r3, [r3, #4]
 8024fd4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024fd8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8024fdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8024fde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8024fe2:	2000      	movs	r0, #0
 8024fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024fe8:	4770      	bx	lr
 8024fea:	2001      	movs	r0, #1
 8024fec:	4770      	bx	lr
 8024fee:	bf00      	nop
 8024ff0:	20000014 	.word	0x20000014

08024ff4 <GUIPROP_EXT__DispLine>:
 8024ff4:	b570      	push	{r4, r5, r6, lr}
 8024ff6:	4d10      	ldr	r5, [pc, #64]	; (8025038 <GUIPROP_EXT__DispLine+0x44>)
 8024ff8:	682b      	ldr	r3, [r5, #0]
 8024ffa:	f9b3 602a 	ldrsh.w	r6, [r3, #42]	; 0x2a
 8024ffe:	b082      	sub	sp, #8
 8025000:	07b2      	lsls	r2, r6, #30
 8025002:	9001      	str	r0, [sp, #4]
 8025004:	460c      	mov	r4, r1
 8025006:	d012      	beq.n	802502e <GUIPROP_EXT__DispLine+0x3a>
 8025008:	3c01      	subs	r4, #1
 802500a:	d409      	bmi.n	8025020 <GUIPROP_EXT__DispLine+0x2c>
 802500c:	a801      	add	r0, sp, #4
 802500e:	f7ee f97d 	bl	801330c <GUI_UC__GetCharCodeInc>
 8025012:	682b      	ldr	r3, [r5, #0]
 8025014:	69db      	ldr	r3, [r3, #28]
 8025016:	3c01      	subs	r4, #1
 8025018:	681b      	ldr	r3, [r3, #0]
 802501a:	4798      	blx	r3
 802501c:	1c63      	adds	r3, r4, #1
 802501e:	d1f5      	bne.n	802500c <GUIPROP_EXT__DispLine+0x18>
 8025020:	682a      	ldr	r2, [r5, #0]
 8025022:	4b06      	ldr	r3, [pc, #24]	; (802503c <GUIPROP_EXT__DispLine+0x48>)
 8025024:	8556      	strh	r6, [r2, #42]	; 0x2a
 8025026:	2200      	movs	r2, #0
 8025028:	701a      	strb	r2, [r3, #0]
 802502a:	b002      	add	sp, #8
 802502c:	bd70      	pop	{r4, r5, r6, pc}
 802502e:	4b04      	ldr	r3, [pc, #16]	; (8025040 <GUIPROP_EXT__DispLine+0x4c>)
 8025030:	681b      	ldr	r3, [r3, #0]
 8025032:	4798      	blx	r3
 8025034:	e7e8      	b.n	8025008 <GUIPROP_EXT__DispLine+0x14>
 8025036:	bf00      	nop
 8025038:	20000014 	.word	0x20000014
 802503c:	20035eb8 	.word	0x20035eb8
 8025040:	20000498 	.word	0x20000498

08025044 <GUIPROP_EXT__ClearLine>:
 8025044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025048:	4e3a      	ldr	r6, [pc, #232]	; (8025134 <GUIPROP_EXT__ClearLine+0xf0>)
 802504a:	6833      	ldr	r3, [r6, #0]
 802504c:	b084      	sub	sp, #16
 802504e:	69db      	ldr	r3, [r3, #28]
 8025050:	af04      	add	r7, sp, #16
 8025052:	f893 9019 	ldrb.w	r9, [r3, #25]
 8025056:	7edb      	ldrb	r3, [r3, #27]
 8025058:	f847 0d0c 	str.w	r0, [r7, #-12]!
 802505c:	2500      	movs	r5, #0
 802505e:	460c      	mov	r4, r1
 8025060:	fb19 f903 	smulbb	r9, r9, r3
 8025064:	46b0      	mov	r8, r6
 8025066:	46aa      	mov	sl, r5
 8025068:	3c01      	subs	r4, #1
 802506a:	4638      	mov	r0, r7
 802506c:	d422      	bmi.n	80250b4 <GUIPROP_EXT__ClearLine+0x70>
 802506e:	f7ee f94d 	bl	801330c <GUI_UC__GetCharCodeInc>
 8025072:	6833      	ldr	r3, [r6, #0]
 8025074:	69db      	ldr	r3, [r3, #28]
 8025076:	4682      	mov	sl, r0
 8025078:	4601      	mov	r1, r0
 802507a:	69d8      	ldr	r0, [r3, #28]
 802507c:	f7ff ff50 	bl	8024f20 <GUIPROP_EXT__FindChar>
 8025080:	2800      	cmp	r0, #0
 8025082:	d0f1      	beq.n	8025068 <GUIPROP_EXT__ClearLine+0x24>
 8025084:	8803      	ldrh	r3, [r0, #0]
 8025086:	6841      	ldr	r1, [r0, #4]
 8025088:	f8d8 2000 	ldr.w	r2, [r8]
 802508c:	ebc3 030a 	rsb	r3, r3, sl
 8025090:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025094:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8025098:	69d2      	ldr	r2, [r2, #28]
 802509a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 802509e:	791b      	ldrb	r3, [r3, #4]
 80250a0:	7e92      	ldrb	r2, [r2, #26]
 80250a2:	440b      	add	r3, r1
 80250a4:	fb02 f303 	mul.w	r3, r2, r3
 80250a8:	2b00      	cmp	r3, #0
 80250aa:	bfc8      	it	gt
 80250ac:	18ed      	addgt	r5, r5, r3
 80250ae:	3c01      	subs	r4, #1
 80250b0:	4638      	mov	r0, r7
 80250b2:	d5dc      	bpl.n	802506e <GUIPROP_EXT__ClearLine+0x2a>
 80250b4:	f1ba 0f00 	cmp.w	sl, #0
 80250b8:	d003      	beq.n	80250c2 <GUIPROP_EXT__ClearLine+0x7e>
 80250ba:	4650      	mov	r0, sl
 80250bc:	f7f9 fd14 	bl	801eae8 <GUI__GetOverlap>
 80250c0:	4405      	add	r5, r0
 80250c2:	6832      	ldr	r2, [r6, #0]
 80250c4:	491c      	ldr	r1, [pc, #112]	; (8025138 <GUIPROP_EXT__ClearLine+0xf4>)
 80250c6:	f9b2 3022 	ldrsh.w	r3, [r2, #34]	; 0x22
 80250ca:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 80250ce:	f8ad 3008 	strh.w	r3, [sp, #8]
 80250d2:	1e50      	subs	r0, r2, #1
 80250d4:	3b01      	subs	r3, #1
 80250d6:	6809      	ldr	r1, [r1, #0]
 80250d8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80250dc:	441d      	add	r5, r3
 80250de:	4481      	add	r9, r0
 80250e0:	f8ad 500c 	strh.w	r5, [sp, #12]
 80250e4:	f8ad 900e 	strh.w	r9, [sp, #14]
 80250e8:	b119      	cbz	r1, 80250f2 <GUIPROP_EXT__ClearLine+0xae>
 80250ea:	688b      	ldr	r3, [r1, #8]
 80250ec:	b10b      	cbz	r3, 80250f2 <GUIPROP_EXT__ClearLine+0xae>
 80250ee:	a802      	add	r0, sp, #8
 80250f0:	4798      	blx	r3
 80250f2:	f7ec f9db 	bl	80114ac <GUI_GetColor>
 80250f6:	6833      	ldr	r3, [r6, #0]
 80250f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80250fa:	075b      	lsls	r3, r3, #29
 80250fc:	4604      	mov	r4, r0
 80250fe:	d416      	bmi.n	802512e <GUIPROP_EXT__ClearLine+0xea>
 8025100:	f7ec f9c8 	bl	8011494 <GUI_GetBkColor>
 8025104:	f7ec fb5a 	bl	80117bc <GUI_SetColor>
 8025108:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802510c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8025110:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8025114:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8025118:	f7ef f95e 	bl	80143d8 <LCD_FillRect>
 802511c:	4620      	mov	r0, r4
 802511e:	f7ec fb4d 	bl	80117bc <GUI_SetColor>
 8025122:	4b06      	ldr	r3, [pc, #24]	; (802513c <GUIPROP_EXT__ClearLine+0xf8>)
 8025124:	2201      	movs	r2, #1
 8025126:	701a      	strb	r2, [r3, #0]
 8025128:	b004      	add	sp, #16
 802512a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802512e:	f7ec f9bd 	bl	80114ac <GUI_GetColor>
 8025132:	e7e7      	b.n	8025104 <GUIPROP_EXT__ClearLine+0xc0>
 8025134:	20000014 	.word	0x20000014
 8025138:	20035e0c 	.word	0x20035e0c
 802513c:	20035eb8 	.word	0x20035eb8

08025140 <_DrawCharAA4_Trans>:
 8025140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025144:	b085      	sub	sp, #20
 8025146:	2b00      	cmp	r3, #0
 8025148:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 802514c:	dd31      	ble.n	80251b2 <_DrawCharAA4_Trans+0x72>
 802514e:	460f      	mov	r7, r1
 8025150:	4682      	mov	sl, r0
 8025152:	1e90      	subs	r0, r2, #2
 8025154:	443b      	add	r3, r7
 8025156:	4691      	mov	r9, r2
 8025158:	0842      	lsrs	r2, r0, #1
 802515a:	1c51      	adds	r1, r2, #1
 802515c:	9300      	str	r3, [sp, #0]
 802515e:	eba0 0342 	sub.w	r3, r0, r2, lsl #1
 8025162:	9302      	str	r3, [sp, #8]
 8025164:	004b      	lsls	r3, r1, #1
 8025166:	9103      	str	r1, [sp, #12]
 8025168:	9301      	str	r3, [sp, #4]
 802516a:	f1b9 0f01 	cmp.w	r9, #1
 802516e:	dd2a      	ble.n	80251c6 <_DrawCharAA4_Trans+0x86>
 8025170:	4654      	mov	r4, sl
 8025172:	464d      	mov	r5, r9
 8025174:	46c3      	mov	fp, r8
 8025176:	f81b 6b01 	ldrb.w	r6, [fp], #1
 802517a:	4620      	mov	r0, r4
 802517c:	4639      	mov	r1, r7
 802517e:	0932      	lsrs	r2, r6, #4
 8025180:	f7ef fcea 	bl	8014b58 <LCD_SetPixelAA4_Trans>
 8025184:	3d02      	subs	r5, #2
 8025186:	1c60      	adds	r0, r4, #1
 8025188:	f006 020f 	and.w	r2, r6, #15
 802518c:	4639      	mov	r1, r7
 802518e:	f7ef fce3 	bl	8014b58 <LCD_SetPixelAA4_Trans>
 8025192:	2d01      	cmp	r5, #1
 8025194:	f104 0402 	add.w	r4, r4, #2
 8025198:	dced      	bgt.n	8025176 <_DrawCharAA4_Trans+0x36>
 802519a:	9b03      	ldr	r3, [sp, #12]
 802519c:	9801      	ldr	r0, [sp, #4]
 802519e:	eb08 0203 	add.w	r2, r8, r3
 80251a2:	9b02      	ldr	r3, [sp, #8]
 80251a4:	b943      	cbnz	r3, 80251b8 <_DrawCharAA4_Trans+0x78>
 80251a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80251a8:	4498      	add	r8, r3
 80251aa:	9b00      	ldr	r3, [sp, #0]
 80251ac:	3701      	adds	r7, #1
 80251ae:	429f      	cmp	r7, r3
 80251b0:	d1db      	bne.n	802516a <_DrawCharAA4_Trans+0x2a>
 80251b2:	b005      	add	sp, #20
 80251b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251b8:	7812      	ldrb	r2, [r2, #0]
 80251ba:	4450      	add	r0, sl
 80251bc:	0912      	lsrs	r2, r2, #4
 80251be:	4639      	mov	r1, r7
 80251c0:	f7ef fcca 	bl	8014b58 <LCD_SetPixelAA4_Trans>
 80251c4:	e7ef      	b.n	80251a6 <_DrawCharAA4_Trans+0x66>
 80251c6:	464b      	mov	r3, r9
 80251c8:	4642      	mov	r2, r8
 80251ca:	2000      	movs	r0, #0
 80251cc:	e7ea      	b.n	80251a4 <_DrawCharAA4_Trans+0x64>
 80251ce:	bf00      	nop

080251d0 <GUI_AA__DrawCharAA4>:
 80251d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251d4:	4c33      	ldr	r4, [pc, #204]	; (80252a4 <GUI_AA__DrawCharAA4+0xd4>)
 80251d6:	6824      	ldr	r4, [r4, #0]
 80251d8:	7c25      	ldrb	r5, [r4, #16]
 80251da:	b087      	sub	sp, #28
 80251dc:	07ad      	lsls	r5, r5, #30
 80251de:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80251e2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80251e6:	d50a      	bpl.n	80251fe <GUI_AA__DrawCharAA4+0x2e>
 80251e8:	4c2f      	ldr	r4, [pc, #188]	; (80252a8 <GUI_AA__DrawCharAA4+0xd8>)
 80251ea:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80251ee:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80251f2:	6824      	ldr	r4, [r4, #0]
 80251f4:	46a4      	mov	ip, r4
 80251f6:	b007      	add	sp, #28
 80251f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251fc:	4760      	bx	ip
 80251fe:	9305      	str	r3, [sp, #20]
 8025200:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025202:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80252bc <GUI_AA__DrawCharAA4+0xec>
 8025206:	681b      	ldr	r3, [r3, #0]
 8025208:	9204      	str	r2, [sp, #16]
 802520a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802520c:	9103      	str	r1, [sp, #12]
 802520e:	9301      	str	r3, [sp, #4]
 8025210:	4619      	mov	r1, r3
 8025212:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8025216:	6812      	ldr	r2, [r2, #0]
 8025218:	9002      	str	r0, [sp, #8]
 802521a:	4299      	cmp	r1, r3
 802521c:	4610      	mov	r0, r2
 802521e:	9200      	str	r2, [sp, #0]
 8025220:	d03b      	beq.n	802529a <GUI_AA__DrawCharAA4+0xca>
 8025222:	f7ef fc41 	bl	8014aa8 <LCD_Index2Color>
 8025226:	4606      	mov	r6, r0
 8025228:	9801      	ldr	r0, [sp, #4]
 802522a:	4c20      	ldr	r4, [pc, #128]	; (80252ac <GUI_AA__DrawCharAA4+0xdc>)
 802522c:	4f20      	ldr	r7, [pc, #128]	; (80252b0 <GUI_AA__DrawCharAA4+0xe0>)
 802522e:	f7ef fc3b 	bl	8014aa8 <LCD_Index2Color>
 8025232:	f04f 0b01 	mov.w	fp, #1
 8025236:	4605      	mov	r5, r0
 8025238:	f8c8 600c 	str.w	r6, [r8, #12]
 802523c:	fa5f f28b 	uxtb.w	r2, fp
 8025240:	683b      	ldr	r3, [r7, #0]
 8025242:	4631      	mov	r1, r6
 8025244:	4628      	mov	r0, r5
 8025246:	4798      	blx	r3
 8025248:	f10b 0b01 	add.w	fp, fp, #1
 802524c:	f1bb 0f0f 	cmp.w	fp, #15
 8025250:	f844 0f04 	str.w	r0, [r4, #4]!
 8025254:	d1f2      	bne.n	802523c <GUI_AA__DrawCharAA4+0x6c>
 8025256:	4817      	ldr	r0, [pc, #92]	; (80252b4 <GUI_AA__DrawCharAA4+0xe4>)
 8025258:	f8c8 5048 	str.w	r5, [r8, #72]	; 0x48
 802525c:	f7ef fd06 	bl	8014c6c <LCD_GetpPalConvTableUncached>
 8025260:	9b01      	ldr	r3, [sp, #4]
 8025262:	f8c8 3004 	str.w	r3, [r8, #4]
 8025266:	9b00      	ldr	r3, [sp, #0]
 8025268:	f8c8 3008 	str.w	r3, [r8, #8]
 802526c:	4a12      	ldr	r2, [pc, #72]	; (80252b8 <GUI_AA__DrawCharAA4+0xe8>)
 802526e:	4b0e      	ldr	r3, [pc, #56]	; (80252a8 <GUI_AA__DrawCharAA4+0xd8>)
 8025270:	7812      	ldrb	r2, [r2, #0]
 8025272:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8025276:	721a      	strb	r2, [r3, #8]
 8025278:	821c      	strh	r4, [r3, #16]
 802527a:	9a03      	ldr	r2, [sp, #12]
 802527c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8025280:	9902      	ldr	r1, [sp, #8]
 8025282:	825c      	strh	r4, [r3, #18]
 8025284:	f103 0010 	add.w	r0, r3, #16
 8025288:	f8a3 9014 	strh.w	r9, [r3, #20]
 802528c:	f8c3 a018 	str.w	sl, [r3, #24]
 8025290:	b007      	add	sp, #28
 8025292:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025296:	f7ed b961 	b.w	801255c <GL_DrawBitmap>
 802529a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802529e:	4298      	cmp	r0, r3
 80252a0:	d1bf      	bne.n	8025222 <GUI_AA__DrawCharAA4+0x52>
 80252a2:	e7e3      	b.n	802526c <GUI_AA__DrawCharAA4+0x9c>
 80252a4:	20000014 	.word	0x20000014
 80252a8:	2000049c 	.word	0x2000049c
 80252ac:	20000954 	.word	0x20000954
 80252b0:	20000050 	.word	0x20000050
 80252b4:	200004a0 	.word	0x200004a0
 80252b8:	20035eb8 	.word	0x20035eb8
 80252bc:	20000948 	.word	0x20000948

080252c0 <memcmp>:
 80252c0:	b510      	push	{r4, lr}
 80252c2:	3901      	subs	r1, #1
 80252c4:	4402      	add	r2, r0
 80252c6:	4290      	cmp	r0, r2
 80252c8:	d101      	bne.n	80252ce <memcmp+0xe>
 80252ca:	2000      	movs	r0, #0
 80252cc:	e005      	b.n	80252da <memcmp+0x1a>
 80252ce:	7803      	ldrb	r3, [r0, #0]
 80252d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80252d4:	42a3      	cmp	r3, r4
 80252d6:	d001      	beq.n	80252dc <memcmp+0x1c>
 80252d8:	1b18      	subs	r0, r3, r4
 80252da:	bd10      	pop	{r4, pc}
 80252dc:	3001      	adds	r0, #1
 80252de:	e7f2      	b.n	80252c6 <memcmp+0x6>

080252e0 <memmove>:
 80252e0:	4288      	cmp	r0, r1
 80252e2:	b510      	push	{r4, lr}
 80252e4:	eb01 0402 	add.w	r4, r1, r2
 80252e8:	d902      	bls.n	80252f0 <memmove+0x10>
 80252ea:	4284      	cmp	r4, r0
 80252ec:	4623      	mov	r3, r4
 80252ee:	d807      	bhi.n	8025300 <memmove+0x20>
 80252f0:	1e43      	subs	r3, r0, #1
 80252f2:	42a1      	cmp	r1, r4
 80252f4:	d008      	beq.n	8025308 <memmove+0x28>
 80252f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80252fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80252fe:	e7f8      	b.n	80252f2 <memmove+0x12>
 8025300:	4402      	add	r2, r0
 8025302:	4601      	mov	r1, r0
 8025304:	428a      	cmp	r2, r1
 8025306:	d100      	bne.n	802530a <memmove+0x2a>
 8025308:	bd10      	pop	{r4, pc}
 802530a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802530e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025312:	e7f7      	b.n	8025304 <memmove+0x24>

08025314 <memset>:
 8025314:	4402      	add	r2, r0
 8025316:	4603      	mov	r3, r0
 8025318:	4293      	cmp	r3, r2
 802531a:	d100      	bne.n	802531e <memset+0xa>
 802531c:	4770      	bx	lr
 802531e:	f803 1b01 	strb.w	r1, [r3], #1
 8025322:	e7f9      	b.n	8025318 <memset+0x4>

08025324 <__libc_init_array>:
 8025324:	b570      	push	{r4, r5, r6, lr}
 8025326:	4d0d      	ldr	r5, [pc, #52]	; (802535c <__libc_init_array+0x38>)
 8025328:	4c0d      	ldr	r4, [pc, #52]	; (8025360 <__libc_init_array+0x3c>)
 802532a:	1b64      	subs	r4, r4, r5
 802532c:	10a4      	asrs	r4, r4, #2
 802532e:	2600      	movs	r6, #0
 8025330:	42a6      	cmp	r6, r4
 8025332:	d109      	bne.n	8025348 <__libc_init_array+0x24>
 8025334:	4d0b      	ldr	r5, [pc, #44]	; (8025364 <__libc_init_array+0x40>)
 8025336:	4c0c      	ldr	r4, [pc, #48]	; (8025368 <__libc_init_array+0x44>)
 8025338:	f000 f82e 	bl	8025398 <_init>
 802533c:	1b64      	subs	r4, r4, r5
 802533e:	10a4      	asrs	r4, r4, #2
 8025340:	2600      	movs	r6, #0
 8025342:	42a6      	cmp	r6, r4
 8025344:	d105      	bne.n	8025352 <__libc_init_array+0x2e>
 8025346:	bd70      	pop	{r4, r5, r6, pc}
 8025348:	f855 3b04 	ldr.w	r3, [r5], #4
 802534c:	4798      	blx	r3
 802534e:	3601      	adds	r6, #1
 8025350:	e7ee      	b.n	8025330 <__libc_init_array+0xc>
 8025352:	f855 3b04 	ldr.w	r3, [r5], #4
 8025356:	4798      	blx	r3
 8025358:	3601      	adds	r6, #1
 802535a:	e7f2      	b.n	8025342 <__libc_init_array+0x1e>
 802535c:	0807e814 	.word	0x0807e814
 8025360:	0807e814 	.word	0x0807e814
 8025364:	0807e814 	.word	0x0807e814
 8025368:	0807e818 	.word	0x0807e818

0802536c <strcpy>:
 802536c:	4603      	mov	r3, r0
 802536e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025372:	f803 2b01 	strb.w	r2, [r3], #1
 8025376:	2a00      	cmp	r2, #0
 8025378:	d1f9      	bne.n	802536e <strcpy+0x2>
 802537a:	4770      	bx	lr

0802537c <memcpy>:
 802537c:	440a      	add	r2, r1
 802537e:	4291      	cmp	r1, r2
 8025380:	f100 33ff 	add.w	r3, r0, #4294967295
 8025384:	d100      	bne.n	8025388 <memcpy+0xc>
 8025386:	4770      	bx	lr
 8025388:	b510      	push	{r4, lr}
 802538a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802538e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025392:	4291      	cmp	r1, r2
 8025394:	d1f9      	bne.n	802538a <memcpy+0xe>
 8025396:	bd10      	pop	{r4, pc}

08025398 <_init>:
 8025398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802539a:	bf00      	nop
 802539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802539e:	bc08      	pop	{r3}
 80253a0:	469e      	mov	lr, r3
 80253a2:	4770      	bx	lr

080253a4 <_fini>:
 80253a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80253a6:	bf00      	nop
 80253a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80253aa:	bc08      	pop	{r3}
 80253ac:	469e      	mov	lr, r3
 80253ae:	4770      	bx	lr
